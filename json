[
    {
        "input": "Create a usecase diagram for this system. Healthcare service has huge demand these days as it really helps in managing a hospital or a medical office. The scope of healthcare service systems is increasing each day and it is true for the entire world. Some of these solutions include improved awareness about healthcare services and health policies. The objective of this system is to provide medical assistance to people instantly with the help of technology. This system eradicates the cultural sensitivity that prevails in many hospitals and improves the quality of medical assistance. The captivating features of this system are online doctors, medicines at doorstep, and bulletin of awareness. The users can also navigate and choose among various insurance schemes that are displayed.\n\nThe primary objectives of Webmed healthcare system are to enable all citizens to receive healthcare services whenever needed, and to deliver health services that are cost-effective and meet pre-established standards of quality. The main functions of this system deal with finance, health A-Z, resources, drugs and supplements, news and experts, payment and feedback. Register function allows the patients or the caregivers to register on the website. Login function allows the patients to access the website. Financing focuses on the purchase of insurance. Health A-Z displays all the diseases along with their symptoms. Resources function consists of the sub-functions including symptoms checker, health calculator, find a doctor based on the geographical location of the patient, insurance guide, and ambulance providence. Drugs and supplements include online medicine delivery, where people could shop for medicines online. News and experts function is to provide health awareness and threats that are prevailing. This function also gives information regarding counselling programs and blood donation camps. The payment function is to reimburse providers for services delivered. The feedback function collects user reviews for the website.",
        "output": "@startuml\nleft to right direction\n\nactor ServiceProvider\nactor User\n\nrectangle System {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Use Facilities\" as UC3\n    usecase \"Access Finance\" as UC4\n    usecase \"Access Health A-Z\" as UC5\n    usecase \"Use Resources\" as UC6\n    usecase \"Do Payment\" as UC7\n    usecase \"Give Feedback\" as UC8\n    usecase \"Logout\" as UC9\n    usecase \"Access News And Experts\" as UC10\n    usecase \"Get Drugs And Supplements\" as UC11\n}\n\nServiceProvider --> UC6\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC9\nUser --> UC7\nUser --> UC6\nUser --> UC10\nUser --> UC11\nUser --> UC5\nUser --> UC4\n\n\n\n\nUC7 --> UC8 : <<extend>>\n@enduml"   
    },
    {
        "input": "Create a usecase diagram for this system. The Online Examination System is a web-based application that allows students to take exams online. The system consists of the following functions: User Registration, Exam Creation, Exam Taking, Result Generation, and Exam Analysis. User Registration – This function allows students to create an account on the online examination system. Exam Creation – This function allows teachers to create exams and set questions. Exam Taking – This function allows students to take exams online. Result Generation – This function generates results for the exams taken by students. Exam Analysis – This function provides analysis of the exams taken by students. The main goal of the system is to provide a platform for students to take exams online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Teacher\n\nrectangle Online_Examination_System {\n    usecase \"Register\" as UC1\n    usecase \"Create Exam\" as UC2\n    usecase \"Take Exam\" as UC3\n    usecase \"Generate Result\" as UC4\n    usecase \"Analyze Exam\" as UC5\n}\n\nStudent --> UC1\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\n\nTeacher --> UC2\n\nUC3 --> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Create a usecase diagram for this system. The Online Voting System is a web-based application that allows citizens to vote online. The system consists of the following functions: Voter Registration, Candidate Registration, Voting, Result Generation, and Voter Analysis. Voter Registration – This function allows citizens to register as voters in the online voting system. Candidate Registration – This function allows candidates to register for elections. Voting – This function allows voters to cast their votes online. Result Generation – This function generates results for the elections. Voter Analysis – This function provides analysis of the votes cast by voters. The main goal of the system is to provide a platform for citizens to vote online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Citizen\nactor Candidate\n\nrectangle Online_Voting_System {\n    usecase \"Register as Voter\" as UC1\n    usecase \"Register as Candidate\" as UC2\n    usecase \"Cast Vote\" as UC3\n    usecase \"Generate Result\" as UC4\n    usecase \"Analyze Votes\" as UC5\n}\n\nCitizen --> UC1\nCitizen --> UC3\nCitizen --> UC4\nCitizen --> UC5\n\nCandidate --> UC2\n\nUC3 --> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Give me a use case diagram for this E-Ticketing System for Buses. In this case study, a software package to automate the manual procedures of reserving a bus ticket is made through Software Maintenance and Development Center (SMDC) Travels. Specifically, the objectives of this case study consist of providing a web-based bus ticket reservation function where a customer can buy a bus ticket through the online system without a need to queue up at the counter to purchase a bus ticket, enabling customers to check the availability and types of buses online. Customer can check the time departure for every Indian Tourist Centre (ITC) bus through the system, easing bus ticket payment by obtaining a bank pin after payments is made to the various designated banks, the ability of customers to cancel their reservation, admin user privileges in updating and cancelling payment, route and vehicle records.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Manager\n\nrectangle Bus_E-Ticketing_System {\n    usecase \"Registration\" as UC1\n    usecase \"Make Reservation\" as UC2\n    usecase \"Cancellation\" as UC3\n    usecase \"Do Payment\" as UC4\n    usecase \"Check Status\" as UC5\n    usecase \"Edit Profile\" as UC6\n    usecase \"Delete Account\" as UC7\n    usecase \"Manage Transactions\" as UC8\n    usecase \"Update Routes\" as UC9\n    usecase \"Update Bus Schedules\" as UC10\n    usecase \"Update Vehicle Records\" as UC11\n    usecase \"Update User Credentials\" as UC12\n    usecase \"Manage Account\" as UC13\n    usecase \"Generate Reports\" as UC14\n}\n\nCustomer --> UC1\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC13\nCustomer --> UC2\n\nManager --> UC8\nManager --> UC9\nManager --> UC10\nManager --> UC11\nManager --> UC14\n\nactor Admin <<secondary>>\n\nAdmin --> UC10\nAdmin --> UC12\nAdmin --> UC7\n\nUC4 --> UC3 : <<extend>>\nUC13 --> UC7 : <<extend>>\nUC13 --> UC6 : <<extend>>\n@enduml"    
    },
    {
        "input": "The Weather Monitoring System allows people to directly check the weather status online. The functionalities are Weather Status, Live Updating, Alert, Graphical Representation, Future Prediction and Weekly Analysis. Weather Status – With this function, temperature, humidity, rainfall, pressure and dew point are measured using sensors. Live Updating – Data are live updated to be viewed by the user. Alert – This functionality provides tips and alerts to the user on certain weather conditions. Graphical Representation – Plotting of graphs based on variations in temperature for easier analysis. Future Prediction – This functionality helps in predicting the weather for the next few days. WeeklyAnalysis – Displaying the average, the highest and lowest temperature of the week. The final goal is to provide detailed weather conditions for the user based on his/her location. Give me a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Weather_Monitoring_System {\n    usecase \"Check Weather Status\" as UC1\n    usecase \"Live Update\" as UC2\n    usecase \"Get Alerts\" as UC3\n    usecase \"Generate Graphical Representation\" as UC4\n    usecase \"Predict Future Weather\" as UC5\n    usecase \"Weekly Analysis\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\n\nUC1 --> UC2 : <<extend>>\nUC4 --> UC5 : <<extend>>\n@enduml"
    },
    {
        "input": "The Online Shopping System is a web-based application that allows customers to purchase products online. The system consists of the following functions: User Registration, Product Catalog, Shopping Cart, Payment Gateway, Order History, and Customer Support. User Registration – This function allows users to create an account on the website. Product Catalog – This function displays all the products available for purchase. Shopping Cart – This function allows users to add products to their cart. Payment Gateway – This function allows users to make payments for their purchases. Order History – This function displays the user's past orders. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient and user-friendly platform for customers to shop online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Shopping_System {\n    usecase \"Register\" as UC1\n    usecase \"View Products\" as UC2\n    usecase \"Add To Cart\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"View Order History\" as UC5\n    usecase \"Contact Support\" as UC6\n    usecase \"Provide Support\" as UC7\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n\nSupport --> UC7\nUC6 --> UC7 : <<include>>\n@enduml"
    },
    {
        "input": "The Library Management System is a software application that helps in maintaining a library. The system consists of the following functions: User Registration, Book Catalog, Borrowing Books, Returning Books, Renewing Books, and Late Fee Calculation. User Registration – This function allows users to create an account in the library system. Book Catalog – This function displays all the books available in the library. Borrowing Books – This function allows users to borrow books from the library. Returning Books – This function allows users to return books to the library. Renewing Books – This function allows users to renew the borrowed books. Late Fee Calculation – This function calculates the late fee for books returned after the due date. The main goal of the system is to provide an efficient and organized way of managing library operations. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Librarian\nactor User\n\nrectangle Library_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"View Books\" as UC2\n    usecase \"Borrow Book\" as UC3\n    usecase \"Return Book\" as UC4\n    usecase \"Renew Book\" as UC5\n    usecase \"Calculate Late Fee\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\n\nLibrarian -right-> UC6\n\nUC5 --> UC6 : <<include>>\n@enduml"
          
    },
    {
        "input": "Citizens in every district face the difficulty with the issuing of government certificates like birth/death certificates, income and caste certificates, old age and widow pensions, etc. This can be done with e-Province. This case study demonstrates how to make the government services available to the citizens in a convenient, efficient, and transparent manner, by enabling it simply by reliable access over the Internet. The main objective is to bring the public services closer to the citizens. To fulfill the vision of providing an easy and convenient service to the citizens through remote access primarily through Common Service Centre (CSCs), the e-Province project is created. This case study aims to develop a State Portal (SP) to provide all the citizens of the respective province to access the services under a single interface mechanism in the form of the Portal. The various modules in the e-Province project are an Admin module that creates, updates, deactivates the users and performs various other tasks. A Login module that allows the users to login with their unique Application number with approved status. A User module that allows the approved users to register for the respective certificates. A User Profile module that creates the pre-requisite information of the user that needs to be stored in the database. The Certificate module contains the required forms that are to be filled with the information of the users. Give me a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Citizen\nactor Admin\n\nrectangle E-Province {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Apply for Certificate\" as UC3\n    usecase \"Issue Certificate\" as UC4\n    usecase \"Manage User Profile\" as UC5\n    usecase \"View User Profile\" as UC6\n    usecase \"Deactivate User\" as UC7\n}\n\nCitizen --> UC1\nCitizen --> UC2\nCitizen --> UC3\nCitizen --> UC5\n\nAdmin --> UC4\nAdmin --> UC6\nAdmin --> UC5\n\nUC5 --> UC7 : <<extend>>\n@enduml"  
    },

    {
        "input": "The Online Banking System is a web-based application that allows customers to perform banking transactions online. The system consists of the following functions: User Registration, Account Management, Fund Transfer, Bill Payment, Transaction History, and Customer Support. User Registration – This function allows users to create an account on the online banking system. Account Management – This function allows users to view and manage their accounts. Fund Transfer – This function allows users to transfer funds between accounts. Bill Payment – This function allows users to pay bills online. Transaction History – This function displays the user's transaction history. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a secure and convenient platform for customers to perform banking transactions online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Banking_System {\n    usecase \"Register\" as UC1\n    usecase \"Manage Account\" as UC2\n    usecase \"Transfer Funds\" as UC3\n    usecase \"Pay Bills\" as UC4\n    usecase \"View Transaction History\" as UC5\n    usecase \"Contact Support\" as UC6\n    usecase \"Provide Support\" as UC7\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n\nSupport --> UC7\nUC6 --> UC7 : <<include>>\n\nUC3 --> UC4 : <<extend>>\n@enduml"    
    },
    {
        "input": "Give me usecase diagram for this. Maintaining the authentic documents physically in a single location is considered to be a challenging task. Thus, digitizing documents enables centralized storage of all the physical documents, enabling easy retrieval from anywhere at any time. It also prevents the troubles caused by missing any of those physical certificates. This can be achieved through the DigiDocLocker which is a platform for issuance and verification of documents and certificates in a digital format, thereby eliminating the use of physical documents. DigiDocLocker aims at benefiting all the citizens of the country by providing access to authentic documents/certificates such as driving licence, vehicle registration, and academic mark sheets in digital format from the original issuers of these certificates. DigiDocLocker has the following functionalities:\ni. A Registration module allows the users to register and a Login module that allows the authorized users.\nii. An Upload Document module allows the users to upload documents such as driving licence, vehicle registration, academic mark sheet, and other relevant documents in various file formats.\niii. A Profile module displays the complete profile of the user as available in the database.\niv. An Issuer module displays the certificate issuers’ names and the number of documents issued to the user by the issuer. For example, the Income Tax Department, Government of India has provided PAN Verification Records to Indian citizens via DigiLocker.\nv. A Requester module displays the requesters’ names and the number of documents requested from the user by the requesters. For example, citizens applying through Union Public Service Commission (UPSC)'s Online Recruitment Application (ORA) can upload documents through DigiDocLocker as well.",
        "output": "@startuml\nleft to right direction\n\nactor Citizen\nactor \"Requester (Eg: UPSC)\" as Requester\nactor \"Issuer (Eg: Income Tax Department)\" as Issuer\n\nrectangle DigiDocLocker {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Request Document\" as UC3\n    usecase \"Upload Document\" as UC4\n    usecase \"View Profile\" as UC5\n    usecase \"Issue Document\" as UC6\n}\n\nCitizen --> UC1\nCitizen --> UC2\nCitizen --> UC4\nCitizen --> UC5\n\nRequester --> UC3\nRequester --> UC2\nIssuer --> UC2\nIssuer --> UC6\n@enduml"  
    },
    {
        "input": "Various new small scale and medium scale sellers face difficulties to reach out to the customers and sell their products along with other competing products in the market. This increases their overall cost, thus reducing their profit or even causing loss. E-Retail is an online marketplace application case study where small and medium scale sellers can list, showcase, advertise, and sell their products directly to the customers without any physical store. E-Retail aims in providing a dynamic platform for all small and medium scale sellers to reach out and sell their products directly to all range of customers at a competing price without the need of any physical store. This enables the sellers to eliminate the cost of rent or maintenance of a physical store and to minimize other related costs. It also aims in promoting direct communication between the seller and customer, hence providing a trusted relationship between them. New sellers can easily authenticate and sign up to the portal and sell their products in the portal. The application offers separate login for sellers and customers, where the sellers and customers can sign in and start using the application. Customers can view all the products available from various sellers and buy those products. It also facilitates online payments for purchasing the products. Customers can rate or give a review for the product and seller. Customers can also report a seller for any violations in delivery or if the product does not meet the specified requirement. Customers can also view the contact information and the rating of the seller before buying the product. Give a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Seller\nactor Customer\n\nrectangle E-Retail {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"List Products\" as UC3\n    usecase \"View Products\" as UC4\n    usecase \"Buy Products\" as UC5\n    usecase \"Rate Product\" as UC6\n    usecase \"Report Seller\" as UC7\n    usecase \"View Seller Information\" as UC8\n    usecase \"Make Payment\" as UC9\n}\n\nSeller --> UC1\nSeller --> UC2\nSeller --> UC3\nSeller --> UC4\n\nCustomer --> UC2\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\nCustomer --> UC8\n\nUC5 --> UC6 : <<extend>>\nUC5 --> UC9 : <<include>>\n@enduml"            
    },
    {
        "input": "The Online Food Ordering System is a web-based application that allows customers to order food online. The system consists of the following functions: User Registration, Restaurant Selection, Menu Browsing, Order Placement, Payment Gateway, Order Tracking, and Customer Support. User Registration – This function allows users to create an account on the online food ordering system. Restaurant Selection – This function allows users to select a restaurant from which they want to order food. Menu Browsing – This function allows users to browse the menu of the selected restaurant. Order Placement – This function allows users to place an order for food. Payment Gateway – This function allows users to make payments for their orders. Order Tracking – This function allows users to track the status of their orders. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to order food online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Food_Ordering_System {\n    usecase \"Register\" as UC1\n    usecase \"Select Restaurant\" as UC2\n    usecase \"Browse Menu\" as UC3\n    usecase \"Place Order\" as UC4\n    usecase \"Make Payment\" as UC5\n    usecase \"Track Order\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC4 --> UC5 : <<include>>\n@enduml"          
        
    },
    {
        "input": "The Online Movie Ticket Booking System is a web-based application that allows customers to book movie tickets online. The system consists of the following functions: User Registration, Movie Selection, Seat Selection, Payment Gateway, Ticket Confirmation, Ticket Cancellation, and Customer Support. User Registration – This function allows users to create an account on the online movie ticket booking system. Movie Selection – This function allows users to select a movie for which they want to book tickets. Seat Selection – This function allows users to select seats for the selected movie. Payment Gateway – This function allows users to make payments for their ticket bookings. Ticket Confirmation – This function confirms the booking of tickets. Ticket Cancellation – This function allows users to cancel their ticket bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to book movie tickets online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Movie_Ticket_Booking_System {\n    usecase \"Register\" as UC1\n    usecase \"Select Movie\" as UC2\n    usecase \"Select Seats\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Confirm Ticket\" as UC5\n    usecase \"Cancel Ticket\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC5 --> UC6 : <<extend>>\n@enduml"       
    },
    {
        "input": "The Online Hotel Booking System is a web-based application that allows customers to book hotel rooms online. The system consists of the following functions: User Registration, Hotel Selection, Room Selection, Payment Gateway, Booking Confirmation, Booking Cancellation, and Customer Support. User Registration – This function allows users to create an account on the online hotel booking system. Hotel Selection – This function allows users to select a hotel for which they want to book rooms. Room Selection – This function allows users to select rooms in the selected hotel. Payment Gateway – This function allows users to make payments for their room bookings. Booking Confirmation – This function confirms the booking of rooms. Booking Cancellation – This function allows users to cancel their room bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to book hotel rooms online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Hotel_Booking_System {\n    usecase \"Register\" as UC1\n    usecase \"Select Hotel\" as UC2\n    usecase \"Select Room\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Confirm Booking\" as UC5\n    usecase \"Cancel Booking\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC5 --> UC6 : <<extend>>\n@enduml"
    },
    {
        "input": "The Online Flight Booking System is a web-based application that allows customers to book flight tickets online. The system consists of the following functions: User Registration, Flight Selection, Seat Selection, Payment Gateway, Ticket Confirmation, Ticket Cancellation, and Customer Support. User Registration – This function allows users to create an account on the online flight booking system. Flight Selection – This function allows users to select a flight for which they want to book tickets. Seat Selection – This function allows users to select seats for the selected flight. Payment Gateway – This function allows users to make payments for their ticket bookings. Ticket Confirmation – This function confirms the booking of tickets. Ticket Cancellation – This function allows users to cancel their ticket bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to book flight tickets online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Flight_Booking_System {\n    usecase \"Register\" as UC1\n    usecase \"Select Flight\" as UC2\n    usecase \"Select Seats\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Confirm Ticket\" as UC5\n    usecase \"Cancel Ticket\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC5 --> UC6 : <<extend>>\n@enduml"
    },
    {
        "input": "The Online Event Management System is a web-based application that allows users to manage events online. The system consists of the following functions: User Registration, Event Creation, Event Promotion, Ticket Booking, Payment Gateway, Event Tracking, and Customer Support. User Registration – This function allows users to create an account on the online event management system. Event Creation – This function allows users to create events and manage event details. Event Promotion – This function allows users to promote events to attract attendees. Ticket Booking – This function allows users to book tickets for events. Payment Gateway – This function allows users to make payments for ticket bookings. Event Tracking – This function allows users to track the status of events and ticket bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a platform for users to manage and promote events online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor \"Customer Support\" as Support\n\nrectangle Online_Event_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"Create Event\" as UC2\n    usecase \"Promote Event\" as UC3\n    usecase \"Book Ticket\" as UC4\n    usecase \"Make Payment\" as UC5\n    usecase \"Track Event\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC4 --> UC5 : <<include>>\n@enduml"
    },
    {
        "input": "Give use case diagram for this. The need for law and enforcement in a country with a high population like India is salient. Lawyers play a major role in maintaining most of their data as hard copies. This project is mainly designed for lawyers to make their work more easy and efficient. It is a responsive web application that would provide lawyers with various services that would help them to maintain their documents. The services include a logbook that has details about the cases along with a calendar. The lawyers can also upload and save documents related to their case. It contains formats of model forms and links to online filing. It also provides quick references of common cases and detailed information about laws through e-books. Information about the judicial exams for lawyers is also made available. Furthermore, the web application contains news updates for lawyers, blogs and feedback. This case study will serve as a small hand tool for lawyers to maintain the soft copies of their data.",
        "output": "@startuml\nleft to right direction\n\nactor Lawyer\nactor Admin\n\nrectangle Law_Enforcement_System {\n    usecase \"Register\" as UC1\n    usecase \"View Case details and logs\" as UC2\n    usecase \"Add case\" as UC3\n    usecase \"Update details\" as UC4\n    usecase \"Criminal\" as UC5\n    usecase \"Civil\" as UC6\n    usecase \"Filing online\" as UC7\n    usecase \"Download Model Forms\" as UC8\n    usecase \"Display Links\" as UC9\n    usecase \"Display Forms\" as UC10\n    usecase \"Quick references\" as UC11\n    usecase \"Books\" as UC12\n    usecase \"Add feedback\" as UC13\n    usecase \"View Blogs and news updates\" as UC14\n    usecase \"Download\" as UC15\n    usecase \"Upload Documents\" as UC16\n    usecase \"Update Logs\" as UC17\n    usecase \"Update Calendar\" as UC18\n    usecase \"Set reminders\" as UC19\n}\n\nLawyer --> UC1\nLawyer --> UC2\nLawyer --> UC3\nLawyer --> UC7\nLawyer --> UC8\nLawyer --> UC13\nLawyer --> UC14\n\nUC3 --> UC4 : <<include>>\nUC4 --> UC5 : <<extend>>\nUC4 --> UC6 : <<extend>>\nUC7 --> UC9 : <<extend>>\nUC8 --> UC10 : <<include>>\nUC8 --> UC11 : <<extend>>\nUC11 --> UC12 : <<extend>>\n\nAdmin --> UC16\nAdmin --> UC17\nAdmin --> UC18\nAdmin --> UC19\n\nUC16 --> UC15 : <<extend>>\nUC19 --> UC18 : <<include>>\n@enduml"  
    },
    {
        "input": "This case study is helpful to people who forget their mobile phones at home as a part of their busy daily routines. Keeping tick of essentials in this fast-paced life sometimes turns out to be quite demanding. People sometimes forget their phones at home. What if we need to make an important call and we don’t remember the contact number? Sometimes our phones just get disappeared and the scariest part is when the phone is put on silent mode. We sometimes want to lock our phones when they aren’t around us. Need to know the exact location of your phone? Therein comes the use of ‘My Helper’. The solutions to all the problems stated above can be solved easily and very quickly if you have the application ‘My Helper’ pre-installed on your phone and you have completed configuring the app. All you need to do is just send an SMS to your mobile number from any phone that you have access to…and there goes your problem solved. The scope of this system is increasing every day across the entire world where everything is happening at the speed of a Formula 1 Car on a race track. The objective of this system is to provide help to people facing these types of problems instantly with the help of advanced technology. The alluring features of this system are Remote Access without the Internet, Track your phone through an SMS, HassleFree as no OTP and ID PASSWORD is required and an SMS can help you change the sound profile of your phone (silent to normal) without Internet. The system is user friendly and the application will be available to even basic smartphones. Give me a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle My_Helper {\n    usecase \"Send SMS\" as UC1\n    usecase \"Track Phone\" as UC2\n    usecase \"Lock Phone\" as UC3\n    usecase \"Change Sound Profile\" as UC4\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\n\nUC1 --> UC4 : <<extend>>\n@enduml"  
    },
    {
        "input": "Create a use case diagram for this system. The all in one COVID-19 management system simplifies the entire process of decreasing the virus load in the community by digitalization. It includes tracking and treating COVID-19 patients and monitoring the spread of the virus. It aims to assist healthcare organizations and governments to assess patient risk profiles and provide awareness to common people by connecting them with virtual care capabilities. With the current epidemiological situation of COVID-19, there is a high demand to reduce contact between persons and digitize the whole process. This will effectively reduce the infection rate, help the common people and empower medical professionals across the world to help more patients through telemedicine and virtual care.",
        "output": "@startuml\nleft to right direction\n\nactor Healthcare_Organization\nactor Government\nactor Patient\n\nrectangle COVID-19_Management_System {\n    usecase \"Track COVID-19 Patients\" as UC1\n    usecase \"Treat COVID-19 Patients\" as UC2\n    usecase \"Monitor Virus Spread\" as UC3\n    usecase \"Assess Patient Risk\" as UC4\n    usecase \"Provide Awareness\" as UC5\n    usecase \"Connect with Virtual Care\" as UC6\n    usecase \"Buy Medicines\" as UC7\n}\n\nHealthcare_Organization --> UC1\nHealthcare_Organization --> UC2\nHealthcare_Organization --> UC4\nHealthcare_Organization --> UC6\n\nGovernment --> UC3\nGovernment --> UC4\nGovernment --> UC5\n\nPatient --> UC1\nPatient --> UC7\nPatient --> UC6\n\nUC4 --> UC6 : <<extend>>\n@enduml"  
    },
    {
        "input": "Give a use case diagram for this. Most of the car owners do not know whether their car is at risk and needs to be serviced. This considerably increases the risk of malfunctioning of major parts of a car such as the braking system and engine which lead to accidents. Car Care is a multi-brand car service and maintenance application that maintains the date at which the specific part of a car is installed and notifies the expiry date of the parts of the car for both the driver and authorized service centre, so that the car can be serviced. This application enables car owners and service centres to separately login and enter their cars information. After issuing the car, the service centre employee enters the estimated expiry dates of parts of the car in this app. This application notifies the car owners and service centres when the expiry date for parts of the car is reached. Then the service centre employee contacts the owner of a car about service, once the owner accepts service request, the service centre employee picks up the car from home, this saves the time for owner of car. And then service centre employee examines the entire car and prepares the list of the damaged parts of the car and send it to the owner of the car through this app, once the owner selects the damaged parts to be serviced, the employee services the owner selected parts and updates the information about changed parts in the app so that the car can be service again on the expiry date of changed parts. Thus, this application helps in exchanging information between car owners and service centres. This application also enables the online payment for the services.",
        "output": "@startuml\nleft to right direction\n\nactor Car_Owner\nactor Service_Centre\n\nrectangle Car_Care {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Enter Car Information\" as UC3\n    usecase \"Enter Expiry Dates\" as UC4\n    usecase \"Notify Expiry\" as UC5\n    usecase \"Accept Service Request\" as UC6\n    usecase \"Pick Up Car\" as UC7\n    usecase \"Examine Car\" as UC8\n    usecase \"Prepare List\" as UC9\n    usecase \"Select Damaged Parts\" as UC10\n    usecase \"Service Parts\" as UC11\n    usecase \"Update Information\" as UC12\n    usecase \"Make Payment\" as UC13\n}\n\nCar_Owner --> UC1\nCar_Owner --> UC2\nCar_Owner --> UC3\nCar_Owner --> UC5\nCar_Owner --> UC6\nCar_Owner --> UC10\nCar_Owner --> UC13\n\nService_Centre --> UC2\nService_Centre --> UC4\nService_Centre --> UC7\nService_Centre --> UC8\nService_Centre --> UC9\nService_Centre --> UC11\nService_Centre --> UC12\n\nUC6 --> UC7 : <<extend>>\nUC9 --> UC10 : <<include>>\nUC11 --> UC12 : <<extend>>\n@enduml"          
    },
    {
        "input": "Public Distribution System (PDS) is an Indian food security system. It is established by the Government of India under the Ministry of Consumer Affairs, Food, and Public Distribution and managed jointly with state governments in India. The traditional PDS is used to distribute grocery items to India’s poor who are valid ration cardholders. The validity and the allocation of the ration cards are monitored by the state governments. A ration cardholder should be given 35 kg of food grain as per the norms of PDS. However, there are concerns about the efficiency of the distribution process. In order to make it efficient and improve the current system of PDS, we are implementing e-Ration Shop. Here, we are going to make a website for shopping purposes. Using this website ration cardholder can order his/her grocery items from the PDS online. The main reason for using this website is to make this process computerized and to remove the drawbacks of the present way of issuing products based on the ration card. The main drawback in the current system is that the PDS has been criticized for its urban bias and its failure to serve the poorer sections of the population effectively. Also, many retail shopkeepers have a large number of bogus cards to sell food grains in the open market. Many PDS dealers resort to malpractice since they acquire less Salary so, by this project we are solving this problem too. Most of the time, users do not get their rightful entitlement in terms of quantity. What’s meant for them or the farm produce procured by the PDS is diverted to the open market. So in order to avoid all these drawbacks, we are going to use the e-Ration Shop which will help us to avoid the corruption in PDS if not eradicate it. The various importance of the proposed case study is every shop’s geo-location will be located on the map, all the information regarding shop and shopkeeper respective to the ration card and region, shop opening and closing details will be available, stock provided based on category, retailers can add, edit, delete and update their shop’s other items also, retailers can advertise their shops, stock availability will be notified on regular basis, product delivery feature, complaint forum for complaints by users, easy payment system by PayTM, COD etc., admin and moderator features for government and shopkeepers and authentication system by Aadhaar number and One-Time Pin (OTP). Generate a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor \"Ration_Cardholder (Customer)\" as Ration_Cardholder\nactor \"Retailer (Shopkeeper)\" as Retailer\nactor Admin\nactor Moderator\n\nrectangle E-Ration_Shop {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Order Grocery Items\" as UC3\n    usecase \"View Shop Details\" as UC4\n    usecase \"View Stock\" as UC5\n    usecase \"Manage Stock\" as UC6\n    usecase \"Advertise Shop\" as UC7\n    usecase \"Notify Stock Availability\" as UC8\n    usecase \"Deliver Products\" as UC9\n    usecase \"Complaint Forum\" as UC10\n    usecase \"Make Payment\" as UC11\n    usecase \"Manage Users\" as UC12\n    usecase \"Monitor System Usage\" as UC13\n    usecase \"Approve Retailer Applications\" as UC14\n    usecase \"Generate Reports\" as UC15\n    usecase \"Manage Content\" as UC16\n    usecase \"Review Complaints\" as UC17\n    usecase \"Authentication with Aadhaar and OTP\" as UC18\n}\n\nRation_Cardholder --> UC1\nRation_Cardholder --> UC2\nRation_Cardholder --> UC3\nRation_Cardholder --> UC4\nRation_Cardholder --> UC5\nRation_Cardholder --> UC10\nRation_Cardholder --> UC11\n\nRetailer --> UC4\nRetailer --> UC6\nRetailer --> UC7\nRetailer --> UC9\n\nAdmin --> UC12\nAdmin --> UC13\nAdmin --> UC14\nAdmin --> UC15\nAdmin --> UC18\n\nModerator --> UC16\nModerator --> UC17\n\nUC3 --> UC9 : <<extend>>\nUC5 --> UC8 : <<extend>>\n@enduml"          
    },
    {
        "input": "The ‘Textile Management System’ case study is designed to monitor all the processes in a textile manufacturing industry. There are various processes such as order receiving, purchase of raw materials, classification of raw materials, production of goods and selling the products. The main aim of this system is to ensure the reliability of data and to ease the process of manufacturing and transportation of garments and raw materials. This system ensures that the hardships prevailing in the manual systems are overridden by reducing the errors in data handling. The major functionalities are customer registration, sampling, stock checking, purchasing and processing of raw materials, production of garments, product checking and clearance, shipment, billing and report generation. Generate a use case diagram for this.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Manufacturer\n\nrectangle Textile_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"Sample Products\" as UC2\n    usecase \"Check Stock\" as UC3\n    usecase \"Purchase Raw Materials\" as UC4\n    usecase \"Process Raw Materials\" as UC5\n    usecase \"Produce Garments\" as UC6\n    usecase \"Check Products\" as UC7\n    usecase \"Clearance of Products\" as UC8\n    usecase \"Ship Products\" as UC9\n    usecase \"Generate Bill\" as UC10\n    usecase \"Generate Reports\" as UC11\n    usecase \"Order Garments\" as UC12\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC12\n\nManufacturer --> UC3\nManufacturer --> UC4\nManufacturer --> UC5\nManufacturer --> UC6\nManufacturer --> UC7\nManufacturer --> UC8\nManufacturer --> UC9\nManufacturer --> UC10\nManufacturer --> UC11\n\nUC7 --> UC8 : <<extend>>\n@enduml"          
    },
    {
        "input": "Create a use case diagram for a hotel reservation system. The system allows customers to book rooms online, check room availability, and make payments. The hotel management can add or update room details, view reservations, and generate reports. The system also includes a customer support feature to assist users with their queries and issues.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor HotelManager\nactor \"Customer Support\" as Support\n\nrectangle Hotel_Reservation_System {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Search Rooms\" as UC3\n    usecase \"Book Room\" as UC4\n    usecase \"Make Payment\" as UC5\n    usecase \"View Reservation\" as UC6\n    usecase \"Manage Room Details\" as UC7\n    usecase \"Generate Report\" as UC8\n    usecase \"Contact Support\" as UC9\n    usecase \"Provide Support\" as UC10\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC9\n\nHotelManager --> UC7\nHotelManager --> UC8\n\nSupport --> UC10\nUC9 --> UC10 : <<include>>\n@enduml"
    },
    {
        "input": "Create a use case diagram for a Learning Management System. The Learning Management System (LMS) is designed as a comprehensive platform that facilitates educational interactions between students and instructors. For students, it offers the ability to register, enroll in courses, submit assignments, and access their grades in a structured and accessible manner. On the other hand, instructors are provided with tools to design courses, manage student assignments, and grade submissions with efficiency.\n Additionally, the system fosters collaboration and communication through integrated discussion forums, allowing participants to engage in course-related discussions. A feedback mechanism also exists, enabling students to share their learning experiences, providing insights that instructors can use to improve their courses. The LMS aims to streamline the educational process, bringing convenience to both teaching and learning.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Instructor\n\nrectangle Learning_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"Enroll in Course\" as UC2\n    usecase \"Submit Assignment\" as UC3\n    usecase \"View Grades\" as UC4\n    usecase \"Create Course\" as UC5\n    usecase \"Manage Assignments\" as UC6\n    usecase \"Grade Submissions\" as UC7\n    usecase \"Join Discussion Forum\" as UC8\n    usecase \"Provide Feedback\" as UC9\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC8\nStudent --> UC9\n\nInstructor --> UC5\nInstructor --> UC6\nInstructor --> UC7\n@enduml"
    },
    {
        "input": "Create a use case diagram for an inventory management system. The system tracks inventory levels, orders, and deliveries. Store managers can view inventory levels, reorder products, and manage suppliers. The system also generates reports on product usage and reorder history.",
        "output": "@startuml\nleft to right direction\n\nactor StoreManager\nactor Supplier\n\nrectangle Inventory_Management_System {\n    usecase \"View Inventory\" as UC1\n    usecase \"Reorder Product\" as UC2\n    usecase \"Manage Suppliers\" as UC3\n    usecase \"Track Deliveries\" as UC4\n    usecase \"Generate Reports\" as UC5\n}\n\nStoreManager --> UC1\nStoreManager --> UC2\nStoreManager --> UC3\nStoreManager --> UC5\n\nSupplier --> UC4\n@enduml"
    },
    {
        "input": "Create a use case diagram for an online examination system. The system allows students to register, take exams, and view their scores. Instructors can create exams, grade submissions, and view results. The system also provides a feedback mechanism for students to rate their exams.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Instructor\n\nrectangle Online_Examination_System {\n    usecase \"Register\" as UC1\n    usecase \"Take Exam\" as UC2\n    usecase \"View Scores\" as UC3\n    usecase \"Create Exam\" as UC4\n    usecase \"Grade Submissions\" as UC5\n    usecase \"View Results\" as UC6\n    usecase \"Provide Feedback\" as UC7\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC7\n\nInstructor --> UC4\nInstructor --> UC5\nInstructor --> UC6\n@enduml"
    },
    {
        "input": "Create a use case diagram for an e-library system. The system allows users to browse e-books, borrow e-books, and return them. Librarians can manage the collection of e-books and issue reminders for overdue e-books. The system also allows users to leave reviews for the e-books.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Librarian\n\nrectangle E-Library_System {\n    usecase \"Browse E-books\" as UC1\n    usecase \"Borrow E-book\" as UC2\n    usecase \"Return E-book\" as UC3\n    usecase \"Leave Review\" as UC4\n    usecase \"Manage Collection\" as UC5\n    usecase \"Issue Reminders\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\n\nLibrarian --> UC5\nLibrarian --> UC6\n@enduml"
    },
    {
        "input": "Design a use case diagram for a gym management system that caters to both users and trainers. Users will have the ability to sign up and become members of the gym, allowing them to book sessions with their preferred schedules and track their fitness journey over time. They can monitor their progress and track improvements through personalized dashboards. To maintain membership, users can manage their payments seamlessly through the integrated payment gateway, ensuring that all fees are handled efficiently. Trainers, on the other hand, can set up workout plans tailored to their clients’ needs, manage their schedules, and closely monitor the progress of each client. The system is built to facilitate smooth communication between users and trainers while managing the operational side of the gym effectively.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Trainer\n\nrectangle Gym_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"Book Session\" as UC2\n    usecase \"Track Progress\" as UC3\n    usecase \"Create Workout Plan\" as UC4\n    usecase \"Manage Schedule\" as UC5\n    usecase \"Track Client Progress\" as UC6\n    usecase \"Make Payment\" as UC7\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC7\n\nTrainer --> UC4\nTrainer --> UC5\nTrainer --> UC6\n@enduml"
    },
    {
        "input": "Design a use case diagram for a warehouse management system that handles the complex operations of managing inventory, shipments, and employee schedules. The system monitors stock levels in real-time, tracking shipments and deliveries to ensure that stock data is always accurate. Warehouse managers are given the ability to manage the entire stock lifecycle — adding, removing, and updating items as needed through a consolidated 'Manage Stock' function. Additionally, managers can generate detailed operational reports and oversee employee scheduling to align resources with demand. The system's inventory optimization feature ensures that stock is dynamically adjusted based on real-time demand patterns, maintaining an efficient flow of goods through the warehouse.",
        "output": "@startuml\nleft to right direction\n\nactor WarehouseManager\nactor Employee\n\nrectangle Warehouse_Management_System {\n    usecase \"Track Stock\" as UC1\n    usecase \"Manage Shipments\" as UC2\n    usecase \"Manage Deliveries\" as UC3\n    usecase \"Manage Stock\" as UC4\n    usecase \"Generate Reports\" as UC5\n    usecase \"Manage Employee Schedule\" as UC6\n    usecase \"Optimize Inventory\" as UC7\n}\n\nWarehouseManager --> UC1\nWarehouseManager --> UC4\nWarehouseManager --> UC5\nWarehouseManager --> UC6\nWarehouseManager --> UC7\n\nEmployee --> UC2\nEmployee --> UC3\n@enduml"
    },
    {
        "input": "Design a use case diagram for a hospital management system that facilitates interactions between patients and healthcare providers. The system allows patients to manage their healthcare by offering features such as booking appointments with available doctors and viewing their medical records for ongoing treatments. When patients visit the hospital, they are able to pay for the services they have used through the system's billing module, which generates invoices for medical services. After consultations, doctors prescribe medications to patients, and these prescriptions are delivered electronically to ensure quick access. Doctors can also efficiently manage patient records, keeping them up-to-date with relevant information, and have the ability to schedule follow-up appointments with patients, ensuring continuity of care. Furthermore, the system enables healthcare providers to issue prescriptions electronically, minimizing paperwork and streamlining the patient’s treatment process.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Doctor\n\nrectangle Hospital_Management_System {\n    usecase \"Book Appointment\" as UC1\n    usecase \"View Medical Records\" as UC2\n    usecase \"Receive Prescription\" as UC3\n    usecase \"Manage Patient Records\" as UC4\n    usecase \"Schedule Appointments\" as UC5\n    usecase \"Prescribe Medications\" as UC6\n    usecase \"Generate Bill\" as UC7\n}\n\nPatient --> UC1\nPatient --> UC2\nPatient --> UC3\nPatient --> UC7\n\nDoctor --> UC4\nDoctor --> UC5\nDoctor --> UC6\n@enduml"
    },
    {
        "input": "Design a use case diagram for a banking system that caters to both customers and bank employees. Customers can perform various transactions such as depositing money, withdrawing money, transferring funds, and checking their account balance. They can also apply for loans and view their transaction history. Bank employees have access to additional features such as managing customer accounts, approving loan applications, and generating reports. The system is designed to provide a seamless banking experience for customers while enabling efficient operations for bank employees.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor BankEmployee\n\nrectangle Banking_System {\n    usecase \"Deposit Money\" as UC1\n    usecase \"Withdraw Money\" as UC2\n    usecase \"Transfer Funds\" as UC3\n    usecase \"Check Balance\" as UC4\n    usecase \"Apply for Loan\" as UC5\n    usecase \"View Transaction History\" as UC6\n    usecase \"Manage Accounts\" as UC7\n    usecase \"Approve Loan Applications\" as UC8\n    usecase \"Generate Reports\" as UC9\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n\nBankEmployee --> UC7\nBankEmployee --> UC8\nBankEmployee --> UC9\n@enduml"
    },
    {
        "input": "Design a use case diagram for a car rental system that allows customers to rent cars and manage their bookings. Customers can search for available cars, select the desired car, and make a reservation. They can also view their booking history and cancel bookings if needed. The system provides a seamless experience for customers to rent cars for their travel needs. Additionally, the system allows car rental agencies to manage their fleet, track bookings, and generate reports on rental activity.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor CarRentalAgency\n\nrectangle Car_Rental_System {\n    usecase \"Search Cars\" as UC1\n    usecase \"Select Car\" as UC2\n    usecase \"Make Reservation\" as UC3\n    usecase \"View Booking History\" as UC4\n    usecase \"Cancel Booking\" as UC5\n    usecase \"Manage Fleet\" as UC6\n    usecase \"Track Bookings\" as UC7\n    usecase \"Generate Reports\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\n\nCarRentalAgency --> UC6\nCarRentalAgency --> UC7\nCarRentalAgency --> UC8\n@enduml"
    },
    {
        "input": "Design a use case diagram for a Final Year Project (FYP) management system that supports the complex workflow of managing final year projects. The system allows students to submit their project proposals for approval and upload progress reports at various stages of the project. Throughout the process, they can track the evaluation status of their work to ensure timely feedback and meet deadlines. Supervisors play a crucial role by reviewing student submissions, providing detailed feedback, and setting important project deadlines, ensuring that students stay on track. Additionally, panel members are responsible for evaluating projects during key milestones, offering scores, and submitting comments to guide students towards successful project completion. The system also empowers the FYP committee to oversee the entire process by assigning panel members to each project, approving or rejecting proposals based on academic standards, and ensuring the overall quality of the projects being submitted. A built-in communication feature enables seamless interaction between students, supervisors, and panel members, fostering collaboration and guidance throughout the project lifecycle.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Supervisor\nactor Panel_Member\nactor FYP_Committee\n\nrectangle FYP_Management_System {\n    usecase \"Submit Proposal\" as UC1\n    usecase \"Upload Progress Report\" as UC2\n    usecase \"Track Evaluation Status\" as UC3\n    usecase \"Review Submissions\" as UC4\n    usecase \"Provide Feedback\" as UC5\n    usecase \"Set Project Deadlines\" as UC6\n    usecase \"Monitor Progress\" as UC7\n    usecase \"Evaluate Projects\" as UC8\n    usecase \"Assign Panel Members\" as UC9\n    usecase \"Approve Proposals\" as UC10\n    usecase \"Ensure Academic Standards\" as UC11\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\n\nSupervisor --> UC4\nSupervisor --> UC5\nSupervisor --> UC6\nSupervisor --> UC7\n\nPanel_Member --> UC4\nPanel_Member --> UC8\n\nFYP_Committee --> UC9\nFYP_Committee --> UC10\nFYP_Committee --> UC11\n\nUC4 --> UC5 : <<extend>>\n@enduml"
    },
    {
        "input": "Create a use case diagram for a Volunteer Management System that facilitates the organization of non-profit activities, ensuring smooth coordination among all participants. Volunteers have the ability to express interest in events by signing up through the system, while also being able to track their involvement across different activities. They are required to update their availability to make sure their participation aligns with ongoing or future events. Additionally, tasks are assigned based on specific criteria, ensuring that responsibilities are distributed according to both the availability and expertise of individuals involved. This system also keeps a detailed record of the time each participant dedicates to the organization, which is useful for tracking overall engagement. Events are scheduled in advance, and once all necessary arrangements have been made, including the approval of volunteer rosters, key individuals monitor the success and effectiveness of the event. An integrated reporting mechanism allows for the evaluation of participation and impact, helping ensure that the organization can continually refine its volunteer efforts.",
        "output": "@startuml\nleft to right direction\n\nactor Volunteer\nactor Coordinator\nactor Event_Manager\n\nrectangle Volunteer_Management_System {\n    usecase \"Sign Up for Event\" as UC1\n    usecase \"View Assigned Tasks\" as UC2\n    usecase \"Track Participation Hours\" as UC3\n    usecase \"Update Availability\" as UC4\n    usecase \"Assign Tasks\" as UC5\n    usecase \"Track Volunteer Participation\" as UC6\n    usecase \"Schedule Events\" as UC7\n    usecase \"Approve Volunteer Rosters\" as UC8\n    usecase \"Monitor Event Success\" as UC9\n    usecase \"Generate Reports\" as UC10\n}\n\nVolunteer --> UC1\nVolunteer --> UC2\nVolunteer --> UC3\nVolunteer --> UC4\n\nCoordinator --> UC5\nCoordinator --> UC6\n\nEvent_Manager --> UC7\nEvent_Manager --> UC8\nEvent_Manager --> UC9\nEvent_Manager --> UC10\n\nUC6 --> UC10 : <<include>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for a company's hiring system, for a fictional company called TechHire Solutions, which streamlines the recruitment process from initial candidate interest to final hiring decisions. Candidates who wish to apply for positions at TechHire Solutions must first submit their applications, which include resumes and cover letters. Once submitted, the system scans the resumes for relevant skills, experience, and qualifications, automatically filtering out those who don't meet the basic criteria. The shortlisted candidates are then moved forward in the process, where they are scheduled for various interview rounds, including technical assessments and HR interviews. Throughout this process, interviewers are able to log their feedback and ratings after each round, which contributes to the final decision-making. Finally, the system assists in selecting the most qualified candidates based on the gathered feedback, and an offer letter is generated for the chosen candidates. The system also tracks the overall hiring status, ensuring transparency and consistency across all stages of the recruitment cycle.",
        "output": "@startuml\nleft to right direction\n\nactor Candidate\nactor Recruiter\nactor Interviewer\n\nrectangle Hiring_System_TechHire_Solutions {\n    usecase \"Submit Application\" as UC1\n    usecase \"Scan Resume\" as UC2\n    usecase \"Shortlist Candidates\" as UC3\n    usecase \"Schedule Interviews\" as UC4\n    usecase \"Provide Interview Feedback\" as UC5\n    usecase \"Select Candidates\" as UC6\n    usecase \"Generate Offer Letter\" as UC7\n    usecase \"Track Hiring Status\" as UC8\n}\n\nCandidate --> UC1\n\nRecruiter --> UC2\nRecruiter --> UC3\nRecruiter --> UC4\nRecruiter --> UC6\nRecruiter --> UC7\nRecruiter --> UC8\n\nInterviewer --> UC5\n@enduml"
    },
    {
        "input": "Design a use case diagram for GitHub Universe 2023 Management System. The system is designed to manage the complex lifecycle of GitHub Universe, the annual flagship event, from sponsor engagement to event scheduling and participant interaction. The system allows sponsors to submit proposals and review their benefits, while the organizers handle sponsor onboarding, tracking branding throughout the event, and managing overall event schedules. Participants can register, sign up for keynotes and workshops, and give feedback about the sessions they attend. For speakers, the system enables them to schedule and present their technical talks. Real-time notifications keep all users updated about the latest event information. Organizers will also be able to monitor attendance and generate reports based on user feedback and overall event metrics.",
        "output": "@startuml\nleft to right direction\n\nactor Participant\nactor Sponsor\nactor Organizer\nactor Speaker\n\nrectangle GitHub_Universe_Management_System {\n    usecase \"Register for Event\" as UC1\n    usecase \"Sign Up for Sessions\" as UC2\n    usecase \"Manage Sponsor Onboarding\" as UC3\n    usecase \"Track Sponsor Branding\" as UC4\n    usecase \"Manage Event Schedule\" as UC5\n    usecase \"Send Real-Time Updates\" as UC6\n    usecase \"Submit Session Feedback\" as UC7\n    usecase \"Give Tech-Talks\" as UC8\n    usecase \"Generate Reports\" as UC9\n    usecase \"Monitor Attendance\" as UC10\n    usecase \"Submit Sponsorship Proposal\" as UC11\n    usecase \"Review Sponsorship Benefits\" as UC12\n}\n\nParticipant --> UC1\nParticipant --> UC2\nParticipant --> UC7\n\nSponsor --> UC11\nSponsor --> UC4\n\nOrganizer --> UC5\nOrganizer --> UC6\nOrganizer --> UC9\nOrganizer --> UC10\nOrganizer --> UC3\nOrganizer --> UC4\n\nSpeaker --> UC8\n@enduml"
    },
    {
        "input": "Design a use case diagram for a university course registration system that simplifies the process of enrolling in courses and managing academic schedules. Students can search for available courses, add them to their course list, and register for the upcoming semester. The system also allows students to drop courses if needed and view their academic history. Professors can view the list of enrolled students, assign grades, and provide feedback on assignments. The system ensures that students and professors can easily manage their academic responsibilities and stay informed about course-related activities.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Professor\n\nrectangle Course_Registration_System {\n    usecase \"Search Courses\" as UC1\n    usecase \"Add Course\" as UC2\n    usecase \"Register for Semester\" as UC3\n    usecase \"Drop Course\" as UC4\n    usecase \"View Academic History\" as UC5\n    usecase \"View Enrolled Students\" as UC6\n    usecase \"Assign Grades\" as UC7\n    usecase \"Provide Feedback\" as UC8\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\n\nProfessor --> UC6\nProfessor --> UC7\nProfessor --> UC8\n@enduml"
    },
    {
        "input": "Design a use case diagram for a social media platform that connects users through shared interests and activities. Users can create profiles, post content, and interact with other users through comments and likes. The platform also offers group features, allowing users to join communities and participate in group discussions. Additionally, users can send private messages to each other and receive notifications about new activities on the platform. The system aims to foster a sense of community and engagement among its users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Social_Media_Platform {\n    usecase \"Create Profile\" as UC1\n    usecase \"Post Content\" as UC2\n    usecase \"Interact with Users\" as UC3\n    usecase \"Join Groups\" as UC4\n    usecase \"Participate in Discussions\" as UC5\n    usecase \"Send Messages\" as UC6\n    usecase \"Receive Notifications\" as UC7\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n@enduml"
    },
    {
        "input": "Design a use case diagram for a social networking platform like Facebook. The platform allows individuals to shape their online identity by creating personalized profiles, which serve as the foundation for user engagement. Users can build meaningful connections by sending and accepting friend requests, gradually expanding their network. Beyond mere connections, users are provided with tools to express themselves by sharing life moments, thoughts, and experiences through posts, which may include text, photos, or videos. These updates can then be engaged with by other users, creating a vibrant interaction space. Users are notified in real-time about interactions, such as reactions to their posts or new connections. Additionally, the platform enables private conversations through messaging, allowing users to stay in touch and share media directly. The platform also offers a space for business users, who can create pages for their ventures, post updates, and manage advertisements targeted at their audience. Moderators ensure a safe environment by monitoring content, while administrators manage platform-wide activities, including enforcing community guidelines.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Moderator\nactor Admin\n\nrectangle Facebook_System {\n    usecase \"Create Profile\" as UC1\n    usecase \"Manage Friends\" as UC2\n    usecase \"Share Life Moments\" as UC3\n    usecase \"Post Content\" as UC4\n    usecase \"Engage with Posts\" as UC5\n    usecase \"Send Private Messages\" as UC6\n    usecase \"Receive Notifications\" as UC7\n    usecase \"Create Business Page\" as UC8\n    usecase \"Manage Advertisements\" as UC9\n    usecase \"Monitor and Moderate Content\" as UC10\n    usecase \"Enforce Community Guidelines\" as UC11\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\n\nModerator --> UC10\n\nAdmin --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for a blood donation app that connects donors, recipients, and blood banks, helping people in emergencies or for regular donations. The app allows users to register as donors, find donors in urgent situations based on blood type and location, and post blood requests. Donors are notified of blood requests and can donate blood. Recipients can find nearby hospitals, while blood banks organize donation drives and track blood availability to ensure sufficient supply. The app aims to simplify the blood donation process and improve access to life-saving resources for those in need.",
        "output": "@startuml\nleft to right direction\n\nactor Donor\nactor Recipient\nactor BloodBank\n\nrectangle Blood_Donation_App {\n    usecase \"Register as Donor\" as UC1\n    usecase \"Find Blood Donor\" as UC2\n    usecase \"Post Blood Request\" as UC3\n    usecase \"Receive Notifications\" as UC4\n    usecase \"Locate Nearby Hospitals\" as UC5\n    usecase \"Organize Blood Donation Drives\" as UC6\n    usecase \"Track Blood Availability\" as UC7\n    usecase \"Donate Blood\" as UC8\n}\n\nDonor --> UC1\nDonor --> UC8\nDonor --> UC4\nRecipient --> UC2\nRecipient --> UC3\nRecipient --> UC5\nRecipient --> UC4\nBloodBank --> UC6\nBloodBank --> UC7\n@enduml"
    },
    {
        "input": "Design a use case diagram for a ride-sharing platform like Uber. The platform connects drivers and passengers, enabling them to request rides, track their location, and pay for services. Passengers can view available drivers, request rides to specific destinations, and rate drivers based on their experience. Drivers, on the other hand, can accept ride requests, navigate to the passenger's location, and provide a safe and efficient ride. The platform also includes features for customer support, allowing users to report issues and receive assistance when needed.",
        "output": "@startuml\nleft to right direction\n\nactor Passenger\nactor Driver\nactor CustomerSupport\n\nrectangle Ride_Sharing_Platform {\n    usecase \"Request Ride\" as UC1\n    usecase \"Track Location\" as UC2\n    usecase \"Pay for Service\" as UC3\n    usecase \"Rate Driver\" as UC4\n    usecase \"Accept Ride Request\" as UC5\n    usecase \"Navigate to Location\" as UC6\n    usecase \"Provide Ride\" as UC7\n    usecase \"Resolve Issues\" as UC8\n    usecase \"Provide Assistance\" as UC9\n}\n\nPassenger --> UC1\nPassenger --> UC2\nPassenger --> UC3\nPassenger --> UC4\n\nDriver --> UC5\nDriver --> UC6\nDriver --> UC7\n\nCustomerSupport --> UC8\nCustomerSupport --> UC9\n@enduml"
    },
    {
        "input": "Design a use case diagram for a food delivery platform like DoorDash. The platform connects customers with restaurants, allowing them to order food for delivery or pickup. Customers can browse restaurant menus, place orders, and track the status of their deliveries. Restaurants can receive orders, prepare food, and notify customers when their orders are ready. Delivery drivers can accept delivery requests, pick up orders, and deliver them to customers. The platform also includes features for customer support, enabling users to report issues and receive assistance.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Restaurant\nactor Driver\nactor CustomerSupport\n\nrectangle Food_Delivery_Platform {\n    usecase \"Browse Menus\" as UC1\n    usecase \"Place Order\" as UC2\n    usecase \"Track Delivery\" as UC3\n    usecase \"Receive Orders\" as UC4\n    usecase \"Prepare Food\" as UC5\n    usecase \"Notify Order Ready\" as UC6\n    usecase \"Accept Delivery Request\" as UC7\n    usecase \"Pick Up Order\" as UC8\n    usecase \"Deliver Order\" as UC9\n    usecase \"Resolve Issues\" as UC10\n    usecase \"Provide Assistance\" as UC11\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\n\nRestaurant --> UC4\nRestaurant --> UC5\nRestaurant --> UC6\n\nDriver --> UC7\nDriver --> UC8\nDriver --> UC9\n\nCustomerSupport --> UC10\nCustomerSupport --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for a job finder app specifically designed to support women's career aspirations, called **SheWorks**. The app focuses on helping women find jobs that align with their skills and needs, such as flexible working hours, remote work opportunities, and women-centric organizations. SheWorks allows users to create profiles and upload their resumes, where they can search and apply for job listings that cater to their preferences. The app not only supports job seekers but also empowers employers to list vacancies that are more inclusive, offering features like mentorship programs or leadership roles for women. The platform integrates resume scanning and recommendation algorithms to match users with relevant job opportunities. Employers can shortlist candidates based on their profiles, and users can schedule interviews directly through the app. Notifications are sent to keep users informed of job updates, interview calls, and feedback. Additionally, the app promotes career development by offering workshops, events, and networking opportunities to encourage women in their professional growth.",
        "output": "@startuml\nleft to right direction\n\nactor Job_Seeker\nactor Employer\nactor Mentor\n\nrectangle SheWorks_App {\n    usecase \"Create Profile\" as UC1\n    usecase \"Upload Resume\" as UC2\n    usecase \"Search for Jobs\" as UC3\n    usecase \"Apply for Job\" as UC4\n    usecase \"Receive Notifications\" as UC5\n    usecase \"Schedule Interview\" as UC6\n    usecase \"Attend Workshops\" as UC7\n    usecase \"Participate in Networking Events\" as UC8\n    usecase \"Shortlist Candidates\" as UC9\n    usecase \"Post Job Vacancies\" as UC10\n    usecase \"Offer Mentorship\" as UC11\n    usecase \"Receive Job Recommendations\" as UC12\n}\n\nJob_Seeker --> UC1\nJob_Seeker --> UC2\nJob_Seeker --> UC3\nJob_Seeker --> UC4\nJob_Seeker --> UC6\nJob_Seeker --> UC5\nJob_Seeker --> UC7\nJob_Seeker --> UC8\nJob_Seeker --> UC12\n\nEmployer --> UC9\nEmployer --> UC10\n\nMentor --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for a web app developed to manage a large-scale hackathon event. The app streamlines the organization of the event, allowing participants to register, form teams, and submit their projects. It also facilitates communication between participants, mentors, and organizers by providing features like chat rooms, notifications, and announcements. For organizers, the app includes features to manage event schedules, monitor team progress, and coordinate judging rounds. Mentors can offer guidance through dedicated channels, review project progress, and provide feedback. Judges can evaluate projects, score submissions, and provide feedback directly through the app. Additionally, sponsors have the option to submit branding materials, contribute prizes, and track the visibility of their sponsorships throughout the event. The platform ensures a smooth flow of communication, event updates, and project tracking, making the hackathon experience efficient for all involved.",
        "output": "@startuml\nleft to right direction\n\nactor Participant\nactor Organizer\nactor Mentor\nactor Judge\nactor Sponsor\n\nrectangle Hackathon_Management_System {\n    usecase \"Register for Event\" as UC1\n    usecase \"Form Team\" as UC2\n    usecase \"Submit Project\" as UC3\n    usecase \"Chat with Team\" as UC4\n    usecase \"Receive Notifications\" as UC5\n    usecase \"View Event Schedule\" as UC6\n    usecase \"Provide Mentorship\" as UC7\n    usecase \"Review Project Progress\" as UC8\n    usecase \"Evaluate Projects\" as UC9\n    usecase \"Score Submissions\" as UC10\n    usecase \"Manage Judging Rounds\" as UC11\n    usecase \"Submit Sponsorship Materials\" as UC12\n    usecase \"Track Sponsorship Visibility\" as UC13\n    usecase \"Coordinate Announcements\" as UC14\n}\n\nParticipant --> UC1\nParticipant --> UC2\nParticipant --> UC3\nParticipant --> UC4\nParticipant --> UC5\nParticipant --> UC6\n\nOrganizer --> UC6\nOrganizer --> UC14\nOrganizer --> UC11\nOrganizer --> UC8\n\nMentor --> UC7\nMentor --> UC8\n\nJudge --> UC9\nJudge --> UC10\n\nSponsor --> UC12\nSponsor --> UC13\n@enduml"
    },
    {
        "input": "Design a use case diagram for a seminar management system. The system aims to manage every aspect of a large seminar, from organizing the venue to managing guest speakers and attendees. The platform allows organizers to schedule events, allocate the auditorium for sessions, and track audience attendance. It also supports guest speaker management, where the system handles speaker invitations, biographies, and session assignments. Audience members can register for the seminar, book seats, and receive notifications about upcoming sessions. Real-time updates about speaker schedules and session changes are provided to both attendees and organizers. The platform also offers a feedback mechanism for audience members to evaluate sessions. Sponsors and partners can promote their brands through the platform, ensuring visibility during the event. Additionally, the system supports guest list management, session timings, and overall event coordination to ensure smooth operations.",
        "output": "@startuml\nleft to right direction\n\nactor Audience\nactor Organizer\nactor Guest_Speaker\nactor Sponsor\n\nrectangle Seminar_Management_System {\n    usecase \"Register for Seminar\" as UC1\n    usecase \"Book Seat\" as UC2\n    usecase \"Receive Notifications\" as UC3\n    usecase \"View Session Schedule\" as UC4\n    usecase \"Submit Feedback\" as UC5\n    usecase \"Manage Auditorium Allocation\" as UC6\n    usecase \"Manage Speaker Sessions\" as UC7\n    usecase \"Invite Guest Speakers\" as UC8\n    usecase \"Track Attendance\" as UC9\n    usecase \"Coordinate Event Timings\" as UC10\n    usecase \"Promote Sponsor Branding\" as UC11\n    usecase \"Manage Seminar Session Content\" as UC12\n}\n\nAudience --> UC1\nAudience --> UC2\nAudience --> UC3\nAudience --> UC4\nAudience --> UC5\n\nOrganizer --> UC6\nOrganizer --> UC7\nOrganizer --> UC8\nOrganizer --> UC9\nOrganizer --> UC10\n\nGuest_Speaker --> UC7\nGuest_Speaker --> UC12\n\nSponsor --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for a project management system that supports the planning, execution, and monitoring of projects. The system allows project managers to create project plans, assign tasks to team members, and track progress. Team members can view their assigned tasks, update task statuses, and communicate with other team members. The system also includes features for generating reports, monitoring project timelines, and identifying potential risks. Stakeholders can access project information, review progress reports, and provide feedback on project deliverables. The platform aims to streamline project management processes and improve collaboration among team members.",
        "output": "@startuml\nleft to right direction\n\nactor ProjectManager\nactor TeamMember\nactor Stakeholder\n\n rectangle Project_Management_System {\n    usecase \"Create Project Plan\" as UC1\n    usecase \"Assign Tasks\" as UC2\n    usecase \"Track Progress\" as UC3\n    usecase \"View Assigned Tasks\" as UC4\n    usecase \"Update Task Status\" as UC5\n    usecase \"Communicate with Team\" as UC6\n    usecase \"Generate Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Risks\" as UC9\n    usecase \"Access Project Information\" as UC10\n    usecase \"Review Progress Reports\" as UC11\n    usecase \"Provide Feedback\" as UC12\n}\n\nProjectManager --> UC1\nProjectManager --> UC2\nProjectManager --> UC3\nProjectManager --> UC7\nProjectManager --> UC8\nProjectManager --> UC9\n\nTeamMember --> UC4\nTeamMember --> UC5\nTeamMember --> UC6\n\nStakeholder --> UC10\nStakeholder --> UC11\nStakeholder --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a customer relationship management (CRM) system that helps businesses manage interactions with customers and potential customers. The system allows sales teams to track leads, manage customer accounts, and analyze sales data. Marketing teams can create targeted campaigns, track customer engagement, and generate reports on campaign performance. Customer support teams can log customer inquiries, resolve issues, and provide feedback on customer satisfaction. The system aims to improve customer relationships, increase sales, and enhance overall customer experience.",
        "output": "@startuml\nleft to right direction\n\nactor SalesTeam\nactor MarketingTeam\nactor CustomerSupport\n\nrectangle CRM_System {\n    usecase \"Track Leads\" as UC1\n    usecase \"Manage Customer Accounts\" as UC2\n    usecase \"Analyze Sales Data\" as UC3\n    usecase \"Create Campaigns\" as UC4\n    usecase \"Track Customer Engagement\" as UC5\n    usecase \"Generate Reports\" as UC6\n    usecase \"Log Customer Inquiries\" as UC7\n    usecase \"Resolve Issues\" as UC8\n    usecase \"Provide Feedback\" as UC9\n}\n\nSalesTeam --> UC1\nSalesTeam --> UC2\nSalesTeam --> UC3\n\nMarketingTeam --> UC4\nMarketingTeam --> UC5\nMarketingTeam --> UC6\n\nCustomerSupport --> UC7\nCustomerSupport --> UC8\nCustomerSupport --> UC9\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a content management system (CMS) that allows users to create, manage, and publish digital content. The system supports content creation, editing, and collaboration among users. Users can upload media files, organize content into categories, and schedule content publication. The system also includes features for content approval, version control, and content analytics. Administrators can manage user permissions, monitor content performance, and ensure the security of the system. The platform aims to streamline content management processes and improve content delivery to users.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Administrator\n\nrectangle Content_Management_System {\n    usecase \"Create Content\" as UC1\n    usecase \"Edit Content\" as UC2\n    usecase \"Collaborate on Content\" as UC3\n    usecase \"Upload Media Files\" as UC4\n    usecase \"Organize Content\" as UC5\n    usecase \"Schedule Publication\" as UC6\n    usecase \"Approve Content\" as UC7\n    usecase \"Version Control\" as UC8\n    usecase \"Analyze Content\" as UC9\n    usecase \"Manage Permissions\" as UC10\n    usecase \"Monitor Performance\" as UC11\n    usecase \"Ensure Security\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC8\n\nAdministrator --> UC7\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a learning management system (LMS) that supports online education and training. The system allows instructors to create courses, upload learning materials, and assess student performance. Students can enroll in courses, access course content, and submit assignments. The system includes features for quizzes, discussions, and grading. Administrators can manage user accounts, monitor course enrollment, and generate reports on student progress. The platform aims to provide a seamless learning experience for students and instructors.",
        "output": "@startuml\nleft to right direction\n\nactor Instructor\nactor Student\nactor Administrator\n\nrectangle Learning_Management_System {\n    usecase \"Create Courses\" as UC1\n    usecase \"Upload Learning Materials\" as UC2\n    usecase \"Assess Student Performance\" as UC3\n    usecase \"Enroll in Courses\" as UC4\n    usecase \"Access Course Content\" as UC5\n    usecase \"Submit Assignments\" as UC6\n    usecase \"Take Quizzes\" as UC7\n    usecase \"Participate in Discussions\" as UC8\n    usecase \"Grade Assignments\" as UC9\n    usecase \"Manage User Accounts\" as UC10\n    usecase \"Monitor Course Enrollment\" as UC11\n    usecase \"Generate Reports\" as UC12\n}\n\nInstructor --> UC1\nInstructor --> UC2\nInstructor --> UC3\nInstructor --> UC9\n\nStudent --> UC4\nStudent --> UC5\nStudent --> UC6\nStudent --> UC7\nStudent --> UC8\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a project tracking system that helps teams manage tasks, deadlines, and progress on projects. The system allows team members to create tasks, assign tasks to team members, and set deadlines for completion. Team members can update task statuses, track progress, and communicate with other team members. The system includes features for generating reports, monitoring project timelines, and identifying bottlenecks. Project managers can oversee project progress, allocate resources, and ensure project milestones are met. The platform aims to improve project efficiency, collaboration, and communication among team members.",
        "output": "@startuml\nleft to right direction\n\nactor TeamMember\nactor ProjectManager\n\nrectangle Project_Tracking_System {\n    usecase \"Create Tasks\" as UC1\n    usecase \"Assign Tasks\" as UC2\n    usecase \"Set Deadlines\" as UC3\n    usecase \"Update Task Status\" as UC4\n    usecase \"Track Progress\" as UC5\n    usecase \"Communicate with Team\" as UC6\n    usecase \"Generate Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Bottlenecks\" as UC9\n    usecase \"Oversee Project Progress\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Milestones\" as UC12\n}\n\nTeamMember --> UC1\nTeamMember --> UC2\nTeamMember --> UC3\nTeamMember --> UC4\nTeamMember --> UC5\nTeamMember --> UC6\nTeamMember --> UC7\n\nProjectManager --> UC8\nProjectManager --> UC9\nProjectManager --> UC10\nProjectManager --> UC11\nProjectManager --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a task management system that helps individuals organize and track their tasks. The system allows users to create tasks, set priorities, and deadlines for completion. Users can update task statuses, track progress, and categorize tasks based on different criteria. The system includes features for generating task lists, setting reminders, and organizing tasks into projects. Users can also share tasks with collaborators, assign tasks to team members, and receive notifications about task updates. The platform aims to improve task management efficiency and help users stay organized.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Collaborator\n\nrectangle Task_Management_System {\n    usecase \"Create Tasks\" as UC1\n    usecase \"Set Priorities\" as UC2\n    usecase \"Set Deadlines\" as UC3\n    usecase \"Update Task Status\" as UC4\n    usecase \"Track Progress\" as UC5\n    usecase \"Categorize Tasks\" as UC6\n    usecase \"Generate Task Lists\" as UC7\n    usecase \"Set Reminders\" as UC8\n    usecase \"Organize Tasks\" as UC9\n    usecase \"Share Tasks\" as UC10\n    usecase \"Assign Tasks\" as UC11\n    usecase \"Receive Notifications\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\n\nCollaborator --> UC10\nCollaborator --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for a bug tracking system that helps software development teams manage and resolve software defects. The system allows developers to log bugs, assign bugs to team members, and track bug fixes. Team members can update bug statuses, prioritize bugs, and communicate with other team members about bug resolutions. The system includes features for generating bug reports, monitoring bug resolution timelines, and identifying recurring bugs. Project managers can oversee bug resolution progress, allocate resources to fix bugs, and ensure software quality standards are met. The platform aims to improve software quality, collaboration, and communication among team members.",
        "output": "@startuml\nleft to right direction\n\nactor Developer\nactor ProjectManager\n\nrectangle Bug_Tracking_System {\n    usecase \"Log Bugs\" as UC1\n    usecase \"Assign Bugs\" as UC2\n    usecase \"Track Bug Fixes\" as UC3\n    usecase \"Update Bug Status\" as UC4\n    usecase \"Prioritize Bugs\" as UC5\n    usecase \"Communicate with Team\" as UC6\n    usecase \"Generate Bug Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Recurring Bugs\" as UC9\n    usecase \"Oversee Bug Resolution\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Software Quality\" as UC12\n}\n\nDeveloper --> UC1\nDeveloper --> UC2\nDeveloper --> UC3\nDeveloper --> UC4\nDeveloper --> UC5\nDeveloper --> UC6\nDeveloper --> UC7\n\nProjectManager --> UC8\nProjectManager --> UC9\nProjectManager --> UC10\nProjectManager --> UC11\nProjectManager --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a customer support system that helps businesses manage customer inquiries, issues, and feedback. The system allows customer support agents to log customer inquiries, assign tickets to agents, and track ticket resolutions. Agents can update ticket statuses, prioritize tickets, and communicate with customers about issue resolutions. The system includes features for generating support reports, monitoring ticket resolution timelines, and identifying recurring issues. Managers can oversee ticket resolution progress, allocate resources to resolve issues, and ensure customer satisfaction standards are met. The platform aims to improve customer support efficiency, collaboration, and communication among support agents.",
        "output": "@startuml\nleft to right direction\n\nactor CustomerSupportAgent\nactor Manager\n\nrectangle Customer_Support_System {\n    usecase \"Log Customer Inquiries\" as UC1\n    usecase \"Assign Tickets\" as UC2\n    usecase \"Track Ticket Resolutions\" as UC3\n    usecase \"Update Ticket Status\" as UC4\n    usecase \"Prioritize Tickets\" as UC5\n    usecase \"Communicate with Customers\" as UC6\n    usecase \"Generate Support Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Recurring Issues\" as UC9\n    usecase \"Oversee Ticket Resolution\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Customer Satisfaction\" as UC12\n}\n\nCustomerSupportAgent --> UC1\nCustomerSupportAgent --> UC2\nCustomerSupportAgent --> UC3\nCustomerSupportAgent --> UC4\nCustomerSupportAgent --> UC5\nCustomerSupportAgent --> UC6\nCustomerSupportAgent --> UC7\n\nManager --> UC8\nManager --> UC9\nManager --> UC10\nManager --> UC11\nManager --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a help desk system that assists users in resolving technical issues and inquiries. The system allows users to log help desk tickets, assign tickets to support agents, and track ticket resolutions. Support agents can update ticket statuses, prioritize tickets, and communicate with users about issue resolutions. The system includes features for generating help desk reports, monitoring ticket resolution timelines, and identifying recurring issues. Managers can oversee ticket resolution progress, allocate resources to resolve issues, and ensure service level agreements are met. The platform aims to improve help desk efficiency, collaboration, and communication between users and support agents.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor SupportAgent\nactor Manager\n\nrectangle Help_Desk_System {\n    usecase \"Log Help Desk Tickets\" as UC1\n    usecase \"Assign Tickets\" as UC2\n    usecase \"Track Ticket Resolutions\" as UC3\n    usecase \"Update Ticket Status\" as UC4\n    usecase \"Prioritize Tickets\" as UC5\n    usecase \"Communicate with Users\" as UC6\n    usecase \"Generate Help Desk Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Recurring Issues\" as UC9\n    usecase \"Oversee Ticket Resolution\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Service Level Agreements\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nSupportAgent --> UC3\nSupportAgent --> UC4\nSupportAgent --> UC5\nSupportAgent --> UC6\nSupportAgent --> UC7\n\nManager --> UC8\nManager --> UC9\nManager --> UC10\nManager --> UC11\nManager --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a library management system that helps librarians manage library resources, patrons, and circulation activities. The system allows librarians to catalog books, manage patron accounts, and track book loans. Patrons can search for books, check out books, and renew book loans. The system includes features for generating library reports, monitoring book circulation, and identifying overdue books. Administrators can oversee library operations, allocate resources, and ensure library policies are enforced. The platform aims to improve library efficiency, patron services, and resource management.",
        "output": "@startuml\nleft to right direction\n\nactor Librarian\nactor Patron\nactor Administrator\n\nrectangle Library_Management_System {\n    usecase \"Catalog Books\" as UC1\n    usecase \"Manage Patron Accounts\" as UC2\n    usecase \"Track Book Loans\" as UC3\n    usecase \"Search for Books\" as UC4\n    usecase \"Check Out Books\" as UC5\n    usecase \"Renew Book Loans\" as UC6\n    usecase \"Generate Library Reports\" as UC7\n    usecase \"Monitor Book Circulation\" as UC8\n    usecase \"Identify Overdue Books\" as UC9\n    usecase \"Oversee Library Operations\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Enforce Library Policies\" as UC12\n}\n\nLibrarian --> UC1\nLibrarian --> UC2\nLibrarian --> UC3\nLibrarian --> UC7\nLibrarian --> UC8\nLibrarian --> UC9\n\nPatron --> UC4\nPatron --> UC5\nPatron --> UC6\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a hotel management system that helps hotel staff manage guest reservations, room assignments, and hotel services. The system allows hotel staff to create guest reservations, assign rooms, and track guest check-ins and check-outs. Guests can book rooms, request services, and provide feedback on their stay. The system includes features for generating hotel reports, monitoring room availability, and identifying guest preferences. Managers can oversee hotel operations, allocate resources, and ensure guest satisfaction. The platform aims to improve hotel efficiency, guest services, and room management.",
        "output": "@startuml\nleft to right direction\n\nactor HotelStaff\nactor Guest\nactor Manager\n\nrectangle Hotel_Management_System {\n    usecase \"Create Guest Reservations\" as UC1\n    usecase \"Assign Rooms\" as UC2\n    usecase \"Track Check-Ins and Check-Outs\" as UC3\n    usecase \"Book Rooms\" as UC4\n    usecase \"Request Services\" as UC5\n    usecase \"Provide Feedback\" as UC6\n    usecase \"Generate Hotel Reports\" as UC7\n    usecase \"Monitor Room Availability\" as UC8\n    usecase \"Identify Guest Preferences\" as UC9\n    usecase \"Oversee Hotel Operations\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Guest Satisfaction\" as UC12\n}\n\nHotelStaff --> UC1\nHotelStaff --> UC2\nHotelStaff --> UC3\nHotelStaff --> UC7\nHotelStaff --> UC8\nHotelStaff --> UC9\n\nGuest --> UC4\nGuest --> UC5\nGuest --> UC6\n\nManager --> UC10\nManager --> UC11\nManager --> UC12\n@enduml"
    }       
]
