[
    {
        "input": "Design a entity relationship diagram for it. Functional requirements for Webmed Healthcare System:\n\n1. The system must allow patients and caregivers to register on the platform.\n2. The system must provide a secure login feature for accessing healthcare services.\n3. The system must offer a feature for users to explore different healthcare facilities and services.\n4. The system must include a finance module focused on purchasing insurance.\n5. The system must display comprehensive information about diseases and their symptoms under a Health A-Z feature.\n6. The system must include resources such as a symptom checker, health calculator, and a function to find a doctor based on location.\n7. The system must provide an online medicine delivery option under the drugs and supplements section.\n8. The system must offer a payment module for reimbursing providers for services delivered.\n9. The system must collect user feedback for quality improvement purposes.\n10. The system must offer a logout functionality for users to securely exit the platform.\n11. The system must include a bulletin for news, health awareness, and information on experts and counselling programs.\n12. The system must provide access to health insurance guides and ambulance services under the resources section.",
        "output": "@startchen\n\nentity USER {\n    user_id <<key>>\n    name\n    email\n    password\n    role\n}\nentity PATIENT {\n    address\n    phone\n    date_of_birth\n}\nentity DOCTOR {\n    specialization\n    phone\n}\n\nUSER ->- d { PATIENT, DOCTOR }\n\nentity INSURANCE {\n    insurance_id <<key>>\n    name\n    type\n    details\n}\nentity MEDICINE {\n    medicine_id <<key>>\n    name\n    description\n    price\n    availability\n}\nentity APPOINTMENT {\n    appointment_id <<key>>\n    date\n    time\n    location\n    status\n    patient_id <<FK>>\n    doctor_id <<FK>>\n}\nentity FEEDBACK {\n    feedback_id <<key>>\n    user_id <<FK>>\n    comments\n    rating\n}\nentity PAYMENT {\n    payment_id <<key>>\n    amount\n    date\n    method\n    status\n    user_id <<FK>>\n}\nentity COUNSELING_PROGRAM {\n    program_id <<key>>\n    name\n    details\n    date\n    location\n}\n\nrelationship books {\n}\nrelationship prescribes {\n}\nrelationship enrolls {\n}\nrelationship gives {\n}\nrelationship makes {\n}\nrelationship access {\n}\n\nPATIENT -1- gives\ngives -N- FEEDBACK\nPATIENT -1- makes\nmakes -N- PAYMENT\nPATIENT -1- books\nbooks -N- APPOINTMENT\nDOCTOR -1- prescribes\nprescribes -N- MEDICINE\nPATIENT -1- enrolls\nenrolls -N- INSURANCE\nPATIENT -1- access\naccess -N- COUNSELING_PROGRAM\n\n@endchen"
    },
    {
        "input": "Design a entity relationship diagram for this system. Functional requirements for the Online Examination System:\n\n1. The system must allow students to register and create accounts.\n2. The system must enable teachers to create exams and set questions.\n3. The system must allow students to take exams online.\n4. The system must generate results for the exams taken by students.\n5. The system must provide exam analysis, including performance review and insights.",
       "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  username\n  password\n}\n\nentity Student {\n}\n\nentity Teacher {\n}\n\nUser =>= d { Student, Teacher }\n\nentity Exam {\n  exam_id <<key>>\n  title\n  created_date\n}\n\nentity Question {\n  question_id <<key>>\n  content\n  answer_options\n  correct_answer\n}\n\nentity ExamResult {\n  result_id <<key>>\n  score\n  completion_date\n}\n\nrelationship REGISTERS {\n  registration_date\n}\n\nrelationship CREATES {\n}\n\nrelationship CONTAINS {\n}\n\nrelationship TAKES {\n  start_time\n  end_time\n}\n\nrelationship GENERATES {\n}\n\nrelationship RESULTS_FOR {\n}\n\nREGISTERS -1- Student\nREGISTERS -N- Exam\n\nCREATES -1- Teacher\nCREATES -N- Exam\n\nCONTAINS -1- Exam\nCONTAINS -N- Question\n\nTAKES -1- Student\nTAKES -N- Exam\n\nGENERATES -1- Exam\nGENERATES -N- ExamResult\n\nRESULTS_FOR -1- Student\nRESULTS_FOR -1- Exam\nRESULTS_FOR -1- ExamResult\n\n@endchen"
    },
    {
        "input": "Design a entity relationship diagram for this system. Functional requirements for the Online Voting System:\n\n1. The system must allow citizens to register as voters.\n2. The system must enable candidates to register for elections.\n3. The system must allow registered voters to cast their votes online.\n4. The system must generate results for the elections based on the votes cast.\n5. The system must provide analysis of the votes, including voter turnout and demographics.",
        "output": "@startchen\n\nentity Voter {\n  voter_id <<key>>\n  name\n password\n  address\n  date_of_birth\n  registration_date\n}\n\nentity Candidate {\n  candidate_id <<key>>\n  name\n password\n  party\n  registration_date\n}\n\nentity Election {\n  election_id <<key>>\n  title\n  election_date\n}\n\nentity Vote {\n  vote_id <<key>>\n  timestamp\n}\n\nentity Result {\n  result_id <<key>>\n  total_votes\n  winner\n}\n\nrelationship REGISTERS_AS_VOTER {\n  registration_date\n}\n\nrelationship REGISTERS_AS_CANDIDATE {\n  registration_date\n}\n\nrelationship CASTS_VOTE {\n  vote_time\n}\n\nrelationship GENERATES {\n}\n\nREGISTERS_AS_VOTER -1- Voter\nREGISTERS_AS_VOTER -1- Election\n\nREGISTERS_AS_CANDIDATE -1- Candidate\nREGISTERS_AS_CANDIDATE -1- Election\n\nCASTS_VOTE -1- Voter\nCASTS_VOTE -1- Candidate\nCASTS_VOTE -1- Vote\n\nGENERATES -1- Election\nGENERATES -N- Result\n\n@endchen"
    },
    {
        "input": "Design a entity relationship diagram for this system. Functional requirements for the E-Ticketing System for Buses:\n\n1. The system must allow customers to register and create an account for booking tickets.\n2. The system must enable customers to make bus reservations and purchase tickets online.\n3. The system must provide customers with the ability to cancel their reservations if needed.\n4. The system must facilitate secure payments, allowing customers to pay for tickets online through bank transactions.\n5. The system must allow customers to check the status of their reservations and buses online.\n6. The system must allow customers to edit their profiles and manage their accounts.\n7. The system must allow the admin to manage user accounts, including deleting accounts.\n8. The system must enable managers to update and manage routes, bus schedules, vehicle records, and payment information.\n9. The system must generate reports related to bus reservations, payments, and cancellations for management use.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n password\n  phone\n}\n\nentity Bus {\n  bus_id <<key>>\n  bus_type\n  capacity\n  operator\n}\n\nentity Route {\n  route_id <<key>>\n  origin\n  destination\n  distance\n}\n\nentity Schedule {\n  schedule_id <<key>>\n  departure_time\n  arrival_time\n  date\n}\n\nentity Reservation {\n  reservation_id <<key>>\n  status\n  reservation_date\n}\n\nentity Payment {\n  payment_id <<key>>\n  payment_date\n  amount\n  status\n  bank_pin\n}\n\nentity Admin {\n  admin_id <<key>>\n  username\n  password\n}\n\nrelationship CHECKS_AVAILABILITY {\n}\n\nrelationship RESERVES {\n  reservation_date\n}\n\nrelationship PAYS_FOR {\n  payment_date\n}\n\nrelationship CANCELS_RESERVATION {\n  cancellation_date\n}\n\nrelationship ASSIGNS {\n}\n\nrelationship FOLLOWS_ROUTE {\n}\n\nrelationship USES {\n}\n\nrelationship MANAGES {\n  manage_date\n}\n\nCHECKS_AVAILABILITY -1- Customer\nCHECKS_AVAILABILITY -N- Bus\n\nRESERVES -1- Customer\nRESERVES -1- Reservation\n\nPAYS_FOR -1- Customer\nPAYS_FOR -1- Payment\n\nCANCELS_RESERVATION -1- Customer\nCANCELS_RESERVATION -1- Reservation\n\nASSIGNS -1- Bus\nASSIGNS -N- Route\n\nFOLLOWS_ROUTE -1- Bus\nFOLLOWS_ROUTE -N- Schedule\n\nUSES -1- Reservation\nUSES -1- Bus\n\nMANAGES -1- Admin\nMANAGES -N- Reservation\n\n@endchen"          
    },
    {
        "input": "Design a entity relationship diagram for this system. Functional requirements for the Weather Monitoring System:\n\n1. The system must allow users to check the current weather status, including temperature, humidity, rainfall, pressure, and dew point.\n2. The system must provide live updates of weather data for real-time viewing.\n3. The system must alert users with tips and warnings during certain weather conditions.\n4. The system must display weather data in graphical form to allow easier analysis of temperature variations.\n5. The system must predict the weather for the next few days based on current and past data.\n6. The system must provide a weekly analysis, including average, highest, and lowest temperatures of the week.\n",
        "output": "@startchen\n\nentity Location {\n  location_id <<key>>\n  city\n  region\n  country\n}\n\nentity SensorData {\n  data_id <<key>>\n  timestamp\n  temperature\n  humidity\n  rainfall\n  pressure\n  dew_point\n}\n\nentity WeatherAlert {\n  alert_id <<key>>\n  alert_type\n  message\n  alert_time\n}\n\nentity Prediction {\n  prediction_id <<key>>\n  prediction_date\n  predicted_temperature\n  predicted_humidity\n  predicted_rainfall\n}\n\nrelationship MEASURES {\n}\n\nrelationship ALERTS {\n}\n\nrelationship PREDICTS {\n}\n\nMEASURES -1- Location\nMEASURES -N- SensorData\n\nALERTS -1- Location\nALERTS -N- WeatherAlert\n\nPREDICTS -1- Location\nPREDICTS -N- Prediction\n\n@endchen"          
    },
    {
        "input": "Give entity relationship diagram for this system. Functional requirements for the Online Shopping System:\n\n1. The system must allow users to register and create an account.\n2. The system must provide a product catalog displaying available products for purchase.\n3. The system must allow users to add products to their shopping cart.\n4. The system must include a payment gateway for users to make payments for their purchases.\n5. The system must display the user's order history, showing past orders.\n6. The system must offer customer support functionality for users to ask queries or report issues.",
       "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  username\n  email\n  password\n  registration_date\n}\n\nentity Product {\n  product_id <<key>>\n  name\n  description\n  price\n  stock\n  category\n}\n\nentity ShoppingCart {\n  cart_id <<key>>\n  created_date\n}\n\nentity CartItem {\n  item_id <<key>>\n  quantity\n}\n\nentity Order {\n  order_id <<key>>\n  order_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  payment_date\n  amount\n  payment_method\n  payment_status\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship REGISTERS {\n  registration_date\n}\n\nrelationship ADDS_TO_CART {\n}\n\nrelationship CONTAINS {\n}\n\nrelationship PLACES_ORDER {\n  order_date\n}\n\nrelationship PAYS_FOR {\n  payment_date\n}\n\nrelationship SUPPORTS {\n}\n\nrelationship INCLUDES {\n}\n\nrelationship REPRESENTS {\n}\n\nREGISTERS -1- User\nREGISTERS -1- ShoppingCart\n\nADDS_TO_CART -1- User\nADDS_TO_CART -N- CartItem\n\nCONTAINS -1- ShoppingCart\nCONTAINS -N- CartItem\n\nREPRESENTS -1- CartItem\nREPRESENTS -1- Product\n\nPLACES_ORDER -1- User\nPLACES_ORDER -1- Order\n\nPAYS_FOR -1- Order\nPAYS_FOR -1- Payment\n\nSUPPORTS -1- User\nSUPPORTS -N- CustomerSupport\n\nINCLUDES -1- Order\nINCLUDES -N- CartItem\n\n@endchen"          
    },
    {
        "input": "Give entity relationship diagram for this system. Functional requirements for the Library Management System:\n\n1. The system must allow users to register and create an account.\n2. The system must provide a book catalog displaying all available books.\n3. The system must allow users to borrow books from the library.\n4. The system must allow users to return borrowed books.\n5. The system must allow users to renew borrowed books.\n6. The system must calculate late fees for books returned after the due date.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n password\n  phone\n  registration_date\n}\n\nentity Book {\n  isbn <<key>>\n  title\n  author\n  publisher\n  genre\n  publication_year\n}\n\nentity BorrowRequest {\n  request_id <<key>>\n  borrow_date\n  due_date\n  return_date\n  status <<derived>>\n  late_fee\n}\n\nrelationship REGISTERS {\n  registration_date\n}\n\nrelationship BORROWS {\n  borrow_date\n  due_date\n}\n\nrelationship RETURNS {\n  return_date\n}\n\nrelationship RENEWS {\n  renewal_date\n}\n\nREGISTERS -1- User\nREGISTERS -1- BorrowRequest\n\nBORROWS -1- User\nBORROWS -1- Book\nBORROWS -N- BorrowRequest\n\nRETURNS -1- User\nRETURNS -N- BorrowRequest\n\nRENEWS -1- User\nRENEWS -N- BorrowRequest\n\n@endchen"              
    },
    {
        "input": "Give entity relationship diagram for this system. Functional requirements for the e-Province system:\n\n1. The system must allow citizens to register for an account.\n2. The system must provide a login module where users can log in using their unique application number with an approved status.\n3. The system must allow users to apply for government certificates like birth/death certificates, income and caste certificates, etc.\n4. The system must provide an admin module that can issue certificates to citizens.\n5. The system must manage user profiles, allowing users to update their personal information.\n6. The system must allow admins to view user profiles.\n7. The system must allow admins to deactivate users.",
        "output": "@startchen\n\nentity Citizen {\n  citizen_id <<key>>\n  name\n  address\n  date_of_birth\n  contact_number\n  email\n password\n}\n\nentity Admin {\n  admin_id <<key>>\n  username\n  password\n}\n\nentity Application {\n  application_id <<key>>\n  application_date\n  status\n}\n\nentity Certificate {\n  certificate_id <<key>>\n  certificate_type\n  issue_date\n  expiry_date\n}\n\nentity UserProfile {\n  profile_id <<key>>\n  citizen_id <<foreign>>\n  created_date\n  last_updated\n}\n\nentity CommonServiceCentre {\n  csc_id <<key>>\n  location\n  contact_info\n}\n\nrelationship MANAGES {\n}\n\nrelationship SUBMITS {\n  application_date\n}\n\nrelationship ISSUES {\n  issue_date\n}\n\nrelationship ACCESS_VIA_CSC {\n  access_date\n}\n\nrelationship APPROVES {\n  approval_date\n}\n\nrelationship MAINTAINS_PROFILE {\n  created_date\n  last_updated\n}\n\nMANAGES -1- Admin\nMANAGES -N- Citizen\n\nSUBMITS -1- Citizen\nSUBMITS -N- Application\n\nISSUES -1- Application\nISSUES -1- Certificate\n\nACCESS_VIA_CSC -1- CommonServiceCentre\nACCESS_VIA_CSC -N- Application\n\nAPPROVES -1- Admin\nAPPROVES -N- Application\n\nMAINTAINS_PROFILE -1- Citizen\nMAINTAINS_PROFILE -1- UserProfile\n\n@endchen"          
    },
    {
        "input": "Give entity relationship diagram for this system. Functional requirements for the Online Banking System:\n\n1. The system must allow customers to register by creating an account.\n2. The system must provide account management functionality for users to view and manage their accounts.\n3. The system must enable customers to transfer funds between their accounts.\n4. The system must allow customers to pay bills online.\n5. The system must display a transaction history for users to review past transactions.\n6. The system must offer customer support functionality for users to contact customer support for queries or issues.\n7. Customer support should provide solutions to queries raised by customers through an included support system.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n password\n  phone\n  registration_date\n}\n\nentity Account {\n  account_id <<key>>\n  account_type\n  balance\n  status\n}\n\nentity Transaction {\n  transaction_id <<key>>\n  transaction_date\n  amount\n  transaction_type\n  description\n}\n\nentity BillPayment {\n  bill_id <<key>>\n  payee_name\n  bill_amount\n  due_date\n  payment_date\n}\n\nentity FundTransfer {\n  transfer_id <<key>>\n  from_account <<foreign>>\n  to_account <<foreign>>\n  transfer_date\n  transfer_amount\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship OWNS {\n}\n\nrelationship MAKES {\n  transaction_date\n}\n\nrelationship PAYS_BILL {\n  payment_date\n}\n\nrelationship TRANSFERS_FUNDS {\n  transfer_date\n}\n\nrelationship SUPPORTS {\n}\n\nOWNS -1- Customer\nOWNS -N- Account\n\nMAKES -1- Account\nMAKES -N- Transaction\n\nPAYS_BILL -1- Account\nPAYS_BILL -N- BillPayment\n\nTRANSFERS_FUNDS -1- Account\nTRANSFERS_FUNDS -N- FundTransfer\n\nSUPPORTS -1- Customer\nSUPPORTS -N- CustomerSupport\n\n@endchen"
    },
    {
        "input": "Functional requirements for the DigiDocLocker:\n\n1. The system must allow citizens to register and log in to the platform.\n2. The system must allow users to upload documents in various file formats.\n3. The system must display the complete user profile based on the information stored in the database.\n4. The system must allow users to request documents from the respective issuers.\n5. The system must display certificate issuers’ names and the number of documents issued by the issuers to the user.\n6. The system must display the requesters’ names and the number of documents requested by them.\n Give me ERD for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n password\n  phone\n  registration_date\n}\n\nentity Document {\n  document_id <<key>>\n  document_type\n  upload_date\n  file_format\n  document_url\n}\n\nentity Profile {\n  profile_id <<key>>\n  user_id <<foreign>>\n password\n  full_name\n  address\n  date_of_birth\n}\n\nentity Issuer {\n  issuer_id <<key>>\n  issuer_name\n  issuer_type\n}\n\nentity Requester {\n  requester_id <<key>>\n  requester_name\n password\n  requester_type\n}\n\nrelationship REGISTERS {\n  registration_date\n}\n\nrelationship UPLOADS {\n  upload_date\n}\n\nrelationship ASSOCIATED_WITH {\n}\n\nrelationship ISSUED_BY {\n  issue_date\n}\n\nrelationship REQUESTED_BY {\n  request_date\n}\n\nREGISTERS -1- User\nREGISTERS -1- Profile\n\nUPLOADS -1- User\nUPLOADS -N- Document\n\nASSOCIATED_WITH -1- Profile\nASSOCIATED_WITH -N- Document\n\nISSUED_BY -1- Issuer\nISSUED_BY -N- Document\n\nREQUESTED_BY -1- Requester\nREQUESTED_BY -N- Document\n\n@endchen"
    },
    {
        "input": "Functional requirements for the E-Retail system:\n\n1. The system must allow sellers and customers to register and log in to the platform.\n2. The system must allow sellers to list products for sale.\n3. The system must display all available products for customers to view.\n4. The system must allow customers to buy products and make payments.\n5. The system must enable customers to rate the products they have purchased.\n6. The system must allow customers to report sellers for any violations or issues with the product or delivery.\n7. The system must display the contact information and rating of the seller to the customer before purchasing a product.\n \n Give me ERD for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n password\n  phone\n  address\n  registration_date\n}\n\nentity Customer {\n}\n\nentity Seller {\n  seller_id <<key>>\n  rating\n}\n\nUser =>= d { Customer, Seller }\n\nentity Product {\n  product_id <<key>>\n  name\n  description\n  price\n  category\n  stock\n  rating\n  upload_date\n}\n\nentity Order {\n  order_id <<key>>\n  order_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity Review {\n  review_id <<key>>\n  rating\n  comment\n  review_date\n}\n\nentity Report {\n  report_id <<key>>\n  report_date\n  issue_type\n  description\n}\n\nrelationship LISTS_PRODUCT {\n  listing_date\n}\n\nrelationship PLACES_ORDER {\n  order_date\n}\n\nrelationship MAKES_PAYMENT {\n  payment_date\n}\n\nrelationship HAS_SELLERREVIEWS {\n  review_date\n}\n\nrelationship HAS_PRODUCTREVIEWS {\n  review_date\n}\n\nrelationship REPORTS_SELLER {\n  report_date\n}\n\nrelationship GIVES{\n}\n\nLISTS_PRODUCT -1- Seller\nLISTS_PRODUCT -N- Product\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nMAKES_PAYMENT -1- Order\nMAKES_PAYMENT -1- Payment\n\nGIVES -1- Customer\nGIVES -N- Review\n\nHAS_PRODUCTREVIEWS -N- Review\nHAS_PRODUCTREVIEWS -1- Product\n\nHAS_SELLERREVIEWS -N- Review\nHAS_SELLERREVIEWS -1- Seller\n\nREPORTS_SELLER -1- Customer\nREPORTS_SELLER -N- Report\n\n@endchen"          
    },

    {
        "input": "Functional requirements for the Online Food Ordering System:\n\n1. The system must allow users to register and log in to the platform.\n2. The system must allow users to select a restaurant to order food from.\n3. The system must provide a menu for users to browse food items from the selected restaurant.\n4. The system must allow users to place an order for food.\n5. The system must facilitate payment through a secure payment gateway.\n6. The system must allow users to track the status of their orders.\n7. The system must allow users to contact customer support for any queries or issues.\n Give me ERD for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n}\nentity Restaurant {\n  restaurant_id <<key>>\n  name\n  location\n  contact_info\n  rating\n}\nentity Menu {\n  menu_id <<key>>\n  restaurant_id <<foreign>>\n  menu_type\n}\nentity MenuItem {\n  item_id <<key>>\n  menu_id <<foreign>>\n  name\n  description\n  price\n  availability\n}\nentity Order {\n  order_id <<key>>\n  order_date\n  total_amount\n  status\n}\nentity Payment {\n  payment_id <<key>>\n  payment_date\n  amount\n  payment_method\n  status\n}\nentity CustomerSupport {\n  support_id <<key>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship SELECTS {\n}\nrelationship CONTAINS_ITEMS {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship INCLUDES_ITEMS {\n}\nrelationship PLACES_ORDER {\n  order_date\n}\nrelationship MAKES_PAYMENT {\n  payment_date\n}\nrelationship CONTACTS_SUPPORT {\n}\n\nUser -1- SELECTS\nSELECTS -N- Restaurant\n\nMenu -1- CONTAINS_ITEMS\nCONTAINS_ITEMS -N- MenuItem\n\nMenu -1-  ASSOCIATED_WITH\nASSOCIATED_WITH -1- Restaurant\n\nOrder -1- INCLUDES_ITEMS\nINCLUDES_ITEMS -N- MenuItem\n\nUser -1- PLACES_ORDER \nPLACES_ORDER -N- Order\n\nOrder -1- MAKES_PAYMENT\nMAKES_PAYMENT -1- Payment\n\nUser -1- CONTACTS_SUPPORT\nCONTACTS_SUPPORT -N- CustomerSupport\n\n@endchen"
    },
    {
        "input": "Functional requirements for the Online Movie Ticket Booking System:\n\n1. The system must allow users to register and log in to the platform.\n2. The system must allow users to select a movie for which they want to book tickets.\n3. The system must allow users to select seats for the selected movie.\n4. The system must facilitate payment through a secure payment gateway.\n5. The system must confirm the ticket booking after payment is made.\n6. The system must allow users to cancel their ticket bookings if necessary.\n7. The system must allow users to contact customer support for any queries or issues.\n Give me ERD for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\nentity Movie {\n  movie_id <<key>>\n  title\n  genre\n  duration\n  rating\n  release_date\n}\nentity Screening {\n  screening_id <<key>>\n  movie_id <<foreign>>\n  theater\n  screening_date\n  screening_time\n}\nentity Seat {\n  seat_id <<key>>\n  screening_id <<foreign>>\n  seat_number\n  seat_type\n  status\n}\nentity Booking {\n  booking_id <<key>>\n  user_id <<foreign>>\n  screening_id <<foreign>>\n  booking_date\n  total_amount\n  status\n}\nentity Payment {\n  payment_id <<key>>\n  booking_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\nrelationship SELECTS_MOVIE {\n}\nrelationship SELECTS_SEAT {\n}\nrelationship MAKES_BOOKING {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship SHOWS {\n}\nrelationship HAS_SEATS {\n}\n\nUser -1- SELECTS_MOVIE\nSELECTS_MOVIE -N- Movie\nBooking -1- SELECTS_SEAT \nSELECTS_SEAT -N- Seat\nUser -1- MAKES_BOOKING\nMAKES_BOOKING -1- Booking\nBooking  -1- MAKES_PAYMENT\nMAKES_PAYMENT -1- Payment\nBooking -1- ASSOCIATED_WITH\nASSOCIATED_WITH -1- Screening\nScreening -1- SHOWS\nSHOWS -1- Movie\nScreening -1- HAS_SEATS\nHAS_SEATS -N- Seat\n\n@endchen"   
    },
    {
        "input": "Functional requirements for the Online Hotel Booking System:\n\n1. The system must allow users to register and log in to the platform.\n2. The system must allow users to select a hotel for which they want to book rooms.\n3. The system must allow users to select rooms in the selected hotel.\n4. The system must facilitate payment through a secure payment gateway.\n5. The system must confirm the booking of rooms after payment is made.\n6. The system must allow users to cancel their room bookings if necessary.\n7. The system must allow users to contact customer support for any queries or issues.\n Give me ERD for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\nentity Hotel {\n  hotel_id <<key>>\n  name\n  location\n  rating\n  contact_info\n}\nentity Room {\n  room_id <<key>>\n  hotel_id <<foreign>>\n  room_type\n  price\n  availability_status\n}\nentity Booking {\n  booking_id <<key>>\n  user_id <<foreign>>\n  hotel_id <<foreign>>\n  booking_date\n  total_amount\n  status\n}\nentity Payment {\n  payment_id <<key>>\n  booking_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\nentity CustomerSupport {\n  support_id <<key>>\n  user_id <<foreign>>\n  query_date\n  query_description\n  resolution_status\n}\nrelationship HAS_ROOMS {\n}\nrelationship SELECTS_ROOM {\n}\nrelationship MAKES_BOOKING {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship CONFIRMS_BOOKING {\n}\nrelationship CONTACTS_SUPPORT {\n}\n\nHotel -1- HAS_ROOMS\nHAS_ROOMS -N- Room\nBooking -1- SELECTS_ROOM\nSELECTS_ROOM -N- Room\nUser -1- MAKES_BOOKING\nMAKES_BOOKING -1- Booking\nBooking -1- MAKES_PAYMENT\nMAKES_PAYMENT -1- Payment\nBooking -1- CONFIRMS_BOOKING\nCONFIRMS_BOOKING -1- Hotel\nUser -1- CONTACTS_SUPPORT \nCONTACTS_SUPPORT -N- CustomerSupport\n\n@endchen"  
    },
    {
        "input": "Give me ERD for this system. Functional requirements for the Online Flight Booking System:\n\n1. The system must allow users to register and log in to the platform.\n2. The system must allow users to select a flight for which they want to book tickets.\n3. The system must allow users to select seats for the selected flight.\n4. The system must facilitate payment through a secure payment gateway.\n5. The system must confirm the booking of tickets after payment is made.\n6. The system must allow users to cancel their ticket bookings if necessary.\n7. The system must allow users to contact customer support for any queries or issues.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Flight {\n  flight_id <<key>>\n  airline\n  departure_city\n  arrival_city\n  departure_time\n  arrival_time\n}\n\nentity Seat {\n  seat_id <<key>>\n  flight_id <<foreign>>\n  seat_number\n  seat_type\n  status\n}\n\nentity Booking {\n  booking_id <<key>>\n  user_id <<foreign>>\n  flight_id <<foreign>>\n  booking_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  booking_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  user_id <<foreign>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship SELECTS_FLIGHT {\n}\n\nrelationship SELECTS_SEAT {\n}\n\nrelationship MAKES_BOOKING {\n}\n\nrelationship MAKES_PAYMENT {\n}\n\nrelationship CONFIRMS_BOOKING {\n}\n\nrelationship CANCELS_BOOKING {\n  cancellation_date\n}\n\nrelationship CONTACTS_SUPPORT {\n}\n\nSELECTS_FLIGHT -1- User\nSELECTS_FLIGHT -N- Flight\n\nSELECTS_SEAT -1- Booking\nSELECTS_SEAT -N- Seat\n\nMAKES_BOOKING -1- User\nMAKES_BOOKING -1- Booking\n\nMAKES_PAYMENT -1- Booking\nMAKES_PAYMENT -1- Payment\n\nCONFIRMS_BOOKING -1- Booking\nCONFIRMS_BOOKING -1- Flight\n\nCANCELS_BOOKING -1- User\nCANCELS_BOOKING -1- Booking\n\nCONTACTS_SUPPORT -1- User\nCONTACTS_SUPPORT -N- CustomerSupport\n\n@endchen"
    },
    {
        "input": "Give me ERD for this system. Functional requirements for the Online Event Management System:\n\n1. The system must allow users to register and log in to the platform.\n2. The system must allow users to create events and manage event details.\n3. The system must allow users to promote events to attract attendees.\n4. The system must allow users to book tickets for events.\n5. The system must facilitate payment through a secure payment gateway for tickets.\n6. The system must allow users to track the status of events and ticket bookings.\n7. The system must allow users to contact customer support for any queries or issues.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Event {\n  event_id <<key>>\n  name\n  description\n  location\n  start_date\n  end_date\n}\n\nentity Ticket {\n  ticket_id <<key>>\n  event_id <<foreign>>\n  user_id <<foreign>>\n  booking_date\n  amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  ticket_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  user_id <<foreign>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship CREATES_EVENT {\n}\n\nrelationship PROMOTES_EVENT {\n}\n\nrelationship BOOKS_TICKET {\n}\n\nrelationship MAKES_PAYMENT {\n}\n\nrelationship TRACKS_EVENT {\n}\n\nrelationship CONTACTS_SUPPORT {\n}\n\nCREATES_EVENT -1- User\nCREATES_EVENT -N- Event\n\nPROMOTES_EVENT -1- User\nPROMOTES_EVENT -N- Event\n\nBOOKS_TICKET -1- User\nBOOKS_TICKET -1- Ticket\n\nMAKES_PAYMENT -1- Ticket\nMAKES_PAYMENT -1- Payment\n\nTRACKS_EVENT -1- User\nTRACKS_EVENT -N- Event\n\nCONTACTS_SUPPORT -1- User\nCONTACTS_SUPPORT -N- CustomerSupport\n\n@endchen"
    },
    {
        "input": "Design me ERD for this system.Functional requirements for the Law Enforcement System:\n\n1. The system must allow lawyers to register and log in to the platform.\n2. The system must allow lawyers to view case details and logs.\n3. The system must allow lawyers to add and update case details.\n4. The system must support both criminal and civil case categories.\n5. The system must provide online filing options for cases.\n6. The system must allow lawyers to download model forms for cases.\n7. The system must provide quick references for common legal cases.\n8. The system must offer e-books and other legal resources for reference.\n9. The system must allow lawyers to view blogs, news updates, and submit feedback.",
        "output": "@startchen\n\nentity Lawyer {\n  lawyer_id <<key>>\n  name\n  email\n  password\n  phone\n}\nentity Case {\n  case_id <<key>>\n  lawyer_id <<foreign>>\n  case_type\n  case_details\n  case_date\n}\nentity Document {\n  document_id <<key>>\n  case_id <<foreign>>\n  document_type\n  document_url\n}\nentity Calendar {\n  calendar_id <<key>>\n  lawyer_id <<foreign>>\n  event_date\n  event_details\n}\nentity Form {\n  form_id <<key>>\n  form_type\n  form_url\n}\nentity Exam {\n  exam_id <<key>>\n  exam_name\n  exam_date\n  exam_details\n}\nentity Feedback {\n  feedback_id <<key>>\n  lawyer_id <<foreign>>\n  feedback_date\n  feedback_details\n}\nrelationship HANDLES_CASE {\n}\nrelationship UPLOADS_DOCUMENT {\n}\nrelationship MANAGES_SCHEDULE {\n}\nrelationship ACCESSES {\n}\nrelationship PROVIDES_FEEDBACK {\n}\n\nLawyer -1- HANDLES_CASE\nHANDLES_CASE -N- Case\nCase -1- UPLOADS_DOCUMENT\nUPLOADS_DOCUMENT -N- Document\nLawyer -1- MANAGES_SCHEDULE\nMANAGES_SCHEDULE -N- Calendar\nLawyer -1- ACCESSES\nACCESSES -N- Form\nACCESSES -N- Exam\nLawyer -1- PROVIDES_FEEDBACK\nPROVIDES_FEEDBACK -N- Feedback\n\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional requirements for 'My Helper' application:\n\n1. The system must allow users to send an SMS to perform remote operations on their phones.\n2. The system must allow users to track the location of their phone via an SMS.\n3. The system must allow users to lock their phones remotely via an SMS.\n4. The system must allow users to change the sound profile (silent to normal) of their phone via an SMS.",
       "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  phone_number\n  email\n  password\n  registration_date\n}\n\nentity Device {\n  device_id <<key>>\n  user_id <<foreign>>\n  device_name\n  device_type\n  device_status\n  last_known_location\n}\n\nentity SMSCommand {\n  command_id <<key>>\n  command_type\n  description\n  execution_result\n}\n\nentity LocationHistory {\n  location_id <<key>>\n  device_id <<foreign>>\n  location_date\n  latitude\n  longitude\n}\n\nentity ProfileChange {\n  profile_change_id <<key>>\n  device_id <<foreign>>\n  change_date\n  previous_profile\n  new_profile\n}\n\nrelationship OWNS_DEVICE {\n}\n\nrelationship SENDS_COMMAND {\n}\n\nrelationship TRACKS_LOCATION {\n}\n\nrelationship CHANGES_PROFILE {\n}\n\nOWNS_DEVICE -1- User\nOWNS_DEVICE -N- Device\n\nSENDS_COMMAND -1- Device\nSENDS_COMMAND -N- SMSCommand\n\nTRACKS_LOCATION -1- Device\nTRACKS_LOCATION -N- LocationHistory\n\nCHANGES_PROFILE -1- Device\nCHANGES_PROFILE -N- ProfileChange\n\n@endchen"          
    },
    {
        "input": "Design me ERD for this system. Functional requirements for COVID-19 Management System:\n\n1. The system must allow healthcare organizations to track COVID-19 patients.\n2. The system must enable healthcare organizations to treat COVID-19 patients via virtual care.\n3. The system must provide the government with tools to monitor the spread of the virus.\n4. The system must allow healthcare organizations and the government to assess the risk profiles of patients.\n5. The system must raise awareness about COVID-19 among the general public.\n6. The system must allow patients to connect with virtual care services for consultation.\n7. The system must provide patients with the ability to buy medicines online.",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  age\n  gender\n  address\n  phone\n  email\n  password\n  registration_date\n}\n\nentity HealthcareProvider {\n  provider_id <<key>>\n  name\n  password\n  location\n  contact_info\n}\n\nentity TestResult {\n  result_id <<key>>\n  patient_id <<foreign>>\n  test_date\n  test_result\n}\n\nentity TreatmentPlan {\n  plan_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  treatment_date\n  treatment_details\n}\n\nentity AwarenessCampaign {\n  campaign_id <<key>>\n  campaign_name\n  campaign_date\n  campaign_details\n}\n\nentity VirtualCare {\n  care_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  care_date\n  care_details\n}\n\nrelationship HAS {\n}\n\nrelationship ASSIGNED_TREATMENT {\n}\n\nrelationship ASSIGNS_TREATMENT {\n}\n\nrelationship CONDUCTS_CAMPAIGN {\n}\n\nrelationship PROVIDES_VIRTUAL_CARE {\n}\n\nrelationship USES_VIRTUAL_CARE {\n}\n\nHAS -1- Patient\nHAS -N- TestResult\n\nASSIGNED_TREATMENT -1- Patient\nASSIGNED_TREATMENT -N- TreatmentPlan\n\nASSIGNS_TREATMENT -1- HealthcareProvider\nASSIGNS_TREATMENT -N- TreatmentPlan\n\nCONDUCTS_CAMPAIGN -1- HealthcareProvider\nCONDUCTS_CAMPAIGN -N- AwarenessCampaign\n\nUSES_VIRTUAL_CARE -1- Patient\nUSES_VIRTUAL_CARE -N- VirtualCare\n\nPROVIDES_VIRTUAL_CARE -1- HealthcareProvider\nPROVIDES_VIRTUAL_CARE -N- VirtualCare\n\n@endchen"          
    },
    {
        "input": "Design me ERD for this system. Functional requirements for 'Car Care' application:\n\n1. The system must allow car owners to register and log in.\n2. The system must allow car owners to enter car information.\n3. The system must allow service centers to enter the estimated expiry dates of car parts.\n4. The system must notify car owners and service centers about the expiry dates of car parts.\n5. The system must allow car owners to accept service requests and select the parts for service.\n6. The system must enable service centers to pick up the car, examine it, prepare a list of damaged parts, and perform the selected services.\n7. The system must allow the service center to update the car information after servicing.\n8. The system must provide an online payment option for car owners to make payments for the service.",
        "output": "@startchen\n\nentity CarOwner {\n  owner_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity ServiceCenter {\n  center_id <<key>>\n  name\n  location\n  contact_info\n}\n\nentity Car {\n  car_id <<key>>\n  owner_id <<foreign>>\n  make\n  model\n  year\n  registration_number\n}\n\nentity CarPart {\n  part_id <<key>>\n  car_id <<foreign>>\n  part_name\n  install_date\n  expiry_date\n  status\n}\n\nentity ServiceRequest {\n  request_id <<key>>\n  car_id <<foreign>>\n  center_id <<foreign>>\n  request_date\n  status\n}\n\nentity Service {\n  service_id <<key>>\n  request_id <<foreign>>\n  service_date\n  total_cost\n  payment_status\n}\n\nentity PartReplacement {\n  replacement_id <<key>>\n  service_id <<foreign>>\n  part_id <<foreign>>\n  replaced_date\n  cost\n}\n\nrelationship OWNS {\n}\n\nrelationship MONITORS {\n}\n\nrelationship SUBMITS_REQUEST {\n}\n\nrelationship HANDLES_SERVICE {\n}\n\nrelationship REPLACES_PART {\n}\n\nrelationship MAKES_PAYMENT {\n}\n\nOWNS -1- CarOwner\nOWNS -N- Car\n\nMONITORS -1- Car\nMONITORS -N- CarPart\n\nSUBMITS_REQUEST -1- CarOwner\nSUBMITS_REQUEST -N- ServiceRequest\n\nHANDLES_SERVICE -1- ServiceCenter\nHANDLES_SERVICE -N- ServiceRequest\n\nREPLACES_PART -1- Service\nREPLACES_PART -N- PartReplacement\n\nMAKES_PAYMENT -1- CarOwner\nMAKES_PAYMENT -N- Service\n\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional requirements for 'E-Ration Shop':\n\n1. The system must allow ration cardholders to register, log in, and order grocery items online.\n2. The system must display shop details, stock availability, and shop advertisements to ration cardholders.\n3. The system must notify ration cardholders about stock availability regularly.\n4. The system must provide product delivery functionality for ration cardholders.\n5. The system must provide a complaint forum for ration cardholders to submit grievances.\n6. The system must allow retailers to manage stock, advertise their shop, and deliver products.\n7. The system must support payments through PayTM, COD, and other payment gateways.\n8. The system must have admin and moderator functionalities, such as managing users, monitoring system usage, approving retailer applications, generating reports, and managing content.\n9. The system must use Aadhaar-based authentication and OTP verification for secure access.",
        "output": "@startchen\n\nentity RationCardHolder {\n  cardholder_id <<key>>\n  name\n  address\n  phone\n  email\n  registration_date\n}\nentity Shopkeeper {\n  shopkeeper_id <<key>>\n  name\n  shop_name\n  location\n  contact_info\n}\nentity Shop {\n  shop_id <<key>>\n  shopkeeper_id <<foreign>>\n  shop_name\n  location\n  geo_location\n  opening_time\n  closing_time\n}\nentity Product {\n  product_id <<key>>\n  product_name\n  category\n  price\n  stock\n}\nentity Order {\n  order_id <<key>>\n  cardholder_id <<foreign>>\n  shop_id <<foreign>>\n  product_id <<foreign>>\n  order_date\n  quantity\n  total_amount\n  status\n}\nentity Complaint {\n  complaint_id <<key>>\n  cardholder_id <<foreign>>\n  shop_id <<foreign>>\n  complaint_date\n  complaint_details\n  status\n}\nentity Payment {\n  payment_id <<key>>\n  order_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nrelationship HAS_SHOP {\n}\nrelationship SELLS_PRODUCT {\n}\nrelationship PLACES_ORDER {\n}\nrelationship RAISES_COMPLAINT {\n}\nrelationship PROCESSES_PAYMENT {\n}\n\nShopkeeper -1- HAS_SHOP\nHAS_SHOP -N- Shop\nShop -1- SELLS_PRODUCT\nSELLS_PRODUCT -N- Product\nRationCardHolder -1- PLACES_ORDER\nPLACES_ORDER -N- Order\nRationCardHolder -1- RAISES_COMPLAINT\nRAISES_COMPLAINT -N- Complaint\nOrder -1- PROCESSES_PAYMENT\nPROCESSES_PAYMENT -1- Payment\n\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional requirements for 'Textile Management System':\n\n1. The system must allow customers to register and sample available products.\n2. The system must allow customers and manufacturers to check stock availability.\n3. The system must support the purchasing and processing of raw materials by the manufacturer.\n4. The system must enable the production of garments by the manufacturer.\n5. The system must allow for product checking, clearance, and shipment of finished garments.\n6. The system must generate bills for customers and reports for manufacturers.\n7. The system must allow customers to order garments.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity RawMaterial {\n  material_id <<key>>\n  material_name\n  supplier\n  quantity\n  price\n  purchase_date\n}\n\nentity Garment {\n  garment_id <<key>>\n  garment_name\n  size\n  color\n  quantity\n  production_date\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  delivery_date\n  status\n}\n\nentity Shipment {\n  shipment_id <<key>>\n  order_id <<foreign>>\n  shipment_date\n  delivery_status\n}\n\nentity Invoice {\n  invoice_id <<key>>\n  order_id <<foreign>>\n  total_amount\n  payment_status\n}\n\nentity Report {\n  report_id <<key>>\n  report_date\n  issue_type\n  description\n}\n\nrelationship PLACES_ORDER {\n}\n\nrelationship CONTAINS_MATERIAL {\n}\n\nrelationship PRODUCES_GARMENT {\n}\n\nrelationship SHIPS_ORDER {\n}\n\nrelationship GENERATES_INVOICE {\n}\n\nrelationship GENERATES_REPORT {\n}\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nCONTAINS_MATERIAL -1- Order\nCONTAINS_MATERIAL -N- RawMaterial\n\nPRODUCES_GARMENT -N- RawMaterial\nPRODUCES_GARMENT -N- Garment\n\nSHIPS_ORDER -1- Order\nSHIPS_ORDER -1- Shipment\n\nGENERATES_INVOICE -1- Order\nGENERATES_INVOICE -1- Invoice\n\nGENERATES_REPORT -1- Order\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional requirements for 'Hotel Reservation System':\n\n1. The system must allow customers to register, log in, search available rooms, book rooms, and make payments.\n2. The system must allow customers to view their reservations and contact customer support.\n3. The system must allow hotel managers to add or update room details and generate reports.\n4. The system must provide customer support to assist users with their queries and issues.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Room {\n  room_id <<key>>\n  room_type\n  capacity\n  rate_per_night\n  availability_status\n}\n\nentity Reservation {\n  reservation_id <<key>>\n  customer_id <<foreign>>\n  room_id <<foreign>>\n  check_in_date\n  check_out_date\n  reservation_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  reservation_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  payment_status\n}\n\nentity SupportTicket {\n  ticket_id <<key>>\n  customer_id <<foreign>>\n  issue_type\n  description\n  status\n  created_date\n  resolved_date\n}\n\nentity Report {\n  report_id <<key>>\n  reservation_id <<foreign>>\n  generated_date\n  report_type\n  description\n}\n\nrelationship MAKES_RESERVATION {\n}\nrelationship ASSIGNS_ROOM {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship CREATES_TICKET {\n}\nrelationship GENERATED_FROM {\n}\n\nMAKES_RESERVATION -1- Customer\nMAKES_RESERVATION -N- Reservation\n\nASSIGNS_ROOM -1- Reservation\nASSIGNS_ROOM -1- Room\n\nMAKES_PAYMENT -1- Reservation\nMAKES_PAYMENT -1- Payment\n\nCREATES_TICKET -1- Customer\nCREATES_TICKET -N- SupportTicket\n\nGENERATED_FROM -N- Report\nGENERATED_FROM -1- Reservation\n\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional requirements for 'Learning Management System':\n\n1. The system must allow students to register, enroll in courses, submit assignments, and view their grades.\n2. The system must allow instructors to create courses, manage student assignments, and grade submissions.\n3. The system must facilitate collaboration through discussion forums for students and instructors.\n4. The system must provide a feedback mechanism for students to share their learning experiences with instructors.",
       "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Instructor {\n  instructor_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Course {\n  course_id <<key>>\n  title\n  description\n  instructor_id <<foreign>>\n  start_date\n  end_date\n}\n\nentity Assignment {\n  assignment_id <<key>>\n  course_id <<foreign>>\n  student_id <<foreign>>\n  title\n  description\n  due_date\n  grade\n}\n\nentity DiscussionForum {\n  forum_id <<key>>\n  course_id <<foreign>>\n  topic\n  post_date\n  post_content\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  feedback_date\n  feedback_content\n}\n\nrelationship ENROLLS_IN {\n}\nrelationship TEACHES {\n}\nrelationship SUBMITS_ASSIGNMENT {\n}\nrelationship PARTICIPATES_IN_FORUM {\n}\nrelationship PROVIDES_FEEDBACK {\n}\n\nENROLLS_IN -1- Student\nENROLLS_IN -N- Course\n\nTEACHES -1- Instructor\nTEACHES -N- Course\n\nSUBMITS_ASSIGNMENT -1- Student\nSUBMITS_ASSIGNMENT -N- Assignment\n\nPARTICIPATES_IN_FORUM -N- Student\nPARTICIPATES_IN_FORUM -1- DiscussionForum\n\nPROVIDES_FEEDBACK -1- Student\nPROVIDES_FEEDBACK -N- Feedback\n\n@endchen"
    },
    {
        "input": "Functional requirements for 'Inventory Management System':\n\n1. The system must allow store managers to view current inventory levels, reorder products, and manage suppliers.\n2. The system must track deliveries and update inventory levels accordingly.\n3. The system must generate reports on product usage and reorder history. Design me ERD for this system.",
        "output": "@startchen\n\nentity StoreManager {\n  manager_id <<key>>\n  name\n  email\n  password\n  contact_number\n  store_location\n}\n\nentity Product {\n  product_id <<key>>\n  name\n  description\n  price\n  reorder_level\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  product_id <<foreign>>\n  location\n  quantity_in_stock\n  last_updated\n}\n\nentity Supplier {\n  supplier_id <<key>>\n  name\n  contact_info\n  address\n}\n\nentity Order {\n  order_id <<key>>\n  supplier_id <<foreign>>\n  manager_id <<foreign>>\n  order_date\n  total_amount\n  status\n}\n\nentity Delivery {\n  delivery_id <<key>>\n  order_id <<foreign>>\n  delivery_date\n  received_by\n  delivery_status\n}\n\nentity Report {\n  report_id <<key>>\n  report_date\n  report_type\n  description\n}\n\nrelationship MANAGES_INVENTORY {\n}\nrelationship PLACES_ORDER {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship SUPPLIES {\n}\nrelationship STORES_IN {\n}\n\nMANAGES_INVENTORY -1- StoreManager\nMANAGES_INVENTORY -N- Inventory\n\nSTORES_IN -N- Product\nSTORES_IN -1- Inventory\n\nPLACES_ORDER -1- StoreManager\nPLACES_ORDER -N- Order\n\nASSOCIATED_WITH -1- Order\nASSOCIATED_WITH -1- Delivery\n\nGENERATES_REPORT -1- StoreManager\nGENERATES_REPORT -N- Report\n\nSUPPLIES -1- Supplier\nSUPPLIES -N- Product\n\n@endchen"
    },
    {
        "input": "Functional requirements for 'Gym Management System':\n\n1. The system must allow users to register as members, book sessions, and track their fitness progress.\n2. Trainers must be able to create workout plans, manage their schedules, and monitor client progress.\n3. The system must handle membership payments through an integrated payment gateway. Design me ERD for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n  membership_status\n}\n\nentity Trainer {\n  trainer_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n  experience_years\n}\n\nentity Membership {\n  membership_id <<key>>\n  user_id <<foreign>>\n  start_date\n  end_date\n  status\n  membership_type\n}\n\nentity Session {\n  session_id <<key>>\n  trainer_id <<foreign>>\n  user_id <<foreign>>\n  session_date\n  session_time\n  status\n}\n\nentity WorkoutPlan {\n  workout_id <<key>>\n  trainer_id <<foreign>>\n  user_id <<foreign>>\n  plan_details\n  start_date\n  end_date\n}\n\nentity Progress {\n  progress_id <<key>>\n  user_id <<foreign>>\n  workout_id <<foreign>>\n  date\n  weight\n  body_fat\n  muscle_mass\n  notes\n}\n\nentity Payment {\n  payment_id <<key>>\n  user_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nrelationship SIGNS_UP {\n}\nrelationship TRAINS_SESSION {\n}\nrelationship BOOKS_SESSION {\n}\nrelationship TRACKS_PROGRESS {\n}\nrelationship MANAGES_PAYMENT {\n}\nrelationship CREATES_PLAN {\n}\n\nSIGNS_UP -1- User\nSIGNS_UP -1- Membership\n\nTRAINS_SESSION -1- Trainer\nTRAINS_SESSION -N- Session\n\nBOOKS_SESSION -1- User\nBOOKS_SESSION -N- Session\n\nTRACKS_PROGRESS -1- WorkoutPlan\nTRACKS_PROGRESS -N- Progress\n\nMANAGES_PAYMENT -1- User\nMANAGES_PAYMENT -N- Payment\n\nCREATES_PLAN -1- Trainer\nCREATES_PLAN -N- WorkoutPlan\n\n@endchen"
    },
    {
        "input": "Functional requirements for 'Warehouse Management System':\n\n1. The system must track stock levels in real-time and manage shipments and deliveries.\n2. Warehouse managers must be able to manage the entire stock lifecycle, generate reports, and manage employee schedules.\n3. The system must include inventory optimization features to adjust stock based on real-time demand. Design me ERD for this system.",
        "output": "@startchen\n\nentity WarehouseManager {\n  manager_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Employee {\n  employee_id <<key>>\n  name\n  email\n  password\n  phone\n  role\n  shift\n}\n\nentity StockItem {\n  item_id <<key>>\n  name\n  category\n  quantity\n  location\n  last_updated\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  item_id <<foreign>>\n  current_quantity\n  reorder_point\n  safety_stock\n  lead_time\n  last_checked\n}\n\nentity Shipment {\n  shipment_id <<key>>\n  item_id <<foreign>>\n  quantity\n  shipment_date\n  delivery_date\n  status\n}\n\nentity Report {\n  report_id <<key>>\n  manager_id <<foreign>>\n  report_date\n  report_type\n  description\n}\n\nentity Schedule {\n  schedule_id <<key>>\n  employee_id <<foreign>>\n  shift_date\n  shift_time\n  status\n}\n\nrelationship MANAGES {\n managed_by\n}\nrelationship MANAGES_STOCK {\n}\nrelationship TRACKS_ITEM {\n}\nrelationship HAS_SHIPMENT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship HAS_SCHEDULE {\n}\n\nMANAGES -1- WarehouseManager\nMANAGES -1- Inventory\n\nMANAGES_STOCK -1- Employee\nMANAGES_STOCK -N- StockItem\n\nTRACKS_ITEM -1- Inventory\nTRACKS_ITEM -N- StockItem\n\nHAS_SHIPMENT -1- StockItem\nHAS_SHIPMENT -N- Shipment\n\nGENERATES_REPORT -1- WarehouseManager\nGENERATES_REPORT -N- Report\n\nHAS_SCHEDULE -1- Employee\nHAS_SCHEDULE -N- Schedule\n\n@endchen"
    },
    {
        "input": "Functional Requirements for Hospital Management System:\n1. The system shall allow patients to book appointments with available doctors.\n2. The system shall enable patients to view their medical records for ongoing treatments.\n3. The system shall allow patients to receive prescriptions electronically after consultations.\n4. The system shall allow doctors to manage patient records efficiently, keeping them up-to-date with relevant information.\n5. The system shall enable doctors to schedule follow-up appointments with patients.\n6. The system shall generate invoices for medical services used by patients through the billing module.\n7. The system shall allow doctors to issue prescriptions electronically, minimizing paperwork.\n Design me ERD for this system.",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\nentity Doctor {\n  doctor_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n  experience_years\n}\nentity Appointment {\n  appointment_id <<key>>\n  patient_id <<foreign>>\n  doctor_id <<foreign>>\n  appointment_date\n  appointment_time\n  status\n}\nentity MedicalRecord {\n  record_id <<key>>\n  patient_id <<foreign>>\n  doctor_id <<foreign>>\n  record_date\n  diagnosis\n  treatment\n}\nentity Prescription {\n  prescription_id <<key>>\n  doctor_id <<foreign>>\n  patient_id <<foreign>>\n  prescription_date\n  medication\n  dosage\n}\nentity Invoice {\n  invoice_id <<key>>\n  patient_id <<foreign>>\n  doctor_id <<foreign>>\n  invoice_date\n  total_amount\n  payment_status\n}\n\nrelationship BOOKS_APPOINTMENT {\n}\nrelationship HAS_APPOINTMENT {\n}\nrelationship CREATES_RECORD {\n}\nrelationship HAS_RECORD {\n}\nrelationship GIVES_PRESCRIPTION {\n}\nrelationship HAS_PRESCRIPTION {\n}\nrelationship GENERATES_INVOICE {\n}\n\nPatient -1- BOOKS_APPOINTMENT\nBOOKS_APPOINTMENT -N- Appointment\nDoctor -1- HAS_APPOINTMENT\nHAS_APPOINTMENT -N- Appointment\nDoctor -1- CREATES_RECORD\nCREATES_RECORD -N- MedicalRecord\nPatient -1- HAS_RECORD\nHAS_RECORD -N- MedicalRecord\nDoctor -1- GIVES_PRESCRIPTION\nGIVES_PRESCRIPTION -N- Prescription\nPatient -1- HAS_PRESCRIPTION\nHAS_PRESCRIPTION -N- Prescription\nDoctor -1- GENERATES_INVOICE\nGENERATES_INVOICE -N- Invoice\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional Requirements for Banking System:\n1. The system shall allow customers to deposit money into their accounts.\n2. The system shall allow customers to withdraw money from their accounts.\n3. The system shall allow customers to transfer funds between accounts.\n4. The system shall allow customers to check their account balances.\n5. The system shall allow customers to apply for loans.\n6. The system shall provide customers with access to their transaction history.\n7. The system shall allow bank employees to manage customer accounts, including details and status.\n8. The system shall allow bank employees to approve or reject loan applications submitted by customers.\n9. The system shall allow bank employees to generate reports on banking operations.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Employee {\n  employee_id <<key>>\n  name\n  email\n  password\n  phone\n  role\n  department\n}\n\nentity Account {\n  account_id <<key>>\n  customer_id <<foreign>>\n  account_type\n  balance\n  status\n}\n\nentity Transaction {\n  transaction_id <<key>>\n  account_id <<foreign>>\n  transaction_date\n  transaction_type\n  amount\n  description\n}\n\nentity Loan {\n  loan_id <<key>>\n  customer_id <<foreign>>\n  loan_type\n  amount\n  status\n}\n\nentity Report {\n  report_id <<key>>\n  employee_id <<foreign>>\n  customer_id <<foreign, optional>>\n  account_id <<foreign, optional>>\n  loan_id <<foreign, optional>>\n  report_date\n  report_type\n  description\n}\n\nrelationship OPENS_ACCOUNT {\n}\nrelationship HAS_TRANSACTION {\n}\nrelationship TAKES_LOAN {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship REPORTS_ON {\n}\n\nOPENS_ACCOUNT -1- Customer\nOPENS_ACCOUNT -N- Account\n\nHAS_TRANSACTION -1- Account\nHAS_TRANSACTION -N- Transaction\n\nTAKES_LOAN -1- Customer\nTAKES_LOAN -N- Loan\n\nGENERATES_REPORT -1- Employee\nGENERATES_REPORT -N- Report\n\nREPORTS_ON -1- Report\nREPORTS_ON -0..1- Customer\nREPORTS_ON -0..1- Account\nREPORTS_ON -0..1- Loan\n\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional Requirements for Car Rental System:\n1. The system shall allow customers to search for available cars.\n2. The system shall allow customers to select the desired car for rental.\n3. The system shall allow customers to make a reservation for the selected car.\n4. The system shall allow customers to view their booking history.\n5. The system shall allow customers to cancel their bookings if needed.\n6. The system shall allow car rental agencies to manage their fleet of cars.\n7. The system shall allow car rental agencies to track bookings made by customers.\n8. The system shall allow car rental agencies to generate reports on rental activity.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity CarRentalAgency {\n  agency_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n}\n\nentity Car {\n  car_id <<key>>\n  agency_id <<foreign>>\n  make\n  model\n  year\n  registration_number\n  availability_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  customer_id <<foreign>>\n  car_id <<foreign>>\n  booking_date\n  start_date\n  end_date\n  status\n}\n\nentity Report {\n  report_id <<key>>\n  agency_id <<foreign>>\n  report_date\n  report_type\n  description\n}\n\nrelationship MAKES_BOOKING {\n}\nrelationship MANAGES_CAR {\n}\nrelationship HAS {\n}\nrelationship GENERATES_REPORT {\n}\n\nMAKES_BOOKING -1- Customer\nMAKES_BOOKING -N- Booking\n\nMANAGES_CAR -1- CarRentalAgency\nMANAGES_CAR -N- Car\n\nHAS -1- Car\nHAS -N- Booking\n\nGENERATES_REPORT -1- CarRentalAgency\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional Requirements for Final Year Project (FYP) Management System:\n1. The system shall allow students to submit their project proposals for approval.\n2. The system shall allow students to upload progress reports at various stages of the project.\n3. The system shall allow students to track the evaluation status of their projects.\n4. The system shall allow supervisors to review student submissions and provide detailed feedback.\n5. The system shall allow supervisors to set project deadlines to ensure students stay on track.\n6. The system shall allow supervisors to monitor the progress of each student.\n7. The system shall allow panel members to evaluate projects during key milestones and offer scores.\n8. The system shall allow the FYP committee to assign panel members to projects.\n9. The system shall allow the FYP committee to approve or reject proposals based on academic standards.\n10. The system shall allow the FYP committee to ensure the overall quality of the submitted projects.\n11. The system shall facilitate communication between students, supervisors, and panel members to foster collaboration.",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\nentity Supervisor {\n  supervisor_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\nentity Group {\n  group_id <<key>>\n  supervisor_id <<foreign>>\n}\nentity PanelMember {\n  panel_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\nentity Project {\n  project_id <<key>>\n  group_id <<foreign>>\n  panel_id <<foreign>>\n  title\n  description\n  start_date\n  end_date\n  status\n}\nentity Proposal {\n  proposal_id <<key>>\n  project_id <<foreign>>\n  proposal_date\n  proposal_status\n  proposal_details\n}\nentity ProgressReport {\n  report_id <<key>>\n  project_id <<foreign>>\n  report_date\n  report_status\n  report_details\n}\nentity Evaluation {\n  evaluation_id <<key>>\n  project_id <<foreign>>\n  panel_id <<foreign>>\n  evaluation_date\n  score\n  comments\n}\nrelationship CONSISTS_OF {\n}\nrelationship SUPERVISES {\n}\nrelationship DOES_PROJECT {\n}\nrelationship SUBMITS_PROPOSAL {\n}\nrelationship UPLOADS_REPORT {\n}\nrelationship HAS {\n}\nrelationship EVALUATES_PROJECT {\n}\n\nGroup -1- CONSISTS_OF\nCONSISTS_OF -3- Student\nSupervisor -1- SUPERVISES\nSUPERVISES -N- Group\nGroup -1- DOES_PROJECT\nDOES_PROJECT -1- Project\nGroup -1- SUBMITS_PROPOSAL\nSUBMITS_PROPOSAL -1- Proposal\nGroup -1- UPLOADS_REPORT\nUPLOADS_REPORT -N- ProgressReport\nProject -1- HAS\nHAS -N- Evaluation\nPanelMember -1- EVALUATES_PROJECT\nEVALUATES_PROJECT -N- Evaluation\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional Requirements for 'Online Auction System':\n1. The system shall allow users to register and create accounts for bidding.\n2. The system shall allow users to browse and search for items available for auction.\n3. The system shall allow users to place bids on items they are interested in.\n4. The system shall notify users of the status of their bids and the auction results.\n5. The system shall allow sellers to list items for auction and set starting prices.\n6. The system shall allow sellers to monitor the progress of their auctions and view bids placed on their items.\n7. The system shall allow sellers to close auctions and finalize transactions with winning bidders.\n8. The system shall provide a secure payment gateway for users to make payments for won items.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Seller {\n  seller_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Item {\n  item_id <<key>>\n  seller_id <<foreign>>\n  item_name\n  description\n  starting_price\n  auction_status\n}\n\nentity Bid {\n  bid_id <<key>>\n  user_id <<foreign>>\n  item_id <<foreign>>\n  bid_amount\n  bid_date\n  bid_status\n}\n\nentity Transaction {\n  transaction_id <<key>>\n  user_id <<foreign>>\n  item_id <<foreign>>\n  transaction_date\n  payment_status\n}\n\nrelationship REGISTERS {\n}\nrelationship SELLS_ITEM {\n}\nrelationship PLACES_BID {\n}\nrelationship MAKES_TRANSACTION {\n}\n\nREGISTERS -1- User\nREGISTERS -1- Seller\n\nSELLS_ITEM -1- Seller\nSELLS_ITEM -N- Item\n\nPLACES_BID -1- User\nPLACES_BID -N- Bid\n\nMAKES_TRANSACTION -1- User\nMAKES_TRANSACTION -1- Transaction\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Volunteer Management System:\n1. The system shall allow volunteers to sign up for events.\n2. The system shall allow volunteers to view assigned tasks.\n3. The system shall track the participation hours of each volunteer.\n4. The system shall allow volunteers to update their availability for events.\n5. The system shall allow coordinators to assign tasks to volunteers.\n6. The system shall allow coordinators to track the participation of volunteers.\n7. The system shall allow event managers to schedule events in advance.\n8. The system shall allow event managers to approve volunteer rosters for events.\n9. The system shall allow event managers to monitor the success and effectiveness of events.\n10. The system shall generate reports on participation and event success for evaluation.",
        "output": "@startchen\n\nentity Volunteer {\n  volunteer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity EventCoordinator {\n  coordinator_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\n\nentity Task {\n  task_id <<key>>\n  volunteer_id <<foreign>>\n  event_id <<foreign>>\n  task_description\n  task_status\n}\n\nentity Event {\n  event_id <<key>>\n  coordinator_id <<foreign>>\n  event_date\n  event_time\n  location\n  status\n}\n\nentity ParticipationRecord {\n  record_id <<key>>\n  volunteer_id <<foreign>>\n  event_id <<foreign>>\n  participation_date\n  participation_hours\n}\n\nentity Report {\n  report_id <<key>>\n  coordinator_id <<foreign>>\n  event_id <<foreign>>\n  report_date\n  report_type\n  description\n}\n\nrelationship SIGNS_UP_FOR_EVENT {\n}\nrelationship MANAGES_TASK {\n}\nrelationship SCHEDULES_EVENT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship HAS_TASK {\n}\nrelationship RECORDS_PARTICIPATION {\n}\nrelationship DOCUMENTS_EVENT {\n}\n\nSIGNS_UP_FOR_EVENT -1- Volunteer\nSIGNS_UP_FOR_EVENT -N- Event\n\nMANAGES_TASK -1- Volunteer\nMANAGES_TASK -N- Task\n\nSCHEDULES_EVENT -1- EventCoordinator\nSCHEDULES_EVENT -N- Event\n\nGENERATES_REPORT -1- EventCoordinator\nGENERATES_REPORT -N- Report\n\nHAS_TASK -1- Event\nHAS_TASK -N- Task\n\nRECORDS_PARTICIPATION -1- Event\nRECORDS_PARTICIPATION -1- ParticipationRecord\n\nDOCUMENTS_EVENT -1- Event\nDOCUMENTS_EVENT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Hiring System at TechHire Solutions:\n1. The system shall allow candidates to submit applications including resumes and cover letters.\n2. The system shall scan resumes for relevant skills, experience, and qualifications.\n3. The system shall automatically shortlist candidates based on the scan results.\n4. The system shall allow recruiters to schedule interviews for shortlisted candidates.\n5. The system shall allow interviewers to provide feedback and ratings after each interview round.\n6. The system shall allow recruiters to select the most qualified candidates based on interview feedback.\n7. The system shall generate offer letters for selected candidates.\n8. The system shall track the overall hiring status across all stages of the recruitment cycle.",
        "output": "@startchen\n\nentity Candidate {\n  candidate_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  application_date\n}\n\nentity Interviewer {\n  interviewer_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\n\nentity JobApplication {\n  application_id <<key>>\n  candidate_id <<foreign>>\n  position\n  resume\n  cover_letter\n  application_status\n}\n\nentity InterviewRound {\n  round_id <<key>>\n  application_id <<foreign>>\n  interviewer_id <<foreign>>\n  round_date\n  round_type\n  feedback\n  rating\n}\n\nentity HiringDecision {\n  decision_id <<key>>\n  application_id <<foreign>>\n  decision_date\n  decision_status\n  offer_letter\n}\n\nentity HiringStatus {\n  status_id <<key>>\n  application_id <<foreign>>\n  interview_status\n  hiring_status\n}\n\nrelationship SUBMITS_APPLICATION {\n}\nrelationship CONDUCTS_INTERVIEW {\n}\nrelationship LOGS_FEEDBACK {\n}\nrelationship HAS_DECISION {\n}\nrelationship TRACKS_STATUS {\n}\n\nSUBMITS_APPLICATION -1- Candidate\nSUBMITS_APPLICATION -N- JobApplication\n\nCONDUCTS_INTERVIEW -1- Interviewer\nCONDUCTS_INTERVIEW -N- InterviewRound\n\nLOGS_FEEDBACK -1- InterviewRound\nLOGS_FEEDBACK -N- JobApplication\n\nHAS_DECISION -1- JobApplication\nHAS_DECISION -1- HiringDecision\n\nTRACKS_STATUS -1- JobApplication\nTRACKS_STATUS -1- HiringStatus\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for GitHub Universe 2023 Management System:\n1. The system shall allow participants to register for the event.\n2. The system shall allow participants to sign up for keynotes and workshops.\n3. The system shall manage sponsor onboarding and interactions.\n4. The system shall track sponsor branding during the event.\n5. The system shall manage the overall event schedule.\n6. The system shall send real-time updates to all users.\n7. The system shall allow participants to submit feedback on the sessions they attend.\n8. The system shall allow speakers to schedule and present technical talks.\n9. The system shall generate reports based on user feedback and event metrics.\n10. The system shall monitor event attendance.\n11. The system shall allow sponsors to submit sponsorship proposals.\n12. The system shall allow sponsors to review their benefits for sponsoring the event.",
        "output": "@startchen\n\nentity Sponsor {\n  sponsor_id <<key>>\n  name\n  email\n  password\n  phone\n  company\n  proposal\n  benefits\n  registration_date\n}\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\nentity Participant {\n  participant_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n  registration_status\n}\nentity Speaker {\n  speaker_id <<key>>\n  name\n  email\n  phone\n  topic\n  session_date\n  session_time\n}\nentity Event {\n  event_id <<key>>\n  organizer_id <<foreign>>\n  event_date\n  event_time\n  location\n  status\n}\nentity Feedback {\n  feedback_id <<key>>\n  participant_id <<foreign>>\n  event_id <<foreign>>\n  feedback_date\n  rating\n  comment\n}\nentity Notification {\n  notification_id <<key>>\n  event_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n}\nrelationship SUBMITS_PROPOSAL {\n}\nrelationship MANAGES_SPONSOR {\n}\nrelationship REGISTERS_FOR {\n}\nrelationship SCHEDULES_SESSION {\n}\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship SENDS_NOTIFICATION {\n}\n\nSponsor -1- SUBMITS_PROPOSAL \nSUBMITS_PROPOSAL -N- Event\nOrganizer -1- MANAGES_SPONSOR\nMANAGES_SPONSOR -N- Sponsor\nParticipant -1- REGISTERS_FOR\nREGISTERS_FOR -N- Event\nSpeaker -1- SCHEDULES_SESSION\nSCHEDULES_SESSION -N- Event\nParticipant -1- PROVIDES_FEEDBACK\nPROVIDES_FEEDBACK -N- Feedback\nEvent -1- SENDS_NOTIFICATION\nSENDS_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for University Course Registration System:\n1. The system shall allow students to search for available courses.\n2. The system shall allow students to add courses to their course list.\n3. The system shall allow students to register for the upcoming semester.\n4. The system shall allow students to drop courses if needed.\n5. The system shall allow students to view their academic history.\n6. The system shall allow professors to view the list of enrolled students.\n7. The system shall allow professors to assign grades to students.\n8. The system shall allow professors to provide feedback on assignments.",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\nentity Professor {\n  professor_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\nentity Course {\n  course_id <<key>>\n  professor_id <<foreign>>\n  course_name\n  course_code\n  department\n  semester\n}\nentity Enrollment {\n  enrollment_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  enrollment_date\n  enrollment_status\n}\nentity Assignment {\n  assignment_id <<key>>\n  course_id <<foreign>>\n  student_id <<foreign>>\n  assignment_title\n  due_date\n  submission_date\n  grade\n  feedback\n}\nentity Grade {\n  grade_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  grade_date\n  grade\n}\nentity AcademicHistory {\n  history_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  action_date\n  action_type\n  notes\n}\nrelationship REGISTERS_COURSE {\n}\nrelationship GRADES_COURSE {\n}\nrelationship TRACKS_HISTORY {\n}\nrelationship ENROLLS_IN {\n}\nrelationship TEACHES_COURSE {\n}\nrelationship COMPLETES_ASSIGNMENT {\n}\nrelationship GIVE_FEEDBACK {\n}\n\nStudent -1- REGISTERS_COURSE\nREGISTERS_COURSE -N- Enrollment\nProfessor -1- GRADES_COURSE\nGRADES_COURSE -N- Grade\nStudent -1- TRACKS_HISTORY\nTRACKS_HISTORY -N- AcademicHistory\nEnrollment -1- ENROLLS_IN\nENROLLS_IN -1- Course\nProfessor -1- TEACHES_COURSE\nTEACHES_COURSE -N- Course\nStudent -1- COMPLETES_ASSIGNMENT\nCOMPLETES_ASSIGNMENT -N- Assignment\nProfessor -1- GIVE_FEEDBACK\nGIVE_FEEDBACK -N- Assignment\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Social Media Platform:\n1. The system shall allow users to create and manage their profiles.\n2. The system shall allow users to post content, including text, images, and videos.\n3. The system shall allow users to interact with other users by commenting and liking posts.\n4. The system shall allow users to join and participate in group discussions.\n5. The system shall allow users to send private messages to each other.\n6. The system shall notify users about new activities on the platform, such as interactions with their posts.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Post {\n  post_id <<key>>\n  user_id <<foreign>>\n  post_date\n  content\n  likes\n  comments\n}\n\nentity Group {\n  group_id <<key>>\n  group_name\n  description\n  member_count\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  message_date\n  message_content\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n}\n\nrelationship CREATES_POST {\n}\nrelationship JOINS_GROUP {\n}\nrelationship SENDS_MESSAGE {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nCREATES_POST -1- User\nCREATES_POST -N- Post\n\nJOINS_GROUP -(1,N)- User\nJOINS_GROUP -(N,1)- Group\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Social Networking Platform (like Facebook):\n1. The system shall allow users to create personalized profiles.\n2. The system shall allow users to send and accept friend requests to build connections.\n3. The system shall allow users to share posts including text, photos, and videos.\n4. The system shall allow users to engage with posts through likes, comments, and reactions.\n5. The system shall allow users to send private messages and share media.\n6. The system shall notify users in real-time about interactions and new connections.\n7. The system shall allow business users to create and manage business pages.\n8. The system shall allow business users to manage targeted advertisements.\n9. The system shall allow moderators to monitor content and ensure it complies with community guidelines.\n10. The system shall allow administrators to manage platform-wide activities and enforce guidelines.\n",
       "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n}\nentity BusinessUser {\n  business_user_id <<key>>\n  business_name\n  business_type\n}\nentity Moderator {\n  moderator_id <<key>>\n  assigned_area\n}\nentity Administrator {\n  admin_id <<key>>\n  permissions\n}\nUser ->- d { BusinessUser, Moderator, Administrator }\n\nentity Post {\n  post_id <<key>>\n  user_id <<foreign>>\n  post_date\n  content\n  likes\n  comments\n}\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  message_date\n  message_content\n}\nentity Page {\n  page_id <<key>>\n  user_id <<foreign>>\n  page_name\n  description\n  followers\n}\nentity Advertisement {\n  ad_id <<key>>\n  business_user_id <<foreign>>\n  page_id <<foreign>>\n  ad_content\n  target_audience\n  ad_date\n  status\n}\n\nrelationship CREATES_POST {\n}\nrelationship SENDS_MESSAGE {\n}\nrelationship CREATES_PAGE {\n}\nrelationship MANAGES_ADVERTISEMENT {\n}\nrelationship BEFRIENDS {\n  friendship_date\n  status\n}\nrelationship MODERATE_POSTS {\n  moderation_date\n  action_taken\n  notes\n}\n\nUser -1- CREATES_POST\nCREATES_POST -N- Post\nUser -1- BEFRIENDS\nBEFRIENDS -N- User\nUser -1- SENDS_MESSAGE\nSENDS_MESSAGE -N- Message\nBusinessUser -1- CREATES_PAGE\nCREATES_PAGE -N- Page\nBusinessUser -1- MANAGES_ADVERTISEMENT\nMANAGES_ADVERTISEMENT -N- Advertisement\nModerator -1- MODERATE_POSTS\nMODERATE_POSTS -N- Post\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Blood Donation App:\n1. The system shall allow users to register as blood donors.\n2. The system shall allow recipients to find donors based on blood type and location.\n3. The system shall allow users to post blood requests in urgent situations.\n4. The system shall notify donors of blood requests.\n5. The system shall allow recipients to locate nearby hospitals.\n6. The system shall allow blood banks to organize blood donation drives.\n7. The system shall allow blood banks to track blood availability.\n8. The system shall allow donors to donate blood.\n",
        "output": "@startchen\n\nentity Donor {\n  donor_id <<key>>\n  name\n  email\n  password\n  phone\n  blood_type\n  location\n  registration_date\n}\n\nentity Recipient {\n  recipient_id <<key>>\n  name\n  email\n  password\n  phone\n  blood_type\n  location\n  request_date\n}\n\nentity BloodBank {\n  bank_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  registration_date\n}\n\nentity DonationDrive {\n  drive_id <<key>>\n  bank_id <<foreign>>\n  drive_date\n  drive_location\n  drive_status\n}\n\nentity BloodRequest {\n  request_id <<key>>\n  recipient_id <<foreign>>\n  donor_id <<foreign>>\n  request_date\n  request_status\n}\n\nentity BloodAvailability {\n  availability_id <<key>>\n  bank_id <<foreign>>\n  blood_type\n  quantity\n  last_updated\n}\n\nrelationship REGISTERS_AS_DONOR {\n}\nrelationship FINDS_DONOR {\n}\nrelationship POSTS_REQUEST {\n}\nrelationship ORGANIZES_DRIVE {\n}\nrelationship TRACKS_AVAILABILITY {\n}\n\nREGISTERS_AS_DONOR -1- Donor\nREGISTERS_AS_DONOR -N- BloodBank\n\nFINDS_DONOR -1- Recipient\nFINDS_DONOR -N- Donor\n\nPOSTS_REQUEST -1- Recipient\nPOSTS_REQUEST -N- BloodRequest\n\nORGANIZES_DRIVE -1- BloodBank\nORGANIZES_DRIVE -N- DonationDrive\n\nTRACKS_AVAILABILITY -1- BloodBank\nTRACKS_AVAILABILITY -N- BloodAvailability\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Ride-Sharing Platform (like Uber):\n1. The system shall allow passengers to request rides to specific destinations.\n2. The system shall allow passengers to track the location of their rides in real-time.\n3. The system shall allow passengers to pay for the service through the platform.\n4. The system shall allow passengers to rate their drivers after the ride.\n5. The system shall allow drivers to accept ride requests.\n6. The system shall allow drivers to navigate to the passenger's location and destination.\n7. The system shall allow drivers to provide safe and efficient rides to passengers.\n8. The system shall provide customer support features for passengers and drivers.\n9. The system shall allow customer support to assist users in resolving issues.\n",
        "output": "@startchen\n\nentity Passenger {\n  passenger_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Driver {\n  driver_id <<key>>\n  name\n  email\n  password\n  phone\n  vehicle\n  license_plate\n}\n\nentity Ride {\n  ride_id <<key>>\n  passenger_id <<foreign>>\n  driver_id <<foreign>>\n  ride_date\n  pickup_location\n  dropoff_location\n  fare\n  rating\n}\n\nentity Payment {\n  payment_id <<key>>\n  passenger_id <<foreign>>\n  driver_id <<foreign>>\n  ride_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_status\n}\n\nentity SupportTicket {\n  ticket_id <<key>>\n  passenger_id <<foreign>>\n  driver_id <<foreign>>\n  ticket_date\n  issue\n  status\n}\n\nrelationship REQUESTS_RIDE {\n}\nrelationship ACCEPTS_RIDE {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship RAISES_TICKET {\n}\n\nREQUESTS_RIDE -1- Passenger\nREQUESTS_RIDE -N- Ride\n\nACCEPTS_RIDE -1- Driver\nACCEPTS_RIDE -N- Ride\n\nMAKES_PAYMENT -1- Passenger\nMAKES_PAYMENT -N- Payment\n\nRAISES_TICKET -1- Passenger\nRAISES_TICKET -N- SupportTicket\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Food Delivery Platform (like DoorDash):\n1. The system shall allow customers to browse restaurant menus.\n2. The system shall allow customers to place orders for delivery or pickup.\n3. The system shall allow customers to track the status of their delivery.\n4. The system shall allow restaurants to receive customer orders.\n5. The system shall allow restaurants to prepare food after receiving orders.\n6. The system shall allow restaurants to notify customers when their orders are ready for pickup or delivery.\n7. The system shall allow delivery drivers to accept delivery requests.\n8. The system shall allow delivery drivers to pick up orders from restaurants.\n9. The system shall allow delivery drivers to deliver orders to customers.\n10. The system shall provide customer support features to resolve issues.\n11. The system shall allow customer support to provide assistance to users.\n",
       "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Restaurant {\n  restaurant_id <<key>>\n  name\n  email\n  password\n  phone\n  cuisine\n  location\n}\n\nentity DeliveryDriver {\n  driver_id <<key>>\n  name\n  email\n  password\n  phone\n  vehicle\n  license_plate\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  restaurant_id <<foreign>>\n  driver_id <<foreign>>\n  order_date\n  delivery_date\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  customer_id <<foreign>>\n  restaurant_id <<foreign>>\n  order_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_status\n}\n\nentity SupportTicket {\n  ticket_id <<key>>\n  customer_id <<foreign>>\n  restaurant_id <<foreign>>\n  ticket_date\n  issue\n  status\n}\n\nrelationship PLACES_ORDER {\n}\nrelationship RECEIVES_ORDER {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship HAS {\n}\nrelationship RAISES_TICKET {\n}\nrelationship DELIVERS_ORDER {\n}\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nRECEIVES_ORDER -1- Restaurant\nRECEIVES_ORDER -N- Order\n\nDELIVERS_ORDER -1- DeliveryDriver\nDELIVERS_ORDER -N- Order\n\nMAKES_PAYMENT -1- Customer\nMAKES_PAYMENT -N- Payment\n\nHAS -1- Order\nHAS -1- Payment\n\nRAISES_TICKET -1- Customer\nRAISES_TICKET -N- SupportTicket\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Job Finder App (SheWorks):\n1. The system shall allow job seekers to create profiles.\n2. The system shall allow job seekers to upload resumes.\n3. The system shall allow job seekers to search for jobs that align with their preferences (e.g., flexible hours, remote work).\n4. The system shall allow job seekers to apply for jobs through the platform.\n5. The system shall notify users of job updates, interview calls, and feedback.\n6. The system shall allow job seekers to schedule interviews with employers.\n7. The system shall offer career development workshops for job seekers.\n8. The system shall allow job seekers to participate in networking events.\n9. The system shall allow employers to shortlist candidates based on their profiles and resumes.\n10. The system shall allow employers to post job vacancies.\n11. The system shall allow mentors to offer mentorship to job seekers.\n12. The system shall recommend job opportunities to job seekers based on their profiles and resumes.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\nentity Employer {\n  employer_id <<key>>\n  name\n  email\n  password\n  phone\n  company\n}\nentity JobListing {\n  job_id <<key>>\n  employer_id <<foreign>>\n  job_title\n  job_description\n  job_type\n  location\n  salary\n}\nentity Application {\n  application_id <<key>>\n  user_id <<foreign>>\n  job_id <<foreign>>\n  application_date\n  application_status\n}\nentity Interview {\n  interview_id <<key>>\n  application_id <<foreign>>\n  employer_id <<foreign>>\n  user_id <<foreign>>\n  interview_date\n  interview_status\n}\nentity Event {\n  event_id <<key>>\n  event_date\n  event_type\n  event_description\n}\n\nrelationship POSTS_JOB {\n}\nrelationship APPLIES_FOR_JOB {\n}\nrelationship SCHEDULES_INTERVIEW {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship ATTENDS_EVENT {\n}\n\nEmployer -1- POSTS_JOB\nPOSTS_JOB -N- JobListing\nUser -1- APPLIES_FOR_JOB\nAPPLIES_FOR_JOB -N- Application\nApplication -N- ASSOCIATED_WITH\nASSOCIATED_WITH -1- Interview\nEmployer -1- SCHEDULES_INTERVIEW\nSCHEDULES_INTERVIEW -N- Interview\nUser -1- ATTENDS_EVENT\nATTENDS_EVENT -N- Event\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Hackathon Management Web App:\n1. The system shall allow participants to register for the hackathon event.\n2. The system shall allow participants to form teams for the event.\n3. The system shall allow participants to submit their projects.\n4. The system shall provide a chat feature for team communication.\n5. The system shall notify participants about event updates and important announcements.\n6. The system shall allow participants to view the event schedule.\n7. The system shall allow mentors to provide guidance through the platform.\n8. The system shall allow mentors to review team project progress.\n9. The system shall allow judges to evaluate projects.\n10. The system shall allow judges to score submissions.\n11. The system shall allow organizers to manage judging rounds.\n12. The system shall allow sponsors to submit sponsorship materials.\n13. The system shall allow sponsors to track the visibility of their sponsorships.\n14. The system shall allow organizers to coordinate event announcements.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Participant {\n  team_id <<foreign>>\n}\n\nentity Mentor {\n  expertise\n  availability\n}\n\nentity Organizer {\n  department\n}\n\nentity Judge {\n  expertise\n  availability\n}\n\nentity Sponsor {\n  company\n  contribution\n}\n\nUser ->- d { Participant, Mentor, Organizer, Judge, Sponsor }\n\nentity Team {\n  team_id <<key>>\n  project_id <<foreign>>\n  team_name\n}\n\nentity Project {\n  project_id <<key>>\n  team_id <<foreign>>\n  project_name\n  project_description\n  project_status\n  submission_date\n}\n\nentity Schedule {\n  schedule_id <<key>>\n  event_name\n  event_date\n  event_type\n  event_description\n}\n\nentity ChatRoom {\n  chatroom_id <<key>>\n  room_name\n  created_date\n}\n\nentity Message {\n  message_id <<key>>\n  chatroom_id <<foreign>>\n  user_id <<foreign>>\n  message_date\n  message_content\n}\n\nentity Notification {\n  notification_id <<key>>\n  recipient_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n}\n\nrelationship REGISTERS_FOR_EVENT {\n}\nrelationship FORMS_TEAM {\n}\nrelationship SUBMITS_PROJECT {\n}\nrelationship OFFERS_GUIDANCE {\n}\nrelationship MANAGES_SCHEDULE {\n}\nrelationship EVALUATES_PROJECT {\n}\nrelationship SUBMITS_BRANDING {\n}\nrelationship PARTICIPATES_IN_CHAT {\n}\nrelationship SENDS_MESSAGE {\n}\nrelationship MESSAGE_IN_CHATROOM {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nREGISTERS_FOR_EVENT -1- Participant\nREGISTERS_FOR_EVENT -N- Schedule\n\nFORMS_TEAM -N- Participant\nFORMS_TEAM -1- Team\n\nSUBMITS_PROJECT -1- Team\nSUBMITS_PROJECT -1- Project\n\nOFFERS_GUIDANCE -1- Mentor\nOFFERS_GUIDANCE -N- Project\n\nMANAGES_SCHEDULE -1- Organizer\nMANAGES_SCHEDULE -N- Schedule\n\nEVALUATES_PROJECT -1- Judge\nEVALUATES_PROJECT -N- Project\n\nSUBMITS_BRANDING -1- Sponsor\nSUBMITS_BRANDING -N- Team\n\nPARTICIPATES_IN_CHAT -1- User\nPARTICIPATES_IN_CHAT -N- ChatRoom\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\nMESSAGE_IN_CHATROOM -1- ChatRoom\nMESSAGE_IN_CHATROOM -N- Message\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Seminar Management System:\n1. The system shall allow audience members to register for the seminar.\n2. The system shall allow audience members to book seats for sessions.\n3. The system shall notify audience members about session schedules and updates.\n4. The system shall allow audience members to view the seminar session schedule.\n5. The system shall provide a feedback mechanism for audience members to evaluate sessions.\n6. The system shall allow organizers to manage auditorium allocation for sessions.\n7. The system shall allow organizers to manage speaker session content.\n8. The system shall allow organizers to invite guest speakers to the seminar.\n9. The system shall allow organizers to track audience attendance.\n10. The system shall allow organizers to coordinate event timings and session schedules.\n11. The system shall allow sponsors to promote their brands through the platform.\n12. The system shall allow guest speakers to manage their seminar session content.\n",
        "output": "@startchen\n\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Speaker {\n  speaker_id <<key>>\n  name\n  email\n  password\n  phone\n  expertise\n  session_date\n  session_time\n}\n\nentity AudienceMember {\n  member_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Sponsor {\n  sponsor_id <<key>>\n  name\n  email\n  password\n  phone\n  company\n  registration_date\n}\n\nentity Session {\n  session_id <<key>>\n  organizer_id <<foreign>>\n  speaker_id <<foreign>>\n  session_date\n  session_time\n  session_topic\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  member_id <<foreign>>\n  session_id <<foreign>>\n  feedback_date\n  rating\n  comment\n}\n\nentity Notification {\n  notification_id <<key>>\n  recipient_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n}\n\nrelationship SCHEDULES_EVENT {\n}\nrelationship SPEAKS_ON {\n}\nrelationship REGISTERS_FOR_SESSION {\n}\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship NOTIFIES {\n}\nrelationship SPONSORS {\n}\n\nSCHEDULES_EVENT -1- Organizer\nSCHEDULES_EVENT -N- Session\n\nSPEAKS_ON -1- Speaker\nSPEAKS_ON -N- Session\n\nREGISTERS_FOR_SESSION -1- AudienceMember\nREGISTERS_FOR_SESSION -N- Session\n\nSPONSORS -1- Sponsor\nSPONSORS -N- Session\n\nPROVIDES_FEEDBACK -1- AudienceMember\nPROVIDES_FEEDBACK -N- Feedback\n\nNOTIFIES -1- Organizer\nNOTIFIES -N- Notification\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Project Management System:\n1. The system shall allow project managers to create project plans.\n2. The system shall allow project managers to assign tasks to team members.\n3. The system shall allow project managers to track project progress.\n4. The system shall allow team members to view their assigned tasks.\n5. The system shall allow team members to update the status of their tasks.\n6. The system shall provide a communication feature for team members to interact with each other.\n7. The system shall allow project managers to generate project reports.\n8. The system shall allow project managers to monitor project timelines.\n9. The system shall help project managers identify potential risks.\n10. The system shall allow stakeholders to access project information.\n11. The system shall allow stakeholders to review progress reports.\n12. The system shall allow stakeholders to provide feedback on project deliverables.\n",
        "output": "@startchen\n\nentity ProjectManager {\n  manager_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity TeamMember {\n  member_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity ProjectPlan {\n  plan_id <<key>>\n  manager_id <<foreign>>\n  plan_name\n  plan_description\n  plan_status\n}\n\nentity Task {\n  task_id <<key>>\n  plan_id <<foreign>>\n  member_id <<foreign>>\n  task_name\n  task_description\n  task_status\n}\n\nentity Report {\n  report_id <<key>>\n  plan_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nentity Stakeholder {\n  stakeholder_id <<key>>\n  name\n  email\n  phone\n  department\n  registration_date\n}\n\nrelationship CREATES_PLAN {\n}\nrelationship ASSIGNS_TASK {\n}\nrelationship COMPLETES_TASK {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship REVIEWS_REPORT {\n}\n\nCREATES_PLAN -1- ProjectManager\nCREATES_PLAN -N- ProjectPlan\n\nASSIGNS_TASK -1- ProjectManager\nASSIGNS_TASK -N- Task\n\nCOMPLETES_TASK -1- TeamMember\nCOMPLETES_TASK -N- Task\n\nGENERATES_REPORT -1- ProjectPlan\nGENERATES_REPORT -N- Report\n\nREVIEWS_REPORT -1- Stakeholder\nREVIEWS_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Customer Relationship Management (CRM) System:\n1. The system shall allow sales teams to track customer leads.\n2. The system shall allow sales teams to manage customer accounts.\n3. The system shall allow sales teams to analyze sales data.\n4. The system shall allow marketing teams to create targeted campaigns.\n5. The system shall allow marketing teams to track customer engagement.\n6. The system shall allow marketing teams to generate reports on campaign performance.\n7. The system shall allow customer support teams to log customer inquiries.\n8. The system shall allow customer support teams to resolve customer issues.\n9. The system shall allow customer support teams to provide feedback on customer satisfaction.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\nentity SalesTeam {\n  team_id <<key>>\n}\nentity MarketingTeam {\n  team_id <<key>>\n}\nentity SupportTeam {\n  team_id <<key>>\n}\nUser ->- d { SalesTeam, MarketingTeam, SupportTeam }\n\nentity Lead {\n  lead_id <<key>>\n  team_id <<foreign>>\n  lead_name\n  lead_source\n}\nentity Campaign {\n  campaign_id <<key>>\n  team_id <<foreign>>\n  campaign_name\n  campaign_type\n}\nentity Inquiry {\n  inquiry_id <<key>>\n  customer_id <<foreign>>\n  inquiry_date\n  inquiry_type\n  inquiry_status\n}\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  phone\n}\nrelationship TRACKS_LEAD {\n}\nrelationship CREATES_CAMPAIGN {\n}\nrelationship HANDLES_INQUIRY {\n}\nrelationship MAKES_INQUIRY {\n}\nrelationship MANAGES_ACCOUNT {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship GENERATES_REPORT {\n}\n\nSalesTeam -1- TRACKS_LEAD\nTRACKS_LEAD -N- Lead\nMarketingTeam -1- CREATES_CAMPAIGN\nCREATES_CAMPAIGN -N- Campaign\nCustomer -1- MAKES_INQUIRY\nMAKES_INQUIRY -N- Inquiry\nSupportTeam -1- HANDLES_INQUIRY\nHANDLES_INQUIRY -N- Inquiry\nSalesTeam -1- MANAGES_ACCOUNT\nMANAGES_ACCOUNT -N- Customer\nLead -1- ASSOCIATED_WITH\nASSOCIATED_WITH -1- Customer\nSalesTeam -1- GENERATES_REPORT\nGENERATES_REPORT -N- Campaign\nMarketingTeam -1- GENERATES_REPORT\nGENERATES_REPORT -N- Campaign\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Content Management System (CMS):\n1. The system shall allow users to create digital content.\n2. The system shall allow users to edit existing content.\n3. The system shall allow users to collaborate on content creation.\n4. The system shall allow users to upload media files (e.g., images, videos).\n5. The system shall allow users to organize content into categories.\n6. The system shall allow users to schedule content publication.\n7. The system shall allow administrators to approve content before publication.\n8. The system shall provide version control for content management.\n9. The system shall provide analytics to analyze content performance.\n10. The system shall allow administrators to manage user permissions.\n11. The system shall allow administrators to monitor content performance.\n12. The system shall ensure the security of the platform.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Administrator {\n  admin_id <<key>>\n  user_id <<foreign>>\n  role\n  permissions\n}\n\nentity Content {\n  content_id <<key>>\n  user_id <<foreign>>\n  content_title\n  content_type\n  approval_status\n  version_number\n  category\n  publication_date\n  schedule_date\n}\n\nentity MediaFile {\n  file_id <<key>>\n  content_id <<foreign>>\n  file_name\n  file_type\n  file_size\n  upload_date\n}\n\nentity Analytics {\n  analytics_id <<key>>\n  content_id <<foreign>>\n  analytics_date\n  analytics_type\n  analytics_data\n}\n\nrelationship CREATES_CONTENT {\n}\nrelationship CONTAINS_MEDIA {\n}\nrelationship TRACKS_ANALYTICS {\n}\nrelationship APPROVES_CONTENT {\n}\n\nCREATES_CONTENT -1- User\nCREATES_CONTENT -N- Content\n\nCONTAINS_MEDIA -(1,1)- Content\nCONTAINS_MEDIA -(0,N)- MediaFile\n\nTRACKS_ANALYTICS -1- Content\nTRACKS_ANALYTICS -N- Analytics\n\nAPPROVES_CONTENT -1- Administrator\nAPPROVES_CONTENT -N- Content\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Learning Management System (LMS):\n1. The system shall allow instructors to create courses.\n2. The system shall allow instructors to upload learning materials.\n3. The system shall allow instructors to assess student performance.\n4. The system shall allow students to enroll in courses.\n5. The system shall allow students to access course content.\n6. The system shall allow students to submit assignments.\n7. The system shall allow students to take quizzes.\n8. The system shall provide discussion forums for students to participate in course discussions.\n9. The system shall allow instructors to grade assignments.\n10. The system shall allow administrators to manage user accounts.\n11. The system shall allow administrators to monitor course enrollment.\n12. The system shall allow administrators to generate reports on student progress.\n",
         "output": "@startchen\n\nentity Instructor {\n  instructor_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\nentity Course {\n  course_id <<key>>\n  instructor_id <<foreign>>\n  course_name\n  course_description\n  start_date\n  end_date\n}\nentity Assignment {\n  assignment_id <<key>>\n  course_id <<foreign>>\n  assignment_title\n  due_date\n  submission_date\n  grade\n}\nentity Quiz {\n  quiz_id <<key>>\n  course_id <<foreign>>\n  quiz_title\n  quiz_date\n  quiz_status\n}\nentity Discussion {\n  discussion_id <<key>>\n  course_id <<foreign>>\n  discussion_date\n  discussion_content\n}\nentity Report {\n  report_id <<key>>\n  course_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship CREATES_COURSE {\n}\nrelationship ENROLLS_IN {\n  enrollment_date\n  enrollment_status\n}\nrelationship SUBMITS_ASSIGNMENT {\n}\nrelationship TAKES_QUIZ {\n}\nrelationship PARTICIPATES_IN{\n}\nrelationship ASSIGNS_GRADE {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RELATES_TO_COURSE {\n}\nrelationship TEACHES_COURSE {\n}\n\nAdministrator -1-CREATES_COURSE \nCREATES_COURSE -N- Course\nStudent -1- ENROLLS_IN\nENROLLS_IN -N- Course\nInstructor -1- TEACHES_COURSE\nTEACHES_COURSE -N- Course\nCourse -1- RELATES_TO_COURSE\nRELATES_TO_COURSE -N- Assignment\nRELATES_TO_COURSE -N- Quiz\nStudent -1- SUBMITS_ASSIGNMENT\nSUBMITS_ASSIGNMENT -N- Assignment\nStudent -1- TAKES_QUIZ\nTAKES_QUIZ -N- Quiz\nStudent -1- PARTICIPATES_IN\nPARTICIPATES_IN -N- Discussion\nInstructor -1- ASSIGNS_GRADE\nASSIGNS_GRADE -N- Assignment\nCourse -N- GENERATES_REPORT\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Project Tracking System:\n1. The system shall allow team members to create tasks.\n2. The system shall allow team members to assign tasks to other team members.\n3. The system shall allow team members to set deadlines for tasks.\n4. The system shall allow team members to update task statuses.\n5. The system shall allow team members to track progress on tasks.\n6. The system shall provide communication features for team members to collaborate.\n7. The system shall generate reports on project progress.\n8. The system shall allow project managers to monitor project timelines.\n9. The system shall help project managers identify bottlenecks in the project.\n10. The system shall allow project managers to oversee project progress.\n11. The system shall allow project managers to allocate resources for tasks.\n12. The system shall help project managers ensure that project milestones are met.\n",
        "output": "@startchen\n\nentity TeamMember {\n  member_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity ProjectManager {\n  manager_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Task {\n  task_id <<key>>\n  manager_id <<foreign>>\n  member_id <<foreign>>\n  task_name\n  task_description\n  task_status\n  deadline\n}\n\nentity Report {\n  report_id <<key>>\n  manager_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship ASSIGNS_TASK {\n}\nrelationship UPDATES_TASK {\n}\nrelationship GENERATES_REPORT {\n}\n\nASSIGNS_TASK -1- ProjectManager\nASSIGNS_TASK -N- Task\n\nUPDATES_TASK -1- TeamMember\nUPDATES_TASK -N- Task\n\nGENERATES_REPORT -1- ProjectManager\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Task Management System:\n1. The system shall allow users to create tasks.\n2. The system shall allow users to set priorities for tasks.\n3. The system shall allow users to set deadlines for task completion.\n4. The system shall allow users to update the status of tasks.\n5. The system shall allow users to track progress on tasks.\n6. The system shall allow users to categorize tasks based on different criteria.\n7. The system shall generate task lists for users.\n8. The system shall allow users to set reminders for tasks.\n9. The system shall allow users to organize tasks into projects.\n10. The system shall allow users to share tasks with collaborators.\n11. The system shall allow users to assign tasks to team members.\n12. The system shall notify users about task updates and deadlines.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Team {\n  team_id <<key>>\n  team_name\n  creation_date\n}\n\nentity Task {\n  task_id <<key>>\n  assigned_to_id <<foreign>>\n  assigned_to_type\n  task_name\n  description\n  priority\n  status\n  deadline\n  category\n}\n\nentity Reminder {\n  reminder_id <<key>>\n  task_id <<foreign>>\n  reminder_date\n  reminder_time\n  reminder_message\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  task_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n}\n\nrelationship MANAGES_TASK {\n}\nrelationship SETS_REMINDER {\n}\nrelationship SENDS_NOTIFICATION {\n}\nrelationship BELONGS_TO {\n}\nrelationship COLLABORATES_WITH {\n}\n\nBELONGS_TO -(1,N)- User\nBELONGS_TO -(N,1)- Team\n\nMANAGES_TASK -1- Team\nMANAGES_TASK -N- Task\n\nSETS_REMINDER -1- User\nSETS_REMINDER -N- Reminder\n\nSENDS_NOTIFICATION -1- Task\nSENDS_NOTIFICATION -N- Notification\n\nCOLLABORATES_WITH -1- User\nCOLLABORATES_WITH -N- User\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Bug Tracking System:\n1. The system shall allow developers to log software bugs.\n2. The system shall allow developers to assign bugs to team members.\n3. The system shall allow developers to track the status of bug fixes.\n4. The system shall allow developers to update the status of bugs.\n5. The system shall allow developers to prioritize bugs based on severity.\n6. The system shall provide communication features for developers to collaborate on bug resolution.\n7. The system shall generate bug reports for tracking bug statistics.\n8. The system shall allow project managers to monitor bug resolution timelines.\n9. The system shall help project managers identify recurring bugs in the software.\n10. The system shall allow project managers to oversee the progress of bug resolution.\n11. The system shall allow project managers to allocate resources for fixing bugs.\n12. The system shall help project managers ensure software quality standards are met.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Developer {\n}\n\nentity TeamMember {\n}\n\nentity ProjectManager {\n}\n\nUser ->- o { Developer, TeamMember, ProjectManager }\n\nentity Team {\n  team_id <<key>>\n  team_name\n  created_date\n}\n\nentity Bug {\n  bug_id <<key>>\n  assigned_to_id <<foreign>>\n  reported_by_id <<foreign>>\n  team_id <<foreign>>\n  bug_name\n  bug_description\n  bug_status\n  priority\n  reported_date\n  resolution_date\n}\n\nentity Report {\n  report_id <<key>>\n  manager_id <<foreign>>\n  bug_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  recipient_id <<foreign>>\n  bug_id <<foreign>>\n  message_content\n  message_date\n}\n\nrelationship BELONGS_TO_TEAM {\n}\nrelationship LOGS_BUG {\n}\nrelationship ASSIGNS_BUG {\n}\nrelationship UPDATES_BUG {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship SENDS_MESSAGE {\n}\n\nBELONGS_TO_TEAM -N- TeamMember\nBELONGS_TO_TEAM -1- Team\n\nLOGS_BUG -1- Developer\nLOGS_BUG -N- Bug\n\nASSIGNS_BUG -1- ProjectManager\nASSIGNS_BUG -N- Bug\n\nUPDATES_BUG -1- TeamMember\nUPDATES_BUG -N- Bug\n\nGENERATES_REPORT -1- ProjectManager\nGENERATES_REPORT -N- Report\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Customer Support System:\n1. The system shall allow customer support agents to log customer inquiries.\n2. The system shall allow customer support agents to assign tickets to support agents.\n3. The system shall allow customer support agents to track ticket resolutions.\n4. The system shall allow customer support agents to update ticket statuses.\n5. The system shall allow customer support agents to prioritize tickets based on urgency.\n6. The system shall provide communication features for customer support agents to communicate with customers about issue resolutions.\n7. The system shall generate support reports for tracking customer inquiries and resolutions.\n8. The system shall allow managers to monitor ticket resolution timelines.\n9. The system shall help managers identify recurring customer issues.\n10. The system shall allow managers to oversee the progress of ticket resolutions.\n11. The system shall allow managers to allocate resources for resolving customer issues.\n12. The system shall help managers ensure customer satisfaction standards are met.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Customer {\n}\n\nentity SupportAgent {\n}\n\nentity Manager {\n}\n\nUser ->- d { Customer, SupportAgent, Manager }\n\nentity Ticket {\n  ticket_id <<key>>\n  customer_id <<foreign>>\n  assigned_to_id <<foreign>>\n  issue_title\n  issue_description\n  priority\n  status\n  creation_date\n  resolution_date\n}\n\nentity Message {\n  message_id <<key>>\n  ticket_id <<foreign>>\n  sender_id <<foreign>>\n  recipient_id <<foreign>>\n  message_content\n  message_date\n}\n\nentity Report {\n  report_id <<key>>\n  manager_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship CREATES_TICKET {\n}\nrelationship ASSIGNS_TICKET {\n}\nrelationship UPDATES_TICKET {\n}\nrelationship COMMUNICATES_ON_TICKET {\n}\nrelationship GENERATES_REPORT {\n}\n\nCREATES_TICKET -1- Customer\nCREATES_TICKET -N- Ticket\n\nASSIGNS_TICKET -1- Manager\nASSIGNS_TICKET -N- Ticket\n\nUPDATES_TICKET -1- SupportAgent\nUPDATES_TICKET -N- Ticket\n\nCOMMUNICATES_ON_TICKET -1- User\nCOMMUNICATES_ON_TICKET -N- Message\n\nGENERATES_REPORT -1- Manager\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Help Desk System:\n1. The system shall allow users to log help desk tickets.\n2. The system shall allow support agents to assign tickets to agents.\n3. The system shall allow users and support agents to track ticket resolutions.\n4. The system shall allow support agents to update ticket statuses.\n5. The system shall allow support agents to prioritize tickets based on urgency.\n6. The system shall provide communication features for support agents to communicate with users regarding issue resolutions.\n7. The system shall generate help desk reports for tracking ticket statistics.\n8. The system shall allow managers to monitor ticket resolution timelines.\n9. The system shall help managers identify recurring technical issues.\n10. The system shall allow managers to oversee the progress of ticket resolutions.\n11. The system shall allow managers to allocate resources for resolving tickets.\n12. The system shall help managers ensure that service level agreements are met.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Customer {\n}\n\nentity SupportAgent {\n}\n\nentity Manager {\n}\n\nUser ->- d { Customer, SupportAgent, Manager }\n\nentity Ticket {\n  ticket_id <<key>>\n  customer_id <<foreign>>\n  assigned_to_id <<foreign>>\n  issue_title\n  issue_description\n  priority\n  status\n  creation_date\n  resolution_date\n}\n\nentity Message {\n  message_id <<key>>\n  ticket_id <<foreign>>\n  sender_id <<foreign>>\n  recipient_id <<foreign>>\n  message_content\n  message_date\n}\n\nentity Report {\n  report_id <<key>>\n  manager_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship LOGS_TICKET {\n}\nrelationship ASSIGNS_TICKET {\n}\nrelationship UPDATES_TICKET {\n}\nrelationship COMMUNICATES_ON_TICKET {\n}\nrelationship GENERATES_REPORT {\n}\n\nLOGS_TICKET -1- Customer\nLOGS_TICKET -N- Ticket\n\nASSIGNS_TICKET -1- Manager\nASSIGNS_TICKET -N- Ticket\n\nUPDATES_TICKET -1- SupportAgent\nUPDATES_TICKET -N- Ticket\n\nCOMMUNICATES_ON_TICKET -1- User\nCOMMUNICATES_ON_TICKET -N- Message\n\nGENERATES_REPORT -1- Manager\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Library Management System:\n1. The system shall allow librarians to catalog books.\n2. The system shall allow librarians to manage patron accounts.\n3. The system shall allow librarians to track book loans.\n4. The system shall allow patrons to search for books in the library catalog.\n5. The system shall allow patrons to check out books from the library.\n6. The system shall allow patrons to renew book loans.\n7. The system shall generate library reports for tracking book circulation and other statistics.\n8. The system shall allow librarians to monitor book circulation.\n9. The system shall help librarians identify overdue books.\n10. The system shall allow administrators to oversee library operations.\n11. The system shall allow administrators to allocate resources for the library.\n12. The system shall help administrators ensure that library policies are enforced.\n",
        "output": "@startchen\n\nentity Librarian {\n  librarian_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Patron {\n  patron_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Book {\n  book_id <<key>>\n  librarian_id <<foreign>>\n  book_title\n  author\n  genre\n  publication_date\n  availability\n}\n\nentity Loan {\n  loan_id <<key>>\n  patron_id <<foreign>>\n  book_id <<foreign>>\n  loan_date\n  due_date\n  return_date\n  status\n}\n\nentity Report {\n  report_id <<key>>\n  admin_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship CATALOGS_BOOK {\n}\nrelationship CHECKS_OUT_BOOK {\n}\nrelationship RENEWS_LOAN {\n}\nrelationship MANAGES_ACCOUNT {\n}\nrelationship TRACKS_LOAN {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship REPORTS_ON {\n}\n\nCATALOGS_BOOK -1- Librarian\nCATALOGS_BOOK -N- Book\n\nCHECKS_OUT_BOOK -1- Patron\nCHECKS_OUT_BOOK -N- Book\n\nRENEWS_LOAN -1- Patron\nRENEWS_LOAN -N- Loan\n\nMANAGES_ACCOUNT -1- Librarian\nMANAGES_ACCOUNT -N- Patron\n\nTRACKS_LOAN -1- Librarian\nTRACKS_LOAN -N- Loan\n\nGENERATES_REPORT -1- Administrator\nGENERATES_REPORT -N- Report\n\nREPORTS_ON -1- Report\nREPORTS_ON -N- Book\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Hotel Management System:\n1. The system shall allow hotel staff to create guest reservations.\n2. The system shall allow hotel staff to assign rooms to guests.\n3. The system shall allow hotel staff to track guest check-ins and check-outs.\n4. The system shall allow guests to book rooms.\n5. The system shall allow guests to request hotel services.\n6. The system shall allow guests to provide feedback on their stay.\n7. The system shall generate reports for hotel staff on hotel operations.\n8. The system shall allow hotel staff to monitor room availability.\n9. The system shall help hotel staff identify guest preferences.\n10. The system shall allow managers to oversee hotel operations.\n11. The system shall allow managers to allocate resources effectively.\n12. The system shall help managers ensure guest satisfaction.\n",
        "output": "@startchen\n\nentity Guest {\n  guest_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  guest_status\n}\n\nentity Room {\n  room_id <<key>>\n  room_number\n  room_type\n  room_rate\n  availability_status\n  room_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  guest_id <<foreign>>\n  room_id <<foreign>>\n  check_in_date\n  check_out_date\n  booking_status\n}\n\nentity RoomService {\n  service_id <<key>>\n  booking_id <<foreign>>\n  service_date\n  service_description\n  service_charge\n  service_status\n}\n\nentity Invoice {\n  invoice_id <<key>>\n  booking_id <<foreign>>\n  issue_date\n  total_amount\n  payment_status\n  invoice_status\n}\n\nentity Staff {\n  staff_id <<key>>\n  name\n  role\n  email\n  password\n  phone\n  staff_status\n}\n\nrelationship ALLOCATES_ROOM {\n}\nrelationship RESERVES_ROOM {\n}\nrelationship REQUESTS_SERVICE {\n}\nrelationship GENERATES_INVOICE {\n}\nrelationship MANAGES_BOOKING {\n}\nrelationship MAINTAINS_ROOM {\n}\n\nRESERVES_ROOM -1- Guest\nRESERVES_ROOM -N- Booking\n\nALLOCATES_ROOM -1- Booking\nALLOCATES_ROOM -N- Room\n\nREQUESTS_SERVICE -1- Booking\nREQUESTS_SERVICE -N- RoomService\n\nGENERATES_INVOICE -1- Booking\nGENERATES_INVOICE -1- Invoice\n\nMANAGES_BOOKING -1- Staff\nMANAGES_BOOKING -N- Booking\n\nMAINTAINS_ROOM -1- Staff\nMAINTAINS_ROOM -N- Room\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for National Health ID System:\n1. The system shall allow patients to create a unique Health ID.\n2. The system shall allow health data consent managers to seek a patient’s consent for sharing health data.\n3. The system shall maintain the health records of patients digitally.\n4. The system shall allow health authorities to use health records for patient diagnosis.\n5. The system shall allow health authorities to record medications, including vaccinations, for newborns and patients.\n",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  mobile_number\n  password\n  aadhaar_number\n  health_id\n}\n\nentity HealthDataConsentManager {\n  manager_id <<key>>\n  password\n  manager_name\n  manager_type\n}\n\nentity HealthRecord {\n  record_id <<key>>\n  health_id <<foreign>>\n  patient_id <<foreign>>\n  record_date\n  record_type\n  record_content\n}\n\nentity HealthID {\n  health_id <<key>>\n  patient_id <<foreign>>\n  creation_date\n}\n\nrelationship HAS_HEALTH_ID {\n}\n\nrelationship LINKED_TO {\n}\n\nrelationship LINKS_TO_RECORDS {\n}\n\nHAS_HEALTH_ID -1- Patient\nHAS_HEALTH_ID -1- HealthID\n\nLINKED_TO -1- HealthID\nLINKED_TO -N- HealthDataConsentManager\n\nLINKS_TO_RECORDS -1- HealthID\nLINKS_TO_RECORDS -N- HealthRecord\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Device Donation System:\n1. The system shall allow donors to enter the details of the device they are willing to donate.\n2. The system shall allow donors to enter their address details for pickup.\n3. The system shall notify donors to wait for the approval of the device.\n4. The system shall allow admins to verify the details of the donated device.\n5. The system shall allow admins to assign a pickup executive to collect the device.\n6. The system shall allow volunteers to join the team to help with device pickups.\n",
        "output": "@startchen\n\nentity Donor {\n  donor_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  device_details\n  donation_status\n}\n\nentity Admin {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity PickupExecutive {\n  executive_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  pickup_status\n}\n\nentity Volunteer {\n  volunteer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Device {\n  device_id <<key>>\n  donor_id <<foreign>>\n  device_name\n  device_type\n  device_condition\n  approval_status\n}\n\nrelationship DONATES_DEVICE {\n}\nrelationship VERIFIES_DEVICE {\n}\nrelationship ASSIGNS_PICKUP {\n}\nrelationship PICKS_UP_DEVICE {\n}\nrelationship JOINS_TEAM {\n}\n\nDONATES_DEVICE -1- Donor\nDONATES_DEVICE -N- Device\n\nVERIFIES_DEVICE -1- Admin\nVERIFIES_DEVICE -N- Device\n\nASSIGNS_PICKUP -1- Admin\nASSIGNS_PICKUP -N- PickupExecutive\n\nPICKS_UP_DEVICE -1- PickupExecutive\nPICKS_UP_DEVICE -N- Device\n\nJOINS_TEAM -1- Volunteer\nJOINS_TEAM -N- PickupExecutive\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Car Rental System:\n1. The system shall allow users to search for available cars for rental.\n2. The system shall allow users to select a car for rental from the available options.\n3. The system shall allow users to make a reservation for a rental car.\n4. The system shall allow users to specify the rental duration.\n5. The system shall allow users to specify the pick-up and drop-off locations for the rental car.\n6. The system shall generate rental agreements for car rentals.\n7. The system shall allow administrators to track rental durations for cars.\n8. The system shall process payments for car rentals.\n9. The system shall allow administrators to manage car listings.\n10. The system shall allow administrators to monitor reservations.\n11. The system shall allow administrators to confirm the availability of cars for rental.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Car {\n  car_id <<key>>\n  admin_id <<foreign>>\n  car_make\n  car_model\n  car_year\n  car_type\n  availability\n}\n\nentity Reservation {\n  reservation_id <<key>>\n  user_id <<foreign>>\n  car_id <<foreign>>\n  reservation_date\n  pick_up_date\n  drop_off_date\n  status\n}\n\nentity Agreement {\n  agreement_id <<key>>\n  reservation_id <<foreign>>\n  agreement_date\n  agreement_content\n}\n\nentity Payment {\n  payment_id <<key>>\n  user_id <<foreign>>\n  reservation_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_status\n}\n\nrelationship MAKES_RESERVATION {\n}\nrelationship MANAGES_CARS {\n}\nrelationship GENERATES_AGREEMENT {\n}\nrelationship PROCESSES_PAYMENT {\n}\nrelationship USES_RESERVATION {\n}\n\nMAKES_RESERVATION -1- User\nMAKES_RESERVATION -N- Reservation\n\nMANAGES_CARS -1- Administrator\nMANAGES_CARS -N- Car\n\nGENERATES_AGREEMENT -1- Reservation\nGENERATES_AGREEMENT -N- Agreement\n\nPROCESSES_PAYMENT -1- User\nPROCESSES_PAYMENT -N- Payment\n\nUSES_RESERVATION -N- Reservation\nUSES_RESERVATION -1- Car\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Online College Magazine System:\n1. The system shall allow users (students, faculty, contributors) to manage articles, including writing, editing, and publishing.\n2. The system shall allow users to rate published articles.\n3. The system shall allow users to comment on published articles.\n4. The system shall allow users to organize articles based on appropriate categories.\n5. The system shall allow guests to read, comment on, and rate articles.\n6. The system shall allow guests to contribute content for the magazine if interested.\n7. The system shall allow moderators to review articles before they are published.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Student {\n  department\n}\n\nentity Faculty {\n  department\n}\n\nentity Alumni {\n  department\n}\n\nentity Guest {\n}\n\nentity Moderator {\n  department\n}\n\nentity Article {\n  article_id <<key>>\n  author_id <<foreign>>\n  article_title\n  article_content\n  article_type\n  publication_date\n  status\n}\n\nentity Comment {\n  comment_id <<key>>\n  article_id <<foreign>>\n  commenter_id <<foreign>>\n  comment_content\n  comment_date\n}\n\nentity Rating {\n  rating_id <<key>>\n  article_id <<foreign>>\n  rater_id <<foreign>>\n  rating_value\n  rating_date\n}\n\nUser ->- d { Student, Faculty, Alumni, Guest, Moderator }\n\nrelationship WRITES_ARTICLE {\n}\nrelationship REVIEWS_ARTICLE {\n}\nrelationship COMMENTS_ON_ARTICLE {\n}\nrelationship RATES_ARTICLE {\n}\nrelationship HAS_RATING {\n}\n\nWRITES_ARTICLE -1- User\nWRITES_ARTICLE -N- Article\n\nREVIEWS_ARTICLE -1- Moderator\nREVIEWS_ARTICLE -N- Article\n\nCOMMENTS_ON_ARTICLE -1- Guest\nCOMMENTS_ON_ARTICLE -N- Comment\n\nRATES_ARTICLE -1- Guest\nRATES_ARTICLE -N- Rating\n\nHAS_RATING -1- Article\nHAS_RATING -N- Rating\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Crime Record Management System:\n1. The system shall allow petitioners to file a First Incident Report (FIR).\n2. The system shall allow victims to record complaints.\n3. The system shall allow tracking of criminals, including those arrested, to be arrested, or escaped.\n4. The system shall allow investigating officers to manage cases, including updating and tracking the status of cases.\n5. The system shall allow investigating officers to monitor crime activities throughout the state.\n",
        "output": "@startchen\n\nentity Petitioner {\n  petitioner_id <<key>>\n  name\n  address\n  phone\n  email\n  password\n  registration_date\n}\n\nentity Victim {\n  victim_id <<key>>\n  name\n  address\n  phone\n  email\n  password\n  registration_date\n}\n\nentity Accused {\n  accused_id <<key>>\n  name\n  address\n  phone\n  email\n  password\n  registration_date\n}\n\nentity Case {\n  case_id <<key>>\n  petitioner_id <<foreign>>\n  victim_id <<foreign>>\n  accused_id <<foreign>>\n  officer_id <<foreign>>\n  case_type\n  case_status\n  case_date\n}\n\nentity InvestigatingOfficer {\n  officer_id <<key>>\n  name\n  address\n  phone\n  email\n  registration_date\n}\n\nentity Complaint {\n  complaint_id <<key>>\n  petitioner_id <<foreign>>\n  victim_id <<foreign>>\n  accused_id <<foreign>>\n  complaint_date\n  complaint_content\n}\n\nrelationship FILES_FIR {\n}\nrelationship INVESTIGATES_CASE {\n}\nrelationship FILES_COMPLAINT {\n}\nrelationship IS_VICTIM_OF {\n}\nrelationship IS_ACCUSED_IN {\n}\n\nFILES_FIR -1- Petitioner\nFILES_FIR -N- Case\n\nINVESTIGATES_CASE -1- InvestigatingOfficer\nINVESTIGATES_CASE -N- Case\n\nFILES_COMPLAINT -1- Petitioner\nFILES_COMPLAINT -N- Complaint\n\nIS_VICTIM_OF -1- Victim\nIS_VICTIM_OF -N- Case\n\nIS_ACCUSED_IN -1- Accused\nIS_ACCUSED_IN -N- Case\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Smart Traffic System:\n1. The system shall allow traffic police to monitor roads with high traffic levels.\n2. The system shall detect helmet and seat belt violations using image processing.\n3. The system shall submit details of driver violations to the traffic police when the driver violates the law more than two times.\n4. The system shall operate street lights based on population density at night to save electricity.\n5. The system shall allow traffic police to cancel the license of drivers who violate the law.\n6. The system shall regulate automated traffic lights to control traffic flow and avoid congestion.\n",
        "output": "@startchen\n\nentity Driver {\n  driver_id <<key>>\n  name\n  license_number\n  violation_count\n  penalty\n  license_status\n}\n\nentity TrafficPolice {\n  police_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Camera {\n  camera_id <<key>>\n  location\n  camera_type\n  camera_status\n}\n\nentity Signal {\n  signal_id <<key>>\n  signal_type\n  signal_status\n}\n\nentity StreetLight {\n  light_id <<key>>\n  location\n  light_type\n  light_status\n}\n\nentity Violation {\n  violation_id <<key>>\n  driver_id <<foreign>>\n  camera_id <<foreign>>\n  violation_date\n  violation_type\n  violation_status\n}\n\nrelationship DETECTS_VIOLATION {\n}\nrelationship SUBMITS_TO_POLICE {\n}\nrelationship MONITORS_DRIVER {\n}\nrelationship OPERATES_SIGNAL {\n}\nrelationship OPERATES_LIGHT {\n}\nrelationship CANCELS_LICENSE {\n}\nrelationship ASSOCIATE_WITH {\n}\n\nDETECTS_VIOLATION -1- Camera\nDETECTS_VIOLATION -N- Violation\n\nSUBMITS_TO_POLICE -1- Violation\nSUBMITS_TO_POLICE -N- TrafficPolice\n\nMONITORS_DRIVER -1- Camera\nMONITORS_DRIVER -N- Driver\n\nOPERATES_SIGNAL -1- Signal\nOPERATES_SIGNAL -N- Camera\n\nOPERATES_LIGHT -1- StreetLight\nOPERATES_LIGHT -N- Camera\n\nCANCELS_LICENSE -1- TrafficPolice\nCANCELS_LICENSE -N- Driver\n\nASSOCIATE_WITH -1- Violation\nASSOCIATE_WITH -N- Driver\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Job Portal System:\n1. The system shall allow job seekers to view available job listings.\n2. The system shall provide job availability predictions to job seekers.\n3. The system shall allow job seekers to search for jobs using filters like location, sector, and eligibility.\n4. The system shall allow job seekers and companies to register profiles.\n5. The system shall allow companies to shortlist candidates for job positions.\n6. The system shall allow companies to post job listings.\n7. The system shall allow job seekers to apply for jobs.\n",
        "output": "@startchen\n\nentity Candidate {\n  candidate_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  sector\n  interest\n  eligibility\n}\n\nentity Company {\n  company_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  sector\n}\n\nentity Job {\n  job_id <<key>>\n  company_id <<foreign>>\n  job_title\n  job_description\n  job_location\n  job_sector\n  job_package\n  job_platform\n  job_interest\n  job_eligibility\n}\n\nentity Application {\n  application_id <<key>>\n  candidate_id <<foreign>>\n  job_id <<foreign>>\n  application_date\n  application_status\n}\n\nrelationship SUBMITS_APPLICATION {\n}\nrelationship RECEIVES_APPLICATION {\n}\nrelationship POSTS_JOB {\n}\nrelationship SHORTLISTS_APPLICATION {\n}\nrelationship SELECTS_APPLICATION {\n}\n\nSUBMITS_APPLICATION -1- Candidate\nSUBMITS_APPLICATION -N- Application\n\nRECEIVES_APPLICATION -1- Job\nRECEIVES_APPLICATION -N- Application\n\nPOSTS_JOB -1- Company\nPOSTS_JOB -N- Job\n\nSHORTLISTS_APPLICATION -1- Company\nSHORTLISTS_APPLICATION -N- Application\n\nSELECTS_APPLICATION -1- Company\nSELECTS_APPLICATION -N- Application\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Aarogya Setu App:\n1. The system shall help users identify COVID-19 hotspots in their area.\n2. The system shall perform contact tracing to identify possible COVID-19 exposures.\n3. The system shall notify users about their proximity to nearby infections or hotspots.\n4. The system shall allow users to self-identify their risk based on symptoms and exposure.\n5. The system shall monitor users' health assessments based on their self-reported data.\n6. The system shall help users identify COVID-19 symptoms.\n7. The system shall send users alerts about the best safety precautions.\n8. The system shall provide users with a list of quarantine measures for those at high risk.\n9. The system shall assist users who have a travel history with self-quarantine measures.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  health_status\n  risk_level\n  reported_symptoms\n}\n\nentity Hotspot {\n  hotspot_id <<key>>\n  location\n  hotspot_type\n  hotspot_status\n}\n\nentity Quarantine {\n  quarantine_id <<key>>\n  user_id <<foreign>>\n  quarantine_start_date\n  quarantine_end_date\n  quarantine_status\n  quarantine_location\n}\n\nentity Alert {\n  alert_id <<key>>\n  user_id <<foreign>>\n  alert_date\n  alert_type\n  alert_content\n}\n\nrelationship UNDER_QUARANTINE {\n}\nrelationship RECIEVES_ALERT {\n}\nrelationship NEAR_HOTSPOT {\n}\n\nUNDER_QUARANTINE -1- User\nUNDER_QUARANTINE -1- Quarantine\n\nRECIEVES_ALERT -1- User\nRECIEVES_ALERT -N- Alert\n\nNEAR_HOTSPOT -N- User\nNEAR_HOTSPOT -1- Hotspot\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Wedding Planner System:\n1. The system shall allow couples to create wedding budgets.\n2. The system shall allow couples to select venues for their wedding.\n3. The system shall allow couples to hire vendors for services like catering, photography, and entertainment.\n4. The system shall allow couples to manage guest lists.\n5. The system shall allow couples to send invitations to their guests.\n6. The system shall allow couples to track RSVPs from guests.\n7. The system shall allow couples to create wedding timelines for event planning.\n8. The system shall allow couples to manage seating arrangements for the wedding event.\n9. The system shall allow couples to coordinate event logistics.\n10. The system shall allow wedding planners to oversee the planning process.\n11. The system shall allow wedding planners to communicate with vendors.\n12. The system shall allow wedding planners to ensure the smooth execution of the wedding events.\n",
        "output": "@startchen\n\nentity Couple {\n  couple_id <<key>>\n  name\n  email\n  password\n  phone\n  wedding_date\n  budget\n}\n\nentity Vendor {\n  vendor_id <<key>>\n  name\n  email\n  password\n  phone\n  service_type\n  availability\n}\n\nentity Guest {\n  guest_id <<key>>\n  name\n  email\n  password\n  phone\n  rsvp_status\n}\n\nentity Wedding {\n  wedding_id <<key>>\n  couple_id <<foreign>>\n  venue\n  date\n  budget\n  status\n}\n\nentity Planner {\n  planner_id <<key>>\n  name\n  email\n  phone\n  department\n  registration_date\n}\n\nentity EventTimeline {\n  timeline_id <<key>>\n  wedding_id <<foreign>>\n  event_date\n  event_description\n  event_location\n  event_status\n}\n\nrelationship HIRES_PLANNER {\n}\nrelationship HIRES_VENDOR {\n}\nrelationship INVITES_GUEST {\n}\nrelationship MANAGES_WEDDING {\n}\nrelationship HAS_TIMELINE {\n}\n\nHIRES_PLANNER -1- Couple\nHIRES_PLANNER -1- Planner\n\nHIRES_VENDOR -1- Planner\nHIRES_VENDOR -N- Vendor\n\nINVITES_GUEST -1- Wedding\nINVITES_GUEST -N- Guest\n\nMANAGES_WEDDING -1- Planner\nMANAGES_WEDDING -N- Wedding\n\nHAS_TIMELINE -1- Wedding\nHAS_TIMELINE -N- EventTimeline\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Arcade Management System:\n1. The system shall allow arcade owners to add new games.\n2. The system shall allow arcade owners to set game prices.\n3. The system shall allow arcade owners to track game usage.\n4. The system shall allow customers to purchase tickets to play games.\n5. The system shall allow customers to play games using purchased tickets.\n6. The system shall allow customers to redeem tickets for prizes.\n7. The system shall allow arcade owners to manage customer accounts.\n8. The system shall track ticket balances for customers.\n9. The system shall generate reports on game popularity and arcade performance.\n10. The system shall allow arcade owners to oversee arcade operations.\n11. The system shall allow arcade owners to allocate resources effectively.\n12. The system shall allow arcade owners to ensure customer satisfaction.\n",
        "output": "@startchen\n\nentity Owner {\n  owner_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Game {\n  game_id <<key>>\n  owner_id <<foreign>>\n  game_title\n  game_type\n  ticket_cost\n  game_status\n  game_usage\n}\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n}\n\nentity Ticket {\n  ticket_id <<key>>\n  game_id <<foreign>>\n  customer_id <<foreign>>\n  purchase_date\n  tickets_purchased\n  tickets_used\n  ticket_balance\n}\n\nentity Prize {\n  prize_id <<key>>\n  game_id <<foreign>>\n  customer_id <<foreign>>\n  prize_name\n  prize_cost\n  prize_availability\n  redemption_date\n}\n\nentity Report {\n  report_id <<key>>\n  owner_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship PURCHASES_TICKET {\n}\nrelationship USES_TICKET {\n}\nrelationship REDEEMS_PRIZE {\n}\nrelationship HAS_PRIZE {\n}\nrelationship OWNS_GAME {\n}\nrelationship GENERATES_REPORT {\n}\n\nOWNS_GAME -1- Owner\nOWNS_GAME -N- Game\n\nUSES_TICKET -1- Ticket\nUSES_TICKET -1- Game\n\nPURCHASES_TICKET -1- Customer\nPURCHASES_TICKET -N- Ticket\n\nHAS_PRIZE -1- Game\nHAS_PRIZE -N- Prize\n\nREDEEMS_PRIZE -1- Customer\nREDEEMS_PRIZE -N- Prize\n\nGENERATES_REPORT -1- Owner\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Blind Navigation Mobile App:\n1. The system shall provide audio directions to blind users based on GPS data.\n2. The system shall allow blind users to search for nearby places of interest.\n3. The system shall allow blind users to plan routes for navigation.\n4. The system shall provide real-time updates on the user’s location during navigation.\n5. The system shall allow users to set their preferences for navigation and audio feedback.\n6. The system shall allow users to save their favorite locations for future reference.\n7. The system shall provide access to emergency services in case of need.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  preferences\n}\n\nentity Location {\n  location_id <<key>>\n  location_name\n  location_type\n  location_address\n  location_status\n}\n\nentity Route {\n  route_id <<key>>\n  user_id <<foreign>>\n  start_location\n  end_location\n  route_distance\n  route_duration\n  route_status\n}\n\nentity PointOfInterest {\n  poi_id <<key>>\n  location_id <<foreign>>\n  poi_name\n  poi_type\n  poi_description\n  poi_status\n}\n\nentity EmergencyService {\n  service_id <<key>>\n  service_name\n  service_type\n  service_phone\n  service_address\n  service_status\n}\n\nentity Update {\n  update_id <<key>>\n  user_id <<foreign>>\n  update_date\n  update_content\n}\n\nrelationship PLANS_ROUTE {\n}\nrelationship SAVES_LOCATION {\n}\nrelationship ACCESS_SERVICE {\n}\nrelationship RECEIVES_UPDATE {\n}\nrelationship ASSOCIATES_POI {\n}\n\nPLANS_ROUTE -1- User\nPLANS_ROUTE -N- Route\n\nSAVES_LOCATION -1- User\nSAVES_LOCATION -N- Location\n\nACCESS_SERVICE -1- User\nACCESS_SERVICE -N- EmergencyService\n\nRECEIVES_UPDATE -1- User\nRECEIVES_UPDATE -N- Update\n\nASSOCIATES_POI -1- Location\nASSOCIATES_POI -N- PointOfInterest\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Sign Language Translator Mobile App:\n1. The system shall translate sign language gestures into text and speech.\n2. The system shall allow deaf users to communicate with hearing users by converting signed words and phrases.\n3. The system shall convert sign language gestures into text for display.\n4. The system shall convert sign language gestures into spoken words.\n5. The system shall allow users to customize sign language dictionaries.\n6. The system shall allow users to save common phrases for quick access.\n7. The system shall allow users to adjust translation settings for personalized usage.\n",
        "output": "@startchen\n\nentity DeafUser {\n  user_id <<key>>\n  name {\n    Fname\n    Lname\n  }\n  email\n  password\n  phone\n}\n\nentity SignGesture {\n  gesture_id <<key>>\n  gesture_type\n  gesture_translation\n  accuracy_score\n}\n\nentity Display {\n  display_id <<key>>\n  content <<multi>>\n  output_type <<derived>>\n}\n\nrelationship INPUTS_SIGN {\n}\nrelationship CONVERTS_TO_TEXT {\ntranslation_setting\n}\nrelationship CONVERTS_TO_AUDIO {\ntranslation_setting\n}\n\nINPUTS_SIGN -1- DeafUser\nINPUTS_SIGN -N- SignGesture\n\nCONVERTS_TO_TEXT -1- SignGesture\nCONVERTS_TO_TEXT -1- Display\n\nCONVERTS_TO_AUDIO -1- SignGesture\nCONVERTS_TO_AUDIO -1- Display\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Glacier Melting Prediction System:\n1. The system shall allow scientists to input data related to glacier melting.\n2. The system shall allow scientists to run simulations for predicting glacier melting.\n3. The system shall allow scientists to visualize the results of glacier melting predictions.\n4. The system shall generate reports on glacier melting and its potential impact.\n5. The system shall allow scientists to share data with other researchers.\n6. The system shall identify trends in glacier melting patterns over time.\n",
        "output": "@startchen\n\nentity Scientist {\n  scientist_id <<key>>\n  name {\n    Fname\n    Lname \n  }\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Glacier {\n  glacier_id <<key>>\n  glacier_name\n  glacier_location\n  glacier_type\n  glacier_status\n}\n\nentity Data {\n  data_id <<key>>\n  scientist_id <<foreign>>\n  data_content <<multi>>\n  data_type <<derived>>\n  data_source\n  data_date\n}\n\nentity Simulation {\n  simulation_id <<key>>\n  scientist_id <<foreign>>\n  simulation_date\n  simulation_results\n}\n\nentity Report {\n  report_id <<key>>\n  scientist_id <<foreign>>\n  report_date\n  report_content\n}\n\nrelationship INPUTS_DATA {\n}\nrelationship RUNS_SIMULATION {\n}\nrelationship ASSOCIATED_WITH_DATA {\n}\nrelationship ASSOCIATED_WITH_SIMULATION {\n}\nrelationship GENERATES_REPORT {\n}\n\nINPUTS_DATA -1- Scientist\nINPUTS_DATA -N- Data\n\nRUNS_SIMULATION -1- Scientist\nRUNS_SIMULATION -N- Simulation\n\nASSOCIATED_WITH_DATA -1- Glacier\nASSOCIATED_WITH_DATA -N- Data\n\nASSOCIATED_WITH_SIMULATION -1- Glacier\nASSOCIATED_WITH_SIMULATION -N- Simulation\n\nGENERATES_REPORT -1- Scientist\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Air Quality Monitoring System:\n1. The system shall allow environmental agencies to monitor real-time air quality data.\n2. The system shall allow environmental agencies to set pollution thresholds for various air pollutants.\n3. The system shall issue alerts when air pollution levels exceed set thresholds.\n4. The system shall generate air quality reports based on collected data.\n5. The system shall map pollution sources in urban areas.\n6. The system shall identify trends in air pollution patterns over time.\n",
        "output": "@startchen\n\nentity Agency {\n  agency_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity PollutionSource {\n  source_id <<key>>\n  source_name\n  source_location\n  source_type\n  source_status\n}\n\nentity WeatherData {\n  weather_id <<key>>\n  temperature\n  humidity\n  wind_speed\n  wind_direction\n  weather_date\n  weather_location\n}\n\nentity AirQualityData {\n  data_id <<key>>\n  source_id <<foreign>>\n  weather_id <<foreign>>\n  particulate_matter_level\n  ozone_level\n  nitrogen_dioxide_level\n}\n\nentity Threshold {\n  threshold_id <<key>>\n  parameter\n  max_value\n  min_value\n  alert_level\n}\n\nentity Alert {\n  alert_id <<key>>\n  agency_id <<foreign>>\n  alert_date\n  parameter\n  alert_message\n}\n\nentity Report {\n  report_id <<key>>\n  agency_id <<foreign>>\n  report_date\n  report_content\n}\n\nrelationship COLLECTED_FROM {\n}\nrelationship SETS_THRESHOLD {\n}\nrelationship HAS_THRESHOLD {\n}\nrelationship ISSUES_ALERT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship INFLUENCED_BY {\n}\n\nCOLLECTED_FROM -N- AirQualityData\nCOLLECTED_FROM -1- PollutionSource\n\nINFLUENCED_BY -N- AirQualityData\nINFLUENCED_BY -1- WeatherData\n\nSETS_THRESHOLD -1- Agency\nSETS_THRESHOLD -N- Threshold\n\nHAS_THRESHOLD -1- AirQualityData\nHAS_THRESHOLD -1- Threshold\n\nISSUES_ALERT -1- Agency\nISSUES_ALERT -N- Alert\n\nGENERATES_REPORT -1- Agency\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Diagramming Tool:\n1. The system shall allow software engineers to create UML diagrams.\n2. The system shall allow software engineers to create flowcharts and other visual representations.\n3. The system shall allow software engineers to customize visual elements such as shapes and connectors.\n4. The system shall allow software engineers to collaborate on diagrams with team members.\n5. The system shall allow software engineers to share diagrams with other users.\n6. The system shall allow software engineers to export diagrams in various formats.\n7. The system shall provide version control for diagrams.\n8. The system shall provide diagram templates for easy use.\n9. The system shall integrate with other software development tools.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  role\n}\n\nentity Diagram {\n  diagram_id <<key>>\n  user_id <<foreign>>\n  title\n  diagram_type\n  creation_date\n  last_modified_date\n  status\n}\n\nentity Shape {\n  shape_id <<key>>\n  diagram_id <<foreign>>\n  shape_type\n  position_x\n  position_y\n  customization\n}\n\nentity Connector {\n  connector_id <<key>>\n  diagram_id <<foreign>>\n  start_shape_id <<foreign>>\n  end_shape_id <<foreign>>\n  connector_type\n  connector_style\n}\n\nentity Version {\n  version_id <<key>>\n  diagram_id <<foreign>>\n  version_number\n  save_date\n  changes_summary\n}\n\nentity Template {\n  template_id <<key>>\n  name\n  description\n  diagram_type\n}\n\nrelationship CREATES_DIAGRAM {\n}\nrelationship CONTAINS_SHAPE {\n}\nrelationship LINKS_SHAPES {\n}\nrelationship HAS_VERSION {\n}\nrelationship USES_TEMPLATE {\n}\nrelationship COLLABORATES_WITH {\n diagram_id <<foreign>>\n}\n\nCREATES_DIAGRAM -1- User\nCREATES_DIAGRAM -N- Diagram\n\nCONTAINS_SHAPE -1- Diagram\nCONTAINS_SHAPE -N- Shape\n\nLINKS_SHAPES -1- Connector\nLINKS_SHAPES -2- Shape\n\nHAS_VERSION -1- Diagram\nHAS_VERSION -N- Version\n\nUSES_TEMPLATE -1- Diagram\nUSES_TEMPLATE -1- Template\n\nCOLLABORATES_WITH -1- User\nCOLLABORATES_WITH -N- User\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Fitness Application:\n1. The system shall allow users to log exercises performed.\n2. The system shall track calories burned by users during workouts.\n3. The system shall allow users to create personalized workout plans.\n4. The system shall allow users to set fitness goals.\n5. The system shall provide users with workout summaries.\n6. The system shall send users reminders for scheduled workouts.\n7. The system shall allow users to track their nutrition intake.\n8. The system shall allow users to log their meals.\n9. The system shall calculate users' daily calorie intake.\n10. The system shall allow users to monitor their overall nutrition intake.\n11. The system shall provide users with meal summaries.\n12. The system shall send users alerts for meal planning.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  age\n  weight\n  height\n  fitness_goal\n}\n\nentity Workout {\n  workout_id <<key>>\n  user_id <<foreign>>\n  workout_date\n  workout_type\n  duration\n  calories_burned\n}\n\nentity Exercise {\n  exercise_id <<key>>\n  workout_id <<foreign>>\n  exercise_name\n  sets\n  reps\n  weight\n  duration\n  calories_burned\n}\n\nentity Nutrition {\n  nutrition_id <<key>>\n  user_id <<foreign>>\n  meal_date\n  meal_type\n  meal_content\n  calories_intake\n}\n\nentity Goal {\n  goal_id <<key>>\n  user_id <<foreign>>\n  goal_type\n  target\n  progress\n}\n\nentity Reminder {\n  reminder_id <<key>>\n  user_id <<foreign>>\n  reminder_date\n  reminder_type\n  reminder_content\n}\n\nrelationship LOGS_WORKOUT {\n}\nrelationship LOGS_EXERCISE {\n}\nrelationship LOGS_NUTRITION {\n}\nrelationship SETS_GOAL {\n}\nrelationship SETS_REMINDER {\n}\n\nLOGS_WORKOUT -1- User\nLOGS_WORKOUT -N- Workout\n\nLOGS_EXERCISE -1- Workout\nLOGS_EXERCISE -N- Exercise\n\nLOGS_NUTRITION -1- User\nLOGS_NUTRITION -N- Nutrition\n\nSETS_GOAL -1- User\nSETS_GOAL -N- Goal\n\nSETS_REMINDER -1- User\nSETS_REMINDER -N- Reminder\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Hostel Finding Application:\n1. The system shall allow students to search for hostels based on location, price, and amenities.\n2. The system shall allow students to book hostel accommodations online.\n3. The system shall provide filters for refining search results.\n4. The system shall allow students to view hostel reviews.\n5. The system shall allow students to compare hostel options.\n6. The system shall allow students to manage their bookings.\n7. The system shall send students booking confirmations.\n8. The system shall provide directions to hostels after booking.\n",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  institution\n}\n\nentity Hostel {\n  hostel_id <<key>>\n  hostel_name\n  hostel_location\n  hostel_price\n  hostel_amenities\n  hostel_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  student_id <<foreign>>\n  hostel_id <<foreign>>\n  booking_date\n  check_in_date\n  check_out_date\n  booking_status <<derived>>\n}\n\nentity Review {\n  review_id <<key>>\n  student_id <<foreign>>\n  hostel_id <<foreign>>\n  review_date\n  review_content\n  review_rating\n}\n\nrelationship BOOKS_HOSTEL {\n}\nrelationship WRITES_REVIEW {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship HAS_REVIEWS {\n}\n\nBOOKS_HOSTEL -1- Student\nBOOKS_HOSTEL -N- Booking\n\nASSOCIATED_WITH -1- Booking\nASSOCIATED_WITH -1- Hostel\n\nWRITES_REVIEW -1- Student\nWRITES_REVIEW -N- Review\n\nHAS_REVIEWS -1- Hostel\nHAS_REVIEWS -N- Review\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Messaging Application:\n1. The system shall allow users to send text messages to their contacts.\n2. The system shall allow users to send photos to their contacts.\n3. The system shall allow users to send videos to their contacts.\n4. The system shall allow users to send voice messages to their contacts.\n5. The system shall support group chats for multiple participants.\n6. The system shall provide message encryption for secure communication.\n7. The system shall allow users to share multimedia content, including photos, videos, and voice messages.\n8. The system shall allow users to create chat groups.\n9. The system shall allow users to add or remove participants from chat groups.\n10. The system shall allow users to customize chat settings, including notifications and privacy options.\n11. The system shall send notifications for new messages and updates.\n12. The system shall allow users to archive messages for future reference.\n13. The system shall allow users to block contacts from sending messages.\n14. The system shall allow users to manage message storage on their devices.\n15. The system shall allow users to view their message history.\n16. The system shall send alerts for incoming messages.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  status\n}\n\nentity Contact {\n  contact_id <<key>>\n  user_id <<foreign>>\n  contact_name\n  contact_email\n  contact_phone\n  contact_status\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  message_content\n  message_type\n  message_date\n  message_status\n}\n\nentity Group {\n  group_id <<key>>\n  group_name\n  group_admin_id <<foreign>>\n  group_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship SENDS_MESSAGE {\n}\nrelationship ADDS_CONTACT {\n}\nrelationship CREATES_GROUP {\n}\nrelationship GETS_NOTIFICATION {\n}\nrelationship JOINS_GROUP {\n  membership_date\n  membership_status\n}\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\nADDS_CONTACT -1- User\nADDS_CONTACT -N- Contact\n\nCREATES_GROUP -1- User\nCREATES_GROUP -N- Group\n\nGETS_NOTIFICATION -1- User\nGETS_NOTIFICATION -N- Notification\n\nJOINS_GROUP -1- User\nJOINS_GROUP -N- Group\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Social Media Application:\n1. The system shall allow users to share photos with their friends.\n2. The system shall allow users to share videos with their friends.\n3. The system shall allow users to share messages with their friends.\n4. The system shall support multimedia sharing, including photos, videos, and messages.\n5. The system shall support chat messaging between users.\n6. The system shall support story posting for users to share temporary content.\n7. The system shall allow users to create posts for sharing on their profiles.\n8. The system shall allow users to view stories posted by their friends.\n9. The system shall allow users to send direct messages to their contacts.\n10. The system shall allow users to add friends to their social network.\n11. The system shall allow users to follow other users' profiles.\n12. The system shall allow users to comment on posts.\n13. The system shall allow users to manage their privacy settings.\n14. The system shall provide an activity feed for users to view new content from their friends.\n15. The system shall send notifications to users for new posts, messages, and updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name {\n    Fname\n    Lname\n  }\n  email\n  password\n  phone\n  location\n  status\n}\n\nentity Post {\n  post_id <<key>>\n  user_id <<foreign>>\n  post_content <<multi>>\n  post_type <<derived>>\n  post_date\n  post_status\n}\n\nentity Story {\n  story_id <<key>>\n  user_id <<foreign>>\n  story_content <<multi>>\n  story_type <<derived>>\n  story_date\n  story_status\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  message_content <<multi>>\n  message_date\n  message_status\n}\n\nrelationship CREATES_POST {\n}\nrelationship CREATES_STORY {\n}\nrelationship SENDS_MESSAGE {\n}\nrelationship ADDS_FRIEND {\n  friendship_date\n  friendship_status\n}\nrelationship FOLLOWS_USER {\n  follow_date\n  follow_status\n}\n\nCREATES_POST -1- User\nCREATES_POST -N- Post\n\nCREATES_STORY -1- User\nCREATES_STORY -N- Story\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\nADDS_FRIEND -1- User\nADDS_FRIEND -N- User\n\nFOLLOWS_USER -1- User\nFOLLOWS_USER -N- User\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Logo Design Application:\n1. The system shall allow users to create custom logos for businesses, websites, and products.\n2. The system shall allow users to select colors for their logo designs.\n3. The system shall allow users to add text and graphics to their logos.\n4. The system shall allow users to customize logo templates.\n5. The system shall allow users to save their logo designs for future use.\n6. The system shall allow users to download their logos in various formats.\n7. The system shall allow users to share their logos on social media platforms.\n8. The system shall allow users to collaborate on logo design projects with other users.\n9. The system shall provide access to design tools for logo creation.\n10. The system shall allow users to manage their logo design projects.\n11. The system shall allow users to view their design history.\n12. The system shall provide users with design suggestions based on their project requirements.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  business_name\n}\n\nentity Logo {\n  logo_id <<key>>\n  logo_name\n  logo_design\n  logo_colors <<multi>>\n  logo_status\n  logo_image\n}\n\nentity Template {\n  template_id <<key>>\n  template_name\n  template_type\n  template_design\n  template_colors <<multi>>\n}\n\nentity Project {\n  project_id <<key>>\n  project_name\n  project_status\n}\n\nrelationship CREATES_LOGO {\n creation_date\n}\nrelationship USES_TEMPLATE {\n}\nrelationship MANAGES_PROJECT {\n}\nrelationship COLLABORATES_ON {\n  collaborator_id <<multi>>\n  collaboration_date\n}\nrelationship HAS_LOGO {\n}\n\nCREATES_LOGO -1- User\nCREATES_LOGO -N- Logo\n\nUSES_TEMPLATE -1- Logo\nUSES_TEMPLATE -1- Template\n\nMANAGES_PROJECT -1- User\nMANAGES_PROJECT -N- Project\n\nHAS_LOGO -1- Project\nHAS_LOGO -N- Logo\n\nCOLLABORATES_ON -1- User\nCOLLABORATES_ON -N- Project\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Daraz E-Commerce Platform:\n1. The system shall allow users to browse products available for sale.\n2. The system shall allow users to add items to their cart for purchase.\n3. The system shall allow users to make purchases online.\n4. The system shall support product categories for easy browsing.\n5. The system shall provide search filters for narrowing down product searches.\n6. The system shall offer product recommendations to users based on their preferences.\n7. The system shall allow users to create accounts for managing their shopping experience.\n8. The system shall allow users to view their order histories.\n9. The system shall allow users to track the shipment of their orders.\n10. The system shall process payments for purchases made by users.\n11. The system shall manage inventory for products listed on the platform.\n12. The system shall generate sales reports for tracking sales performance.\n13. The system shall allow administrators to add new products to the platform.\n14. The system shall allow administrators to update existing product listings.\n15. The system shall allow administrators to monitor user activity on the platform.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location{\n  address\n  city\n  zip code\n}\n  account_status\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  role\n}\n\nentity Product {\n  product_id <<key>>\n  name\n  category\n  price\n  quantity\n  status\n  added_by <<foreign>>\n  updated_by <<foreign>>\n}\n\nentity Order {\n  order_id <<key>>\n  user_id <<foreign>>\n  order_date\n  status\n  total_amount\n}\n\nentity Cart {\n  cart_id <<key>>\n  user_id <<foreign>>\n}\n\nentity Payment {\n  payment_id <<key>>\n  order_id <<foreign>>\n  payment_date\n  method\n  amount\n  status\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  product_id <<foreign>>\n  stock_quantity\n  stock_status\n}\n\nentity Report {\n  report_id <<key>>\n  admin_id <<foreign>>\n  report_date\n  report_type\n  content\n}\n\nrelationship ADDED_TO {\n}\nrelationship PLACES_ORDER {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship MANAGES_INVENTORY {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship CONSISTS_OF{\n}\nrelationship CONTAINS {\n}\n\nPLACES_ORDER -1- User\nPLACES_ORDER -N- Order\n\nCONTAINS -1- Order\nCONTAINS -N- Product\n\nADDED_TO -N- Product\nADDED_TO -N- Cart\n\nMAKES_PAYMENT -1- User\nMAKES_PAYMENT -N- Payment\n\nCONSISTS_OF -1- Inventory\nCONSISTS_OF -N- Product\n\nMANAGES_INVENTORY -1- Administrator\nMANAGES_INVENTORY -N- Inventory\n\nGENERATES_REPORT -1- Administrator\nGENERATES_REPORT -N- Report\n\n@endchen"            
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Bidding Application:\n1. The system shall allow users to participate in online auctions.\n2. The system shall allow users to place bids on auction items.\n3. The system shall allow users to win auctions by placing the highest bid.\n4. The system shall support different auction categories for easy navigation.\n5. The system shall provide notifications for new bids and auction updates.\n6. The system shall include countdown timers for auctions.\n7. The system shall allow users to create accounts for managing their bidding activities.\n8. The system shall allow users to view available auction listings.\n9. The system shall allow users to track their bid histories.\n10. The system shall allow users to manage their auction wins.\n11. The system shall send auction alerts to users.\n12. The system shall allow users to manage their auction activities.\n13. The system shall allow users to view auction results after bidding ends.\n14. The system shall provide users with payment instructions after winning an auction.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Auctioneer {\n  auctioneer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Item {\n  item_id <<key>>\n  item_name\n  item_category\n  item_description\n  item_status\n  auctioneer_id <<foreign>>\n}\n\nentity Bid {\n  bid_id <<key>>\n  user_id <<foreign>>\n  item_id <<foreign>>\n  bid_amount\n  bid_date\n  bid_status\n}\n\nentity Auction {\n  auction_id <<key>>\n  item_id <<foreign>>\n  auctioneer_id <<foreign>>\n  auction_start_date\n  auction_end_date\n  auction_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship PLACES_BID {\n}\nrelationship HOSTS_AUCTION {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship WINS_AUCTION {\n}\nrelationship LISTS_ITEM {\n}\nrelationship PARTICIPATES_IN {\n}\n\nPLACES_BID -1- User\nPLACES_BID -N- Bid\n\nHOSTS_AUCTION -1- Auctioneer\nHOSTS_AUCTION -N- Auction\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\nWINS_AUCTION -1- User\nWINS_AUCTION -N- Auction\n\nLISTS_ITEM -1- Auctioneer\nLISTS_ITEM -N- Item\n\nPARTICIPATES_IN -1- Item\nPARTICIPATES_IN -N- Bid\n\n@endchen"            
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for House Helper/Maid Finding Application:\n1. The system shall allow users to search for domestic helpers based on services, availability, and ratings.\n2. The system shall allow users to hire domestic helpers for household chores.\n3. The system shall allow users to view helper profiles, including services and ratings.\n4. The system shall allow users to request services from domestic helpers.\n5. The system shall allow users to schedule appointments with helpers.\n6. The system shall allow users to manage their bookings for helper services.\n7. The system shall track the service history of domestic helpers.\n8. The system shall allow users to provide feedback and ratings for domestic helpers.\n9. The system shall allow users to manage their preferences for selecting helpers.\n10. The system shall allow users to view service summaries after appointments.\n11. The system shall send users reminders for scheduled services.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Helper {\n  helper_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  availability\n  rating\n  status\n}\n\nentity Service {\n  service_id <<key>>\n  user_id <<foreign>>\n  helper_id <<foreign>>\n  service_date\n  service_type\n  service_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  user_id <<foreign>>\n  helper_id <<foreign>>\n  booking_date\n  booking_status\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  user_id <<foreign>>\n  helper_id <<foreign>>\n  feedback_date\n  feedback_content\n  feedback_rating\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship REQUESTS_SERVICE {\n}\nrelationship PROVIDES_SERVICE {\n}\nrelationship BOOKS_HELPER {\n}\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nREQUESTS_SERVICE -1- User\nREQUESTS_SERVICE -N- Service\n\nPROVIDES_SERVICE -1- Helper\nPROVIDES_SERVICE -N- Service\n\nBOOKS_HELPER -1- User\nBOOKS_HELPER -N- Booking\n\nPROVIDES_FEEDBACK -1- User\nPROVIDES_FEEDBACK -N- Feedback\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"            
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Pharmaceutical Supply Chain Management System:\n1. The system shall allow pharmaceutical companies to track inventory of pharmaceutical products.\n2. The system shall allow pharmaceutical companies to manage orders for products.\n3. The system shall allow pharmaceutical companies to monitor shipments of pharmaceutical products.\n4. The system shall allow pharmaceutical companies to input production data for product management.\n5. The system shall allow pharmaceutical companies to generate purchase orders.\n6. The system shall allow pharmaceutical companies to track product deliveries.\n7. The system shall allow pharmaceutical companies to manage supplier relationships.\n8. The system shall allow pharmaceutical companies to track sales data.\n9. The system shall generate reports on product performance for pharmaceutical companies.\n10. The system shall allow administrators to oversee supply chain operations.\n11. The system shall allow administrators to allocate resources for supply chain management.\n12. The system shall allow administrators to ensure product quality across the supply chain.\n",
        "output": "@startchen\n\nentity Company {\n  company_id <<key>>\n  company_name\n  company_location{\n    address\n    city\n    country\n    zip code\n  }\n  company_type\n  company_status\n}\n\nentity Product {\n  product_id <<key>>\n  product_name\n  product_category\n  product_price\n  product_quantity\n  product_status\n}\n\nentity Order {\n  order_id <<key>>\n  company_id <<foreign>>\n  order_date\n  order_status\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  product_id <<foreign>>\n  stock_quantity\n  stock_status <<derived>>\n}\n\nentity Supplier {\n  supplier_id <<key>>\n  supplier_name\n  supplier_location{\n    address\n    city\n    country\n    zip code\n  }\n  supplier_type\n  supplier_status\n}\n\nentity Report {\n  report_id <<key>>\n  company_id <<foreign>>\n  report_date\n  report_content <<multi>>\n  report_status\n}\n\nrelationship MANAGES_INVENTORY {\n}\nrelationship PLACES_ORDER {\n}\nrelationship CONTAINS_PRODUCT {\n}\nrelationship SUPPLIES_PRODUCT {\n}\nrelationship GENERATES_REPORT {\n}\n\nMANAGES_INVENTORY -1- Company\nMANAGES_INVENTORY -N- Inventory\n\nPLACES_ORDER -1- Company\nPLACES_ORDER -N- Order\n\nCONTAINS_PRODUCT -1- Order\nCONTAINS_PRODUCT -N- Product\n\nSUPPLIES_PRODUCT -1- Supplier\nSUPPLIES_PRODUCT -N- Product\n\nGENERATES_REPORT -1- Company\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Learn How to Code Application:\n1. The system shall allow users to learn programming languages through interactive tutorials.\n2. The system shall allow users to practice coding exercises to improve their skills.\n3. The system shall allow users to build software projects using project templates.\n4. The system shall provide coding tutorials for various programming languages.\n5. The system shall support code editors for users to write and test code.\n6. The system shall include project templates to assist users in building software projects.\n7. The system shall allow users to create accounts for managing their learning progress.\n8. The system shall allow users to view coding lessons provided by the platform.\n9. The system shall allow users to complete coding challenges to test their knowledge.\n10. The system shall track users' coding progress over time.\n11. The system shall allow users to manage code repositories for their projects.\n12. The system shall allow users to share code snippets with other users.\n13. The system shall allow users to manage their coding preferences.\n14. The system shall allow users to view their project histories.\n15. The system shall provide users with coding tips and suggestions to improve their skills.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n  coding_experience_level\n}\n\nentity Lesson {\n  lesson_id <<key>>\n  lesson_title\n  lesson_content\n  programming_language <<multi>>\n  lesson_type\n  lesson_difficulty\n  lesson_status\n}\n\nentity Challenge {\n  challenge_id <<key>>\n  user_id <<foreign>>\n  challenge_title\n  challenge_description\n  programming_language <<multi>>\n  challenge_difficulty\n  challenge_status\n}\n\nentity Project {\n  project_id <<key>>\n  user_id <<foreign>>\n  project_title\n  project_description\n  programming_language <<multi>>\n  project_status\n}\n\nentity Template {\n  template_id <<key>>\n  template_name\n  template_description\n  programming_language <<multi>>\n  template_status\n}\n\nrelationship TAKES_LESSON {\n progress_percentage\n}\nrelationship COMPLETES_CHALLENGE {\n completion_date\n}\nrelationship CREATES_PROJECT {\n creation_date\n}\nrelationship USES_TEMPLATE {\n}\n\nTAKES_LESSON -1- User\nTAKES_LESSON -N- Lesson\n\nCOMPLETES_CHALLENGE -1- User\nCOMPLETES_CHALLENGE -N- Challenge\n\nCREATES_PROJECT -1- User\nCREATES_PROJECT -N- Project\n\nUSES_TEMPLATE -1- Project\nUSES_TEMPLATE -N- Template\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Data Visualization Application:\n1. The system shall allow users to create visual representations of data.\n2. The system shall allow users to analyze trends based on the visualized data.\n3. The system shall allow users to present insights derived from data visualizations.\n4. The system shall provide data import tools for bringing in external data sets.\n5. The system shall support chart templates to assist users in visualizing data.\n6. The system shall include customization options for visual elements in charts.\n7. The system shall allow users to import data sets from various sources.\n8. The system shall allow users to create charts based on imported data.\n9. The system shall allow users to customize chart styles according to their preferences.\n10. The system shall allow users to save their visualizations for future reference.\n11. The system shall allow users to share data insights with others.\n12. The system shall allow users to export charts in various formats.\n13. The system shall allow users to manage their data sources.\n14. The system shall allow users to view the history of their visualizations.\n15. The system shall provide users with data analysis suggestions.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Data {\n  data_id <<key>>\n  user_id <<foreign>>\n  data_source\n  data_content <<multi>>\n  data_type <<derived>>\n  data_status\n}\n\nentity Chart {\n  chart_id <<key>>\n  user_id <<foreign>>\n  data_id <<foreign>>\n  chart_type\n  chart_style\n  chart_data <<multi>>\n  chart_status\n}\n\nentity Visualization {\n  visualization_id <<key>>\n  user_id <<foreign>>\n  visualization_title\n  visualization_description\n  visualization_type\n  visualization_status\n}\n\nentity Template {\n  template_id <<key>>\n  template_name\n  template_description\n  template_type\n  template_status\n}\n\nrelationship IMPORTS_DATA {\n  date_imported\n}\n\nrelationship CREATES_CHART {\n  creation_date\n}\n\nrelationship CONTAINS_CHART {\n}\n\nrelationship SAVES_VISUALIZATION {\n  saved_date\n}\n\nrelationship USES_TEMPLATE {\n}\n\nIMPORTS_DATA -1- User\nIMPORTS_DATA -N- Data\n\nCREATES_CHART -1- User\nCREATES_CHART -N- Chart\n\nCONTAINS_CHART -1- Visualization\nCONTAINS_CHART -N- Chart\n\nSAVES_VISUALIZATION -1- User\nSAVES_VISUALIZATION -N- Visualization\n\nUSES_TEMPLATE -1- Visualization\nUSES_TEMPLATE -1- Template\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for 'Find the One' Matchmaking Application:\n1. The system shall allow users to find compatible partners using matching algorithms.\n2. The system shall allow users to build relationships and connect with like-minded individuals.\n3. The system shall provide user profiles for creating and managing user data.\n4. The system shall support matching algorithms to suggest potential partners.\n5. The system shall include chat messaging features for communication between users.\n6. The system shall allow users to create profiles to participate in matchmaking.\n7. The system shall allow users to view partner suggestions based on compatibility.\n8. The system shall allow users to send messages to potential matches.\n9. The system shall track relationship statuses of users.\n10. The system shall allow users to manage their connections with others.\n11. The system shall provide relationship advice to users.\n12. The system shall allow users to manage their privacy settings for safe interactions.\n13. The system shall allow users to view their relationship histories.\n14. The system shall notify users about new matches.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  gender\n  age\n  relationship_status\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  message_content\n  message_date\n  message_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship SENDS_MESSAGE {\n}\nrelationship ESTABLISHES_CONNECTION {\n  connection_date\n  connection_status\n  compatibility_score\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\nESTABLISHES_CONNECTION -1- User\nESTABLISHES_CONNECTION -N- User\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for 'FoodPanda' Food Delivery Application:\n1. The system shall allow users to order food from restaurants for delivery.\n2. The system shall allow users to track the status of their food deliveries.\n3. The system shall allow users to provide feedback on the quality of the food they receive.\n4. The system shall support restaurant listings for users to browse available restaurants.\n5. The system shall allow users to browse menus of restaurants.\n6. The system shall allow users to customize their orders based on preferences.\n7. The system shall allow users to create accounts for managing orders and settings.\n8. The system shall allow users to place orders for food delivery.\n9. The system shall allow users to track the status of their orders in real-time.\n10. The system shall allow users to manage their delivery addresses for convenience.\n11. The system shall allow users to rate food items after receiving them.\n12. The system shall allow users to manage payment methods for seamless transactions.\n13. The system shall allow users to view their order histories.\n14. The system shall send notifications to users for order updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  password\n  phone\n  location {\n    address\n    city\n  }\n}\nentity Restaurant {\n  restaurant_id <<key>>\n  name\n  password\n  location\n  cuisine_type\n  status\n}\nentity Rider {\n  rider_id <<key>>\n  name\n  phone\n  password\n  vehicle_details\n  location\n  availability_status\n}\nentity Order {\n  order_id <<key>>\n  user_id <<foreign>>\n  restaurant_id <<foreign>>\n  rider_id <<foreign>>\n  order_date\n  order_status\n  total_amount\n}\nentity Menu {\n  menu_id <<key>>\n  restaurant_id <<foreign>>\n  menu_item\n  menu_price\n  menu_category\n  menu_status\n}\n\nrelationship PLACES_ORDER {\n}\nrelationship DELIVERS_ORDER {\n delivery_date\n delivery_status\n}\nrelationship DISPLAYS_MENU {\n}\nrelationship RATES_RESTAURANT {\n rating_score\n rating_date\n}\nrelationship ASSIGNS_ORDER {\n assign_date\n}\n\nUser -1- PLACES_ORDER\nPLACES_ORDER -N- Order\nRestaurant -1- ASSIGNS_ORDER\nASSIGNS_ORDER -N- Rider\nRider -1- DELIVERS_ORDER\nDELIVERS_ORDER -N- Order\nRestaurant -1- DISPLAYS_MENU\nDISPLAYS_MENU -N- Menu\nUser -1- RATES_RESTAURANT\nRATES_RESTAURANT -N- Restaurant\n\n@endchen"  
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Web Vulnerability Scanner:\n1. The system shall allow hackers to identify security vulnerabilities in web applications.\n2. The system shall detect common vulnerabilities such as SQL injection and cross-site scripting.\n3. The system shall allow hackers to run scans on target URLs to detect vulnerabilities.\n4. The system shall allow hackers to analyze scan results for potential security flaws.\n5. The system shall generate reports detailing the vulnerabilities found in the scans.\n6. The system shall allow hackers to exploit detected security flaws.\n7. The system shall provide recommendations for remediating identified vulnerabilities.\n8. The system shall allow hackers to manage scan settings for customized scans.\n9. The system shall allow hackers to view the history of previous scans.\n10. The system shall send alerts to hackers when critical vulnerabilities are found.\n",
        "output": "@startchen\n\nentity Hacker {\n  hacker_id <<key>>\n  name\n  email\n  password\n  location\n  hacking_experience\n  hacking_status\n}\n\nentity Scan {\n  scan_id <<key>>\n  hacker_id <<foreign>>\n  target_url\n  scan_date\n  scan_status\n}\n\nentity Vulnerability {\n  vulnerability_id <<key>>\n  scan_id <<foreign>>\n  vulnerability_type\n  vulnerability_description\n  vulnerability_status\n}\n\nentity Report {\n  report_id <<key>>\n  hacker_id <<foreign>>\n  report_date\n  report_content <<multi>>\n  report_status\n}\n\nrelationship RUNS_SCAN {\n}\nrelationship IDENTIFIES_VULNERABILITY {\n}\nrelationship GENERATES_REPORT {\n}\n\nRUNS_SCAN -1- Hacker\nRUNS_SCAN -N- Scan\n\nIDENTIFIES_VULNERABILITY -1- Scan\nIDENTIFIES_VULNERABILITY -N- Vulnerability\n\nGENERATES_REPORT -1- Hacker\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Course Management System:\n1. The system shall allow students to enroll in courses.\n2. The system shall allow students to view course materials online.\n3. The system shall allow students to submit assignments for evaluation.\n4. The system shall allow instructors to create courses for students.\n5. The system shall allow instructors to upload course materials for student access.\n6. The system shall allow instructors to grade assignments submitted by students.\n7. The system shall allow students to search for available courses.\n8. The system shall allow students to access course materials after enrollment.\n9. The system shall track student progress through courses.\n10. The system shall manage course schedules for students and instructors.\n11. The system shall generate reports on course performance and student progress.\n12. The system shall allow instructors to monitor student performance.\n13. The system shall allow instructors to provide feedback on assignments.\n14. The system shall allow instructors to communicate with students directly.\n",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n}\nentity Instructor {\n  instructor_id <<key>>\n  name\n  email\n  password\n  phone\n}\nentity Department {\n  department_id <<key>>\n  department_name\n  hod\n}\nentity Course {\n  course_id <<key>>\n  course_name\n  course_description\n  course_status\n  credits\n  enrollment_date\n  enrollment_status\n  grade\n}\nentity Assignment {\n  assignment_id <<key>>\n  course_id <<foreign>>\n  student_id <<foreign>>\n  assignment_title\n  assignment_description\n  assignment_grade\n}\nentity Feedback {\n  feedback_id <<key>>\n  student_id <<foreign>>\n  feedback_content\n  feedback_date\n}\n\nrelationship HAS {\n}\nrelationship OFFERS_COURSE {\n}\nrelationship ENROLLS_IN {\n  enrollment_date\n  enrollment_status\n}\nrelationship SUBMITS_ASSIGNMENT {\n}\nrelationship GIVES_GRADE {\n}\nrelationship RECEIVES_FEEDBACK {\n}\nrelationship TEACHES {\n}\n\nDepartment -1- HAS\nHAS -N- Student\nHAS -N- Instructor\nDepartment -1- OFFERS_COURSE\nOFFERS_COURSE -N- Course\nStudent -1- ENROLLS_IN\nENROLLS_IN -N- Course\nStudent -1- SUBMITS_ASSIGNMENT\nSUBMITS_ASSIGNMENT -N- Assignment\nInstructor -1- GIVES_GRADE\nGIVES_GRADE -N- Assignment\nInstructor -1- RECEIVES_FEEDBACK\nRECEIVES_FEEDBACK -N- Feedback\nInstructor -1- TEACHES\nTEACHES -N- Course\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Video Streaming Application:\n1. The system shall allow users to watch videos.\n2. The system shall allow users to create playlists of their favorite videos.\n3. The system shall allow users to share video content with friends.\n4. The system shall support video categories for browsing.\n5. The system shall provide search filters for narrowing down video searches.\n6. The system shall offer video recommendations based on user preferences.\n7. The system shall allow users to create accounts for personalized access.\n8. The system shall allow users to like or dislike videos.\n9. The system shall allow users to share videos on social media platforms.\n10. The system shall allow users to comment on videos.\n11. The system shall allow users to manage their video preferences.\n12. The system shall track users' video histories.\n13. The system shall send notifications to users when new content is available.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Video {\n  video_id <<key>>\n  video_title\n  video_url\n  category_id <<foreign>>\n  video_duration\n  video_status\n}\n\nentity VideoCategory {\n  category_id <<key>>\n  category_name\n  category_description\n}\n\nentity Playlist {\n  playlist_id <<key>>\n  user_id <<foreign>>\n  playlist_name\n  playlist_description\n  playlist_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship WATCHES_VIDEO {\n  watch_date\n  watch_duration\n}\nrelationship CREATES_PLAYLIST {\n  create_date\n}\nrelationship CONTAINS_VIDEO {\n}\nrelationship HAS_VIDEO {\n}\nrelationship LIKES_VIDEO {\n like_date\n}\nrelationship COMMENTS_ON {\n  comment_content\n  comment_date\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nWATCHES_VIDEO -1- User\nWATCHES_VIDEO -N- Video\n\nCREATES_PLAYLIST -1- User\nCREATES_PLAYLIST -N- Playlist\n\nCONTAINS_VIDEO -1- Playlist\nCONTAINS_VIDEO -N- Video\n\nLIKES_VIDEO -1- User\nLIKES_VIDEO -N- Video\n\nCOMMENTS_ON -1- User\nCOMMENTS_ON -N- Video\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\nHAS_VIDEO -1- VideoCategory\nHAS_VIDEO -N- Video\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Zoo Management System:\n1. The system shall allow zookeepers to manage animals in the zoo.\n2. The system shall allow zookeepers to manage exhibits for animal display.\n3. The system shall allow zookeepers to manage visitor information.\n4. The system shall allow zookeepers to input animal data such as health records and feeding schedules.\n5. The system shall allow zookeepers to track feeding schedules for animals.\n6. The system shall allow zookeepers to monitor the health of animals.\n7. The system shall allow visitors to view exhibit information such as animal species and locations.\n8. The system shall allow visitors to purchase tickets for zoo entry.\n9. The system shall allow visitors to attend animal shows or events.\n10. The system shall allow administrators to manage exhibit maintenance and ensure their upkeep.\n11. The system shall track visitor attendance for reporting purposes.\n12. The system shall generate reports on animal populations and exhibits.\n13. The system shall allow administrators to oversee zoo operations.\n14. The system shall allow administrators to allocate resources such as staff and funds.\n15. The system shall ensure the safety of visitors during their time in the zoo.\n",
        "output": "@startchen\n\nentity Zookeeper {\n  zookeeper_id <<key>>\n  name\n  email\n  password\n}\nentity Animal {\n  animal_id <<key>>\n  animal_name\n  animal_species\n  animal_dob\n  animal_health_status\n  exhibit_id <<foreign>>\n}\nentity Exhibit {\n  exhibit_id <<key>>\n  exhibit_name\n  exhibit_description\n  exhibit_status\n}\nentity Visitor {\n  visitor_id <<key>>\n  name\n  email\n  phone\n  location\n  visitor_status\n}\nentity Ticket {\n  ticket_id <<key>>\n  visitor_id <<foreign>>\n  ticket_date\n  ticket_price\n  ticket_status\n}\nentity Show {\n  show_id <<key>>\n  show_name\n  show_time\n  show_location\n  show_status\n}\n\nrelationship MANAGES_ANIMAL {\n}\nrelationship MAINTAINS_EXHIBIT {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship PURCHASES_TICKET {\n}\nrelationship ATTENDS_SHOW {\n  attendance_date\n}\nrelationship FEATURES_ANIMAL {\n}\n\nZookeeper -1- MANAGES_ANIMAL\nMANAGES_ANIMAL -N- Animal\nZookeeper -1- MAINTAINS_EXHIBIT\nMAINTAINS_EXHIBIT -N- Exhibit\nVisitor -1- PURCHASES_TICKET\nPURCHASES_TICKET -N- Ticket\nVisitor -1- ATTENDS_SHOW\nATTENDS_SHOW -N- Show\nShow -1- FEATURES_ANIMAL\nFEATURES_ANIMAL -N- Animal\nExhibit -1- ASSOCIATED_WITH\nASSOCIATED_WITH -N- Ticket\n\n@endchen"    
    },
    {
        "input": "Give me a ERD for this system. Functional Requirements for Welcome Party Planner Application:\n1. The system shall allow organizers to plan and manage welcome parties for new employees.\n2. The system shall allow organizers to manage party schedules.\n3. The system shall allow organizers to invite guests to the welcome parties.\n4. The system shall allow organizers to coordinate party activities.\n5. The system shall allow new employees to view party details.\n6. The system shall allow new employees to RSVP to events.\n7. The system shall allow new employees to participate in party games.\n8. The system shall allow organizers to manage party budgets for the events.\n9. The system shall allow organizers to track guest attendance.\n10. The system shall allow organizers to collect event feedback from guests.\n11. The system shall allow organizers to manage and customize party themes.\n12. The system shall allow organizers to view the history of past parties.\n13. The system shall send notifications to organizers for party updates.\n",
        "output": "@startchen\n\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  organizer_status\n}\n\nentity Employee {\n  employee_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  employee_status\n}\n\nentity Party {\n  party_id <<key>>\n  organizer_id <<foreign>>\n  party_date\n  party_location\n  party_theme\n  party_status\n}\n\nentity Activity {\n  activity_id <<key>>\n  party_id <<foreign>>\n  activity_name\n  activity_description\n  activity_status\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  employee_id <<foreign>>\n  party_id <<foreign>>\n  feedback_content\n  feedback_date\n}\n\nentity Notification {\n  notification_id <<key>>\n  organizer_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship PLANS_PARTY {\n}\nrelationship ATTENDS_PARTY {\n rsvp_status\n}\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship HAS_ACTIVITY {\n}\n\nPLANS_PARTY -1- Organizer\nPLANS_PARTY -N- Party\n\nATTENDS_PARTY -1- Employee\nATTENDS_PARTY -N- Party\n\nHAS_ACTIVITY -1- Party\nHAS_ACTIVITY -N- Activity\n\nPROVIDES_FEEDBACK -1- Employee\nPROVIDES_FEEDBACK -N- Feedback\n\nRECEIVES_NOTIFICATION -1- Organizer\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "Give me a ERD for this system. Functional Requirements for Trip Planner Application:\n1. The system shall allow users to plan trips and create trip itineraries.\n2. The system shall allow users to organize and manage their travel itineraries.\n3. The system shall allow users to share their travel experiences with others.\n4. The system shall allow users to search for travel destinations.\n5. The system shall allow users to book accommodations for their trips.\n6. The system shall allow users to arrange transportation options for their travel.\n7. The system shall allow users to create trip plans and add activities to their itineraries.\n8. The system shall allow users to view detailed information about their trips.\n9. The system shall allow users to add activities to their trip itineraries.\n10. The system shall allow users to manage their trip budgets.\n11. The system shall allow users to track and manage their travel expenses.\n12. The system shall allow users to share trip photos and memories.\n13. The system shall allow users to manage their travel preferences for future trips.\n14. The system shall allow users to view their trip histories.\n15. The system shall send users notifications and updates for their trips.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Destination {\n  destination_id <<key>>\n  destination_name\n  destination_location\n  destination_description\n  destination_status\n}\n\nentity Trip {\n  trip_id <<key>>\n  user_id <<foreign>>\n  destination_id <<foreign>>\n  trip_date\n  trip_duration\n  trip_status\n}\n\nentity Itinerary {\n  itinerary_id <<key>>\n  trip_id <<foreign>>\n  itinerary_date\n  itinerary_activity\n  itinerary_status\n}\n\nentity Expense {\n  expense_id <<key>>\n  user_id <<foreign>>\n  trip_id <<foreign>>\n  expense_date\n  expense_amount\n  expense_category\n  expense_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship PLANS_TRIP {\n}\nrelationship CREATES_ITINERARY {\n}\nrelationship ADDS_ACTIVITY {\n}\nrelationship TRACKS_EXPENSE {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nPLANS_TRIP -1- User\nPLANS_TRIP -N- Trip\n\nCREATES_ITINERARY -1- Trip\nCREATES_ITINERARY -N- Itinerary\n\nADDS_ACTIVITY -1- Itinerary\nADDS_ACTIVITY -N- Destination\n\nTRACKS_EXPENSE -1- User\nTRACKS_EXPENSE -N- Expense\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "Give me a ERD for this system. Functional Requirements for Cafe Management System:\n1. The system shall allow cafe owners to manage orders placed by customers.\n2. The system shall track inventory levels for menu items and other products.\n3. The system shall analyze sales data to improve business performance.\n4. The system shall allow cafe owners to input and manage menu items.\n5. The system shall allow cafe owners to process customer orders.\n6. The system shall allow cafe owners to manage customer payments.\n7. The system shall allow customers to view menu options available at the cafe.\n8. The system shall allow customers to place orders for menu items.\n9. The system shall allow customers to pay for their purchases online or at the cafe.\n10. The system shall track inventory levels and notify owners of low stock.\n11. The system shall manage relationships with suppliers for inventory restocking.\n12. The system shall generate reports on sales performance for analysis.\n13. The system shall allow administrators to oversee cafe operations.\n14. The system shall allow administrators to allocate resources efficiently.\n15. The system shall ensure customer satisfaction by managing feedback and service quality.\n",
        "output": "@startchen\n\nentity Owner {\n  owner_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  owner_status\n}\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  customer_status\n}\n\nentity MenuItem {\n  menu_item_id <<key>>\n  menu_price\n  menu_category\n  menu_status\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  order_status\n  total_amount\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  menu_item_id <<foreign>>\n  stock_quantity\n  stock_status\n}\n\nentity Supplier {\n  supplier_id <<key>>\n  supplier_name\n  supplier_location\n  supplier_status\n}\n\nentity Report {\n  report_id <<key>>\n  owner_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship HAS_ITEM {\n}\nrelationship TRACKS_INVENTORY {\n}\nrelationship SUPPLIES {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship PLACES_ORDER {\n}\nrelationship CONTAINS_MENU_ITEM {\n   quantity\n}\n\nHAS_ITEM -1- Inventory\nHAS_ITEM -N- MenuItem\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nCONTAINS_MENU_ITEM -1- Order\nCONTAINS_MENU_ITEM -N- MenuItem\n\nTRACKS_INVENTORY -1- Owner\nTRACKS_INVENTORY -N- Inventory\n\nSUPPLIES -1- Supplier\nSUPPLIES -N- MenuItem\n\nGENERATES_REPORT -1- Owner\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Crime Management System:\n1. The system shall allow investigators to manage criminal cases.\n2. The system shall allow investigators to track suspects involved in criminal activities.\n3. The system shall allow investigators to analyze crime data for trends and insights.\n4. The system shall allow investigators to input case details such as descriptions, timelines, and evidence.\n5. The system shall allow investigators to gather evidence for criminal cases.\n6. The system shall allow investigators to identify potential suspects in ongoing cases.\n7. The system shall allow officers to search criminal records for investigation purposes.\n8. The system shall allow officers to issue warrants for arrests or searches.\n9. The system shall allow officers to make arrests of suspects.\n10. The system shall allow administrators to track the progress of cases.\n11. The system shall allow administrators to manage evidence storage for cases.\n12. The system shall generate reports on crime trends and case statistics.\n13. The system shall allow administrators to oversee law enforcement operations.\n14. The system shall allow administrators to allocate resources for crime management.\n15. The system shall ensure public safety by tracking crime and managing law enforcement activities.\n",
        "output": "@startchen\n\nentity Investigator {\n  investigator_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  investigator_status\n}\n\nentity Officer {\n  officer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  officer_status\n}\n\nentity Suspect {\n  suspect_id <<key>> \n  name\n  age\n  gender\n  location\n  suspect_status\n}\n\nentity Case {\n  case_id <<key>>\n  investigator_id <<foreign>>\n  case_date\n  case_status\n  case_description\n}\n\nentity Evidence {\n  evidence_id <<key>>\n  case_id <<foreign>>\n  evidence_type\n  evidence_details\n  evidence_status\n}\n\nentity Report {\n  report_id <<key>>\n  investigator_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Warrant {\n  warrant_id <<key>>\n  officer_id <<foreign>>\n  suspect_id <<foreign>>\n  issue_date\n  warrant_status\n}\n\nrelationship MANAGES_CASE {\n}\nrelationship TRACKS_SUSPECT {\n}\nrelationship ISSUES_WARRANT {\n}\nrelationship GATHERS_EVIDENCE {\n}\nrelationship GENERATES_REPORT {\n}\n\nMANAGES_CASE -1- Investigator\nMANAGES_CASE -N- Case\n\nTRACKS_SUSPECT -1- Case\nTRACKS_SUSPECT -N- Suspect\n\nISSUES_WARRANT -1- Officer\nISSUES_WARRANT -N- Warrant\n\nGATHERS_EVIDENCE -1- Investigator\nGATHERS_EVIDENCE -N- Evidence\n\nGENERATES_REPORT -1- Investigator\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Intelligence Agency System:\n1. The system shall allow intelligence officers to manage national security threats.\n2. The system shall allow intelligence officers to track suspects involved in potential security threats.\n3. The system shall allow intelligence officers to analyze intelligence data for security insights.\n4. The system shall allow intelligence officers to input threat details, including descriptions and evidence.\n5. The system shall allow intelligence officers to gather intelligence related to national security.\n6. The system shall allow intelligence officers to identify suspects based on intelligence gathered.\n7. The system shall allow administrators to search criminal records for further investigation.\n8. The system shall allow administrators to issue warrants for security operations.\n9. The system shall allow administrators to make arrests based on warrants.\n10. The system shall allow administrators to track threat levels and updates.\n11. The system shall allow administrators to manage intelligence storage and security data.\n12. The system shall generate reports on security trends and intelligence data.\n13. The system shall allow administrators to oversee intelligence operations.\n14. The system shall allow administrators to allocate resources for national security.\n15. The system shall ensure national security through threat management and intelligence analysis.\n",
        "output": "@startchen\n\nentity Officer {\n  officer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  officer_status\n}\n\nentity Suspect {\n  suspect_id <<key>> \n  name\n  age\n  gender\n  location\n  suspect_status\n}\n\nentity Threat {\n  threat_id <<key>>\n  officer_id <<foreign>>\n  threat_date\n  threat_status\n  threat_description\n}\n\nentity Intelligence {\n  intelligence_id <<key>>\n  threat_id <<foreign>>\n  intelligence_type\n  intelligence_details\n  intelligence_status\n}\n\nentity Report {\n  report_id <<key>>\n  officer_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Warrant {\n  warrant_id <<key>>\n  officer_id <<foreign>>\n  suspect_id <<foreign>>\n  issue_date\n  warrant_status\n}\n\nrelationship MANAGES_THREAT {\n}\nrelationship TRACKS_SUSPECT {\n}\nrelationship ISSUES_WARRANT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RELATES_TO {\n}\n\nMANAGES_THREAT -1- Officer\nMANAGES_THREAT -N- Threat\n\nTRACKS_SUSPECT -1- Threat\nTRACKS_SUSPECT -N- Suspect\n\nRELATES_TO -1- Threat\nRELATES_TO -N- Intelligence\n\nISSUES_WARRANT -1- Officer\nISSUES_WARRANT -N- Warrant\n\nGENERATES_REPORT -1- Officer\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Protest Management System:\n1. The system shall allow organizers to manage demonstrations and protests.\n2. The system shall allow organizers to track participants involved in protests.\n3. The system shall allow organizers to analyze protest data for insights.\n4. The system shall allow organizers to input protest details such as location, time, and participants.\n5. The system shall allow organizers to gather information related to protests.\n6. The system shall allow organizers to identify participants for coordination.\n7. The system shall allow officers to monitor protest activities to ensure safety.\n8. The system shall allow officers to issue permits for protests and demonstrations.\n9. The system shall allow officers to ensure public safety during protests.\n10. The system shall allow administrators to track the progress of protests.\n11. The system shall allow administrators to manage protest locations and logistics.\n12. The system shall generate reports on protest trends and data.\n13. The system shall allow administrators to oversee protest operations.\n14. The system shall allow administrators to allocate resources for protest management.\n15. The system shall ensure peaceful demonstrations through proper coordination and safety measures.\n",
        "output": "@startchen\n\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  organizer_status\n}\n\nentity Officer {\n  officer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  officer_status\n}\n\nentity Participant {\n  participant_id <<key>>\n  name\n  age\n  gender\n  location\n  participant_status\n}\n\nentity Protest {\n  protest_id <<key>>\n  organizer_id <<foreign>>\n  protest_date\n  protest_location\n  protest_status\n  protest_description\n}\n\nentity Report {\n  report_id <<key>>\n  organizer_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Permit {\n  permit_id <<key>>\n  officer_id <<foreign>>\n  protest_id <<foreign>>\n  issue_date\n  permit_status\n}\n\nrelationship MANAGES_PROTEST {\n}\nrelationship TRACKS_PARTICIPANT {\n}\nrelationship ISSUES_PERMIT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RELATES_TO {\n}\n\nMANAGES_PROTEST -1- Organizer\nMANAGES_PROTEST -N- Protest\n\nTRACKS_PARTICIPANT -1- Protest\nTRACKS_PARTICIPANT -N- Participant\n\nISSUES_PERMIT -1- Officer\nISSUES_PERMIT -N- Permit\n\nRELATES_TO -1- Protest\nRELATES_TO -N- Permit\n\nGENERATES_REPORT -1- Organizer\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Boycott Management System:\n1. The system shall allow activists to organize boycotts and manage protest activities.\n2. The system shall allow activists to track the supporters involved in the boycott.\n3. The system shall allow activists to analyze boycott data and trends for insights.\n4. The system shall allow activists to input boycott details, including location and objectives.\n5. The system shall allow activists to gather information related to the boycott.\n6. The system shall allow activists to identify supporters and manage their involvement.\n7. The system shall allow officers to monitor boycott activities and ensure public safety.\n8. The system shall allow officers to issue public statements during the boycott.\n9. The system shall allow officers to ensure public safety during the boycott.\n10. The system shall allow administrators to track boycott progress and updates.\n11. The system shall allow administrators to manage boycott locations and logistics.\n12. The system shall generate reports on boycott trends and data analysis.\n13. The system shall allow administrators to oversee boycott operations.\n14. The system shall allow administrators to allocate resources for managing the boycott.\n15. The system shall ensure peaceful demonstrations by coordinating with law enforcement.\n",
        "output": "@startchen\n\nentity Activist {\n  activist_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  activist_status\n}\n\nentity Officer {\n  officer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  officer_status\n}\n\nentity Supporter {\n  supporter_id <<key>>\n  name\n  age\n  gender\n  location\n  supporter_status\n}\n\nentity Boycott {\n  boycott_id <<key>>\n  activist_id <<foreign>>\n  boycott_date\n  boycott_location\n  boycott_status\n  boycott_description\n}\n\nentity Report {\n  report_id <<key>>\n  activist_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Statement {\n  statement_id <<key>>\n  officer_id <<foreign>>\n  boycott_id <<foreign>>\n  issue_date\n  statement_status\n  statement_content\n  statement_type\n  related_incidents\n}\n\nrelationship ORGANIZES_BOYCOTT {\n}\nrelationship TRACKS_SUPPORTER {\n}\nrelationship ISSUES_STATEMENT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RELATES_TO {\n}\n\nORGANIZES_BOYCOTT -1- Activist\nORGANIZES_BOYCOTT -N- Boycott\n\nTRACKS_SUPPORTER -1- Boycott\nTRACKS_SUPPORTER -N- Supporter\n\nRELATES_TO -1- Boycott\nRELATES_TO -N- Statement\n\nISSUES_STATEMENT -1- Officer\nISSUES_STATEMENT -N- Statement\n\nGENERATES_REPORT -1- Activist\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Disaster Management System:\n1. The system shall allow responders to manage disaster incidents and response activities.\n2. The system shall allow responders to track victims affected by disasters.\n3. The system shall allow responders to analyze disaster data for insights.\n4. The system shall allow responders to input disaster details, including location and severity.\n5. The system shall allow responders to gather information during the disaster response.\n6. The system shall allow responders to identify victims for rescue operations.\n7. The system shall allow officers to monitor disaster activities to ensure public safety.\n8. The system shall allow officers to issue alerts and warnings during disasters.\n9. The system shall ensure public safety during disaster events.\n10. The system shall allow administrators to track disaster progress and updates.\n11. The system shall allow administrators to manage disaster locations and logistics.\n12. The system shall generate reports on disaster trends and data analysis.\n13. The system shall allow administrators to oversee disaster operations.\n14. The system shall allow administrators to allocate resources for disaster response.\n15. The system shall ensure timely responses by coordinating resources effectively.\n",
        "output": "@startchen\n\nentity Responder {\n  responder_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  responder_status\n}\n\nentity Officer {\n  officer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  officer_status\n}\n\nentity Victim {\n  victim_id <<key>>\n name\n  age\n  gender\n  location\n  victim_status\n}\n\nentity Disaster {\n  disaster_id <<key>>\n  responder_id <<foreign>>\n  disaster_date\n  disaster_location\n  disaster_status\n  disaster_description\n}\n\nentity Report {\n  report_id <<key>>\n  responder_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Alert {\n  alert_id <<key>>\n  officer_id <<foreign>>\n  disaster_id <<foreign>>\n  issue_date\n  alert_status\n  alert_content\n  alert_type\n  related_incidents\n}\n\nrelationship MANAGES_DISASTER {\n}\nrelationship TRACKS_VICTIM {\n}\nrelationship ISSUES_ALERT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RELATES_TO {\n}\n\nMANAGES_DISASTER -1- Responder\nMANAGES_DISASTER -N- Disaster\n\nTRACKS_VICTIM -1- Disaster\nTRACKS_VICTIM -N- Victim\n\nRELATES_TO -1- Disaster\nRELATES_TO -N- Alert\n\nISSUES_ALERT -1- Officer\nISSUES_ALERT -N- Alert\n\nGENERATES_REPORT -1- Responder\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Disaster Recovery System:\n1. The system shall allow organizations to recover from disasters and restore business operations.\n2. The system shall allow organizations to restore operations and critical systems after disasters.\n3. The system shall minimize downtime during the disaster recovery process.\n4. The system shall allow organizations to input disaster recovery plans for future incidents.\n5. The system shall allow organizations to activate recovery procedures when necessary.\n6. The system shall allow organizations to restore critical systems affected by the disaster.\n7. The system shall allow IT staff to monitor recovery progress during the recovery phase.\n8. The system shall allow IT staff to test backup systems for operational readiness.\n9. The system shall allow IT staff to ensure data integrity during recovery.\n10. The system shall track recovery timelines to measure the speed of restoration.\n11. The system shall manage resources required for disaster recovery efforts.\n12. The system shall generate reports on disaster recovery performance and timelines.\n13. The system shall allow administrators to oversee recovery operations and strategies.\n14. The system shall allow administrators to allocate resources effectively for recovery.\n15. The system shall ensure business continuity by minimizing downtime and restoring operations.\n",
        "output": "@startchen\n\nentity Organization {\n  organization_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  organization_status\n}\n\nentity ITStaff {\n  itstaff_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  itstaff_status\n}\n\nentity RecoveryPlan {\n  recoveryplan_id <<key>>\n  organization_id <<foreign>>\n  recoveryplan_description <<multi>>\n  recoveryplan_date\n  recoveryplan_status\n}\n\nentity Report {\n  report_id <<key>>\n  itstaff_id <<foreign>>\n  recoveryplan_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Backup {\n  backup_id <<key>>\n  recoveryplan_id <<foreign>>\n  backup_date\n  backup_status\n  backup_type\n  backup_details <<multi>>\n}\n\nentity DisasterEvent {\n  disaster_event_id <<key>>\n  organization_id <<foreign>>\n  event_date\n  event_type\n  event_description\n  event_status\n}\n\nrelationship HAS_PLAN {\n}\nrelationship MONITORS_RECOVERY {\n progress_percentage\n}\nrelationship CREATES_BACKUP {\n}\nrelationship TRACKS_EVENT {\n}\nrelationship GENERATES_REPORT {\n}\n\nHAS_PLAN -1- Organization\nHAS_PLAN -N- RecoveryPlan\n\nMONITORS_RECOVERY -1- ITStaff\nMONITORS_RECOVERY -N- RecoveryPlan\n\nCREATES_BACKUP -1- RecoveryPlan\nCREATES_BACKUP -N- Backup\n\nTRACKS_EVENT -1- Organization\nTRACKS_EVENT -N- DisasterEvent\n\nGENERATES_REPORT -1- ITStaff\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Give me a ERD for this system. Functional Requirements for Calculator Application:\n1. The system shall allow users to perform basic arithmetic operations such as addition, subtraction, multiplication, and division.\n2. The system shall provide a user-friendly interface for interacting with the calculator.\n3. The system shall allow users to input numerical values and select mathematical operators.\n4. The system shall display calculation results to the users.\n5. The system shall include the option to clear input values for new calculations.\n6. The system shall allow users to perform multiple operations in a sequence.\n7. The system shall save calculation history for reference.\n8. The system shall allow users to customize calculator settings, such as number format or theme.\n9. The system shall provide access to past calculations through a calculation log.\n10. The system shall notify users in case of calculation errors or invalid inputs.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Calculation {\n  calculation_id <<key>>\n  user_id <<foreign>>\n  calculation_date\n  calculation_type\n  calculation_input\n  calculation_result\n  calculation_status\n}\n\nentity Log {\n  log_id <<key>>\n  user_id <<foreign>>\n  log_date\n  log_content\n  log_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship PERFORMS_CALCULATION {\n}\nrelationship SAVES_LOG {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nPERFORMS_CALCULATION -1- User\nPERFORMS_CALCULATION -N- Calculation\n\nSAVES_LOG -1- User\nSAVES_LOG -N- Log\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "Give me a ERD for this system. Functional Requirements for Code Repository Platform:\n1. The system shall allow developers to manage source code for software development projects.\n2. The system shall facilitate collaboration on projects by providing tools for multiple developers to work together.\n3. The system shall track code changes and version control using appropriate tools.\n4. The system shall provide version control tools to manage revisions and updates to the codebase.\n5. The system shall support code review features to allow developers to review and approve code changes.\n6. The system shall include project management capabilities for organizing and tracking project progress.\n7. The system shall allow developers to create repositories to store project code.\n8. The system shall allow developers to commit code changes and save them in the repository.\n9. The system shall allow developers to merge code branches when working on multiple features.\n10. The system shall track code histories, including changes made by different developers.\n11. The system shall allow developers to manage project issues, such as bug tracking and feature requests.\n12. The system shall automate code testing to verify the functionality of code changes.\n13. The system shall allow developers to manage access permissions for the code repository.\n14. The system shall provide project wikis for sharing project documentation.\n15. The system shall send notifications to developers about updates or changes to the code.\n",
        "output": "@startchen\n\nentity Developer {\n  developer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  developer_status\n}\n\nentity Repository {\n  repository_id <<key>>\n  repository_name\n  repository_description\n  repository_status\n  repository_type\n  programming_language <<multi>>\n  owner_id <<foreign>>\n}\n\nentity Commit {\n  commit_id <<key>>\n  repository_id <<foreign>>\n  developer_id <<foreign>>\n  commit_changes <<multi>>\n  commit_lines\n  commit_date\n  commit_message\n  commit_status\n}\n\nentity Issue {\n  issue_id <<key>>\n  repository_id <<foreign>>\n  developer_id <<foreign>>\n  issue_open_date\n  issue_close_date\n  issue_description <<multi>>\n  issue_status <<derived>>\n  issue_type\n}\n\nentity Notification {\n  notification_id <<key>>\n  developer_id <<foreign>>\n  repository_id <<foreign>>\n  notification_date\n  notification_content <<ulti>>\n  notification_status\n}\n\nrelationship COLLABORATES_ON {\n  access_level\n  role\n  join_date\n}\nrelationship HAS_OWNERSHIP {\n}\nrelationship COMMITS_CODE {\n}\nrelationship CREATES_ISSUE {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship BELONGS_TO {\n}\n\nCOLLABORATES_ON -N- Developer\nCOLLABORATES_ON -N- Repository\n\nHAS_OWNERSHIP -N- Developer\nHAS_OWNERSHIP -N- Repository\n\nCOMMITS_CODE -1- Developer\nCOMMITS_CODE -N- Commit\n\nCREATES_ISSUE -1- Developer\nCREATES_ISSUE -N- Issue\n\nBELONGS_TO -N- Commit\nBELONGS_TO -1- Repository\n\nBELONGS_TO -N- Issue\nBELONGS_TO -1- Repository\n\nRECEIVES_NOTIFICATION -1- Developer\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "Give me a ERD for this system. Functional Requirements for Meeting Scheduler Application:\n1. The system shall allow users to schedule meetings by selecting dates, times, and participants.\n2. The system shall allow users to invite participants to the meeting via email or other communication methods.\n3. The system shall allow users to manage meeting details, including the location, agenda, and duration.\n4. The system shall integrate with users' calendars for better scheduling.\n5. The system shall support availability checks for participants to find suitable meeting times.\n6. The system shall send reminder notifications to users for upcoming meetings.\n7. The system shall allow users to create meeting requests and share them with participants.\n8. The system shall allow users to send meeting invitations to participants.\n9. The system shall allow users to set meeting agendas and distribute them to participants.\n10. The system shall track meeting schedules and maintain a record of upcoming and past meetings.\n11. The system shall manage participant responses to meeting invitations (accept/decline).\n12. The system shall generate meeting reports, including attendance and meeting notes.\n13. The system shall allow users to customize meeting settings, such as notification preferences.\n14. The system shall provide users with access to past meeting histories.\n15. The system shall send notifications to users about meeting updates or cancellations.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n}\nentity Meeting {\n  meeting_id <<key>>\n  organizer_id <<foreign>>\n  meeting_title\n  meeting_date\n  meeting_time\n  meeting_duration\n  meeting_location\n  meeting_status\n  meeting_agenda <<multi>>\n}\nentity MeetingRequest {\n  request_id <<key>>\n  organizer_id <<foreign>>\n  request_date\n  request_status\n  proposed_date <<multi>>\n  proposed_time <<multi>>\n}\nentity MeetingReport {\n  report_id <<key>>\n  meeting_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship CREATES_MEETING {\n}\nrelationship ATTENDS_MEETING {\n  join_time\n  response_status\n}\nrelationship GENERATES_REQUEST {\n}\nrelationship GENERATES_REPORT {\n}\n\nUser -1- CREATES_MEETING\nCREATES_MEETING -N- Meeting\nUser -N- ATTENDS_MEETING\nATTENDS_MEETING -1- Meeting\nUser -1- GENERATES_REQUEST\nGENERATES_REQUEST -N- MeetingRequest\nMeeting -N- GENERATES_REPORT\nGENERATES_REPORT -N- MeetingReport\n\n@endchen"        
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Webinar Platform:\n1. The system shall allow users (hosts) to host webinars with interactive features and audience engagement options.\n2. The system shall allow hosts to schedule webinars, invite participants, and present webinar content.\n3. The system shall allow hosts to track attendee interactions, such as Q&A and polls, during webinars.\n4. The system shall allow hosts to manage webinar recordings and store them for future access.\n5. The system shall provide tools for generating analytics reports on webinar performance.\n6. The system shall allow hosts to customize webinar settings, such as layout and branding.\n7. The system shall allow hosts to view the history of previous webinars.\n8. The system shall send notifications to hosts about upcoming webinars.\n",
        "output": "@startchen\n\nentity Host {\n  host_id <<key>>\n  name\n  email\n  password\n  phone\n}\nentity Attendee {\n  attendee_id <<key>>\n  name\n  email\n  password\n  phone\n  attendee_status\n}\nentity Webinar {\n  webinar_id <<key>>\n  host_id <<foreign>>\n  webinar_title\n  webinar_date\n  webinar_time\n  webinar_duration\n  webinar_content <<multi>>\n}\nentity Engagement {\n  engagement_id <<key>>\n  attendee_id <<foreign>>\n  webinar_id <<foreign>>\n  engagement_date\n  engagement_type\n  engagement_content\n  engagement_status\n}\n\nrelationship HOSTS_WEBINAR {\n}\nrelationship ATTENDS_WEBINAR {\n  join_time\n  response_status\n}\nrelationship HAS_ENGAGEMENT {\n  engagement_role\n  engagement_duration\n}\nrelationship PARTICIPATES_IN {\n}\n\nHost -1- HOSTS_WEBINAR\nHOSTS_WEBINAR -N- Webinar\nAttendee -N- ATTENDS_WEBINAR\nATTENDS_WEBINAR -1- Webinar\nAttendee -1- PARTICIPATES_IN\nPARTICIPATES_IN -N- Engagement\nWebinar -1- HAS_ENGAGEMENT\nHAS_ENGAGEMENT -N- Engagement\n\n@endchen" 
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Video Conferencing Application (Zoom):\n1. The system shall allow users to host virtual meetings and collaborate with team members and clients.\n2. The system shall provide video and audio conferencing tools for communication.\n3. The system shall allow users to share their screens during meetings.\n4. The system shall include a chat messaging feature for communication during meetings.\n5. The system shall allow users to schedule meetings, invite participants, and join virtual rooms.\n6. The system shall allow users to record meetings for future reference.\n7. The system shall allow users to manage meeting settings, such as mute/unmute participants.\n8. The system shall generate meeting reports with attendance and meeting details.\n9. The system shall allow users to customize virtual meeting backgrounds.\n10. The system shall allow users to view the history of previous meetings.\n11. The system shall notify users of upcoming meetings.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Meeting {\n  meeting_id <<key>>\n  host_id <<foreign>>\n  meeting_title\n  meeting_date\n  meeting_time\n  meeting_duration\n  meeting_status\n  meeting_topic\n  meeting_content <<multi>>\n}\n\nentity Participant {\n  participant_id <<key>>\n  name\n  email\n  phone\n  location\n  participant_status\n}\n\nentity Recording {\n  recording_id <<key>>\n  meeting_id <<foreign>>\n  recording_date\n  recording_duration\n  recording_status\n  recording_content\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  meeting_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nentity Report {\n  report_id <<key>>\n  user_id <<foreign>>\n  meeting_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship HOSTS_MEETING {\n}\nrelationship ATTENDS_MEETING {\n join_time\n response_status\n}\nrelationship RECORDS_MEETING {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship GENERATES_REPORT {\n}\n\nHOSTS_MEETING -1- User\nHOSTS_MEETING -N- Meeting\n\nATTENDS_MEETING -N- Participant\nATTENDS_MEETING -1- Meeting\n\nRECORDS_MEETING -1- Meeting\nRECORDS_MEETING -N- Recording\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\nGENERATES_REPORT -1- User\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Team Collaboration Platform (Slack):\n1. The system shall allow users to communicate, share files, and collaborate on projects using messaging channels.\n2. The system shall allow users to create channels for team communication and project discussions.\n3. The system shall allow users to send messages and share documents in the platform.\n4. The system shall provide tools for tracking project progress and managing team tasks.\n5. The system shall generate productivity reports based on task completion and collaboration.\n6. The system shall allow users to customize notification settings based on their preferences.\n7. The system shall provide access to message histories for reference.\n8. The system shall send alerts to users for important updates related to the project or messages.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  user_status\n  notification_preferences <<multi>>\n}\nentity Channel {\n  channel_id <<key>>\n  name\n  description\n  created_date\n}\nentity Message {\n  message_id <<key>>\n  user_id <<foreign>>\n  channel_id <<foreign>>\n  sent_date\n  message_content\n}\nentity File {\n  file_id <<key>>\n  uploaded_by <<foreign>>\n  channel_id <<foreign>>\n  file_name\n  file_type\n  file_size\n  uploaded_date\n  file_status\n}\nentity Task {\n  task_id <<key>>\n  assigned_to <<foreign>>\n  created_by <<foreign>>\n  channel_id <<foreign>>\n  task_title\n  task_description\n  task_status\n  due_date\n}\nentity Project {\n  project_id <<key>>\n  project_name\n  project_description\n  created_by <<foreign>>\n  start_date\n  end_date\n  status\n}\n\nrelationship PARTICIPATES_IN {\n  role\n  join_date\n}\nrelationship POSTS_MESSAGE {\n}\nrelationship UPLOADS_FILE {\n}\nrelationship ASSIGNED_TO_TASK {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship HAS_MESSAGE {\n}\n\nUser -N- PARTICIPATES_IN\nPARTICIPATES_IN -N- Channel\nUser -1- POSTS_MESSAGE\nPOSTS_MESSAGE -N- Message\nUser -1- UPLOADS_FILE\nUPLOADS_FILE -N- File\nUser -1- ASSIGNED_TO_TASK\nASSIGNED_TO_TASK -N- Task\nTask -N- ASSOCIATED_WITH\nASSOCIATED_WITH -1- Project\nChannel -1- HAS_MESSAGE\nHAS_MESSAGE -N- Message\n\n@endchen"    
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Project Management Tool (Trello):\n1. The system shall allow users to organize tasks and track project progress.\n2. The system shall provide task boards, task cards, and project timelines for task organization.\n3. The system shall allow users to create task boards, add task cards, and assign tasks to team members.\n4. The system shall allow users to track task statuses, manage project deadlines, and generate progress reports.\n5. The system shall allow users to customize task labels, view task histories, and receive notifications for task updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  user_status\n  notification_preferences <<multi>>\n}\n\nentity Board {\n  board_id <<key>>\n  name\n  description\n  created_by <<foreign>>\n  created_date\n  status\n}\n\nentity Card {\n  card_id <<key>>\n  board_id <<foreign>>\n  created_by <<foreign>>\n  assigned_to <<foreign>>\n  card_title\n  card_description\n  card_status\n  due_date\n}\n\nentity Label {\n  label_id <<key>>\n  board_id <<foreign>>\n  label_name\n  label_color\n  label_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  generated_by <<foreign>>\n  notification_type\n  notification_date\n  notification_content\n  notification_status\n}\n\nentity Report {\n  report_id <<key>>\n  generated_by <<foreign>>\n  board_id <<foreign>>\n  report_date\n  report_type\n  report_content\n  report_status\n}\n\nrelationship HAS {\n}\nrelationship CREATES_BOARD {\n}\nrelationship ADDS_CARD {\n}\nrelationship HAS_LABEL {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship GENERATES_REPORT {\n}\n\nCREATES_BOARD -1- User\nCREATES_BOARD -N- Board\n\nADDS_CARD -1- User\nADDS_CARD -N- Card\n\nHAS -1- Board\nHAS -N- Card\n\nHAS_LABEL -1- Card\nHAS_LABEL -N- Label\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\nGENERATES_REPORT -1- Board\nGENERATES_REPORT -N- Report\n\n@endchen"      
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Celebrity News and Events Platform:\n1. The system shall allow users to stay updated on celebrity news, explore profiles, and view event schedules.\n2. The system shall provide news articles, event listings, and celebrity profiles for user exploration.\n3. The system shall allow users to read news articles, view event schedules, and explore celebrity profiles.\n4. The system shall track trending topics, manage event registrations, and generate reports on celebrity engagements.\n5. The system shall allow users to customize news preferences, view event histories, and receive notifications for upcoming events.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  user_status\n  notification_preferences <<multi>>\n}\n\nentity Article {\n  article_id <<key>>\n  title\n  author\n  publication_date\n  content\n  status\n}\n\nentity Event {\n  event_id <<key>>\n  title\n  organizer\n  event_date\n  event_location\n  event_description\n  status\n}\n\nentity Celebrity {\n  celebrity_id <<key>>\n  name\n  profession\n  birth_date\n  biography\n  status\n}\n\nentity Report {\n  report_id <<key>>\n  celebrity_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  event_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship READS_ARTICLE {\n}\nrelationship FOLLOWS_CELEBRITY {\n}\nrelationship REGISTERS_FOR_EVENT {\n  registration_date\n  registration_status\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship GENERATES_REPORT {\n}\n\nREADS_ARTICLE -1- User\nREADS_ARTICLE -N- Article\n\nREGISTERS_FOR_EVENT -1- User\nREGISTERS_FOR_EVENT -N- Event\n\nFOLLOWS_CELEBRITY -N- User\nFOLLOWS_CELEBRITY -1- Celebrity\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\nGENERATES_REPORT -1- Event\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Tech-Talk Platform:\n1. The system shall allow users to engage in tech discussions, share knowledge, and collaborate on tech projects.\n2. The system shall provide discussion forums, knowledge-sharing tools, and project management features.\n3. The system shall allow users to participate in discussions, share tech resources, and collaborate on tech projects.\n4. The system shall track tech trends, manage project tasks, and generate reports on tech innovations.\n5. The system shall allow users to customize discussion preferences, view project histories, and receive notifications for tech updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  notification_preferences <<multi>>\n}\nentity Forum {\n  forum_id <<key>>\n  name\n  description\n  created_by <<foreign>>\n  created_date\n  status\n}\nentity Discussion {\n  discussion_id <<key>>\n  forum_id <<foreign>>\n  created_by <<foreign>>\n  discussion_title\n  discussion_content\n  discussion_status\n  discussion_date\n}\nentity Resource {\n  resource_id <<key>>\n  user_id <<foreign>>\n  resource_title\n  resource_link\n  resource_description\n  resource_status\n}\nentity Project {\n  project_id <<key>>\n  project_name\n  project_description\n  created_by <<foreign>>\n  start_date\n  end_date\n  project_status\n}\n\nrelationship PARTICIPATES_IN_DISCUSSION {\n}\nrelationship SHARES_RESOURCE {\n}\nrelationship COLLABORATES_ON_PROJECT {\n}\nrelationship BELONGS_TO_FORUM {\n}\n\nUser -N- PARTICIPATES_IN_DISCUSSION\nPARTICIPATES_IN_DISCUSSION -N- Discussion\nUser -1- SHARES_RESOURCE\nSHARES_RESOURCE -N- Resource\nUser -N- COLLABORATES_ON_PROJECT\nCOLLABORATES_ON_PROJECT -1- Project\nDiscussion -N- BELONGS_TO_FORUM\nBELONGS_TO_FORUM -1- Forum\n\n@endchen"  
    },
    {
        "input": "Create a ERD for following, Functional Requirements for Babysitter Management System:\n1. The system shall allow parents to search for available babysitters and book babysitting appointments.\n2. The system shall allow parents to communicate with babysitters, track babysitting sessions, and manage payment transactions.\n3. Babysitters shall be able to view babysitting requests, accept appointments, and provide care for children.\n4. The system shall include features for tracking babysitting schedules, generating reports on babysitter performance, and notifying parents of babysitting updates.\n",
        "output": "@startchen\n\nentity Parent {\n  parent_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  parent_status\n}\n\nentity Babysitter {\n  babysitter_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  babysitter_status\n}\n\nentity Child <<weak>> {\n  name <<key>>\n  age\n  gender\n  child_status\n}\n\nentity BabysittingSession {\n  session_id <<key>>\n  parent_id <<foreign>>\n  babysitter_id <<foreign>>\n  child_id <<foreign>>\n  session_date\n  session_time\n  session_duration\n  session_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  parent_id <<foreign>>\n  babysitter_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_status\n}\n\nentity Report {\n  report_id <<key>>\n  parent_id <<foreign>>\n  babysitter_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship HAS_BABYSITTER {\n}\nrelationship SCHEDULES_SESSION {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship GETS_PAYMENT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship PARENT_OF <<identifying>> {\n}\n\nHAS_BABYSITTER -1- BabysittingSession\nHAS_BABYSITTER -1- Babysitter\n\nSCHEDULES_SESSION -1- Parent\nSCHEDULES_SESSION -N- BabysittingSession\n\nMAKES_PAYMENT -1- Parent\nMAKES_PAYMENT -N- Payment\n\nGETS_PAYMENT -1- BabysittingSession\nGETS_PAYMENT -1- Payment\n\nGENERATES_REPORT -1- Parent\nGENERATES_REPORT -N- Report\n\nPARENT_OF -1- Parent\nPARENT_OF -N- Child\n\n@endchen"          
    },
    {
        "input": "Create a ERD for following, Functional Requirements for WhatsApp Sticker Maker Application:\n1. The system shall allow users to create custom stickers by designing stickers, importing images, and adding text.\n2. The system shall allow users to save stickers to collections, share stickers with friends, and download sticker packs.\n3. The system shall include features for editing sticker designs, managing sticker categories, and generating reports on sticker usage.\n4. The system shall allow users to customize sticker settings, view sticker histories, and receive notifications for sticker updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Sticker {\n  sticker_id <<key>>\n  user_id <<foreign>>\n  sticker_name\n  sticker_image\n  sticker_category\n  sticker_status\n}\n\nentity Collection {\n  collection_id <<key>>\n  user_id <<foreign>>\n  collection_name\n  collection_description\n  collection_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  generated_by <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship CREATES_STICKER {\n}\nrelationship ADDED_TO_COLLECTION {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nCREATES_STICKER -1- User\nCREATES_STICKER -N- Sticker\n\nADDED_TO_COLLECTION -N- Sticker\nADDED_TO_COLLECTION -1- Collection\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "Create a ERD for following, Functional Requirements for AI-Based Slides/Presentation Maker:\n1. The system shall allow users to create professional presentations by designing slides, adding content, and customizing slide layouts.\n2. The system shall provide templates, design tools, and data visualization options for slide creation.\n3. The system shall include features for tracking presentation progress, managing slide transitions, and generating reports on presentation engagement.\n4. The system shall allow users to customize presentation settings, view presentation histories, and receive notifications for presentation updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Presentation {\n  presentation_id <<key>>\n  user_id <<foreign>>\n  presentation_title\n  presentation_date\n  presentation_time\n  presentation_duration\n  presentation_status\n  presentation_topic\n  presentation_content <<multi>>\n}\n\nentity Slide {\n  slide_id <<key>>\n  presentation_id <<foreign>>\n  slide_number\n  slide_content\n  slide_layout\n  slide_status\n}\n\nentity Transition {\n  transition_id <<key>>\n  presentation_id <<foreign>>\n  transition_type\n  transition_duration\n  transition_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  presentation_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship CREATES_PRESENTATION {\n}\nrelationship ADDS_SLIDE {\n}\nrelationship INCLUDES_TRANSITION {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nCREATES_PRESENTATION -1- User\nCREATES_PRESENTATION -N- Presentation\n\nADDS_SLIDE -1- Presentation\nADDS_SLIDE -N- Slide\n\nINCLUDES_TRANSITION -1- Slide\nINCLUDES_TRANSITION -N- Transition\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "Create a ERD for following, Functional Requirements for AI-Based Resume Builder:\n1. The system shall allow users to create professional resumes.\n2. The system shall allow users to design resume templates.\n3. The system shall allow users to analyze resume data.\n4. The system shall provide resume templates.\n5. The system shall provide design tools.\n6. The system shall support data visualization options.\n7. The system shall allow users to create resumes.\n8. The system shall allow users to add content to resumes.\n9. The system shall allow users to customize resume layouts.\n10. The system shall allow users to track resume progress.\n11. The system shall allow users to manage resume sections.\n12. The system shall generate reports on resume engagement.\n13. The system shall allow users to customize resume settings.\n14. The system shall allow users to view resume histories.\n15. The system shall notify users of resume updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Resume {\n  resume_id <<key>>\n  user_id <<foreign>>\n  resume_title\n  resume_date\n  resume_content <<multi>>\n  resume_status\n}\n\nentity Section {\n  section_id <<key>>\n  resume_id <<foreign>>\n  section_title\n  section_content\n  section_status\n}\n\nentity Report {\n  report_id <<key>>\n  user_id <<foreign>>\n  resume_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  resume_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship CREATES_RESUME {\n}\nrelationship ADDS_SECTION {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nCREATES_RESUME -1- User\nCREATES_RESUME -N- Resume\n\nADDS_SECTION -1- Resume\nADDS_SECTION -N- Section\n\nGENERATES_REPORT -1- User\nGENERATES_REPORT -N- Report\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "Create a ERD for following, Functional Requirements for AI-Based Chatbot:\n1. The system shall allow users to interact with automated responses.\n2. The system shall allow users to provide information through the chatbot.\n3. The system shall analyze user queries.\n4. The system shall provide chatbot templates.\n5. The system shall offer design tools for chatbot creation.\n6. The system shall support data visualization options.\n7. The system shall allow users to chat with the chatbot.\n8. The system shall allow users to ask questions.\n9. The system shall allow users to receive answers.\n10. The system shall track chatbot interactions.\n11. The system shall manage user queries.\n12. The system shall generate reports on chatbot performance.\n13. The system shall allow users to customize chatbot settings.\n14. The system shall allow users to view chatbot histories.\n15. The system shall notify users of chatbot updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Interaction {\n  interaction_id <<key>>\n  user_id <<foreign>>\n  chatbot_id <<foreign>>\n  interaction_date\n  interaction_content\n  interaction_status\n}\n\nentity Query {\n  query_id <<key>>\n  user_id <<foreign>>\n  query_content\n  query_date\n  query_status\n}\n\nentity Report {\n  report_id <<key>>\n  user_id <<foreign>>\n  chatbot_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship INTERACTS_WITH_CHATBOT {\n}\nrelationship ASKS_QUERY {\n}\nrelationship GENERATES_REPORT {\n}\n\nINTERACTS_WITH_CHATBOT -1- User\nINTERACTS_WITH_CHATBOT -N- Interaction\n\nASKS_QUERY -1- User\nASKS_QUERY -N- Query\n\nGENERATES_REPORT -1- User\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Create a ERD for following, Functional Requirements for VR-Based Training Platform:\n1. The system shall allow users to engage in virtual training sessions.\n2. The system shall allow users to learn new skills.\n3. The system shall analyze training data.\n4. The system shall provide VR training modules.\n5. The system shall offer interactive simulations.\n6. The system shall support progress tracking tools.\n7. The system shall allow users to participate in VR training sessions.\n8. The system shall allow users to complete skill challenges.\n9. The system shall provide feedback on user performance.\n10. The system shall track user training progress.\n11. The system shall manage skill assessments.\n12. The system shall generate reports on training outcomes.\n13. The system shall allow users to customize training settings.\n14. The system shall allow users to view training histories.\n15. The system shall notify users of training updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity TrainingSession {\n  session_id <<key>>\n  user_id <<foreign>>\n  session_date\n  session_time\n  session_duration\n  session_status\n  session_topic\n  session_content <<multi>>\n}\n\nentity SkillChallenge {\n  challenge_id <<key>>\n  session_id <<foreign>>\n  challenge_title\n  challenge_description\n  challenge_status\n}\n\nentity Progress {\n  progress_id <<key>>\n  user_id <<foreign>>\n  session_id <<foreign>>\n  progress_date\n  progress_content\n  progress_status\n}\n\nentity Report {\n  report_id <<key>>\n  session_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship PARTICIPATES_IN {\n}\nrelationship HAS_CHALLENGE {\n}\nrelationship TRACKS_PROGRESS {\n}\nrelationship GENERATES_REPORT {\n}\n\nPARTICIPATES_IN -1- User\nPARTICIPATES_IN -N- TrainingSession\n\nHAS_CHALLENGE -1- TrainingSession\nHAS_CHALLENGE -N- SkillChallenge\n\nTRACKS_PROGRESS -1- User\nTRACKS_PROGRESS -N- Progress\n\nGENERATES_REPORT -1- TrainingSession\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Create a ERD for following, Functional Requirements for Connexus VR-Based Social Platform:\n1. The system shall allow users to connect with like-minded individuals.\n2. The system shall allow users to engage in virtual social activities.\n3. The system shall analyze social interactions.\n4. The system shall provide VR social spaces for users.\n5. The system shall offer interactive games.\n6. The system shall support privacy settings for users.\n7. The system shall allow users to create virtual avatars.\n8. The system shall allow users to join social events.\n9. The system shall allow users to interact with other users.\n10. The system shall track social connections of users.\n11. The system shall allow users to manage privacy preferences.\n12. The system shall generate reports on social engagements.\n13. The system shall allow users to customize social settings.\n14. The system shall allow users to view social histories.\n15. The system shall notify users of social updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n  privacy preferences <<multi>>\n}\n\nentity Avatar {\n  avatar_id <<key>>\n  user_id <<foreign>>\n  avatar_name\n  avatar_image\n  avatar_status\n}\n\nentity SocialEvent {\n  event_id <<key>>\n  user_id <<foreign>>\n  event_date\n  event_time\n  event_duration\n  event_status\n  event_topic\n  event_content <<multi>>\n}\n\nentity Report {\n  report_id <<key>>\n  user_id <<foreign>>\n  event_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship CREATES_AVATAR {\n}\nrelationship JOINS_EVENT {\n}\nrelationship CONNECTS_WITH {\n  connection_date\n  connection_status\n}\nrelationship GENERATES_REPORT {\n}\n\nCREATES_AVATAR -1- User\nCREATES_AVATAR -N- Avatar\n\nJOINS_EVENT -1- Avatar\nJOINS_EVENT -N- SocialEvent\n\nCONNECTS_WITH -1- User\nCONNECTS_WITH -N- User\n\nGENERATES_REPORT -1- User\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Create a ERD for following, Functional Requirements for VR-Based Public Speaking App:\n1. The system shall allow users to overcome stage fright.\n2. The system shall allow users to practice public speaking.\n3. The system shall analyze speaking performance.\n4. The system shall provide VR speaking environments.\n5. The system shall offer speech coaching tools.\n6. The system shall support audience feedback options.\n7. The system shall allow users to practice speeches.\n8. The system shall provide coaching tips to users.\n9. The system shall allow users to improve their speaking skills.\n10. The system shall track the speaking progress of users.\n11. The system shall allow users to manage speech evaluations.\n12. The system shall generate reports on speaking performance.\n13. The system shall allow users to customize speaking settings.\n14. The system shall allow users to view speaking histories.\n15. The system shall notify users of speaking updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity SpeechSession {\n  session_id <<key>>\n  user_id <<foreign>>\n  session_date\n  session_time\n  session_duration\n  session_status\n  session_topic\n  session_content <<multi>>\n}\n\nentity CoachingTip {\n  tip_id <<key>>\n  session_id <<foreign>>\n  tip_content\n  tip_date\n  tip_status\n}\n\nentity Evaluation {\n  evaluation_id <<key>>\n  user_id <<foreign>>\n  session_id <<foreign>>\n  evaluator_type\n  evaluation_date\n  evaluation_score\n  evaluation_criteria <<multi>>\n  evaluation_content\n  evaluation_status\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  session_id <<foreign>>\n  feedback_source\n  feedback_date\n  feedback_content\n  feedback_sentiment\n  feedback_status\n}\n\nentity Report {\n  report_id <<key>>\n  session_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship PARTICIPATES_IN {\n}\nrelationship RECEIVES_TIP {\n}\nrelationship HAS_EVALUATION {\n}\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship GENERATES_REPORT {\n}\n\nPARTICIPATES_IN -1- User\nPARTICIPATES_IN -N- SpeechSession\n\nRECEIVES_TIP -1- User\nRECEIVES_TIP -N- CoachingTip\n\nHAS_EVALUATION -1- SpeechSession\nHAS_EVALUATION -N- Evaluation\n\nPROVIDES_FEEDBACK -1- SpeechSession\nPROVIDES_FEEDBACK -N- Feedback\n\nGENERATES_REPORT -1- SpeechSession\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Create a ERD for following, Functional Requirements for VR-Based Physiotherapy App:\n1. The system shall allow users to perform physical therapy exercises.\n2. The system shall allow users to track their rehabilitation progress.\n3. The system shall analyze rehabilitation data.\n4. The system shall provide VR exercise routines for users.\n5. The system shall offer motion tracking tools for users.\n6. The system shall support progress monitoring features.\n7. The system shall allow users to follow guided exercises.\n8. The system shall allow users to monitor their movements during exercises.\n9. The system shall help users improve their physical mobility.\n10. The system shall track users' exercise progress.\n11. The system shall allow users to manage their rehabilitation goals.\n12. The system shall generate reports on rehabilitation outcomes.\n13. The system shall allow users to customize exercise settings.\n14. The system shall allow users to view their exercise histories.\n15. The system shall notify users of exercise updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity ExerciseSession {\n  session_id <<key>>\n  user_id <<foreign>>\n  session_date\n  session_time\n  session_duration\n  session_status\n  session_topic\n  session_content <<multi>>\n}\n\nentity Goal {\n  goal_id <<key>>\n  user_id <<foreign>>\n  session_id <<foreign>>\n  goal_date\n  goal_content\n  goal_status\n}\n\nentity Progress {\n  progress_id <<key>>\n  user_id <<foreign>>\n  session_id <<foreign>>\n  progress_date\n  range_of_motion\n  accuracy_percentage\n  repetition_count\n  progress_status\n}\n\nentity Report {\n  report_id <<key>>\n  session_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship PARTICIPATES_IN {\n}\nrelationship TRACKS_PROGRESS {\n}\nrelationship SETS_GOAL {\n}\nrelationship GENERATES_REPORT {\n}\n\nPARTICIPATES_IN -1- User\nPARTICIPATES_IN -N- ExerciseSession\n\nTRACKS_PROGRESS -1- ExerciseSession\nTRACKS_PROGRESS -N- Progress\n\nSETS_GOAL -1- User\nSETS_GOAL -N- Goal\n\nGENERATES_REPORT -1- ExerciseSession\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Create a ERD for following, Functional Requirements for VR-Based Meditation App:\n1. The system shall allow users to practice meditation and mindfulness exercises.\n2. The system shall allow users to track their meditation progress.\n3. The system shall analyze meditation data.\n4. The system shall provide VR meditation environments for users.\n5. The system shall offer guided meditation sessions.\n6. The system shall support relaxation techniques for users.\n7. The system shall allow users to follow meditation guides.\n8. The system shall allow users to monitor their breathing and heart rate during meditation.\n9. The system shall help users improve their mental well-being.\n10. The system shall track users' meditation progress.\n11. The system shall allow users to manage their meditation goals.\n12. The system shall generate reports on meditation outcomes.\n13. The system shall allow users to customize meditation settings.\n14. The system shall allow users to view their meditation histories.\n15. The system shall notify users of meditation updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity MeditationSession {\n  session_id <<key>>\n  user_id <<foreign>>\n  session_date\n  session_time\n  session_duration\n  session_status\n  session_topic\n  session_content <<multi>>\n}\n\nentity Goal {\n  goal_id <<key>>\n  user_id <<foreign>>\n  session_id <<foreign>>\n  goal_date\n  goal_content\n  goal_status\n}\n\nentity Progress {\n  progress_id <<key>>\n  user_id <<foreign>>\n  session_id <<foreign>>\n  progress_date\n  heart_rate\n  breathing_rate\n  progress_status\n}\n\nentity Report {\n  report_id <<key>>\n  session_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship PARTICIPATES_IN {\n}\nrelationship TRACKS_PROGRESS {\n}\nrelationship SETS_GOAL {\n}\nrelationship GENERATES_REPORT {\n}\n\nPARTICIPATES_IN -1- User\nPARTICIPATES_IN -N- MeditationSession\n\nTRACKS_PROGRESS -1- MeditationSession\nTRACKS_PROGRESS -N- Progress\n\nSETS_GOAL -1- User\nSETS_GOAL -N- Goal\n\nGENERATES_REPORT -1- MeditationSession\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Create an ERD for this. The application must provide the ability to interpret sign language gestures into text and speech using image recognition technology. It should support input in multiple formats, including text, audio, and sign language gestures, and convert these inputs into other formats such as text, speech, or sign gestures. The system should allow users to submit feedback on translations to improve accuracy and satisfaction. It must include features for managing text and audio inputs, interpreting sign gestures with associated accuracy scores, and displaying outputs in various formats. Additionally, the application must support real-time translation across different communication methods to enable seamless interaction between deaf and hearing individuals.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name {\n    Fname\n    Lname\n  }\n  email\n  password\n  phone\n}\n\nentity TextInput {\n  text_input_id <<key>>\n  input\n  source\n  comments\n}\n\nentity AudioInput {\n  audio_input_id <<key>>\n  audio_to_text\n}\n\nentity SignGesture {\n  gesture_id <<key>>\n  gesture_type\n  accuracy_score\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  comments\n  conversion_type\n  user_rating\n}\n\nentity Display {\n  display_id <<key>>\n  content <<multi>>\n  output_type <<derived>>\n}\n\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship INPUTS_TEXT {\n}\nrelationship INPUTS_SIGN {\n}\nrelationship INPUTS_AUDIO {\n}\nrelationship CONVERTS_TO_TEXT {\n  conversion_time\n}\nrelationship CONVERTS_TO_SIGN {\n  conversion_time\n}\n\nPROVIDES_FEEDBACK -1- User\nPROVIDES_FEEDBACK -N- Feedback\n\nINPUTS_TEXT -1- User\nINPUTS_TEXT -N- TextInput\n\nINPUTS_SIGN -1- User\nINPUTS_SIGN -N- SignGesture\n\nINPUTS_AUDIO -1- User\nINPUTS_AUDIO -N- AudioInput\n\nCONVERTS_TO_SIGN -1- AudioInput\nCONVERTS_TO_SIGN -1- Display\n\nCONVERTS_TO_SIGN -1- TextInput\nCONVERTS_TO_SIGN -1- Display\n\nCONVERTS_TO_TEXT -1- SignGesture\nCONVERTS_TO_TEXT -1- Display\n\n@endchen"          
    },    
    {
        "input": "Draw a ERD. Functional Requirements for Salah Tracker App:\n1. The system shall allow users to track their daily prayers.\n2. The system shall allow users to set prayer reminders.\n3. The system shall analyze users' prayer habits.\n4. The system shall provide prayer tracking tools.\n5. The system shall offer reminder notifications.\n6. The system shall support prayer statistics for users.\n7. The system shall allow users to log their daily prayers.\n8. The system shall allow users to receive reminders for prayer times.\n9. The system shall allow users to view their prayer history.\n10. The system shall track the prayer progress of users.\n11. The system shall allow users to manage their prayer goals.\n12. The system shall generate reports on prayer habits.\n13. The system shall allow users to customize their prayer settings.\n14. The system shall allow users to view their prayer histories.\n15. The system shall notify users of prayer updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Prayer {\n  prayer_id <<key>>\n  user_id <<foreign>>\n  prayer_name\n  prayer_date\n  prayer_time\n  prayer_duration\n  day_status\n}\n\nentity PrayerLog {\n  log_id <<key>>\n  user_id <<foreign>>\n  prayer_id <<foreign>>\n  log_date\n  log_time\n  prayer_status\n  prayer_notes\n}\n\nentity Reminder {\n  reminder_id <<key>>\n  user_id <<foreign>>\n  prayer_id <<foreign>>\n  reminder_time\n  reminder_content\n  reminder_status\n}\n\nentity Goal {\n  goal_id <<key>>\n  user_id <<foreign>>\n  goal_start_date\n  goal_end_date\n  goal_content\n  goal_progress\n  goal_status\n}\n\nentity Report {\n  report_id <<key>>\n  user_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship LOGS_PRAYER {\n}\nrelationship HAS_PRAYER {\n}\nrelationship SETS_REMINDER {\n}\nrelationship SETS_GOAL {\n}\nrelationship GENERATES_REPORT {\n}\n\nLOGS_PRAYER -1- User\nLOGS_PRAYER -N- PrayerLog\n\nHAS_PRAYER -1- PrayerLog\nHAS_PRAYER -N- Prayer\n\nSETS_REMINDER -1- User\nSETS_REMINDER -N- Reminder\n\nSETS_GOAL -1- User\nSETS_GOAL -N- Goal\n\nGENERATES_REPORT -1- PrayerLog\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for Online Pharmacy System:\n1. The system shall allow customers to create an account.\n2. The system shall allow customers to select medicines.\n3. The system shall allow customers to place an order.\n4. The system shall allow customers to view the status of their order.\n5. The system shall allow admins to manage supplier information.\n6. The system shall allow admins to provide supplier details.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  address\n  identification_number\n  user_status\n}\n\nentity Admin {\n  admin_id <<key>>\n  name\n  email\n  password\n  contact_number\n  admin_status\n}\n\nentity Medicine {\n  medicine_id <<key>>\n  medicine_name\n  medicine_price\n  medicine_quantity\n  medicine_status\n}\n\nentity Supplier {\n  supplier_id <<key>>\n  supplier_name\n  supplier_address\n  supplier_contact\n  supplier_status\n}\n\nentity Order {\n  order_id <<key>>\n  user_id <<foreign>>\n  order_date\n  order_status\n  medicine_id <<foreign>>\n  quantity\n  total_price\n}\n\nrelationship PLACES_ORDER {\n}\nrelationship MANAGES_SUPPLIER {\n}\nrelationship CONTAINS_MEDICINE {\n}\nrelationship SUPPLIES_MEDICINE {\n}\n\nPLACES_ORDER -1- User\nPLACES_ORDER -N- Order\n\nMANAGES_SUPPLIER -1- Admin\nMANAGES_SUPPLIER -N- Supplier\n\nCONTAINS_MEDICINE -1- Order\nCONTAINS_MEDICINE -N- Medicine\n\nSUPPLIES_MEDICINE -1- Supplier\nSUPPLIES_MEDICINE -N- Medicine\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for Health Equity Management System:\n1. The system shall allow patients to register and upload social and medical data.\n2. The system shall classify patients based on social determinants.\n3. The system shall allow patients to track their personal health.\n4. The system shall allow healthcare providers to plan health worker activity.\n5. The system shall notify patients of relevant medical events.\n6. The system shall allow healthcare providers, medical professionals, and government officials to access and analyze health data.\n7. The system shall allow the government to implement intervention schemes.\n",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  classification_id <<foreign>>\n  name\n  phone\n  email\n  health_status\n}\nentity Classification {\n  classification_id <<key>>\n  economic_status\n  health_insurance\n  demographics\n  hereditary_conditions\n  classification_date\n}\nentity Caretaker {\n  caretaker_id <<key>>\n  name\n  address\n  phone\n  email\n}\nentity HealthcareProvider {\n  provider_id <<key>>\n  name\n  address\n  phone\n  email\n}\nentity MedicalProfessional {\n  professional_id <<key>>\n  name\n  address\n  phone\n  email\n}\nentity GovernmentOfficial {\n  official_id <<key>>\n  name\n  address\n  phone\n  email\n}\nentity HealthRecord {\n  record_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  record_date\n  record_content\n  record_status\n}\nentity HealthScheme {\n  scheme_id <<key>>\n  patient_id <<foreign>>\n  scheme_name\n  scheme_details\n  scheme_status\n}\n\nrelationship TRACKS_HEALTH {\n}\nrelationship IMPLEMENTS_SCHEME {\n}\nrelationship ASSISTS_PATIENT {\n}\nrelationship ASSIGNS_CARETAKER {\n}\nrelationship PROVIDES_TREATMENT {\n}\nrelationship CLASSIFIES_PATIENT {\n}\nrelationship AVAILS {\n}\n\nHealthRecord -N- TRACKS_HEALTH\nTRACKS_HEALTH -1- Patient\nGovernmentOfficial -1- IMPLEMENTS_SCHEME\nIMPLEMENTS_SCHEME -N- HealthScheme\nCaretaker -1- ASSISTS_PATIENT\nASSISTS_PATIENT -N- Patient\nHealthcareProvider -1- ASSIGNS_CARETAKER\nASSIGNS_CARETAKER -N- Caretaker\nMedicalProfessional -1- PROVIDES_TREATMENT\nPROVIDES_TREATMENT -N- Patient\nClassification -1- CLASSIFIES_PATIENT\nCLASSIFIES_PATIENT -N- Patient\nPatient -1- AVAILS\nAVAILS -N- HealthScheme \n\n@endchen"
    },
    {
        "input": "Draw a ERD. Functional Requirements for e-Med System:\n1. The system shall allow users to set a medicine intake schedule.\n2. The system shall notify users when they need to restock their medicines.\n3. The system shall allow users to schedule appointments with family doctors.\n4. The system shall provide an emergency button for users to press in critical situations.\n5. The system shall contact individuals listed in the user's emergency contact list when the emergency button is pressed.\n6. The system shall allow users to record their medical history.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n}\nentity Medicine {\n  medicine_id <<key>>\n  medicine_name\n  price\n  quantity\n  expiry_date\n  availibility_status\n}\nentity Appointment {\n  appointment_id <<key>>\n  user_id <<foreign>>\n  doctor_name\n  doctor_specialization\n  date\n  time\n  location\n  status\n}\nentity EmergencyContact <<weak>> {\n  contact_name <<key>>\n  user_id <<foreign>>\n  relationship\n  phone\n}\nentity MedicalNote {\n  note_id <<key>>\n  user_id <<foreign>>\n  note_date\n  blood_pressure\n  blood_sugar_level\n  cholesterol_level\n  note_status\n}\nentity Reminder {\n  reminder_id <<key>>\n  medicine_id <<foreign>>\n  reminder_date\n  reminder_time\n  reminder_content\n}\nrelationship SCHEDULES_APPOINTMENT {\n}\nrelationship CONTACTS_EMERGENCY <<identifying>> {\n}\nrelationship KEEPS_NOTE {\n}\nrelationship RECEIVES_REMINDER {\n}\nrelationship TAKES_MEDICINE {\n}\n\nUser -1-SCHEDULES_APPOINTMENT \nSCHEDULES_APPOINTMENT -N- Appointment\nUser -1- CONTACTS_EMERGENCY\nCONTACTS_EMERGENCY -N- EmergencyContact\nUser -1- KEEPS_NOTE\nKEEPS_NOTE -N- MedicalNote\nUser -1- RECEIVES_REMINDER\nRECEIVES_REMINDER -N- Reminder\nUser -1- TAKES_MEDICINE\nTAKES_MEDICINE -N- Medicine\n\n@endchen"
    },
    {
        "input": "Draw a ERD. Functional Requirements for Health Application:\n1. The system shall allow users to provide their daily diet cycle.\n2. The system shall provide nutrient recommendations based on the daily diet cycle.\n3. The system shall allow users to upload their medical reports.\n4. The system shall provide nutrient suggestions based on the user's medical reports.\n5. The system shall allow users to enter disease information.\n6. The system shall provide nutrient benefits for fighting the entered disease.\n7. The system shall allow users to contact professional nutritionists for clarification.\n8. The system shall authenticate users before providing recommendations.\n9. The system shall provide machine learning-based nutrient recommendations.\n",
       "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n}\nentity Nutrient {\n  nutrient_id <<key>>\n  nutrient_name\n  description\n  benefits\n}\nentity DietCycle {\n  cycle_id <<key>>\n  user_id <<foreign>>\n  cycle_date\n  meal_details\n  calorie_intake\n  cycle_status\n}\nentity MedicalReport {\n  report_id <<key>>\n  user_id <<foreign>>\n  report_date\n  report_content\n  report_type\n}\nentity Disease {\n  disease_id <<key>>\n  disease_name\n  description\n  symptoms\n  prevention\n}\nentity Recommendation {\n  recommendation_id <<key>>\n  user_id <<foreign>>\n  date\n  content\n  source\n}\nentity Nutritionist {\n  nutritionist_id <<key>>\n  name\n  email\n  phone\n  specialization\n}\nrelationship RECOMMENDS_NUTRIENT {\n}\nrelationship BASED_ON {\n}\nrelationship RECORDS_DIET {\n}\nrelationship PROVIDES_REPORT {\n}\nrelationship FIGHTS_DISEASE {\n}\nrelationship CONSULTS_WITH {\n}\n\nRecommendation -1- RECOMMENDS_NUTRIENT\nRECOMMENDS_NUTRIENT -N- Nutrient\nRecommendation -N- BASED_ON\nBASED_ON -1- DietCycle\nBASED_ON -1- MedicalReport\nUser -1- RECORDS_DIET\nRECORDS_DIET -N- DietCycle\nUser -1- PROVIDES_REPORT\nPROVIDES_REPORT -N- MedicalReport\nNutrient -1- FIGHTS_DISEASE\nFIGHTS_DISEASE -N- Disease\nUser -1- CONSULTS_WITH\nCONSULTS_WITH -N- Nutritionist\n\n@endchen"  
    },
    {
        "input": "Draw a ERD. Functional Requirements for Health Tracker Application:\n1. The system shall allow users to input their daily food intake.\n2. The system shall allow users to track their exercise routines.\n3. The system shall allow users to monitor their water consumption.\n4. The system shall provide personalized recommendations based on user health data and goals.\n5. The system shall allow users to set reminders for meals, workouts, and hydration.\n6. The system shall allow users to connect with friends.\n7. The system shall allow users to share their achievements with friends.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity FoodLog {\n  food_log_id <<key>>\n  log_date\n  meal_type\n  food_items\n  calorie_intake\n  log_status\n}\n\nentity ExerciseLog {\n  exercise_log_id <<key>>\n  log_date\n  exercise_type\n  duration\n  calories_burned\n  log_status\n}\n\nentity WaterLog {\n  water_log_id <<key>>\n  log_date\n  water_amount\n  log_status\n}\n\nentity Goal {\n  goal_id <<key>>\n  goal_type\n  goal_description\n  target_value\n  current_progress\n  goal_status\n}\n\nentity Recommendation {\n  recommendation_id <<key>>\n  goal_id <<foreign>>\n  recommendation_date\n  recommendation_content\n  recommendation_source\n  recommendation_status\n}\n\nrelationship LOGS_FOOD {\n}\nrelationship LOGS_EXERCISE {\n}\nrelationship LOGS_WATER {\n}\nrelationship SETS_GOAL {\n}\nrelationship CONNECTS_WITH {\n connection_date\n connection_status\n}\nrelationship BASED_ON {\n}\n\nLOGS_FOOD -1- User\nLOGS_FOOD -N- FoodLog\n\nLOGS_EXERCISE -1- User\nLOGS_EXERCISE -N- ExerciseLog\n\nLOGS_WATER -1- User\nLOGS_WATER -N- WaterLog\n\nSETS_GOAL -1- User\nSETS_GOAL -N- Goal\n\nBASED_ON -N- Recommendation\nBASED_ON -1- Goal\n\nCONNECTS_WITH -1- User\nCONNECTS_WITH -N- User\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for FitnessPal Application:\n1. The system shall allow users to input their fitness preferences.\n2. The system shall allow users to provide their dietary restrictions.\n3. The system shall allow users to set health goals.\n4. The system shall provide personalized suggestions based on user data.\n5. The system shall allow users to track their progress.\n6. The system shall allow users to set reminders for workouts and meals.\n7. The system shall provide access to exercise routines.\n8. The system shall provide recipes for users to explore.\n9. The system shall allow users to connect with fitness trainers.\n10. The system shall allow users to consult nutritionists.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  fitness_preferences\n  dietary_restrictions\n  health_goals\n}\nentity ExerciseLog {\n  log_id <<key>>\n  user_id <<foreign>>\n  log_date\n  exercise_type\n  duration\n  calories_burned\n  intensity\n}\nentity WorkoutPlan {\n  plan_id <<key>>\n  user_id <<foreign>>\n  plan_duration\n  exercises\n}\nentity NutritionPlan {\n  plan_id <<key>>\n  user_id <<foreign>>\n  plan_type\n  plan_duration\n  meals\n}\nentity Recipe {\n  recipe_id <<key>>\n  recipe_name\n  recipe_ingredients\n  recipe_instructions\n}\nentity FitnessTrainer {\n  trainer_id <<key>>\n  name\n  email\n  phone\n  specialization\n  trainer_status\n}\nentity Nutritionist {\n  nutritionist_id <<key>>\n  name\n  email\n  phone\n  specialization\n  nutritionist_status\n}\nrelationship LOGS_EXERCISE {\n}\nrelationship ASSIGNS_WORKOUT_PLAN {\n}\nrelationship ASSIGNS_NUTRITION_PLAN {\n}\nrelationship INCLUDES_RECIPE {\n}\nrelationship HAS {\n}\nUser -1- LOGS_EXERCISE\nLOGS_EXERCISE -N- ExerciseLog\nFitnessTrainer -1- ASSIGNS_WORKOUT_PLAN\nASSIGNS_WORKOUT_PLAN -N- WorkoutPlan\nNutritionist -1- ASSIGNS_NUTRITION_PLAN\nASSIGNS_NUTRITION_PLAN -N- NutritionPlan\nNutritionPlan -1- INCLUDES_RECIPE\nINCLUDES_RECIPE -N- Recipe\nUser -1- HAS\nHAS -N- WorkoutPlan\nHAS -N- NutritionPlan\n\n@endchen"
    },
    {
        "input": "Draw a ERD. Functional Requirements for Student Counselling Management System:\n1. The system shall allow students to register for counselling.\n2. The system shall allow students to check their eligibility criteria for counselling.\n3. The system shall provide information about available colleges and universities.\n4. The system shall track counselling procedures for counsellors.\n5. The system shall generate reports based on the merit list of students.\n6. The system shall allow students to monitor seat availability in institutions.\n7. The system shall publish results of the counselling process.\n",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  qualification\n  merit_score\n}\nentity Counsellor {\n  counsellor_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  specialization\n}\nentity University {\n  university_id <<key>>\n  university_name\n  location\n  available_seats <<derived>>\n  booked_seats\n}\nentity Course {\n  course_id <<key>>\n  university_id <<foreign>>\n  course_name\n  course_duration\n  course_fee\n  total_seats\n  booked_seats\n}\nentity CounsellingSession {\n  session_id <<key>>\n  counsellor_id <<foreign>>\n  student_id <<foreign>>\n  session_date\n  session_notes\n}\nrelationship REGISTERS_FOR {\n}\nrelationship TAKES_SESSION {\n}\nrelationship APPLIES_FOR_ADMISSION {\n  admission_date\n  admission_status\n}\nrelationship OFFERS_COURSE {\n}\nrelationship ASSIGNS_UNIVERSITY {\n}\nStudent -1-REGISTERS_FOR \nREGISTERS_FOR -N- CounsellingSession\nCounsellor -1- TAKES_SESSION\nTAKES_SESSION -N- CounsellingSession\nStudent -1- APPLIES_FOR_ADMISSION\nAPPLIES_FOR_ADMISSION -N- University\nUniversity -1- OFFERS_COURSE\nOFFERS_COURSE -N- Course\nCounsellor -1- ASSIGNS_UNIVERSITY\nASSIGNS_UNIVERSITY -N- University\n\n@endchen"
    },
    {
        "input": "Draw a ERD. Functional Requirements for Online Visa Processing System:\n1. The system shall allow applicants to register by providing a valid email and password.\n2. The system shall allow applicants to log in by verifying credentials.\n3. The system shall allow applicants to apply for a visa online.\n4. The system shall allow applicants to submit necessary documents.\n5. The system shall allow applicants to select a visa type.\n6. The system shall allow applicants to view and modify the application.\n7. The system shall allow applicants to delete their visa application.\n8. The system shall allow applicants to check the status of their visa application.\n9. The system shall allow administrators to update applicant details.\n10. The system shall allow administrators to interact with the Visa Consultant Officer.\n11. The system shall allow administrators to approve or reject the visa application.\n12. The system shall allow Visa Consultant Officers to view visa details.\n13. The system shall allow Visa Consultant Officers to view document proofs submitted by the applicant.\n",
        "output": "@startchen\n\nentity Applicant {\n  applicant_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  applicant_status\n}\n\nentity VisaType {\n  visa_type_id <<key>>\n  visa_name\n  visa_description\n  visa_fee\n  visa_status\n}\n\nentity VisaApplication {\n  application_id <<key>>\n  applicant_id <<foreign>>\n  visa_type_id <<foreign>>\n  application_date\n  purpose_of_application\n  application_status\n}\n\nentity DocumentProof {\n  proof_id <<key>>\n  application_id <<foreign>>\n  proof_type\n  proof_content <<multi>>\n  proof_status\n}\n\nentity VisaConsultant {\n  consultant_id <<key>>\n  name\n  email\n  phone\n  specialization\n  consultant_status\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  admin_status\n}\n\nrelationship HAS_TYPE {\n}\nrelationship APPLIES_FOR_VISA {\n}\nrelationship SUBMITS_DOCUMENTS {\n}\nrelationship APPROVES_VISA {\n  approval_date\n  approval_status\n}\nrelationship MANAGES_APPLICATION {\n}\nrelationship INTERACTS_WITH {\n interaction_date\n message\n}\n\nHAS_TYPE -N- VisaApplication\nHAS_TYPE -1- VisaType\n\nAPPLIES_FOR_VISA -1- Applicant\nAPPLIES_FOR_VISA -N- VisaApplication\n\nSUBMITS_DOCUMENTS -1- VisaApplication\nSUBMITS_DOCUMENTS -N- DocumentProof\n\nAPPROVES_VISA -1- VisaConsultant\nAPPROVES_VISA -N- VisaApplication\n\nMANAGES_APPLICATION -1- Administrator\nMANAGES_APPLICATION -N- VisaApplication\n\nINTERACTS_WITH -1- Administrator\nINTERACTS_WITH -N- VisaConsultant\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for Placement Automation System:\n1. The system shall allow students to register as a student.\n2. The system shall allow companies to register as a company.\n3. The system shall allow students to upload their resumes.\n4. The system shall allow students to view available skills training.\n5. The system shall allow students to enroll in training.\n6. The system shall allow companies to post job opportunities.\n7. The system shall allow administrators to manage placement drives.\n8. The system shall allow students to view registered companies.\n9. The system shall allow students to track their placement status.\n10. The system shall allow administrators to manage student training records.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  skills <<multi>>\n  user_status\n}\n\nentity Company {\n  company_id <<key>>\n  company_name\n  company_location\n  job_roles <<multi>>\n  hiring_status\n  company_status\n}\n\nentity Admin {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  admin_status\n}\n\nentity Resume {\n  resume_id <<key>>\n  user_id <<foreign>>\n  resume_content\n  last_updated\n  resume_status\n}\n\nentity Training {\n  training_id <<key>>\n  user_id <<foreign>>\n  training_name\n  training_date\n  skills_set <<multi>>\n  training_provider\n  training_status\n}\n\nentity Placement {\n  placement_id <<key>>\n  company_id <<foreign>>\n  job_role\n  placement_date\n  placement_status\n}\n\nrelationship REGISTERS_FOR {\n registration_date\n registration_status\n}\nrelationship PLACED_AT {\n}\nrelationship MANAGES_PLACEMENT {\n}\nrelationship SUBMITS_RESUME {\n}\nrelationship PROVIDES_TRAINING {\n}\nrelationship COMPLETES_TRAINING {\n}\n\nREGISTERS_FOR -1- User\nREGISTERS_FOR -N- Placement\n\nPLACED_AT -1- Placement\nPLACED_AT -1- Company\n\nMANAGES_PLACEMENT -1- Admin\nMANAGES_PLACEMENT -N- Placement\n\nSUBMITS_RESUME -1- User\nSUBMITS_RESUME -N- Resume\n\nCOMPLETES_TRAINING -1- User\nCOMPLETES_TRAINING -N- Training\n\nPROVIDES_TRAINING -1- Company\nPROVIDES_TRAINING -N- Training\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for Farming Insights Application:\n1. The system shall provide real-time weather insights to the farmers.\n2. The system shall provide soil condition alerts to the farmers.\n3. The system shall provide market trend tracking information to the farmers.\n4. The system shall provide information about labour availability to the farmers.\n5. The system shall provide farming recommendations to the farmers.\n6. The system shall allow farmers to make data-driven decisions based on the recommendations provided.\n",
        "output": "@startchen\n\nentity Farmer {\n  farmer_id <<key>>\n  name\n  phone\n  address\n  phone_model\n  farmer_status\n}\n\nentity WeatherData {\n  weather_id <<key>>\n  farmer_id <<foreign>>\n  weather_date\n  location\n  weather_conditions\n  temperature\n  humidity\n  weather_status\n}\n\nentity SoilData {\n  soil_id <<key>>\n  farmer_id <<foreign>>\n  soil_date\n  location\n  soil_conditions\n  soil_moisture\n  soil_ph\n  soil_status\n}\n\nentity MarketData {\n  market_id <<key>>\n  farmer_id <<foreign>>\n  market_date\n  location\n  market_conditions\n  crop_prices\n  market_status\n}\n\nentity LabourData {\n  labour_id <<key>>\n  farmer_id <<foreign>>\n  labour_date\n  location\n  labour_availability\n  labour_cost\n  labour_status\n}\n\nrelationship FETCHES_WEATHER {\n}\nrelationship FETCHES_SOIL {\n}\nrelationship FETCHES_MARKET {\n}\nrelationship FETCHES_LABOUR {\n}\n\nFETCHES_WEATHER -1- Farmer\nFETCHES_WEATHER -N- WeatherData\n\nFETCHES_SOIL -1- Farmer\nFETCHES_SOIL -N- SoilData\n\nFETCHES_MARKET -1- Farmer\nFETCHES_MARKET -N- MarketData\n\nFETCHES_LABOUR -1- Farmer\nFETCHES_LABOUR -N- LabourData\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for Green Rides Application:\n1. The system shall allow users to select a route from source to destination.\n2. The system shall display traffic and pollution levels for the selected route.\n3. The system shall send notifications for traffic jams to users within a specific radius.\n4. The system shall allow users to report accident-prone spots to the concerned authority.\n5. The system shall provide Meals-on-Wheel service information for available restaurants on the route.\n6. The system shall allow users to activate Drive Mode to notify callers that they are driving.\n7. The system shall allow users to provide feedback on traffic and pollution accuracy.\n8. The system shall notify users of accident-prone areas based on the number of accidents.\n9. The system shall allow road authority admins to monitor road conditions and accident reports.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n}\nentity Route {\n  route_id <<key>>\n  user_id <<foreign>>\n  source\n  destination\n  route_status\n  total_distance\n  estimated_time\n}\nentity RouteData {\n  data_id <<key>>\n  route_id <<foreign>>\n  traffic_location\n  traffic_intensity\n  pollution_location\n  pollution_level\n  accident_location\n  accident_severity\n  timestamp\n}\nentity Restaurant {\n  restaurant_id <<key>>\n  restaurant_name\n  restaurant_location\n  menu\n  service_time\n  contact\n  ratings\n}\nentity Feedback {\n  feedback_id <<key>>\n  user_id <<foreign>>\n  feedback_content\n  feedback_date\n  feedback_status\n  feedback_rating\n}\nentity DriveMode {\n  drive_mode_id <<key>>\n  user_id <<foreign>>\n  status\n  geo_coordinates\n  speed_limit\n  activation_time\n}\nrelationship SELECTS_ROUTE {\n}\nrelationship REPORTS {\n}\nrelationship MONITORS_DRIVE_MODE {\n}\nrelationship GIVES_FEEDBACK {\n}\nUser -1- SELECTS_ROUTE\nSELECTS_ROUTE -N- Route\nRoute -1- REPORTS\nREPORTS -N- RouteData\nREPORTS -N- Restaurant\nUser -1- MONITORS_DRIVE_MODE\nMONITORS_DRIVE_MODE -N- DriveMode\nUser -1- GIVES_FEEDBACK\nGIVES_FEEDBACK -N- Feedback\n\n@endchen"   
    },
    {
        "input": "Draw a ERD. Functional Requirements for Art Gallery Management System:\n1. The system shall allow customers to browse art collections.\n2. The system shall allow customers to view detailed information about each art piece.\n3. The system shall allow customers to place orders for purchasing art.\n4. The system shall allow customers to make payments for orders.\n5. The system shall allow customers to cancel their orders if needed.\n6. The system shall allow admins to manage (add, update, delete) art items in the gallery.\n7. The system shall allow admins to update details like price, description, and stock availability for art.\n8. The system shall allow admins to generate reports on gallery activity and sales.\n",
        "output": "@startchen\n\nentity Admin {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  admin_status\n}\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  customer_status\n}\n\nentity ArtPiece {\n  art_id <<key>>\n  admin_id <<foreign>>\n  art_name\n  art_description\n  art_price\n  stock_availability\n  reproduction_protection\n  art_status <<derived>>\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  total_amount <<derived>>\n  order_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  order_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_method\n  payment_status\n}\n\nentity Report {\n  report_id <<key>>\n  admin_id <<foreign>>\n  report_date\n  report_type\n  report_content\n  report_status\n}\n\nentity Event {\n  event_id <<key>>\n  admin_id <<foreign>>\n  event_name\n  event_date\n  event_description\n  event_status\n}\n\nrelationship MANAGES_ART {\n}\nrelationship PLACES_ORDER {\n}\nrelationship CONTAINS_ART_PIECE {\n  quantity\n  item_price\n}\nrelationship HAS_PAYMENT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship ORGANIZES_EVENT {\n}\n\nMANAGES_ART -1- Admin\nMANAGES_ART -N- ArtPiece\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nCONTAINS_ART_PIECE -1- Order\nCONTAINS_ART_PIECE -N- ArtPiece\n\nHAS_PAYMENT -1- Order\nHAS_PAYMENT -1- Payment\n\nGENERATES_REPORT -1- Admin\nGENERATES_REPORT -N- Report\n\nORGANIZES_EVENT -1- Admin\nORGANIZES_EVENT -N- Event\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for College Trade Platform:\n1. The system shall allow students to register on the platform.\n2. The system shall allow students to post items for sale or trade.\n3. The system shall allow students to search for available goods.\n4. The system shall allow students to rate sellers based on previous transactions.\n5. The system shall allow students to buy or trade items.\n6. The system shall allow students to access and view seller ratings.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  user_type\n  overall_rating <<derived>>\n  user_status\n}\n\nentity Item {\n  item_id <<key>>\n  user_id <<foreign>>\n  item_name\n  item_description\n  item_category\n  item_price\n  item_condition\n  item_status <<derived>>\n  listed_date\n  trade_preference\n}\n\nrelationship SELLS_ITEM {\n  transaction_date\n  transaction_type\n  transaction_status\n}\nrelationship BUYS_ITEM {\n  transaction_date\n  transaction_type\n  transaction_status\n}\nrelationship RATES_USER {\n  rating_value\n  rating_comment\n  rating_date\n}\n\nSELLS_ITEM -1- User\nSELLS_ITEM -N- Item\n\nBUYS_ITEM -1- User\nBUYS_ITEM -N- Item\n\nRATES_USER -1- User\nRATES_USER -N- User\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for the Online Quiz System:\n1. The system shall allow the admin to register students and teachers.\n2. The system shall allow teachers to create quizzes.\n3. The system shall allow teachers to schedule quizzes.\n4. The system shall allow teachers to edit quizzes.\n5. The system shall allow students to take quizzes.\n6. The system shall automatically evaluate the quizzes.\n7. The system shall allow students to view correct answers after taking the quiz.\n8. The system shall allow students to provide feedback on the quiz.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n}\nentity Admin {\n role\n}\nentity Teacher {\n specialty\n}\nentity Student {\n credits\n semester\n}\nUser ->- d {Admin, Teacher, Student}\nentity Quiz {\n  quiz_id <<key>>\n  teacher_id <<foreign>>\n  quiz_date\n  quiz_duration\n  max_score\n  total_questions\n}\nentity Solution {\n  solution_id <<key>>\n  student_id <<foreign>>\n  question_text\n  question_type <<multi>>\n  options <<multi>>\n  correct_answer\n}\nentity Feedback {\n  feedback_id <<key>>\n  student_id <<foreign>>\n  quiz_id <<foreign>>\n  feedback_content\n  feedback_date\n}\nrelationship REGISTERS {\n}\nrelationship CREATES_QUIZ {\n}\nrelationship ATTEMPTS_QUIZ {\n  start_time\n  end_time\n  attempt_status\n  score\n}\nrelationship HAS_SOLUTION {\n}\nrelationship PROVIDES_FEEDBACK {\n}\nAdmin -1- REGISTERS\nREGISTERS -N- Teacher\nREGISTERS -N- Student\nTeacher -1- CREATES_QUIZ\nCREATES_QUIZ -N- Quiz\nStudent -1- ATTEMPTS_QUIZ\nATTEMPTS_QUIZ -N- Quiz\nQuiz -1- HAS_SOLUTION\nHAS_SOLUTION -1- Solution\nTeacher -1- PROVIDES_FEEDBACK\nPROVIDES_FEEDBACK -N- Feedback\n\n@endchen"     
    },
    {
        "input": "Draw a ERD. Functional Requirements for the Book Bank Management System:\n1. The system shall authenticate users before allowing access.\n2. The system shall allow members to borrow books.\n3. The system shall allow members to buy books.\n4. The system shall allow members to reserve books or magazines.\n5. The system shall allow members to return borrowed books.\n6. The system shall allow admins to update book stock.\n7. The system shall calculate due fines for late returns.\n8. The system shall track misplaced books using a bar scanner.\n9. The system shall allow admins to manage book titles.\n10. The system shall generate sales reports.\n11. The system shall manage user records.\n12. The system shall handle payments for books.\n",
        "output": "@startchen\n\nentity Member {\n  member_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  member_status\n}\n\nentity Book {\n  book_id <<key>>\n  book_name\n  book_author\n  book_genre\n  book_department\n  book_year\n  stock_availability\n  book_status\n}\n\nentity EBook {\n  ebook_id <<key>>\n  book_id <<foreign>>\n  ebook_link\n  ebook_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  member_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_method\n  payment_status\n}\n\nentity SalesReport {\n  report_id <<key>>\n  member_id <<foreign>>\n  book_id <<foreign>>\n  report_date\n  report_type\n  report_content\n  report_status\n}\n\nrelationship RESERVES_BOOK {\n  reservation_date\n  reservation_status\n}\nrelationship ISSUES_BOOK {\n  issue_date\n  due_date\n  return_date\n  fine_amount\n}\nrelationship HAS_EBOOK {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship GENERATES_REPORT {\n}\n\nRESERVES_BOOK -1- Member\nRESERVES_BOOK -N- Book\n\nISSUES_BOOK -1- Member\nISSUES_BOOK -N- Book\n\nHAS_EBOOK -1- Book\nHAS_EBOOK -N- EBook\n\nMAKES_PAYMENT -1- Member\nMAKES_PAYMENT -N- Payment\n\nGENERATES_REPORT -N- Book\nGENERATES_REPORT -1- SalesReport\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for the Mega Associates Website:\n1. The system shall allow clients to view the firm's major projects.\n2. The system shall allow clients to explore available departments and collaborations.\n3. The system shall allow clients to read recent news related to the firm.\n4. The system shall allow clients to explore firm insights.\n5. The system shall allow clients to learn about the firm's history.\n6. The system shall allow clients to contact the firm via mail or chat.\n7. The system shall allow job seekers to view career opportunities.\n8. The system shall allow administrators to manage website content.\n",
        "output": "@startchen\n\nentity Firm {\n  firm_id <<key>>\n  firm_name\n  location\n  description\n  established_year\n  contact_info\n  history_description <<multi>>\n}\nentity Department {\n  department_id <<key>>\n  firm_id <<foreign>>\n  department_name\n  department_head\n  description\n}\nentity Project {\n  project_id <<key>>\n  department_id <<foreign>>\n  project_name\n  project_description\n  start_date\n  end_date\n  project_status\n}\nentity NewsInsights {\n  news_id <<key>>\n  firm_id <<foreign>>\n  news_date\n  news_title\n  news_content\n}\nentity Career {\n  career_id <<key>>\n  firm_id <<foreign>>\n  career_position\n  department_id <<foreign>>\n  career_description\n  qualifications\n}\nrelationship HAS_DEPARTMENT {\n}\nrelationship HAS_PROJECT {\n}\nrelationship PROVIDES_NEWSINSIGHTS {\n}\nrelationship OFFERS_CAREER {\n}\nFirm -1-HAS_DEPARTMENT \nHAS_DEPARTMENT -N- Department\nDepartment -1- HAS_PROJECT\nHAS_PROJECT -N- Project\nDepartment -1- PROVIDES_NEWSINSIGHTS\nPROVIDES_NEWSINSIGHTS -N- NewsInsights\nFirm -1- OFFERS_CAREER\nOFFERS_CAREER -N- Career\n\n@endchen" 
    },
    {
        "input": "Draw a ERD. Functional Requirements for the Startup Meet System:\n1. The system shall allow entrepreneurs to create startup profiles.\n2. The system shall allow entrepreneurs to request funding from investors or mentors.\n3. The system shall allow entrepreneurs to submit startup abstracts to investors or mentors.\n4. The system shall allow entrepreneurs to give virtual presentations to investors or mentors.\n5. The system shall allow entrepreneurs to apply for government loans.\n6. The system shall allow entrepreneurs to view government policies for startups.\n7. The system shall allow mentors to provide guidance and mentorship to entrepreneurs.\n8. The system shall allow investors and mentors to review startup ideas.\n9. The system shall allow investors to accept investment proposals from entrepreneurs.\n",
        "output": "@startchen\n\nentity Startup {\n  startup_id <<key>>\n  startup_name\n  startup_description\n  startup_domain\n  startup_status\n}\n\nentity Entrepreneur {\n  entrepreneur_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  entrepreneur_status\n}\n\nentity Investor {\n  investor_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  investor_status\n}\n\nentity Mentor {\n  mentor_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  mentor_status\n}\n\nentity Policy {\n  policy_id <<key>>\n  policy_name\n  policy_description\n  eligibility_criteria\n  applicable_industries <<multi>>\n  application_deadline\n  policy_provider\n  policy_status\n}\n\nentity Loan {\n  loan_id <<key>>\n  loan_name\n  loan_description\n  loan_amount\n  interest_rate\n  repayment_terms\n  eligibility_criteria\n  funding_agency\n  loan_status\n}\n\nrelationship CREATED_BY {\n}\nrelationship REQUESTS_INVESTOR {\n  request_date\n  request_status\n}\nrelationship REQUESTS_MENTOR {\n  request_date\n  request_status\n}\nrelationship APPLY_FOR_POLICY {\n}\nrelationship APPLY_FOR_LOAN {\n}\n\nCREATED_BY -N- Startup\nCREATED_BY -1- Entrepreneur\n\nREQUESTS_INVESTOR -1- Startup\nREQUESTS_INVESTOR -N- Investor\n\nREQUESTS_MENTOR -1- Startup\nREQUESTS_MENTOR -N- Mentor\n\nAPPLY_FOR_POLICY -N- Policy\nAPPLY_FOR_POLICY -N- Startup\n\nAPPLY_FOR_LOAN -N- Startup\nAPPLY_FOR_LOAN -1- Loan\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for the Video Suggestion System:\n1. The system shall collect user activity data for video recommendations.\n2. The system shall process user data to generate video suggestions.\n3. The system shall generate a video dataset based on user interactions.\n4. The system shall suggest relevant videos to users.\n5. The system shall refresh and update video suggestions when users request or refresh their page.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  preferences <<multi>>\n  user_status\n}\n\nentity Video {\n  video_id <<key>>\n  video_title\n  video_description\n  video_category\n  video_tags <<multi>>\n  video_duration\n  video_trending_score\n  video_status\n}\n\nentity Like {\n  like_id <<key>>\n  user_id <<foreign>>\n  video_id <<foreign>>\n  like_date\n  like_status\n}\n\nentity Dislike {\n  dislike_id <<key>>\n  user_id <<foreign>>\n  video_id <<foreign>>\n  dislike_date\n  dislike_status\n}\n\nrelationship WATCHES_VIDEO {\n  watch_date\n  watch_duration\n  watch_status\n}\n\nrelationship HAS_LIKES {\n}\nrelationship GIVES_LIKES {\n}\n\nrelationship HAS_DISLIKES {\n}\nrelationship GIVES_DISLIKES {\n}\n\nrelationship RECOMMENDED_TO {\n  recommendation_reason <<multi>>\n  recommendation_date\n  recommendation_status\n}\n\nWATCHES_VIDEO -1- User\nWATCHES_VIDEO -N- Video\n\nHAS_LIKES -1- Video\nHAS_LIKES -N- Like\n\nGIVES_LIKES -1- User\nGIVES_LIKES -N- Like\n\nHAS_DISLIKES -1- Video\nHAS_DISLIKES -N- Dislike\n\nGIVES_DISLIKES -1- User\nGIVES_DISLIKES -N- Dislike\n\nRECOMMENDED_TO -N- Video\nRECOMMENDED_TO -N- User\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for the Library Management System:\n1. The system shall allow library members to search books by title, author, subject, or publication date.\n2. The system shall allow library members to check out available book items.\n3. The system shall allow library members to reserve book items that are not currently available.\n4. The system shall retrieve book information, including borrower details.\n5. The system shall allow library members to return checked-out books.\n6. The system shall collect fines for late returns.\n7. The system shall send notifications when reserved books become available or when books are overdue.\n",
        "output": "@startchen\n\nentity LibraryMember {\n  member_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  membership_status\n  max_checkout_limit <<derived>>\n}\n\nentity Book {\n  book_id <<key>>\n  title\n  author\n  subject_category\n  publication_date\n  rack_number\n  unique_barcode\n  book_status\n}\n\nentity BookItem {\n  book_item_id <<key>>\n  book_id <<foreign>>\n  unique_barcode\n  availability_status\n  checkout_status\n}\n\nentity Checkout {\n  checkout_id <<key>>\n  member_id <<foreign>>\n  checkout_date\n  due_date\n  return_date\n  fine_amount <<derived>>\n  checkout_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  member_id <<foreign>>\n  book_item_id <<foreign>>\n  notification_type\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship RESERVES_BOOK {\n  reservation_date\n  reservation_status\n}\nrelationship PERFORMS_CHECKOUT {\n}\nrelationship ASSOCIATES_BOOK {\n}\nrelationship SENDS_NOTIFICATION {\n}\nrelationship TRACKS_BOOK_ITEMS {\n}\n\nRESERVES_BOOK -1- LibraryMember\nRESERVES_BOOK -N- BookItem\n\nPERFORMS_CHECKOUT -1- LibraryMember\nPERFORMS_CHECKOUT -N- Checkout\n\nASSOCIATES_BOOK -1- Checkout\nASSOCIATES_BOOK -1- BookItem\n\nSENDS_NOTIFICATION -1- Book\nSENDS_NOTIFICATION -N- Notification\n\nTRACKS_BOOK_ITEMS -1- Book\nTRACKS_BOOK_ITEMS -N- BookItem\n\n@endchen"
    },
    {
        "input": "Draw a ERD. Functional Requirements for the Course Management System:\n1. The system shall allow lecturers to give one or more lectures.\n2. The system shall allow lecturers to go on leave for research purposes, preventing them from giving lectures.\n3. The system shall allow students to attend one or more lectures.\n4. The system shall provide study groups for solving exercises during the semester.\n5. The system shall assign each student to a specific study group for the semester.\n6. The system shall ensure that a study group consists of two to three students.\n7. The system shall allow tutors to grade solutions submitted by study groups.\n",
        "output": "@startchen\n\nentity Lecturer {\n  lecturer_id <<key>>\n  name\n  email\n  password\n  research_status\n}\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n}\nentity Tutor {\n  tutor_id <<key>>\n  name\n  email\n  password\n  tutor_status\n}\nentity StudyGroup {\n  group_id <<key>>\n  group_name\n  semester\n}\nentity Lecture {\n  lecture_id <<key>>\n  lecturer_id <<foreign>>\n  lecture_title\n  date\n}\nentity Exercise {\n  exercise_id <<key>>\n  lecture_id <<foreign>>\n  exercise_title\n  exercise_description\n  submission_deadline\n  exercise_status\n}\nrelationship TEACHES_LECTURE {\n}\nrelationship ATTENDS_LECTURE {\n}\nrelationship ASSIGNED_TO_GROUP {\n}\nrelationship SOLVES_EXERCISE {\n  submission_date\n  submission_content\n  submission_status\n}\nrelationship GRADES_EXERCISE {\n  grade_value\n  grade_comments\n}\nLecturer -1- TEACHES_LECTURE\nTEACHES_LECTURE -N- Lecture\nStudent -1- ATTENDS_LECTURE\nATTENDS_LECTURE -N- Lecture\nStudent -(2,3)- ASSIGNED_TO_GROUP\nASSIGNED_TO_GROUP -1- StudyGroup\nStudyGroup -1- SOLVES_EXERCISE\nSOLVES_EXERCISE -N- Exercise\nTutor -1- GRADES_EXERCISE\nGRADES_EXERCISE -N- Exercise\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the Content Management System:\n1. The system shall allow an administrator to create a new blog account.\n2. The system shall verify author details before creating a blog account using the author credentials database.\n3. The system shall allow an administrator to create a new personal Wiki.\n4. The system shall verify author details before creating a personal Wiki using the Author Credentials service.\n",
        "output": "@startchen\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  admin_status\n}\n\nentity Blogger {\n  blogger_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  blogger_status\n}\n\nentity Wiki {\n  wiki_id <<key>>\n  author_id <<foreign>>\n  wiki_title\n  wiki_content\n  wiki_status\n}\n\nrelationship CREATES_BLOG_ACCOUNT {\n}\nrelationship CREATES_PERSONAL_WIKI {\n}\n\nCREATES_BLOG_ACCOUNT -1- Administrator\nCREATES_BLOG_ACCOUNT -N- Blogger\n\nCREATES_PERSONAL_WIKI -1- Administrator\nCREATES_PERSONAL_WIKI -N- Wiki\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the eDoc Health Record Management System:\n1. The system shall manage patient profiles, including comprehensive personal information.\n2. The system shall allow healthcare providers to input and organize patient medical history.\n3. The system shall allow advanced appointment scheduling for patients, including reminders.\n4. The system shall provide appointment reminders for both patients and healthcare providers.\n5. The system shall enable telemedicine consultations and remote interactions with patients.\n6. The system shall provide patients access to their health records through secure portals.\n7. The system shall allow data analysis, collaboration, and report generation for healthcare teams.\n8. The system shall support importing and exporting health data between systems.\n9. The system shall perform regular backups and provide data recovery options.\n10. The system shall manage patient medication records, including medication reminders.\n11. The system shall store and manage diagnostic records like lab results and imaging reports.\n",
       "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  date_of_birth\n  email\n  phone\n  address\n  emergency_contact\n  patient_status\n}\nentity MedicalHistory {\n  history_id <<key>>\n  patient_id <<foreign>>\n  history_date\n  diagnosis\n  treatments\n  allergies\n  lab_results <<multi>>\n  diagnostic_report <<multi>>\n}\nentity HealthcareProvider {\n  provider_id <<key>>\n  name\n  specialization\n  email\n  phone\n  provider_status\n}\nentity TelemedicineSession {\n  session_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  session_date\n  session_time\n  session_notes\n  session_status\n}\nentity Medication {\n  medication_id <<key>>\n  patient_id <<foreign>>\n  medication_name\n  dosage\n  frequency\n  start_date\n  end_date\n  reminder_status\n  medication_status\n}\nrelationship HAS_MEDICAL_HISTORY {\n}\nrelationship SCHEDULES_APPOINTMENT {\n  appointment_date\n  appointment_time\n  appointment_status\n  reminder_status\n}\nrelationship CONDUCTS_SESSION {\n}\nrelationship PRESCRIBES_MEDICATION {\n}\nPatient -1- HAS_MEDICAL_HISTORY\nHAS_MEDICAL_HISTORY -N- MedicalHistory\nPatient -1- SCHEDULES_APPOINTMENT\nSCHEDULES_APPOINTMENT -N- TelemedicineSession\nHealthcareProvider -1- CONDUCTS_SESSION\nCONDUCTS_SESSION -N- TelemedicineSession\nHealthcareProvider -1- PRESCRIBES_MEDICATION\nPRESCRIBES_MEDICATION -N- Medication\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the HealthCare Management System:\n1. The system shall manage patient profiles.\n2. The system shall input and organize medical history.\n3. The system shall allow advanced appointment scheduling.\n4. The system shall send appointment reminders.\n5. The system shall allow telemedicine consultations.\n6. The system shall provide access to patient portals.\n7. The system shall analyze data and generate reports.\n8. The system shall support import/export of health data.\n9. The system shall perform data backups and recovery.\n10. The system shall manage medication records.\n11. The system shall store diagnostic reports.\n",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  date_of_birth\n  email\n  phone\n  address\n  emergency_contact\n  patient_status\n}\nentity MedicalHistory {\n  history_id <<key>>\n  patient_id <<foreign>>\n  history_date\n  diagnosis\n  treatments\n  allergies\n  lab_results <<multi>>\n  diagnostic_report <<multi>>\n}\nentity HealthcareProvider {\n  provider_id <<key>>\n  name\n  specialization\n  email\n  phone\n  provider_status\n}\nentity TelemedicineSession {\n  session_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  session_date\n  session_time\n  session_notes\n  session_status\n}\nentity Medication {\n  medication_id <<key>>\n  patient_id <<foreign>>\n  medication_name\n  dosage\n  frequency\n  start_date\n  end_date\n  reminder_status\n  medication_status\n}\nrelationship HAS_MEDICAL_HISTORY {\n}\nrelationship SCHEDULES_APPOINTMENT {\n  appointment_date\n  appointment_time\n  appointment_status\n  reminder_status\n}\nrelationship CONDUCTS_SESSION {\n}\nrelationship PRESCRIBES_MEDICATION {\n}\nPatient -1- HAS_MEDICAL_HISTORY\nHAS_MEDICAL_HISTORY -N- MedicalHistory\nPatient -1- SCHEDULES_APPOINTMENT\nSCHEDULES_APPOINTMENT -N- TelemedicineSession\nHealthcareProvider -1- CONDUCTS_SESSION\nCONDUCTS_SESSION -N- TelemedicineSession\nHealthcareProvider -1- PRESCRIBES_MEDICATION\nPRESCRIBES_MEDICATION -N- Medication\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the Parcel Delivery Management System:\n1. The system shall provide advanced parcel tracking.\n2. The system shall manage returns efficiently.\n3. The system shall monitor real-time parcel inventory.\n4. The system shall support customer interactions with customer service.\n5. The system shall process payments securely and efficiently.\n",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n}\nentity Parcel {\n  parcel_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  weight\n  dimensions\n  tracking_number\n  shipment_date\n  delivery_date\n  location\n  timestamp\n  parcel_status\n}\nentity ReturnRequest {\n  return_id <<key>>\n  parcel_id <<foreign>>\n  request_date\n  reason\n  return_status\n}\nentity Inventory {\n  inventory_id <<key>>\n  location\n  available_space\n  inventory_status\n}\nentity Payment {\n  payment_id <<key>>\n  customer_id <<foreign>>\n  amount\n  payment_method\n  payment_date\n  payment_status\n}\nentity SupportTicket {\n  ticket_id <<key>>\n  parcel_id <<foreign>>\n  issue_description\n  ticket_status\n  resolution_date\n}\nrelationship MANAGES_PARCEL {\n}\nrelationship INITIATES {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship SUBMITS_PAYMENT {\n}\nrelationship HAS_PAYMENT {\n}\nCustomer -1- MANAGES_PARCEL\nMANAGES_PARCEL -N- Parcel\nCustomer -1- INITIATES\nINITIATES -N- ReturnRequest\nINITIATES -N- SupportTicket\nInventory -1- ASSOCIATED_WITH\nASSOCIATED_WITH -N- Parcel\nCustomer -1- SUBMITS_PAYMENT\nSUBMITS_PAYMENT -N- Payment\nParcel -1- HAS_PAYMENT\nHAS_PAYMENT -1- Payment\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the Crime Information System:\n1. The system shall manage users.\n2. The system shall receive crime-related notifications.\n3. The system shall allow the police to update FIRs.\n4. The system shall allow the police to create FIRs.\n5. The system shall provide access to police station information.\n6. The system shall provide access to a crime database.\n7. The system shall allow users to join community safety forums.\n8. The system shall manage criminal records.\n9. The system shall allow the police to search criminal records.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  user_type\n}\nentity FIR {\n  fir_id <<key>>\n  user_id <<foreign>>\n  police_station_id <<foreign>>\n  crime_date\n  crime_location\n  crime_type\n  fir_status\n  fir_details\n}\nentity PoliceStation {\n  station_id <<key>>\n  station_name\n  station_location\n  contact_number\n  station_status\n  community_forum <<multi>>\n}\nentity Crime {\n  crime_id <<key>>\n  fir_id <<foreign>>\n  crime_description\n  crime_date\n  crime_type\n  crime_status\n}\nentity Criminal {\n  criminal_id <<key>>\n  name\n  alias\n  date_of_birth\n  crime_history <<multi>>\n  criminal_status\n}\nrelationship CREATES_FIR {\n}\nrelationship ASSIGNED_TO {\n}\nrelationship DOCUMENTS_CRIME {\n}\nrelationship MANAGES_RECORD {\n}\nUser -1- CREATES_FIR\nCREATES_FIR -N- FIR\nPoliceStation -1- ASSIGNED_TO\nASSIGNED_TO -N- FIR\nFIR -1- DOCUMENTS_CRIME\nDOCUMENTS_CRIME -N- Crime\nPoliceStation -1- MANAGES_RECORD\nMANAGES_RECORD -N- Criminal\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the Timetable Management System:\n1. The system shall allow users to register and log in securely.\n2. The system shall allow administrators to enroll students and manage their information.\n3. The system shall allow administrators to assign courses to students.\n4. The system shall allow administrators to assign courses to faculty.\n5. The system shall allow faculty members to input their preferred time slots for lectures.\n6. The system shall generate timetables based on student courses, faculty preferences, and available resources.\n7. The system shall allocate available lecture halls based on the generated timetable.\n8. The system shall generate reports detailing course allocations and schedules.\n9. The system shall provide students with reports showing their enrolled courses and schedules.\n10. The system shall provide faculty with reports detailing their course assignments and schedules.\n",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  enrollment_date\n  student_status\n}\nentity Faculty {\n  faculty_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  preferred_time_slots <<multi>>\n  faculty_status\n}\nentity Course {\n  course_id <<key>>\n  course_name\n  course_description\n  department\n  credits\n}\nentity LectureHall {\n  hall_id <<key>>\n  hall_name\n  capacity\n  resources_available\n  hall_status\n}\nentity Timetable {\n  timetable_id <<key>>\n  generated_date\n  semester\n  timetable_status\n}\nentity Lecture {\n  lecture_id <<key>>\n  timetable_id <<foreign>>\n  course_id <<foreign>>\n  faculty_id <<foreign>>\n  hall_id <<foreign>>\n  lecture_date\n  lecture_time\n  duration\n  lecture_status\n}\nrelationship ENROLLS_IN {\n}\nrelationship TEACHES_COURSE {\n}\nrelationship HAS_LECTURE {\n}\nrelationship ALLOCATES_HALL {\n}\nrelationship INCLUDES_LECTURE {\n}\nStudent -1- ENROLLS_IN\nENROLLS_IN -N- Course\nFaculty -1- TEACHES_COURSE\nTEACHES_COURSE -N- Course\nCourse -1- HAS_LECTURE\nHAS_LECTURE -N- Lecture\nLectureHall -1- ALLOCATES_HALL\nALLOCATES_HALL -1- Lecture\nTimetable -1- INCLUDES_LECTURE\nINCLUDES_LECTURE -N- Lecture\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the Cricket Stadium Management System:\n1. The system shall allow fans to view comprehensive information about upcoming events in the stadium.\n2. The system shall allow fans to explore different pricing plans for tickets.\n3. The system shall allow fans to check seat availability.\n4. The system shall allow fans to securely purchase tickets for events.\n5. The system shall allow sponsors to explore available sponsorship options within the stadium.\n6. The system shall allow sponsors to track the return on investment (ROI) for their sponsorships.\n",
        "output": "@startchen\n\nentity Fan {\n  fan_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  fan_status\n}\n\nentity Event {\n  event_id <<key>>\n  event_name\n  event_date\n  match_schedule\n  team_lineups <<multi>>\n  event_status\n}\n\nentity Ticket {\n  ticket_id <<key>>\n  event_id <<foreign>>\n  seat_number\n  price\n  availability_status\n  purchase_status\n}\n\nentity Sponsor {\n  sponsor_id <<key>>\n  name\n  email\n  phone\n  sponsorship_details\n  sponsor_status\n}\n\nentity Sponsorship {\n  sponsorship_id <<key>>\n  sponsor_id <<foreign>>\n  event_id <<foreign>>\n  sponsorship_amount\n  ROI_metrics\n  sponsorship_status\n}\n\nrelationship BOOKS_TICKET {\n  booking_date\n  payment_status\n}\nrelationship HAS_TICKET {\n}\nrelationship PROVIDES_SPONSORSHIP {\n}\nrelationship SPONSORS_EVENT {\n}\nrelationship TRACKS_ROI {\n}\n\nBOOKS_TICKET -1- Fan\nBOOKS_TICKET -N- Ticket\n\nHAS_TICKET -1- Event\nHAS_TICKET -N- Ticket\n\nPROVIDES_SPONSORSHIP -1- Sponsor\nPROVIDES_SPONSORSHIP -N- Sponsorship\n\nSPONSORS_EVENT -1- Sponsorship\nSPONSORS_EVENT -1- Event\n\nTRACKS_ROI -1- Sponsor\nTRACKS_ROI -N- Sponsorship\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the Tech E-Commerce System:\n1. The system shall allow customers to browse the catalog of tech goods and repair services.\n2. The system shall allow customers to add items to a shopping cart.\n3. The system shall allow customers to complete the checkout process to purchase products or services.\n4. The system shall allow customers to review their past orders.\n5. The system shall allow customers to cancel ongoing repair orders.\n6. The system shall allow customers to manage account details, including personal and billing information.\n7. The system shall allow customers to provide feedback on purchased goods and services.\n8. The system shall allow customers to contact support through a helpline for inquiries and assistance.\n",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  billing_details\n  account_status\n}\nentity Product {\n  product_id <<key>>\n  product_name\n  product_description\n  product_price\n  stock_quantity\n  product_status\n}\nentity Service {\n  service_id <<key>>\n  service_name\n  service_description\n  service_price\n  service_status\n  repair_type\n}\nentity ShoppingCart {\n  cart_id <<key>>\n  customer_id <<foreign>>\n  cart_status <<derived>>\n}\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  total_amount\n  order_status\n  order_type\n}\nentity Feedback {\n  feedback_id <<key>>\n  product_id <<foreign>>\n  service_id <<foreign>>\n  feedback_content\n  feedback_date\n}\nrelationship PLACES_ORDER {\n payment_amount\n payment_date\n}\nrelationship INCLUDES_PRODUCT {\n  quantity\n  item_price\n  item_status\n}\nrelationship ADDS_TO_CART {\n}\nrelationship CONTAINS {\n}\nrelationship REQUESTS_SERVICE{\n payment_amount\n payment_date\n}\nrelationship GIVES_FEEDBACK {\n}\nCustomer -1- PLACES_ORDER\nPLACES_ORDER -N- Order\nOrder -1- INCLUDES_PRODUCT\nINCLUDES_PRODUCT -N- Product\nCustomer -1- ADDS_TO_CART\nADDS_TO_CART -1- ShoppingCart\nShoppingCart -1- CONTAINS\nCONTAINS -N- Product\nCustomer -1- REQUESTS_SERVICE\nREQUESTS_SERVICE -N- Service\nCustomer -1- GIVES_FEEDBACK\nGIVES_FEEDBACK -N- Feedback\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the Clinic Management System:\n1. The system shall allow for patient registration.\n2. The system shall manage patient information, including personal details, medical history, and contact information.\n3. The system shall support appointment scheduling for patients.\n4. The system shall send appointment reminders to patients and staff.\n5. The system shall generate bills based on services provided.\n6. The system shall track payment statuses for each patient.\n7. The system shall facilitate staff collaboration and communication.\n8. The system shall generate reports and analytics based on patient data, appointments, and billing information.\n",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  date_of_birth\n  email\n  password\n  phone\n  address\n  medical_history\n  contact_information\n  patient_status\n}\n\nentity Appointment {\n  appointment_id <<key>>\n  patient_id <<foreign>>\n  staff_id <<foreign>>\n  appointment_date\n  appointment_time\n  appointment_status\n  reminder_status\n}\n\nentity Billing {\n  bill_id <<key>>\n  patient_id <<foreign>>\n  appointment_id <<foreign>>\n  services_provided\n  total_amount\n  payment_status\n  bill_status\n}\n\nentity Staff {\n  staff_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  staff_status\n}\n\nentity Report {\n  report_id <<key>>\n  report_type\n  report_content\n  generated_date\n  report_status <<derived>>\n}\n\nrelationship REGISTERS_PATIENT {\n}\nrelationship SCHEDULES_APPOINTMENT {\n}\nrelationship GENERATES_BILL {\n}\nrelationship COMMUNICATES_WITH {\n  message_content\n  message_date\n  message_status\n}\nrelationship GENERATES_REPORT {\n}\n\nREGISTERS_PATIENT -1- Staff\nREGISTERS_PATIENT -N- Patient\n\nSCHEDULES_APPOINTMENT -1- Patient\nSCHEDULES_APPOINTMENT -N- Appointment\n\nGENERATES_BILL -1- Appointment\nGENERATES_BILL -1- Billing\n\nCOMMUNICATES_WITH -1- Staff\nCOMMUNICATES_WITH -N- Staff\n\nGENERATES_REPORT -1- Billing\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for LawKeeper - Law Firm Management System:\n1. The system shall allow lawyers to create, update, and manage case files.\n2. The system shall allow lawyers to create and assign tasks related to cases.\n3. The system shall allow lawyers to access and manage legal references and research materials.\n4. The system shall allow lawyers to send case updates to clients.\n5. The system shall help users monitor and manage critical case deadlines.\n6. The system shall track billable hours for each client.\n7. The system shall allow clients and lawyers to review billing details.\n8. The system shall allow clients to receive updates about their cases.\n9. The system shall allow clients to review payment transactions.\n10. The system shall allow clients to file new cases.\n11. The system shall allow clients to share case-related documents.\n",
        "output": "@startchen\n\nentity Lawyer {\n  lawyer_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n}\nentity Client {\n  client_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n}\nentity Case {\n  case_id <<key>>\n  client_id <<foreign>>\n  lawyer_id <<foreign>>\n  case_title\n  case_description\n  case_status\n  case_deadline\n  start_date\n  end_date\n  research_material <<multi>>\n}\nentity Task {\n  task_id <<key>>\n  case_id <<foreign>>\n  task_name\n  task_description\n  due_date\n  assigned_to\n  task_status\n}\nentity Billing {\n  bill_id <<key>>\n  client_id <<foreign>>\n  case_id <<foreign>>\n  hours_billed\n  billing_amount\n  payment_status\n}\nrelationship MANAGES_CASE {\n}\nrelationship HAS_TASK {\n}\nrelationship COMMUNICATES_WITH {\n  communication_date\n  message_content\n  communication_status\n}\nrelationship TRACKS_BILLABLE_HOURS {\n}\nrelationship FILES_CASE {\n}\nLawyer -1- MANAGES_CASE\nMANAGES_CASE -N- Case\nClient -1- FILES_CASE\nFILES_CASE -N- Case\nCase -1- HAS_TASK\nHAS_TASK -N- Task\nLawyer -1- COMMUNICATES_WITH\nCOMMUNICATES_WITH -N- Client\nBilling -1-TRACKS_BILLABLE_HOURS \nTRACKS_BILLABLE_HOURS -N- Case\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for the Online Shopping System:\n1. The system shall allow customers to browse products.\n2. The system shall allow customers to add items to their shopping cart.\n3. The system shall allow customers to complete the checkout process.\n4. The system shall allow customers to create an account.\n5. The system shall allow customers to manage their profile.\n6. The system shall allow customers to view order history.\n7. The system shall support secure payment processing.\n8. The system shall provide order tracking functionality.\n9. The system shall allow administrators to manage product listings.\n10. The system shall allow administrators to view sales reports.\n11. The system shall allow administrators to process customer inquiries.\n12. The system shall integrate with a payment gateway for processing payments.\n",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  account_status\n}\n\nentity Product {\n  product_id <<key>>\n  product_name\n  product_description\n  product_price\n  stock_quantity\n  product_status\n}\n\nentity ShoppingCart {\n  cart_id <<key>>\n  customer_id <<foreign>>\n  cart_status <<derived>>\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  total_amount\n  order_status\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  admin_status\n}\n\nentity Inquiry {\n  inquiry_id <<key>>\n  customer_id <<foreign>>\n  inquiry_date\n  inquiry_content\n  inquiry_status\n}\n\nrelationship ADDS_TO_CART {\n}\nrelationship CONTAINS {\n}\nrelationship PLACES_ORDER {\n}\nrelationship INCLUDES_PRODUCT {\n}\nrelationship MANAGES_PRODUCTS {\n}\nrelationship HANDLES_INQUIRY {\n}\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nINCLUDES_PRODUCT -1- Order\nINCLUDES_PRODUCT -N- Product\n\nADDS_TO_CART -1- Customer\nADDS_TO_CART -1- ShoppingCart\n\nCONTAINS -1- ShoppingCart\nCONTAINS -N- Product\n\nMANAGES_PRODUCTS -1- Administrator\nMANAGES_PRODUCTS -N- Product\n\nHANDLES_INQUIRY -1- Administrator\nHANDLES_INQUIRY -N- Inquiry\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system.\n Functional Requirements for the ATM System:\n1. The system must check the validity of the inserted ATM card.\n2. The system must validate the PIN number entered by the customer.\n3. The system must ensure that no more than $250 is dispensed against any ATM card within a 24-hour period.\n4. The system must be written in C++.\n5. The system must communicate with the bank using 256-bit encryption.\n6. The system must validate an ATM card in three seconds or less.\n7. The system must validate a PIN in three seconds or less.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  phone\n  address\n  customer_status\n}\n\nentity ATMCard {\n  card_id <<key>>\n  customer_id <<foreign>>\n  card_number\n  expiry_date\n  pin <<encrypted>>\n  daily_limit <<derived>>\n  card_status\n}\n\nentity Transaction {\n  transaction_id <<key>>\n  card_id <<foreign>>\n  transaction_date\n  transaction_time\n  transaction_amount\n  transaction_type\n  transaction_status\n}\n\nentity Account {\n  account_id <<key>>\n  customer_id <<foreign>>\n  account_number\n  account_type\n  account_balance\n  account_status\n}\n\nentity ATM {\n  atm_id <<key>>\n  location\n  encryption_method\n  atm_status\n}\n\nrelationship OWNS_CARD {\n}\nrelationship USES_CARD {\n}\nrelationship PERFORMS_TRANSACTION {\n}\nrelationship LINKED_TO {\n}\n\nOWNS_CARD -1- Customer\nOWNS_CARD -N- ATMCard\n\nUSES_CARD -N- Transaction\nUSES_CARD -1- ATMCard\n\nPERFORMS_TRANSACTION -1- ATM\nPERFORMS_TRANSACTION -N- Transaction\n\nLINKED_TO -1- Customer\nLINKED_TO -N- Account\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. \n Functional Requirements for the Hotel Management System:\n1. The system must allow guests to check-in and check-out of the hotel.\n2. The system must provide room booking functionality for guests.\n3. The system must support room service requests for guests.\n4. The system must generate invoices detailing guest stays and charges.\n5. The system must allow staff to manage room availability, view guest information, and process payments.",
        "output": "@startchen\n\nentity Guest {\n  guest_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  guest_status\n}\n\nentity Room {\n  room_id <<key>>\n  room_number\n  room_type\n  room_rate\n  availability_status\n  room_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  guest_id <<foreign>>\n  room_id <<foreign>>\n  check_in_date\n  check_out_date\n  booking_status\n}\n\nentity RoomService {\n  service_id <<key>>\n  booking_id <<foreign>>\n  service_date\n  service_description\n  service_charge\n  service_status\n}\n\nentity Invoice {\n  invoice_id <<key>>\n  booking_id <<foreign>>\n  issue_date\n  total_amount\n  payment_status\n  invoice_status\n}\n\nentity Staff {\n  staff_id <<key>>\n  name\n  role\n  email\n  password\n  phone\n  staff_status\n}\n\nrelationship ALLOCATES_ROOM {\n}\nrelationship RESERVES_ROOM {\n}\nrelationship REQUESTS_SERVICE {\n}\nrelationship GENERATES_INVOICE {\n}\nrelationship MANAGES_BOOKING {\n}\nrelationship MAINTAINS_ROOM {\n}\n\nRESERVES_ROOM -1- Guest\nRESERVES_ROOM -N- Booking\n\nALLOCATES_ROOM -1- Booking\nALLOCATES_ROOM -N- Room\n\nREQUESTS_SERVICE -1- Booking\nREQUESTS_SERVICE -N- RoomService\n\nGENERATES_INVOICE -1- Booking\nGENERATES_INVOICE -1- Invoice\n\nMANAGES_BOOKING -1- Staff\nMANAGES_BOOKING -N- Booking\n\nMAINTAINS_ROOM -1- Staff\nMAINTAINS_ROOM -N- Room\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for the ASU Registration System:\n1. Professors indicate which courses they will teach online.\n2. A course catalog can be printed.\n3. Students must be able to select up to four courses for the upcoming semester online.\n4. The system must enforce a maximum of 10 students and a minimum of 3 students per course.\n5. After registration, the system must send information to the billing system.\n6. Professors must be able to obtain course rosters online.\n7. Students must be able to add or drop classes online.",
        "output": "@startchen\n\nentity Professor {\n  professor_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  professor_status\n}\n\nentity Student {\n  student_id <<key>>\n  name{\n  Fname\n  Lname\n}\n  email\n  password\n  phone\n  address\n  semester\n  credits_attended\n  credits_remaining\n  gpa\n  student_status\n}\n\nentity Course {\n  course_id <<key>>\n  course_name\n  credit_hours\n  course_description\n  max_students <<derived>>\n  min_students <<derived>>\n  course_status\n}\n\nentity Registration {\n  registration_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  registration_date\n  registration_status\n}\n\nentity Billing {\n  billing_id <<key>>\n  student_id <<foreign>>\n  total_amount\n  billing_date\n  payment_status\n  billing_status\n}\n\nrelationship TEACHES_COURSE {\n}\nrelationship REGISTERS_FOR_COURSE {\n}\nrelationship GENERATES_BILLING {\n}\nrelationship RELATES_TO_COURSE {\n}\n\nTEACHES_COURSE -1- Professor\nTEACHES_COURSE -N- Course\n\nREGISTERS_FOR_COURSE -1- Student\nREGISTERS_FOR_COURSE -N- Registration\n\nGENERATES_BILLING -1- Registration\nGENERATES_BILLING -1- Billing\n\nRELATES_TO_COURSE -1- Registration\nRELATES_TO_COURSE -1- Course\n\n@endchen"          
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for the University Information System:\n1. The system must manage details of faculties and institutes, including their names and addresses.\n2. Each faculty is led by a dean, who must have their details managed by the system.\n3. The system must manage employee information, including social security numbers, names, and e-mail addresses.\n4. The system must distinguish between research personnel and administrative personnel.\n5. Research associates must be assigned to one or more institutes, and their field of study must be recorded.\n6. The system must track research projects, including names, starting and end dates, and assigned hours for research associates.\n7. Research associates involved in teaching are considered lecturers, and the system must track course details such as unique ID, course name, and weekly duration in hours.",
        "output": "@startchen\n\nentity Employee {\n  employee_id <<key>>\n  name\n  email\n  password\n  phone\n  employee_status\n}\n\nentity ServEmp {\n  service_role_description\n}\n\nentity AdminEmp {\n  admin_role_description\n}\n\nEmployee ->- o { ServEmp, AdminEmp }\n\nentity Student {\n  student_id <<key>>\n  name\n  date_of_birth\n  email\n  password\n  phone\n  address\n  matriculation_status\n  enrollment_status\n}\n\nentity Course {\n  course_id <<key>>\n  course_name\n  course_description\n  credits\n  semester\n  course_status\n}\n\nentity LectureHall {\n  hall_id <<key>>\n  hall_name\n  capacity\n  resources_available\n  hall_status\n}\n\nentity Certificate {\n  certificate_id <<key>>\n  student_id <<foreign>>\n  issued_by <<foreign>>\n  issue_date\n  certificate_type\n  certificate_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  student_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship MANAGES_DATA {\n}\nrelationship ENROLLS_IN {\n  enrollment_date\n  enrollment_status\n}\nrelationship ISSUES_CERTIFICATE {\n}\nrelationship CREATES_COURSE {\n}\nrelationship RESERVES_HALL {\n}\nrelationship SENDS_NOTIFICATION {\n}\n\nMANAGES_DATA -1- ServEmp\nMANAGES_DATA -N- Student\n\nENROLLS_IN -1- Student\nENROLLS_IN -N- Course\n\nISSUES_CERTIFICATE -1- Employee\nISSUES_CERTIFICATE -N- Certificate\n\nCREATES_COURSE -1- AdminEmp\nCREATES_COURSE -N- Course\n\nRESERVES_HALL -1- Course\nRESERVES_HALL -1- LectureHall\n\nSENDS_NOTIFICATION -1- Certificate\nSENDS_NOTIFICATION -1- Notification\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for Legal Eagle Case Management System:\n1. The system must support the creation of legal cases and allow updates to case status.\n2. The system must provide clients with the ability to file cases and receive updates on case status.\n3. The system must generate reports and analytics based on case data for legal professionals.\n4. The system must allow legal research to be performed within the system.\n5. The system must support document management for legal cases, allowing legal professionals to store and access case-related documents.\n6. The system must integrate voice commands for key functions such as case creation, updates, filing, and notifications.",
        "output": "@startchen\n\nentity LegalProfessional {\n  professional_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n  role\n}\nentity Client {\n  client_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n}\nentity Case {\n  case_id <<key>>\n  client_id <<foreign>>\n  assigned_to <<foreign>>\n  case_title\n  case_description\n  case_status\n  creation_date\n  last_update\n  documents <<multi>>\n  updates <<multi>>\n}\nentity LegalResearch {\n  research_id <<key>>\n  case_id <<foreign>>\n  research_topic\n  findings\n  research_date\n  research_status\n}\nrelationship MANAGES_CASE {\n}\nrelationship FILES_CASE {\n}\nrelationship COMMUNICATES_WITH {\n  communication_date\n  communication_type\n  message_content\n  communication_status\n}\nrelationship PERFORMS_RESEARCH {\n}\nLegalProfessional -1- MANAGES_CASE\nMANAGES_CASE -N- Case\nClient -1- FILES_CASE\nFILES_CASE -N- Case\nLegalProfessional -1- COMMUNICATES_WITH\nCOMMUNICATES_WITH -N- Client\nLegalProfessional -1- PERFORMS_RESEARCH\nPERFORMS_RESEARCH -N- LegalResearch\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for TimeCraft Parcel Management System:\n1. The system must allow users (senders and receivers) to track parcels in real-time.\n2. The system must provide users with the ability to report rough handling issues.\n3. Delivery companies must be able to update the status of parcels in transit.\n4. Users must receive real-time updates about parcel status and delivery.\n5. The system must allow senders to schedule parcel pickups.\n6. Delivery companies must be able to manage parcel delivery routes efficiently.\n7. Delivery companies must have control over various delivery options.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  customer_status\n}\n\nentity Parcel {\n  parcel_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  weight\n  dimensions\n  status\n  tracking_number\n  dispatch_date\n  delivery_date\n  parcel_status <<derived>>\n}\n\nentity DeliveryCompany {\n  company_id <<key>>\n  company_name\n  contact_number\n  company_status\n}\n\nentity DeliveryAgent {\n  agent_id <<key>>\n  company_id <<foreign>>\n  name\n  email\n  password\n  phone\n  agent_status\n}\n\nentity HandlingIssue {\n  issue_id <<key>>\n  parcel_id <<foreign>>\n  reported_by\n  issue_description\n  issue_date\n  resolution_status\n}\n\nentity ControlCenter {\n  center_id <<key>>\n  location\n  capacity <<derived>>\n  resources_available\n  center_status\n}\n\nrelationship SENDS_PARCEL {\n  location\n  status\n  timestamp\n}\nrelationship RECEIVES_PARCEL {\n  location\n  status\n  timestamp\n}\nrelationship MANAGES_PARCEL {\n}\nrelationship HAS_AGENT {\n}\nrelationship ASSIGNED_TO {\n}\nrelationship REPORTS_ISSUE {\n}\nrelationship LOCATED_AT {\n}\n\nSENDS_PARCEL -1- Customer\nSENDS_PARCEL -N- Parcel\n\nRECEIVES_PARCEL -1- Customer\nRECEIVES_PARCEL -N- Parcel\n\nMANAGES_PARCEL -1- DeliveryCompany\nMANAGES_PARCEL -N- Parcel\n\nHAS_AGENT -1- DeliveryCompany\nHAS_AGENT -N- DeliveryAgent\n\nASSIGNED_TO -1- DeliveryAgent\nASSIGNED_TO -N- Parcel\n\nREPORTS_ISSUE -1- Customer\nREPORTS_ISSUE -N- HandlingIssue\n\nLOCATED_AT -N- Parcel\nLOCATED_AT -1- ControlCenter\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for Employee Management System (EMS):\n1. The system must allow HR teams to manage employee information.\n2. The system must track employee attendance in real-time.\n3. The system must support salary management functionality.\n4. The system must enable HR teams to generate automated reports.\n5. The system must allow employees to view their attendance records.",
        "output": "@startchen\n\nentity Employee {\n  employee_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  department_id <<foreign>>\n  designation\n  join_date\n  employee_status\n}\n\nentity Department {\n  department_id <<key>>\n  department_name\n  manager_id <<foreign>>\n  department_status\n}\n\nentity Attendance {\n  attendance_id <<key>>\n  employee_id <<foreign>>\n  attendance_date\n  check_in_time\n  check_out_time\n  attendance_status\n}\n\nentity Salary {\n  salary_id <<key>>\n  employee_id <<foreign>>\n  basic_pay\n  bonuses\n  deductions\n  net_pay <<derived>>\n  payment_date\n  salary_status\n}\n\nentity Report {\n  report_id <<key>>\n  generated_by <<foreign>>\n  report_type\n  report_date\n  report_content\n  report_status\n}\n\nrelationship BELONGS_TO {\n}\nrelationship RECORDS_ATTENDANCE {\n}\nrelationship HAS_SALARY {\n}\nrelationship CREATES_REPORT {\n}\n\nBELONGS_TO -N- Employee\nBELONGS_TO -1- Department\n\nRECORDS_ATTENDANCE -1- Employee\nRECORDS_ATTENDANCE -N- Attendance\n\nHAS_SALARY -1- Employee\nHAS_SALARY -1- Salary\n\nCREATES_REPORT -1- Department\nCREATES_REPORT -N- Report\n\n@endchen" 
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for RoboCop Crime Information System:\n1. The system must allow law enforcement agents to manage user accounts.\n2. The system must provide crime-related notifications to users.\n3. The system must handle FIR (First Information Reports).\n4. The system must provide information about the nearest police station.\n5. The system must display crime statistics.\n6. The system must provide access to a comprehensive crime database.\n7. The system must manage criminal records.\n8. The system must allow searching for criminal records.\n9. The system must support community safety forums for public participation.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  user_type\n}\nentity FIR {\n  fir_id <<key>>\n  user_id <<foreign>>\n  police_station_id <<foreign>>\n  crime_date\n  crime_location\n  crime_type\n  fir_status\n  fir_details\n}\nentity PoliceStation {\n  station_id <<key>>\n  station_name\n  station_location\n  contact_number\n  station_status\n  community_forum <<multi>>\n}\nentity Crime {\n  crime_id <<key>>\n  fir_id <<foreign>>\n  crime_description\n  crime_date\n  crime_type\n  crime_status\n}\nentity Criminal {\n  criminal_id <<key>>\n  name\n  alias\n  date_of_birth\n  crime_history <<multi>>\n  criminal_status\n}\nrelationship CREATES_FIR {\n}\nrelationship ASSIGNED_TO {\n}\nrelationship DOCUMENTS_CRIME {\n}\nrelationship MANAGES_RECORD {\n}\nUser -1- CREATES_FIR\nCREATES_FIR -N- FIR\nPoliceStation -1- ASSIGNED_TO\nASSIGNED_TO -N- FIR\nFIR -1- DOCUMENTS_CRIME\nDOCUMENTS_CRIME -N- Crime\nPoliceStation -1- MANAGES_RECORD\nMANAGES_RECORD -N- Criminal\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for Anywhere Grocery Store Management System:\n1. The system must allow store managers to manage inventory effectively.\n2. The system must support sales processing at the point of sale.\n3. The system must provide supplier management tools for store managers.\n4. The system must handle customer service requests.\n5. The system must support online shopping functionality for customers.\n6. The system must allow customers to track their orders.\n7. The system must enable store managers to view sales reports.\n8. The system must allow suppliers to provide stock to the store.\n9. The system must handle order delivery processes.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n}\nentity StoreManager {\n  manager_id <<key>>\n  name\n  email\n  password\n  contact_info\n  address\n}\nentity Product {\n  product_id <<key>>\n  product_name\n  product_description\n  category\n  price\n  stock_quantity\n  reorder_level\n  product_status\n  supplier_name\n}\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  total_amount\n  order_status\n}\nentity Inventory {\n  inventory_id <<key>>\n  product_id <<foreign>>\n  store_manager_id <<foreign>>\n  stock_level\n  last_updated\n  inventory_status <<derived>>\n}\nentity Sale {\n  sale_id <<key>>\n  customer_id <<foreign>>\n  sale_date\n  total_amount\n  sale_status\n}\nentity Payment {\n  payment_id <<key>>\n  order_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_method\n  payment_status\n}\nrelationship PLACES_ORDER {\n  delivery_address\n  delivery_date\n  delivery_status\n}\nrelationship INCLUDES_PRODUCT {\n}\nrelationship MANAGES_INVENTORY {\n}\nrelationship HAS_PAYMENT {\n}\nrelationship RECORDS_SALE {\n}\nrelationship MANAGES_PRODUCT {\n}\nCustomer -1- PLACES_ORDER\nPLACES_ORDER -N- Order\nOrder -1- INCLUDES_PRODUCT\nINCLUDES_PRODUCT -N- Product\nStoreManager -1- MANAGES_INVENTORY\nMANAGES_INVENTORY -1- Inventory\nOrder -1- HAS_PAYMENT\nHAS_PAYMENT -1- Payment\nPayment -1- RECORDS_SALE\nRECORDS_SALE -1- Sale\nInventory -1- MANAGES_PRODUCT\nMANAGES_PRODUCT -N- Product\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for Gym Management System:\n1. The system must allow members to register.\n2. The system must provide members with access to class schedules.\n3. The system must track attendance using biometric or card-based methods.\n4. The system must support payment processing for members.\n5. The system must enable gym administrators to manage inventory in real-time.\n6. The system must allow communication between members and staff.\n7. The system must allow trainers to access class assignments.\n8. The system must facilitate automated payment processing.\n9. The system must provide real-time updates on inventory management.",
        "output": "@startchen\n\nentity Member {\n  member_id <<key>>\n  name\n  email\n  phone\n  address\n  membership_type\n  membership_status\n  join_date\n}\n\nentity Trainer {\n  trainer_id <<key>>\n  name\n  email\n  phone\n  specialization\n  trainer_status\n}\n\nentity Class {\n  class_id <<key>>\n  class_name\n  schedule\n  duration\n  capacity\n  class_status\n}\n\nentity Attendance {\n  attendance_id <<key>>\n  member_id <<foreign>>\n  class_id <<foreign>>\n  attendance_date\n  check_in_time\n  attendance_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  member_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  payment_status\n}\n\nrelationship REGISTERS_FOR_CLASS {\n}\nrelationship ASSIGNED_TO_CLASS {\n}\nrelationship TRACKS_ATTENDANCE {\n}\nrelationship PROCESSES_PAYMENT {\n}\nrelationship COMMUNICATES_WITH {\n  message_content\n  message_date\n  communication_status\n}\n\nREGISTERS_FOR_CLASS -1- Member\nREGISTERS_FOR_CLASS -N- Class\n\nASSIGNED_TO_CLASS -1- Trainer\nASSIGNED_TO_CLASS -N- Class\n\nTRACKS_ATTENDANCE -1- Member\nTRACKS_ATTENDANCE -N- Attendance\n\nPROCESSES_PAYMENT -1- Member\nPROCESSES_PAYMENT -N- Payment\n\nCOMMUNICATES_WITH -N- Member\nCOMMUNICATES_WITH -N- Trainer\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for Time Table Generating Management System:\n1. The system must allow administrators to enroll students.\n2. The system must enable administrators to allocate courses to students.\n3. The system must enable administrators to allocate courses to faculty members.\n4. The system must generate optimized timetables automatically.\n5. The system must allocate lecture halls based on the generated timetable.\n6. The system must generate reports detailing courses and schedules for both students and faculty.\n7. The system must allow faculty members to input their time preferences.\n8. The system must allow students to view their course schedules.",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  enrollment_date\n  student_status\n}\nentity Faculty {\n  faculty_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  preferred_time_slots <<multi>>\n  faculty_status\n}\nentity Course {\n  course_id <<key>>\n  course_name\n  course_description\n  department\n  credits\n}\nentity LectureHall {\n  hall_id <<key>>\n  hall_name\n  capacity\n  resources_available\n  hall_status\n}\nentity Timetable {\n  timetable_id <<key>>\n  generated_date\n  semester\n  timetable_status\n}\nentity Lecture {\n  lecture_id <<key>>\n  timetable_id <<foreign>>\n  course_id <<foreign>>\n  faculty_id <<foreign>>\n  hall_id <<foreign>>\n  lecture_date\n  lecture_time\n  duration\n  lecture_status\n}\nrelationship ENROLLS_IN {\n}\nrelationship TEACHES_COURSE {\n}\nrelationship HAS_LECTURE {\n}\nrelationship ALLOCATES_HALL {\n}\nrelationship INCLUDES_LECTURE {\n}\nStudent -1- ENROLLS_IN\nENROLLS_IN -N- Course\nFaculty -1- TEACHES_COURSE\nTEACHES_COURSE -N- Course\nCourse -1- HAS_LECTURE\nHAS_LECTURE -N- Lecture\nLectureHall -1- ALLOCATES_HALL\nALLOCATES_HALL -1- Lecture\nTimetable -1- INCLUDES_LECTURE\nINCLUDES_LECTURE -N- Lecture\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for Cricket Stadium Management System:\n1. The system must allow fans to buy tickets.\n2. The system must provide access to event information for fans.\n3. The system must send updates about events to fans.\n4. The system must enable sponsors to explore sponsorship opportunities.\n5. The system must support sponsors in engaging with the cricket community.",
        "output": "@startchen\n\nentity Fan {\n  fan_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  fan_status\n}\n\nentity Event {\n  event_id <<key>>\n  event_name\n  event_date\n  match_schedule\n  team_lineups <<multi>>\n  event_status\n}\n\nentity Ticket {\n  ticket_id <<key>>\n  event_id <<foreign>>\n  seat_number\n  price\n  availability_status\n  purchase_status\n}\n\nentity Sponsor {\n  sponsor_id <<key>>\n  name\n  email\n  phone\n  sponsorship_details\n  sponsor_status\n}\n\nentity Sponsorship {\n  sponsorship_id <<key>>\n  sponsor_id <<foreign>>\n  event_id <<foreign>>\n  sponsorship_amount\n  ROI_metrics\n  sponsorship_status\n}\n\nrelationship BOOKS_TICKET {\n  booking_date\n  payment_status\n}\nrelationship HAS_TICKET {\n}\nrelationship PROVIDES_SPONSORSHIP {\n}\nrelationship SPONSORS_EVENT {\n}\nrelationship TRACKS_ROI {\n}\n\nBOOKS_TICKET -1- Fan\nBOOKS_TICKET -N- Ticket\n\nHAS_TICKET -1- Event\nHAS_TICKET -N- Ticket\n\nPROVIDES_SPONSORSHIP -1- Sponsor\nPROVIDES_SPONSORSHIP -N- Sponsorship\n\nSPONSORS_EVENT -1- Sponsorship\nSPONSORS_EVENT -1- Event\n\nTRACKS_ROI -1- Sponsor\nTRACKS_ROI -N- Sponsorship\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for E-Commerce System:\n1. The system must allow customers to log in.\n2. The system must enable customers to purchase tech goods.\n3. The system must enable customers to purchase tech services.\n4. The system must allow customers to track orders.\n5. The system must allow customers to provide feedback.\n6. The system must provide a customer helpline for assistance.\n7. The system must provide a catalog of products for browsing.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  billing_details\n  account_status\n}\nentity Product {\n  product_id <<key>>\n  product_name\n  product_description\n  product_price\n  stock_quantity\n  product_status\n}\nentity Service {\n  service_id <<key>>\n  service_name\n  service_description\n  service_price\n  service_status\n  repair_type\n}\nentity ShoppingCart {\n  cart_id <<key>>\n  customer_id <<foreign>>\n  cart_status <<derived>>\n}\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  total_amount\n  order_status\n  order_type\n}\nentity Feedback {\n  feedback_id <<key>>\n  product_id <<foreign>>\n  service_id <<foreign>>\n  feedback_content\n  feedback_date\n}\nrelationship PLACES_ORDER {\n payment_amount\n payment_date\n}\nrelationship INCLUDES_PRODUCT {\n  quantity\n  item_price\n  item_status\n}\nrelationship ADDS_TO_CART {\n}\nrelationship CONTAINS {\n}\nrelationship REQUESTS_SERVICE{\n payment_amount\n payment_date\n}\nrelationship GIVES_FEEDBACK {\n}\nCustomer -1- PLACES_ORDER\nPLACES_ORDER -N- Order\nOrder -1- INCLUDES_PRODUCT\nINCLUDES_PRODUCT -N- Product\nCustomer -1- ADDS_TO_CART\nADDS_TO_CART -1- ShoppingCart\nShoppingCart -1- CONTAINS\nCONTAINS -N- Product\nCustomer -1- REQUESTS_SERVICE\nREQUESTS_SERVICE -N- Service\nCustomer -1- GIVES_FEEDBACK\nGIVES_FEEDBACK -N- Feedback\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for Clinisync System:\n1. The system must allow patients to register.\n2. The system must enable staff to manage patient information.\n3. The system must allow patients to schedule appointments.\n4. The system must handle billing operations.\n5. The system must generate reports for the clinic.\n6. The system must support managing invoicing for patient transactions.",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  date_of_birth\n  email\n  password\n  phone\n  address\n  medical_history\n  contact_information\n  patient_status\n}\n\nentity Appointment {\n  appointment_id <<key>>\n  patient_id <<foreign>>\n  staff_id <<foreign>>\n  appointment_date\n  appointment_time\n  appointment_status\n  reminder_status\n}\n\nentity Billing {\n  bill_id <<key>>\n  patient_id <<foreign>>\n  appointment_id <<foreign>>\n  services_provided\n  total_amount\n  payment_status\n  bill_status\n}\n\nentity Staff {\n  staff_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  staff_status\n}\n\nentity Report {\n  report_id <<key>>\n  report_type\n  report_content\n  generated_date\n  report_status <<derived>>\n}\n\nrelationship REGISTERS_PATIENT {\n}\nrelationship SCHEDULES_APPOINTMENT {\n}\nrelationship GENERATES_BILL {\n}\nrelationship COMMUNICATES_WITH {\n  message_content\n  message_date\n  message_status\n}\nrelationship GENERATES_REPORT {\n}\n\nREGISTERS_PATIENT -1- Staff\nREGISTERS_PATIENT -N- Patient\n\nSCHEDULES_APPOINTMENT -1- Patient\nSCHEDULES_APPOINTMENT -N- Appointment\n\nGENERATES_BILL -1- Appointment\nGENERATES_BILL -1- Billing\n\nCOMMUNICATES_WITH -1- Staff\nCOMMUNICATES_WITH -N- Staff\n\nGENERATES_REPORT -1- Billing\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for LawKeeper System:\n1. The system must allow lawyers to access and manage client files.\n2. The system must enable lawyers to track billable hours.\n3. The system must allow lawyers to organize case files.\n4. The system must support managing appointments for lawyers.\n5. The system must track case progress for clients and lawyers.\n6. The system must provide clients with updates on case progress.\n7. The system must allow clients to access essential case documents.\n8. The system must allow clients to view billable hours.\n9. The system must support clients in conducting transactions.\n10. The system must process payments through an external payment gateway.",
        "output": "@startchen\n\nentity Lawyer {\n  lawyer_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n}\nentity Client {\n  client_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n}\nentity Case {\n  case_id <<key>>\n  client_id <<foreign>>\n  lawyer_id <<foreign>>\n  case_title\n  case_description\n  case_status\n  case_deadline\n  start_date\n  end_date\n  research_material <<multi>>\n}\nentity Task {\n  task_id <<key>>\n  case_id <<foreign>>\n  task_name\n  task_description\n  due_date\n  assigned_to\n  task_status\n}\nentity Billing {\n  bill_id <<key>>\n  client_id <<foreign>>\n  case_id <<foreign>>\n  hours_billed\n  billing_amount\n  payment_status\n}\nrelationship MANAGES_CASE {\n}\nrelationship HAS_TASK {\n}\nrelationship COMMUNICATES_WITH {\n  communication_date\n  message_content\n  communication_status\n}\nrelationship TRACKS_BILLABLE_HOURS {\n}\nrelationship FILES_CASE {\n}\nLawyer -1- MANAGES_CASE\nMANAGES_CASE -N- Case\nClient -1- FILES_CASE\nFILES_CASE -N- Case\nCase -1- HAS_TASK\nHAS_TASK -N- Task\nLawyer -1- COMMUNICATES_WITH\nCOMMUNICATES_WITH -N- Client\nBilling -1-TRACKS_BILLABLE_HOURS \nTRACKS_BILLABLE_HOURS -N- Case\n\n@endchen"
    },
    {
        "input": "Generate a ERD. Functional Requirements for Real Estate Management System (REMS):\n1. The system must allow property managers to manage property listings.\n2. The system must enable property managers to track properties.\n3. The system must handle property sales for property managers.\n4. The system must handle property rentals for property managers.\n5. The system must handle property leasing for property managers.\n6. The system must generate compliance reports.\n7. The system must analyze market data for informed decisions.\n8. The system must allow clients to perform transactions related to properties.\n9. The system must allow clients to view property details.\n10. The system must integrate with an external financial system for transaction processing.",
        "output": "@startchen\n\nentity Property {\n  property_id <<key>>\n  property_name\n  property_type\n  location\n  size\n  price\n  availability_status\n  property_status\n}\n\nentity Client {\n  client_id <<key>>\n  name\n  email\n  phone\n  address\n  preferences <<multi>>\n  client_status\n}\n\nentity Transaction {\n  transaction_id <<key>>\n  property_id <<foreign>>\n  client_id <<foreign>>\n  transaction_date\n  transaction_type\n  amount\n  payment_method\n  transaction_status\n}\n\nentity LeaseAgreement {\n  lease_id <<key>>\n  property_id <<foreign>>\n  client_id <<foreign>>\n  lease_start_date\n  lease_end_date\n  terms_and_conditions\n  lease_status\n}\n\nentity PropertyManager {\n  manager_id <<key>>\n  name\n  email\n  phone\n  role\n  manager_status\n}\n\nentity Report {\n  report_id <<key>>\n  generated_by <<foreign>>\n  report_type\n  report_date\n  report_content\n  report_status\n}\n\nrelationship LISTS_PROPERTY {\n}\nrelationship BUYS_PROPERTY {\n}\nrelationship HAS_TRANSACTION {\n}\nrelationship LEASES_PROPERTY {\n}\nrelationship GENERATES_REPORT {\n}\n\nLISTS_PROPERTY -1- PropertyManager\nLISTS_PROPERTY -N- Property\n\nBUYS_PROPERTY -1- Client\nBUYS_PROPERTY -N- Property\n\nHAS_TRANSACTION -1- Property\nHAS_TRANSACTION -N- Transaction\n\nLEASES_PROPERTY -1- Client\nLEASES_PROPERTY -N- LeaseAgreement\n\nGENERATES_REPORT -1- PropertyManager\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Generate a ERD. Functional Requirements for EventEase Management System:\n1. The system must allow attendees to register for events.\n2. The system must enable attendees to purchase tickets online.\n3. The system must provide event organizers with an event dashboard.\n4. The system must send event updates to attendees.\n5. The system must provide performance metrics for organizers to evaluate event success.\n6. The system must manage event logistics for organizers (e.g., speakers, venues, attendees).\n7. The system must monitor event progress.\n8. The system must allow sponsors to promote branding during events.\n9. The system must ensure secure payment processing through an external payment system.",
        "output": "@startchen\n\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  organization_name\n}\nentity Event {\n  event_id <<key>>\n  organizer_id <<foreign>>\n  event_name\n  event_description\n  event_date\n  venue_id <<foreign>>\n  event_status\n  speakers <<multi>>\n}\nentity Venue {\n  venue_id <<key>>\n  venue_name\n  location\n  capacity\n  venue_status\n}\nentity Ticket {\n  ticket_id <<key>>\n  event_id <<foreign>>\n  ticket_type\n  price\n  availability_status\n  ticket_status\n}\nentity Attendee {\n  attendee_id <<key>>\n  name\n  email\n  phone\n  attendee_status\n}\nentity Payment {\n  payment_id <<key>>\n  ticket_id <<foreign>>\n  attendee_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_method\n  payment_status\n}\nrelationship ORGANIZES_EVENT {\n}\nrelationship HOSTS_EVENT {\n}\nrelationship SELLS_TICKET {\n  total_tickets_sold\n  total_revenue\n  demographics_data <<multi>>\n}\nrelationship PURCHASES_TICKET {\n}\nrelationship HAS_PAYMENT {\n}\nOrganizer -1- ORGANIZES_EVENT\nORGANIZES_EVENT -N- Event\nVenue -1- HOSTS_EVENT\nHOSTS_EVENT -N- Event\nEvent -1- SELLS_TICKET\nSELLS_TICKET -N- Ticket\nAttendee -1- PURCHASES_TICKET\nPURCHASES_TICKET -N- Ticket\nTicket -1- HAS_PAYMENT \nHAS_PAYMENT -1- Payment\n\n@endchen"
    },
    {
        "input": "Generate a ERD. Functional Requirements for EventEase Management System:\n1. The system must allow attendees to register for events.\n2. The system must enable attendees to purchase tickets.\n3. The system must provide organizers with a centralized event dashboard.\n4. The system must send event updates to attendees.\n5. The system must display performance metrics for event organizers.\n6. The system must allow organizers to manage event logistics.\n7. The system must monitor the progress of events.\n8. The system must allow sponsors to promote their branding during events.\n9. The system must integrate with a payment system to handle transactions securely.",
        "output":  "@startchen\n\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  organization_name\n}\nentity Event {\n  event_id <<key>>\n  organizer_id <<foreign>>\n  event_name\n  event_description\n  event_date\n  venue_name\n  venue_location\n  speakers <<multi>>\n}\nentity Ticket {\n  ticket_id <<key>>\n  event_id <<foreign>>\n  ticket_type\n  price\n  availability_status\n  ticket_status\n}\nentity Attendee {\n  attendee_id <<key>>\n  name\n  email\n  phone\n  attendee_status\n}\nentity Payment {\n  payment_id <<key>>\n  ticket_id <<foreign>>\n  attendee_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_method\n  payment_status\n}\nrelationship ORGANIZES_EVENT {\n}\nrelationship SELLS_TICKET {\n  total_tickets_sold\n  total_revenue\n  demographics_data <<multi>>\n}\nrelationship PURCHASES_TICKET {\n}\nrelationship HAS_PAYMENT {\n}\nOrganizer -1- ORGANIZES_EVENT\nORGANIZES_EVENT -N- Event\nEvent -1- SELLS_TICKET\nSELLS_TICKET -N- Ticket\nAttendee -1- PURCHASES_TICKET\nPURCHASES_TICKET -N- Ticket\nTicket -1- HAS_PAYMENT \nHAS_PAYMENT -1- Payment\n\n@endchen"
    },
    {
        "input": "Generate a ERD. Functional Requirements for Online Learning Management System (OLMS):\n1. The system must allow instructors to create courses.\n2. The system must allow instructors to enroll students.\n3. The system must allow instructors to assess students.\n4. The system must allow instructors to track student progress.\n5. The system must provide communication tools like chat for both instructors and students.\n6. The system must allow instructors to deliver course content.\n7. The system must allow students to take assessments.",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  enrollment_date\n  student_status\n}\nentity Instructor {\n  instructor_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n  instructor_status\n}\nentity Course {\n  course_id <<key>>\n  course_name\n  course_description\n  credit_hours\n  start_date\n  end_date\n  course_status\n  course_content <<multi>>\n}\nentity Assessment {\n  assessment_id <<key>>\n  course_id <<foreign>>\n  assessment_name\n  assessment_type\n  total_marks\n  assessment_status\n}\nrelationship TEACHES_COURSE {\n}\nrelationship ENROLLS_IN {\n  enrollment_date\n  enrollment_status\n}\nrelationship HAS_ASSESSMENT {\n}\nrelationship SUBMITS {\n  submission_date\n  marks_obtained\n  submission_status\n}\nrelationship COMMUNICATES_WITH {\n  message_content\n  message_date\n  communication_status\n}\nInstructor -1- TEACHES_COURSE\nTEACHES_COURSE -N- Course\nStudent -1- ENROLLS_IN\nENROLLS_IN -N- Course\nCourse -1- HAS_ASSESSMENT\nHAS_ASSESSMENT -N- Assessment\nStudent -1- SUBMITS\nSUBMITS -N- Assessment\nInstructor -N- COMMUNICATES_WITH\nCOMMUNICATES_WITH -N- Student\n\n@endchen"
    },
    {
        "input": "Generate a ERD. Functional Requirements for Crypto Exchange System:\n1. The system must allow users to exchange cryptocurrencies.\n2. The system must enable users to perform trading.\n3. The system must allow users to view market trends.\n4. The system must update market trends using external market data from sources like Binance and Kraken.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n  account_status\n}\nentity Wallet {\n  wallet_id <<key>>\n  user_id <<foreign>>\n  balance <<multi>>\n  wallet_status\n}\nentity Currency {\n  currency_id <<key>>\n  currency_name\n  symbol\n  currency_type\n  currency_status\n}\nentity Trade {\n  trade_id <<key>>\n  user_id <<foreign>>\n  trade_type\n  currency_id <<foreign>>\n  amount\n  trade_date\n  trade_status\n}\nentity ExchangeRate {\n  rate_id <<key>>\n  currency_from_id <<foreign>>\n  currency_to_id <<foreign>>\n  exchange_rate\n  rate_date\n  rate_status\n}\nentity MarketTrend {\n  trend_id <<key>>\n  currency_id <<foreign>>\n  trend_date\n  price\n  volume\n  source_name\n  source_url\n  trend_status\n}\nrelationship OWNS_WALLET {\n}\nrelationship PERFORMS_TRADE {\n}\nrelationship CONTAINS_CURRENCY {\n}\nrelationship UPDATES_RATE {\n}\nrelationship SETS_TRENDS {\n}\nUser -1- OWNS_WALLET\nOWNS_WALLET -1- Wallet\nUser -1- PERFORMS_TRADE\nPERFORMS_TRADE -N- Trade\nWallet -1- CONTAINS_CURRENCY\nCONTAINS_CURRENCY -N- Currency\nExchangeRate -1- UPDATES_RATE \nUPDATES_RATE -N- Currency\nCurrency -1- SETS_TRENDS\nSETS_TRENDS -N- MarketTrend\n\n@endchen"
    },
    {
        "input": "Create an ER diagram for this system. The system must organize data into departments, each having a unique name, a unique number, and a designated employee as the manager. The system must record the start date of the manager's tenure. Departments may have multiple locations and control projects, each with a unique name, unique number, and location. The system should store employee details, including name, Social Security number, address, salary, gender, and birth date. Each employee must be assigned to one department but may work on multiple projects, regardless of departmental control. The system must track the number of hours an employee works on each project weekly and maintain information about each employee's direct supervisor. Additionally, the system should manage dependent details for employees, including each dependent's first name, gender, birth date, and relationship to the employee for insurance purposes.",
        "output": "@startchen\nentity Department {\n    name <<key>>\n    number\n    start_date\n    locations\n}\n\nentity Employee {\n    ssn <<key>>\n    name\n    address\n    salary\n    sex\n    birth_date\n    supervisor_ssn <<FK>>\n    department_number <<FK>>\n}\n\nentity Project {\n    name <<key>>\n    number\n    location\n    department_number\n}\n\nentity Dependent {\n    id <<key>>\n    first_name\n    sex\n    birth_date\n    relationship\n    employee_ssn <<FK>>\n}\n\nentity Supervisor {\n    ssn <<key>>\n    name\n}\n\nrelationship manages {\n}\n\nrelationship controls {\n}\n\nrelationship works_on {\n}\n\nrelationship has {\n}\n\nrelationship supervises {\n}\n\n' Relationships\nDepartment -1- manages\nmanages -N- Employee\nDepartment -1- controls\ncontrols -N- Project\nEmployee -1- works_on\nworks_on -N- Project\nEmployee -1- has\nhas -N- Dependent\nSupervisor -1- supervises\nsupervises -N- Employee\n\n@endchen"
    },
    {
        "input": "Give me an ER diagram for this system. The system must track student enrollments, grades, and academic details for a university. It must include entities and relationships for the following: COLLEGE, which represents the university's organizational structure. Each college should have a unique name, main office location, phone number, and a designated faculty member as the dean. Colleges must manage multiple academic departments. DEPARTMENT should have a unique name, code, main office location, phone number, and a faculty member as chair, with a recorded start date of tenure. Departments must offer courses and manage instructors and students. COURSE entities should include a unique name, code, academic level, credit hours, and a description, and they must be managed by departments. INSTRUCTOR records must include a unique identifier, name, office location, phone number, rank, and their primary department assignment. STUDENT entities must have a unique identifier, name (first, middle, last), address, phone number, major code, and date of birth. Each student must be associated with one primary department, with grades tracked for completed sections. SECTION entities must represent course offerings, including a unique identifier, section number, semester, year, classroom details, and schedule. Each section must be linked to one course and one instructor and have a minimum of five students. The system must support many-to-many relationships between STUDENT and SECTION, with grades recorded for each student-section relationship. Historical and current section data must be stored for comprehensive academic tracking.",
        "output": "@startchen\nentity College {\n    CName <<key>>\n    COffice\n    CPhone\n}\n\nentity Faculty {\n    FacultyId <<key>>\n    FacultyName\n}\n\nentity Dean {\n    Id <<key>>\n    Name\n    FacultyId <<FK>>\n}\n\nentity Department {\n    DName <<key>>\n    DCode <<key>>\n    DOffice\n    DPhone\n    CStartDate\n    DeanId <<FK>>\n}\n\nentity Course {\n    CoName <<key>>\n    CCode <<key>>\n    Level\n    Credits\n    CDesc\n}\n\nentity Instructor {\n    Id <<key>>\n    IName\n    IOffice\n    IPhone\n    Rank\n    DepartmentCode <<FK>>\n}\n\nentity Student {\n    Sid <<key>>\n    Name {\n        FName\n        MName\n        LName\n    }\n    Addr\n    Phone\n    Major\n    DoB\n    DepartmentCode <<FK>>\n}\n\nentity Section {\n    SecId <<key>>\n    SecNo\n    Sem\n    Year\n    CRoom\n    DaysTime\n    grade\n}\n\nrelationship administers {\n}\n\nrelationship offers {\n}\n\nrelationship teaches {\n}\n\nrelationship employs {\n}\n\nrelationship enrolls {\n}\n\nrelationship has {\n}\n\nrelationship supervises {\n}\n\n' Relationships\nCollege -1- administers\nadministers -N- Department\nDepartment -1- employs\nemploys -N- Faculty\nDepartment -1- has\nhas -N- Course\nDepartment -1- employs\nemploys -N- Instructor\nInstructor -1- teaches\nteaches -N- Section\nCourse -1- has\nhas -N- Section\nStudent -N- enrolls\nenrolls -N- Section\nDean -1- supervises\nsupervises -N- Department\n\n@endchen"
    },
    {
        "input": "Design an ER schema for keeping track of votes in the U.S. House of Representatives during the current two-year congressional session. The database must maintain information about each U.S. STATE, including its name and region (e.g., 'Northeast', 'Midwest', 'Southeast', 'Southwest', 'West'). Each CONGRESS_PERSON must be described by their name, the district they represent, the start date of their tenure, and their political party affiliation ('Republican', 'Democrat', 'Independent', 'Other'). The database must record information about each BILL, including its name, the date of the vote, its outcome ('Yes' or 'No'), and the sponsor(s) of the bill (the congressperson(s) who proposed it). Additionally, the database must track how each congressperson voted on each bill, with voting options including 'Yes', 'No', 'Abstain', or 'Absent'.",        
        "output": "@startchen\nentity State {\n    Name <<key>>\n    Region {\n        ' Domains\n        Northeast\n        Midwest\n        Southeast\n        Southwest\n        West\n    }\n}\n\nentity CongressPerson {\n    Name <<key>>\n    District\n    Start_date\n    Party {\n        ' Domains\n        Republican\n        Democrat\n        Independent\n        Other\n    }\n}\n\nentity Bill {\n    Bill_name <<key>>\n    Date_of_vote\n    Passed_or_failed {\n        ' Domains\n        Yes\n        No\n    }\n    Sponsor <<FK>>\n}\n\nentity Vote {\n    VoteID <<key>>\n    CongressPerson_Name <<FK>>\n    Bill_Name <<FK>>\n    Vote {\n        ' Domains\n        Yes\n        No\n        Abstain\n        Absent\n    }\n}\n\nrelationship administers{\n}\n\nrelationship sponsors {\n}\n\nrelationship votes_on {\n}\n\nrelationship relates_to {\n}\n\n' Relationships\nState -1- administers\nadministers -N- CongressPerson\nCongressPerson -N- sponsors\nsponsors -1- Bill\nCongressPerson -N- votes_on\nvotes_on -N- Vote\nVote -N- relates_to\nrelates_to -1- Bill\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to keep track of teams and games in a sports league. The database must record information about each team and its players. Not all players on a team will participate in every game, so the database must track which players participate in each game for each team. It must also record the positions played by each participating player in each game and the result of the game.",
        "output": "@startchen\nentity Team {\n    TeamID <<key>>\n    TeamName\n}\n\nentity Player {\n    PlayerID <<key>>\n    PlayerName\n    TeamID <<FK>>\n}\n\nentity Game {\n    GameID <<key>>\n    Date\n    Opponent\n    Result\n}\n\nentity Participation {\n    ParticipationID <<key>>\n    PlayerID <<FK>>\n    GameID <<FK>>\n    PositionPlayed\n}\n\nrelationship has {\n}\n\nrelationship plays_in {\n}\n\nrelationship participates_in {\n}\n\nrelationship involves {\n}\n\n' Relationships\nTeam -1- has\nhas -N- Player\nPlayer -N- plays_in\nplays_in -N- Game\nPlayer -N- participates_in\nparticipates_in -N- Participation\nGame -1- involves\ninvolves -N- Participation\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage a MAIL_ORDER system where employees take orders for parts from customers. The database must store information about employees, including a unique employee number, first and last name, and Zip Code. It must track customers, with each customer identified by a unique customer number, first and last name, and Zip Code. The database must maintain details about parts sold by the company, including a unique part number, part name, price, and quantity in stock. Orders placed by customers must be tracked with a unique order number, and each order must record the employee who took the order, the specified quantities of one or more parts, the date of receipt, the expected ship date, and the actual ship date.",    
        "output": "@startchen\nentity Company {\n    CompanyID <<key>>\n    CompanyName\n    Address\n    ZipCode\n}\n\nentity Employee {\n    EmployeeID <<key>>\n    FirstName\n    LastName\n    ZipCode\n    CompanyID <<FK>>\n}\n\nentity Customer {\n    CustomerID <<key>>\n    FirstName\n    LastName\n    ZipCode\n    CompanyID <<FK>>\n}\n\nentity Part {\n    PartNumber <<key>>\n    PartName\n    Price\n    QuantityInStock\n}\n\nentity Order {\n    OrderNumber <<key>>\n    OrderDate\n    ExpectedShipDate\n    ActualShipDate\n    EmployeeID <<FK>>\n    CustomerID <<FK>>\n}\n\nentity OrderDetail {\n    OrderDetailID <<key>>\n    OrderNumber <<FK>>\n    PartNumber <<FK>>\n    Quantity\n}\n\nrelationship employs {\n}\n\nrelationship serves {\n}\n\nrelationship takes {\n}\n\nrelationship places {\n}\n\nrelationship contains {\n}\n\nrelationship included_in {\n}\n\n' Relationships\nCompany -1- employs\nemploys -N- Employee\nCompany -1- serves\nserves -N- Customer\nEmployee -1- takes\ntakes -N- Order\nCustomer -1- places\nplaces -N- Order\nOrder -1- contains\ncontains -N- OrderDetail\nPart -1- included_in\nincluded_in -N- OrderDetail\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage data about the movie industry. The database must track information about movies, including the title, year of release, length in minutes, production company, and classification under one or more genres (e.g., horror, action, drama). Each movie must be associated with one or more directors and one or more actors, have a plot outline, and may include zero or more quotable quotes spoken by specific actors appearing in the movie. Actors must be identified by their name and date of birth, and the database must record the movies they appear in and their roles in those movies. Directors must also be identified by their name and date of birth, and the database must track the movies they direct. Directors may also act in movies, including those they direct. Production companies must be identified by their name and address, and the database must record the movies they produce.",
        "output": "@startchen\nentity Movie {\n    Title <<key>>\n    YearOfRelease\n    LengthInMinutes\n    PlotOutline\n}\n\nentity Genre {\n    GenreName <<key>>\n}\n\nentity Actor {\n    ActorName <<key>>\n    DateOfBirth\n}\n\nentity Director {\n    DirectorName <<key>>\n    DateOfBirth\n}\n\nentity ProductionCompany {\n    CompanyName <<key>>\n    Address\n}\n\nentity Quote {\n    QuoteID <<key>>\n    QuoteText\n}\n\nentity Role {\n    RoleID <<key>>\n    RoleName\n    ActorName <<FK>>\n    MovieTitle <<FK>>\n}\n\nrelationship belongs_to {\n}\n\nrelationship acts_in {\n}\n\nrelationship directs {\n}\n\nrelationship produces {\n}\n\nrelationship has {\n}\n\nrelationship spoken_by {\n}\n\nrelationship features {\n}\n\nrelationship plays {\n}\n\n' Relationships\nMovie -1- belongs_to\nbelongs_to -N- Genre\nMovie -N- acts_in\nacts_in -N- Actor\nMovie -N- acts_in\nacts_in -N- Director\nMovie -N- directs\ndirects -N- Director\nProductionCompany -1- produces\nproduces -N- Movie\nMovie -1- has\nhas -N- Quote\nQuote -N- spoken_by\nspoken_by -1- Actor\nActor -N- plays\nplays -N- Role\nMovie -N- features\nfeatures -N- Role\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage the CONFERENCE_REVIEW process, where researchers submit research papers for consideration, and reviewers evaluate them. The database must record the following details: Authors of papers must be uniquely identified by their email ID, with their first and last names also stored. Each paper must have a unique identifier, a title, an abstract, and the name of the electronic file containing the paper. Papers can have multiple authors, with one author designated as the contact author. Reviewers must be uniquely identified by their email address, and their first name, last name, phone number, affiliation, and topics of interest must be recorded. Each paper must be assigned between two and four reviewers. Reviewers must rate each assigned paper on a scale of 1 to 10 in four categories: technical merit, readability, originality, and relevance to the conference. The database must also store each reviewer's overall recommendation for each paper. Each review must include two types of written comments: one visible only to the review committee and the other as feedback for the author(s).",
        "output": "@startchen\nentity Author {\n    EmailID <<key>>\n    FirstName\n    LastName\n}\n\nentity Paper {\n    PaperID <<key>>\n    Title\n    Abstract\n    FileName\n    ContactAuthorID <<FK>>\n}\n\nentity Reviewer {\n    EmailID <<key>>\n    FirstName\n    LastName\n    PhoneNumber\n    Affiliation\n    TopicsOfInterest\n}\n\nentity Review {\n    ReviewID <<key>>\n    PaperID <<FK>>\n    ReviewerID <<FK>>\n    TechnicalMeritRating\n    ReadabilityRating\n    OriginalityRating\n    RelevanceRating\n    OverallRecommendation\n    CommitteeComments\n    AuthorFeedback\n}\n\nrelationship has {\n}\n\nrelationship submits {\n}\n\nrelationship rates {\n}\n\nrelationship assigned_to {\n}\n\nrelationship reviews {\n}\n\n' Relationships\nAuthor -N- submits\nsubmits -1- Paper\nPaper -N- assigned_to\nassigned_to -N- Reviewer\nReviewer -N- reviews\nreviews -1- Review\nReview -1- rates\nrates -1- Paper\n\n@endchen"
    },
    {
        "input": "Design an EER schema for a database to organize Olympic facilities for the summer Olympics. The database must manage information about sports complexes, which can be classified as either one-sport or multisport types. Multisport complexes must include designated areas for each sport with location indicators (e.g., center, NE corner). Each complex must store its location, chief organizing individual, total occupied area, and other relevant attributes. The database must track a series of events held in each complex, with details such as the planned date, duration, number of participants, number of officials, and additional relevant information. A roster of all officials must be maintained, along with the list of events each official is involved in. The database must also record information about equipment required for events (e.g., goal posts, poles, parallel bars) and for maintenance purposes. Both one-sport and multisport facilities must track the number of facilities needed and an approximate budget for each type.",        
        "output": "@startchen\nentity SportsComplex {\n    ComplexID <<key>>\n    Location\n    ChiefOrganizingIndividual\n    TotalOccupiedArea\n    NumberOfFacilities\n    ApproximateBudget\n}\n\nentity OneSportComplex {\n}\n\nentity MultiSportComplex {\n    AreaID <<key>>\n    SportType\n    LocationIndicator\n}\n\nentity Event {\n    EventID <<key>>\n    PlannedDate\n    Duration\n    NumberOfParticipants\n    NumberOfOfficials\n}\n\nentity Official {\n    OfficialID <<key>>\n    Name\n    Role\n}\n\nentity Equipment {\n    EquipmentID <<key>>\n    EquipmentType\n}\n\nentity Roster {\n    RosterID <<key>>\n}\n\nrelationship hosts {\n}\n\nrelationship involves {\n}\n\nrelationship requires {\n}\n\nrelationship listed_in {\n}\n\n' Relationships\nSportsComplex -1- hosts\nhosts -N- Event\nEvent -N- involves\ninvolves -1- Official\nMultiSportComplex -1- requires\nrequires -N- Equipment\nOneSportComplex -1- requires\nrequires -N- Equipment\nOfficial -N- listed_in\nlisted_in -1- Roster\n\n' Specialization\nSportsComplex ->- OneSportComplex\nSportsComplex ->- MultiSportComplex\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage the Georgia Tech Library (GTL) system effectively. The database must track members, books, borrowing activities, and the catalog. The library serves approximately 16,000 members and holds 100,000 titles with 250,000 volumes, with an average of 2.5 copies per book. The database must track book availability, including how many copies are in the library or out on loan, with approximately 10% of the books on loan at any given time. Books must be uniquely identified by their ISBN to differentiate editions or bindings of the same title. The catalog must organize books by author, title, and subject area, providing detailed descriptions for reference. Certain items, such as rare books, maps, or reference materials, must be designated as non-lendable and tracked separately. A wishlist of books for acquisition, including rare or out-of-print editions, must also be maintained. Members can borrow up to five books for 21 days, with a one-week grace period before reminders are sent. Faculty members must have extended borrowing privileges, allowing three-month loans with a two-week grace period. Membership requires an application with personal details such as SSN, addresses, and phone numbers. Members receive a card valid for four years, with renewal notices sent one month before expiry. Faculty members must have their data automatically integrated from employee records, with cards sent to their campus address. The system must identify active and inactive members based on borrowing behavior and track top borrowers to analyze borrowing trends. Approximately 5% of members must receive reminders for overdue books, and a similar percentage of overdue books must be flagged as lost or unreturned. The database must differentiate between lendable and non-lendable books, maintain borrowing history, and track books of interest for acquisition. It must also manage librarian roles, including the chief librarian, reference librarians, check-out staff, and assistants, to streamline library operations efficiently.",        
        "output": "@startchen\nentity Member {\n    MemberID <<key>>\n    SSN\n    FirstName\n    LastName\n    CampusAddress\n    HomeAddress\n    PhoneNumber\n    MembershipType\n    CardExpirationDate\n    IsActive\n}\n\nentity Book {\n    ISBN <<key>>\n    Title\n    Author\n    SubjectArea\n    Description\n    CanBeLent\n    IsRare\n}\n\nentity Loan {\n    LoanID <<key>>\n    MemberID <<FK>>\n    ISBN <<FK>>\n    CheckoutDate\n    DueDate\n    ReturnDate\n    IsOverdue\n}\n\nentity Librarian {\n    LibrarianID <<key>>\n    Name\n    Role\n}\n\nentity Catalog {\n    CatalogID <<key>>\n    ISBN <<FK>>\n    Title\n    Author\n    SubjectArea\n    Description\n}\n\nentity Reminder {\n    ReminderID <<key>>\n    MemberID <<FK>>\n    NoticeDate\n    RenewalDate\n}\n\nrelationship borrows {\n}\n\nrelationship manages {\n}\n\nrelationship issues {\n}\n\nrelationship has {\n}\n\nrelationship includes {\n}\n\n' Relationships\nMember -N- borrows\nborrows -N- Loan\nLibrarian -N- manages\nmanages -N- Catalog\nCatalog -1- has\nhas -N- Book\nMember -N- issues\nissues -1- Reminder\nLoan -1- includes\nincludes -(1,5)- Book\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage information for an art museum based on the following requirements: The museum's collection consists of ART_OBJECTS, each identified by a unique ID number, with details such as Artist (if known), Year (created, if known), Title, and Description. ART_OBJECTS are categorized by type into PAINTING, SCULPTURE, STATUE, and OTHER. A PAINTING must include its Paint_type (e.g., oil, watercolor), material it is Drawn_on (e.g., paper, canvas, wood), and Style (e.g., modern, abstract). SCULPTURES and STATUES must include the Material (e.g., wood, stone), Height, Weight, and Style. ART_OBJECTS in the OTHER category must include their Type (e.g., print, photo) and Style. ART_OBJECTS are further categorized as either PERMANENT_COLLECTION or BORROWED. For PERMANENT_COLLECTION items, the database must capture Date_acquired, Status (on display, on loan, or stored), and Cost. For BORROWED items, the database must track the Collection from which they were borrowed, as well as Date_borrowed and Date_returned. Each ART_OBJECT must include information about its country or culture of Origin (e.g., Italian, Egyptian) and Epoch (e.g., Renaissance, Modern). If known, the database must store ARTIST information, including Name (unique), DateBorn, DateDied (if deceased), Country_of_origin, Epoch, Main_style, and Description. The museum organizes EXHIBITIONS, each identified by a unique Name, with Start_date, End_date, and the ART_OBJECTS displayed during the exhibition. Additionally, the database must track information about other COLLECTIONS the museum interacts with, including their Name (unique), Type (e.g., museum, personal), Description, Address, Phone, and current Contact_person.",        
        "output": "@startchen\n\nentity ART_OBJECT {\n  Id_no <<key>>\n  Artist\n  Year\n  Title\n  Description\n  Country_or_Culture\n  Epoch\n}\nentity PAINTING {\n  Paint_type\n  Drawn_on\n  Style\n}\nentity SCULPTURE {\n  Material\n  Height\n  Weight\n  Style\n}\nentity STATUE {\n  Material\n  Height\n  Weight\n  Style\n}\nentity PERMANENT_COLLECTION {\n  Date_acquired\n  Status\n  Cost\n}\nentity ARTIST <<weak>>{\n  Name <<key>>\n  DateBorn\n  Date_died\n  Country_of_origin\n  Epoch\n  Main_style\n  Description\n}\nentity EXHIBITION {\n  Name <<key>>\n  Start_date\n  End_date\n}\nentity COLLECTION {\n  Name <<key>>\n  Type\n  Description\n  Address\n  Phone\n  Contact_person\n}\nrelationship CREATED_BY <<identifying>> {\n}\nrelationship DISPLAYED_IN {\n}\nrelationship PART_OF {\n}\nrelationship BORROWED_FROM {\n  Date_borrowed\n  Date_returned\n}\nrelationship IS_A {\n}\nARTIST -1- CREATED_BY\nCREATED_BY -N- ART_OBJECT\nART_OBJECT -N- DISPLAYED_IN\nDISPLAYED_IN -1- EXHIBITION\nART_OBJECT -N- PART_OF\nPART_OF -1- PERMANENT_COLLECTION\nART_OBJECT -N- BORROWED_FROM\nBORROWED_FROM -1- COLLECTION\nART_OBJECT -1- IS_A\nIS_A -1- PAINTING\nIS_A -1- SCULPTURE\nIS_A -1- STATUE\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a small-private-airport database to manage information about airplanes, their owners, airport employees, and pilots based on the following requirements: Each AIRPLANE must have a registration number [Reg#], belong to a particular plane type [OF_TYPE], and be stored in a specific hangar [STORED_IN]. Each PLANE_TYPE must include a model number [Model], capacity [Capacity], and weight [Weight]. Each HANGAR must have a number [Number], capacity [Capacity], and location [Location]. The database must track the OWNERs of each airplane [OWNS] and the EMPLOYEEs who maintain the planes [MAINTAIN]. The OWNS relationship must relate an AIRPLANE to an OWNER, capturing the purchase date [Pdate]. The MAINTAIN relationship must relate an EMPLOYEE to service records [SERVICE]. Each airplane must be associated with multiple service records [PLANE_SERVICE], where each SERVICE record includes maintenance date [Date], hours worked [Hours], and type of work performed [Work_code]. SERVICE must be represented as a weak entity type, identified by the airplane's registration number [Reg#]. Owners can be either PERSONs or CORPORATIONs, requiring the OWNER entity type to be a union category comprising PERSON and CORPORATION entities. Pilots [PILOT] and employees [EMPLOYEE] must be subclasses of PERSON. PILOT entities must have attributes such as license number [Lic_num] and restrictions [Restr], while EMPLOYEE entities must have attributes for salary [Salary] and shift worked [Shift]. All PERSON entities must include attributes such as Social Security number [Ssn], name [Name], address [Address], and phone number [Phone]. CORPORATION entities must include attributes for name [Name], address [Address], and phone number [Phone]. The database must track the types of planes each pilot is authorized to fly [FLIES] and the types of planes each employee is qualified to maintain [WORKS_ON].",        
        "output": "@startchen\n\nentity AIRPLANE {\n    Reg <<key>>\n    OF_TYPE\n    STORED_IN\n}\n\nentity PLANE_TYPE {\n    Model <<key>>\n    Capacity\n    Weight\n}\n\nentity HANGAR {\n    Number <<key>>\n    Capacity\n    Location\n}\n\nentity OWNER {\n}\n\nentity CORPORATION {\n    Name <<key>>\n    Address\n    Phone\n}\n\nentity PERSON {\n    Ssn <<key>>\n    Name\n    Address\n    Phone\n}\n\nentity EMPLOYEE {\n    Salary\n    Shift\n}\n\nentity PILOT {\n    Lic_num <<key>>\n    Restr\n}\n\nentity SERVICE {\n    Date\n    Hours\n    Work_code\n}\n\nOWNER ->- o { PERSON, CORPORATION }\nPERSON =>= d { EMPLOYEE, PILOT }\n\nrelationship OWNS {\n    Pdate\n}\nrelationship MAINTAIN {\n}\nrelationship PLANE_SERVICE {\n}\nrelationship FLIES {\n}\nrelationship WORKS_ON {\n}\nrelationship STORED_IN {\n}\nrelationship OF_TYPE {\n}\n\nAIRPLANE -N- OWNS\nOWNS -1- OWNER\n\nEMPLOYEE -N- MAINTAIN\nMAINTAIN -1- SERVICE\n\nAIRPLANE -N- PLANE_SERVICE\nPLANE_SERVICE -1- SERVICE\n\nPILOT -N- FLIES\nFLIES -1- PLANE_TYPE\n\nEMPLOYEE -N- WORKS_ON\nWORKS_ON -1- PLANE_TYPE\n\nAIRPLANE -N- STORED_IN\nSTORED_IN -1- HANGAR\n\nAIRPLANE -1- OF_TYPE\nOF_TYPE -1- PLANE_TYPE\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage the game of chess with the following requirements: The game must track two players, each assigned a color (black or white) at the start of the game. The game is played on an 8 × 8 board. Each player starts with a set of pieces, including a king, a queen, two rooks, two bishops, two knights, and eight pawns. Each piece must have its initial position recorded and be associated with a specific player. The database must maintain the legal moves for each piece based on the state of the game. While legal moves do not need to be fully detailed, the following must be accounted for: pieces may move to empty squares or capture an opposing piece. Captured pieces must be removed from the board. If a pawn moves to the last row, it must be promoted to another piece (queen, rook, bishop, or knight), and the new piece must be recorded. The database must also manage the state of the board and track changes as the game progresses.",
        "output": "@startchen\n\nentity GAME {\n    Id <<key>>\n    Status\n}\nentity PLAYER {\n    Id <<key>>\n    Color\n}\n\nentity BOARD {\n    Dimensions\n}\n\nentity PIECE {\n    Type\n    Initial_position\n}\n\nentity KING {\n}\n\nentity QUEEN {\n}\n\nentity ROOK {\n}\n\nentity BISHOP {\n}\n\nentity KNIGHT {\n}\n\nentity PAWN {\n}\n\nPIECE ->- o { KING, QUEEN, ROOK, BISHOP, KNIGHT, PAWN }\n\nrelationship HAS {\n}\nrelationship PLAYS {\n}\nrelationship MOVES {\n}\nrelationship CONTAINS {\n}\n\nGAME -1- HAS\nHAS -2- PLAYER\nPLAYER -1- PLAYS\nPLAYS -N- PIECE\nPLAYER -N- MOVES\nMOVES -1- PIECE\nGAME -1- HAS\nHAS -N- PIECE\nGAME -1- CONTAINS\nCONTAINS -1- BOARD\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage a GRADE_BOOK system with the following requirements: The database must track students, each identified by a unique identifier, first name, last name, and email address. Instructors must be associated with the courses they teach each term. Each course must be identified by a course number, section number, and term. Students must be enrolled in courses, and the database must record their enrollment. Each course must have grading components, each defined by maximum points and weights, with the weights totaling 100. The database must enable instructors to record the points earned by each student in each grading component for the courses they teach.",        
        "output": "@startchen\n\nentity STUDENT {\n    StudentID <<key>>\n    FirstName\n    LastName\n    Email\n}\n\nentity INSTRUCTOR {\n    InstructorID <<key>>\n    FirstName\n    LastName\n}\n\nentity COURSE {\n    CourseNumber <<key>>\n    SectionNumber <<key>>\n    Term\n}\n\nentity GRADING_COMPONENT {\n    ComponentName <<key>>\n    MaxPoints\n    Weight\n}\n\nentity GRADE {\n    PointsEarned\n}\n\nrelationship ENROLLED_IN {\n}\n\nrelationship TEACHES {\n}\n\nrelationship HAS_COMPONENT {\n}\n\nrelationship RECORDS {\n}\n\nrelationship Is_Assigned {\n}\n\nrelationship HAS {\n}\n\nSTUDENT -N- ENROLLED_IN\nENROLLED_IN -1- COURSE\nINSTRUCTOR -N- TEACHES\nTEACHES -1- COURSE\nCOURSE -N- HAS_COMPONENT\nHAS_COMPONENT -1- GRADING_COMPONENT\nINSTRUCTOR -N- RECORDS\nRECORDS -N- GRADE\nSTUDENT -1- Is_Assigned\nIs_Assigned -N- GRADE\nGRADE -1- HAS\nHAS -N- GRADING_COMPONENT\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage an online auction system with the following requirements: The database must track members, each identified by a unique member number, email address, name, password, home address, and phone number. Members can be either buyers or sellers. Buyers must have a shipping address recorded, while sellers must have a bank account number and routing number recorded. Items placed for sale by sellers must be identified by a unique item number assigned by the system and include attributes such as item title, description, starting bid price, bidding increment, start date, and end date of the auction. Items must be categorized based on a fixed classification hierarchy (e.g., COMPUTER → HARDWARE → MODEM). Buyers must be able to make bids on items they are interested in, with each bid recording the bid price and time. The database must determine the highest bid at the end of the auction to declare the winner and facilitate the transaction between the buyer and seller. Buyers and sellers must be able to record feedback on completed transactions, including a rating (1–10) and a comment.",        
        "output": "@startchen\n\nentity MEMBER {\n    MemberID <<key>>\n    Email\n    Name\n    Password\n    Address\n    Phone\n}\n\nentity BUYER {\n    ShippingAddress\n}\n\nentity SELLER {\n    BankAccountNumber\n    RoutingNumber\n}\n\nentity ITEM {\n    ItemNumber <<key>>\n    Title\n    Description\n    StartingBid\n    BiddingIncrement\n    StartDate\n    EndDate\n}\n\nentity BID {\n    BidPrice\n    BidTime\n}\n\nentity CATEGORY {\n    Name <<key>>\n}\n\nentity FEEDBACK {\n    Rating\n    Comment\n}\n\nMEMBER ->- o { BUYER, SELLER }\n\nrelationship PLACED_BY {\n}\nrelationship MAKES {\n}\nrelationship HAS {\n}\nrelationship RECEIVES {\n}\n\nSELLER -1- PLACED_BY\nPLACED_BY -N- ITEM\nBUYER -N- MAKES\nMAKES -1- BID\nITEM -N- HAS\nHAS -1- CATEGORY\nBUYER -N- RECEIVES\nRECEIVES -1- FEEDBACK\nSELLER -N- RECEIVES\nRECEIVES -1- FEEDBACK\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database system to manage a baseball organization with the following requirements: The database must track personnel involved in the league, including players, coaches, managers, and umpires, each identified by a unique personnel ID. Personnel must also include attributes such as first name, last name, date of birth, and place of birth. Players must have additional attributes such as batting orientation (left, right, or switch) and lifetime batting average (BA). A subset of players, called pitchers, must also include a lifetime earned run average (ERA). Teams must be uniquely identified by their names and described by the city they are located in, as well as the division and league in which they play (e.g., Central division of the American League). Each team must have one manager, a number of coaches, and a roster of players. The database must track games played between two teams, designating one as the home team and the other as the visiting team, with the date of the game recorded. The score for each team, including runs, hits, and errors, must be recorded, and the team with the most runs must be declared the winner. For each finished game, the winning pitcher, losing pitcher, and, if applicable, the save pitcher must be recorded. The database must also track the number of hits (singles, doubles, triples, and home runs) obtained by each player in each game.", 
        "output": "@startchen\n\nentity PERSONNEL {\n    PersonnelID <<key>>\n    FirstName\n    LastName\n    DateOfBirth\n    PlaceOfBirth\n}\n\nentity PLAYER {\n    BattingOrientation\n    LifetimeBA\n}\n\nentity PITCHER {\n    LifetimeERA\n}\n\nentity COACH {\n    Specialty\n}\n\nentity MANAGER {\n}\n\nentity UMPIRE {\n    ExperienceLevel\n}\n\nentity TEAM {\n    TeamName <<key>>\n    City\n    Division\n    League\n}\n\nentity GAME {\n    GameDate <<key>>\n    HomeScore\n    HomeHits\n    HomeErrors\n    VisitorScore\n    VisitorHits\n    VisitorErrors\n    WinningPitcherID\n    LosingPitcherID\n    SavePitcherID\n}\n\nentity STATS {\n    Singles\n    Doubles\n    Triples\n    HomeRuns\n}\n\nPERSONNEL ->- o { PLAYER, COACH, MANAGER, UMPIRE }\nPLAYER ->- o { PITCHER }\n\nrelationship PLAYS_FOR {\n}\nrelationship HAS_MANAGER {\n}\nrelationship HAS_COACH {\n}\nrelationship PARTICIPATES_IN {\n}\nrelationship RECORDED_IN {\n}\nrelationship OFFICIATES {\n}\n\nPITCHER -N- PLAYS_FOR\nPLAYS_FOR -1- TEAM\n\nPLAYER -N- PLAYS_FOR\nPLAYS_FOR -1- TEAM\n\nTEAM -1- HAS_MANAGER\nHAS_MANAGER -1- MANAGER\n\nTEAM -1- HAS_COACH\nHAS_COACH -N- COACH\n\nPLAYER -N- RECORDED_IN\nRECORDED_IN -1- STATS\n\nTEAM -2- PARTICIPATES_IN\nPARTICIPATES_IN -1- GAME\n\nUMPIRE -N- OFFICIATES\nOFFICIATES -N- GAME\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage a hostel management system with the following requirements: The system must handle student registration and room allocation, with each student providing details such as student ID, name, contact information, department, year of study, and gender. Each student must be assigned a room based on availability. Rooms must be categorized by room number, block, floor, capacity, and type (single, double, triple occupancy). A student can occupy only one room at a time, but multiple students may share a room if its capacity allows. The system must store the date of room allocation and generate a unique room assignment ID to track occupancy history. Rooms must belong to specific blocks within the hostel (e.g., Block A, Block B), and their status must be maintained, indicating whether they are vacant, occupied, or under maintenance. Staff members, identified by staff ID, name, role, and contact information, must be assigned to handle room maintenance requests. The system must track hostel fees for students, with monthly charges based on the room type. Fee details must include the amount, due date, and payment status (paid, pending, overdue). Payments must be recorded with a payment ID, payment date, amount paid, and method of payment (cash, card, online transfer). The system must also track penalties for late payments and generate invoices. Visitor management must allow students to register visitors, with visitor details such as visitor ID, name, contact information, and the date and time of their visit. Each visitor must be linked to a specific student, and their entry and exit must be recorded. Students must be able to file complaints for room maintenance or other issues, with each complaint assigned a unique complaint ID, description, date filed, and status (open, in progress, resolved). Maintenance staff members must be assigned to handle complaints, and the system must track maintenance requests, including the staff assigned, completion date, and maintenance details. Finally, the system must generate reports on room occupancy, student payment statuses, and maintenance requests, with options to filter reports by block, student, or date range.",        
        "output": "@startchen\n\nentity STUDENT {\n    StudentID <<key>>\n    Name\n    ContactDetails\n    Department\n    YearOfStudy\n    Gender\n}\n\nentity ROOM {\n    RoomNumber <<key>>\n    Block\n    Floor\n    Capacity\n    Type\n    Status\n}\n\nentity ROOM_ASSIGNMENT {\n    AssignmentID <<key>>\n    AllocationDate\n}\n\nentity STAFF {\n    StaffID <<key>>\n    Name\n    Role\n    ContactInformation\n}\n\nentity FEE {\n    FeeID <<key>>\n    Amount\n    DueDate\n    PaymentStatus\n}\n\nentity PAYMENT {\n    PaymentID <<key>>\n    PaymentDate\n    AmountPaid\n    MethodOfPayment\n}\n\nentity VISITOR {\n    VisitorID <<key>>\n    Name\n    ContactDetails\n    VisitDateTime\n}\n\nentity COMPLAINT {\n    ComplaintID <<key>>\n    Description\n    DateFiled\n    Status\n}\n\nentity MAINTENANCE_REQUEST {\n    RequestID <<key>>\n    CompletionDate\n    MaintenanceDetails\n}\n\nentity REPORT {\n    ReportID <<key>>\n    Type\n    FilterCriteria\n}\n\nrelationship ASSIGNED_TO {\n}\nrelationship ALLOCATES {\n}\nrelationship MANAGES {\n}\nrelationship MAKES {\n}\nrelationship VISITS {\n}\nrelationship FILES {\n}\nrelationship RESOLVES {\n}\nrelationship GENERATES {\n}\nrelationship IS_CHARGED {\n}\n\nROOM_ASSIGNMENT -1- ASSIGNED_TO\nASSIGNED_TO -1- STUDENT\n\nSTAFF -N- MANAGES\nMANAGES -1- ROOM\n\nROOM -1- ALLOCATES\nALLOCATES -(1,N)- ROOM_ASSIGNMENT\n\nSTUDENT -1- MAKES\nMAKES -1- PAYMENT\n\nSTUDENT -1- VISITS\nVISITS -N- VISITOR\n\nSTUDENT -N- FILES\nFILES -N- COMPLAINT\n\nCOMPLAINT -N- RESOLVES\nRESOLVES -1- MAINTENANCE_REQUEST\n\nSTAFF -1- MANAGES\nMANAGES -N- MAINTENANCE_REQUEST\n\nROOM -N- GENERATES\nGENERATES -1- REPORT\n\nSTUDENT -1- IS_CHARGED\nIS_CHARGED -1- FEE\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a software house management system to manage employees, projects, clients, and resources with the following requirements: The system must manage employees, including software engineers, project managers, QA testers, designers, and other roles. Each employee must have an employee ID, name, email, contact number, position, department (e.g., Development, QA, HR), date of joining, salary, and availability (active, on leave). Employees can be assigned to multiple projects simultaneously, with their role in each project (developer, tester, manager, etc.) recorded. The system must manage clients who provide projects, including client ID, company name, contact person, email, and phone number. Clients can have multiple projects, each with a project ID, name, description, start date, end date, budget, and status (active, completed, on hold). Payments from clients must be tracked with a payment ID, payment date, amount, and payment method (bank transfer, credit card, etc.). Projects must be tracked with a project ID, name, description, and deadline, along with their start date, end date, milestones, and budget. Milestones must have a milestone ID, description, start date, end date, and status (in progress, completed). Employees must be assigned specific roles in projects, and hours worked by employees on each project must be recorded. Tasks within projects must be tracked, including task ID, description, priority (low, medium, high), assigned employee, deadline, and status (pending, in progress, completed). The system must log time spent on each task and manage task dependencies. The system must manage resources such as software licenses, hardware, and office supplies, with each resource having a resource ID, name, type (software, hardware), purchase date, cost, and assigned department. Resources must be allocated to employees or projects, with their status (in use, available, damaged) and inventory levels tracked. Reports must be generated on project progress, employee performance, resource allocation, client payments, and project financials (e.g., total expenditure vs. budget). Notifications must alert managers about approaching deadlines and overdue client payments. The system must handle employee payroll, storing details like salary, bonuses, deductions, and pay dates, and tracking payroll status (paid, pending) for each employee.",        
        "output": "@startchen\n\nentity EMPLOYEE {\n    EmployeeID <<key>>\n    Name\n    Email\n    ContactNumber\n    Position\n    Department\n    DateOfJoining\n    Salary\n    Availability\n}\n\nentity CLIENT {\n    ClientID <<key>>\n    CompanyName\n    ContactPerson\n    Email\n    PhoneNumber\n}\n\nentity PROJECT {\n    ProjectID <<key>>\n    Name\n    Description\n    StartDate\n    EndDate\n    Budget\n    Status\n}\n\nentity MILESTONE {\n    MilestoneID <<key>>\n    Description\n    StartDate\n    EndDate\n    Status\n}\n\nentity TASK {\n    TaskID <<key>>\n    Description\n    Priority\n    AssignedEmployee\n    Deadline\n    Status\n}\n\nentity RESOURCE {\n    ResourceID <<key>>\n    Name\n    Type\n    PurchaseDate\n    Cost\n    AssignedDepartment\n    Status\n}\n\nentity PAYMENT {\n    PaymentID <<key>>\n    PaymentDate\n    Amount\n    PaymentMethod\n}\n\nentity PAYROLL {\n    PayrollID <<key>>\n    Salary\n    Bonus\n    Deductions\n    PayDate\n    Status\n}\n\nrelationship ASSIGNED_TO {\n}\nrelationship MAINTAINS {\n}\nrelationship ASSIGNED {\n}\nrelationship PAYS {\n}\nrelationship TRACKS {\n}\nrelationship ALLOCATED {\n}\nrelationship IS_DIVIDED {\n}\nrelationship HAS {\n}\n\nEMPLOYEE -N- ASSIGNED_TO\nASSIGNED_TO -1- PROJECT\n\nCLIENT -1- MAINTAINS\nMAINTAINS -N- PROJECT\n\nCLIENT -N- PAYS\nPAYS -1- PAYMENT\n\nPROJECT -N- TRACKS\nTRACKS -1- MILESTONE\n\nTASK -N- IS_DIVIDED\nIS_DIVIDED -1- PROJECT\n\nPROJECT -N- ALLOCATED\nALLOCATED -N- RESOURCE\n\nEMPLOYEE -1- HAS\nHAS -1- PAYROLL\n\nEMPLOYEE -1- ALLOCATED\nALLOCATED -N- RESOURCE\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage final year projects for university students, covering all phases from proposal submission to final evaluation. The system must manage students, faculty, projects, committees, and evaluations with the following requirements: Students can submit project proposals individually or in groups of 2-4 members, with group information including group ID and leader. Student details such as ID, name, email, and department must be recorded. Proposals must include proposal ID, title, description, submission date, and status. Projects must have attributes like project ID, title, description, start and end dates, and status (ongoing, completed, or rejected). Faculty members or external mentors must supervise projects, with their roles and details tracked. Committees must be identified by a committee ID and consist of faculty members assigned specific roles (chairperson, evaluator, observer). Committees must evaluate projects and provide feedback or request changes, with evaluations including progress reports and final assessments. Evaluations must track report submissions, feedback, and scores, with final scores broken into components such as innovation, technical accuracy, and presentation. Projects must be divided into milestones with milestone ID, name, due date, and status, and tasks under milestones must be assigned to group members and monitored for progress. Supervisors must oversee tasks and milestones to ensure timely completion. The system must manage project-related documents (e.g., proposals, reports, code), with each document tagged by document ID, title, and type. Resource requirements like software, hardware, and budgets must be tracked. Reports must be generated on project progress, student performance, and evaluations, and alerts must notify students and supervisors of approaching deadlines. Committees must assign grades after final evaluations, with grades stored by evaluation ID, total score, and grade breakdowns. The system must also track grade histories for supervisors to analyze student performance trends.",        
        "output": "@startchen\nentity STUDENT {\n  StudentID <<key>>\n  Name\n  Email\n  Department\n  DegreeProgram\n  YearOfStudy\n  GroupID <<FK>>\n}\nentity GROUP {\n  GroupID <<key>>\n  LeaderID <<FK>>\n}\nentity PROPOSAL {\n  ProposalID <<key>>\n  Title\n  Description\n  SubmissionDate\n  Status\n  GroupID <<FK>>\n}\nentity PROJECT {\n  ProjectID <<key>>\n  Title\n  Description\n  StartDate\n  EndDate\n  Status\n  SupervisorID <<FK>>\n}\nentity SUPERVISOR {\n  SupervisorID <<key>>\n  Name\n  Department\n  Email\n  Designation\n}\nentity MENTOR {\n  MentorID <<key>>\n  Name\n  Company\n  Email\n  Role\n}\nentity COMMITTEE {\n  CommitteeID <<key>>\n  DateOfEvaluation\n}\nentity COMMITTEE_MEMBER {\n  CommitteeMemberID <<key>>\n  CommitteeRole\n  CommitteeID <<FK>>\n  FacultyID <<FK>>\n}\nentity EVALUATION {\n  EvaluationID <<key>>\n  Feedback\n  Score\n  Comments\n  ProjectID <<FK>>\n}\nentity PROGRESS_REPORT {\n  ReportID <<key>>\n  SubmissionDate\n  Feedback\n  Status\n  ProjectID <<FK>>\n}\nentity MILESTONE {\n  MilestoneID <<key>>\n  Name\n  DueDate\n  Status\n  ProjectID <<FK>>\n}\nentity TASK {\n  TaskID <<key>>\n  Description\n  AssignedGroupMembers\n  StartDate\n  EndDate\n  CompletionStatus\n  MilestoneID <<FK>>\n}\nentity DOCUMENT {\n  DocumentID <<key>>\n  Title\n  UploadDate\n  FileType\n  ProjectID <<FK>>\n}\nentity RESOURCE {\n  ResourceID <<key>>\n  Name\n  Quantity\n  Cost\n  ProjectID <<FK>>\n}\nentity GRADE {\n  GradeID <<key>>\n  Component\n  Score\n  FinalGrade\n  EvaluationID <<FK>>\n}\nrelationship BELONGS_TO {\n}\nrelationship SUBMITS {\n}\nrelationship OVERSEEN_BY {\n}\nrelationship INVOLVES {\n}\nrelationship COMMITTEE_INCLUDES {\n}\nrelationship ASSESSES {\n}\nrelationship DIVIDED_INTO {\n}\nrelationship CONTAINS {\n}\nrelationship REQUIRES {\n}\nrelationship EVALUATED_BY {\n}\nrelationship HAS {\n}\nrelationship IS_ASSIGNED {\n}\nrelationship INCLUDES {\n}\n\nSTUDENT -N- BELONGS_TO\nBELONGS_TO -1- GROUP\n\nGROUP -1- SUBMITS\nSUBMITS -N- PROPOSAL\n\nPROJECT -1- HAS\nHAS -1- PROPOSAL\nPROJECT -N- OVERSEEN_BY\nOVERSEEN_BY -1- SUPERVISOR\nPROJECT -1- INVOLVES\nINVOLVES -N- MENTOR\nCOMMITTEE -N- COMMITTEE_INCLUDES\nCOMMITTEE_INCLUDES -N- COMMITTEE_MEMBER\nCOMMITTEE -N- ASSESSES\nASSESSES -N- EVALUATION\nPROJECT -1- DIVIDED_INTO\nDIVIDED_INTO -N- MILESTONE\nMILESTONE -1- HAS\nHAS -N- TASK\nPROJECT -1- CONTAINS\nCONTAINS -N- DOCUMENT\nPROJECT -1- REQUIRES\nREQUIRES -N- RESOURCE\nPROJECT -N- EVALUATED_BY\nEVALUATED_BY -1- EVALUATION\nGRADE -1- INCLUDES\nINCLUDES -N- EVALUATION\nPROJECT -1- IS_ASSIGNED\nIS_ASSIGNED -1- GRADE\nPROJECT -1- HAS\nHAS -N- PROGRESS_REPORT\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage students, faculty, academic activities, and roles within an institution. The database must handle the following requirements: Student Management must include storing student details such as student ID, name, email, contact details, department, program, and year of study. Students must be enrolled in multiple courses, and the system must track course enrollments, grades, and attendance. Each student must be assigned a faculty advisor to guide them academically. Faculty Management must include storing faculty details such as faculty ID, name, email, department, designation (professor, lecturer), and courses taught. Faculty members must be responsible for teaching courses, advising students, and evaluating student performance through grades and assessments. Course Management must include defining courses with attributes such as course ID, name, description, credits, and semester offered. Each course must be taught by one or more faculty members and attended by a group of students. The system must track course schedules, assignments, exams, and final grades. Department Management must include tracking departments within the institution (e.g., Computer Science, Mathematics), with each department having a head responsible for overseeing faculty and academic activities. Departments must manage both students and faculty within their academic programs. The system must generate reports on student performance, faculty workload, course enrollments, and department statistics. Academic administrators must be able to monitor student progress, faculty assignments, and overall department performance.",        
        "output": "@startchen\n\nentity STUDENT {\n    StudentID <<key>>\n    Name\n    Email\n    ContactDetails\n    Department\n    Program\n    YearOfStudy\n}\n\nentity FACULTY {\n    FacultyID <<key>>\n    Name\n    Email\n    Department\n    Designation\n}\n\nentity COURSE {\n    CourseID <<key>>\n    Name\n    Description\n    Credits\n    SemesterOffered\n}\n\nentity DEPARTMENT {\n    DepartmentID <<key>>\n    Name\n    HeadOfDepartment\n}\n\nrelationship ENROLLED_IN {\n}\nrelationship TAUGHT_BY {\n}\nrelationship GUIDED_BY {\n}\nrelationship BELONGS_TO {\n}\nrelationship CONTAINS {\n}\n\nSTUDENT -N- ENROLLED_IN\nENROLLED_IN -1- COURSE\n\nCOURSE -N- TAUGHT_BY\nTAUGHT_BY -1- FACULTY\n\nSTUDENT -1- GUIDED_BY\nGUIDED_BY -N- FACULTY\n\nSTUDENT -N- BELONGS_TO\nBELONGS_TO -1- DEPARTMENT\n\nFACULTY -N- BELONGS_TO\nBELONGS_TO -1- DEPARTMENT\n\nDEPARTMENT -1- CONTAINS\nCONTAINS -N- COURSE\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage patients, doctors, staff, and medical resources within a hospital with the following requirements: Patient Management must include storing patient details such as patient ID, name, date of birth, contact information, and medical history. The system must track appointments, diagnoses, treatments, and prescriptions for each patient. Patients must be categorized as inpatients (admitted) or outpatients, with admission details (room, ward, doctor assigned) and discharge summaries recorded. Doctor Management must include storing doctor details such as doctor ID, name, specialization, contact details, and availability. Doctors must be responsible for diagnosing and treating patients, with the system tracking patient-doctor assignments, treatment plans, and prescriptions. The system must also manage surgery schedules and details for surgeries performed by doctors. Staff Management must include details such as staff ID, name, role, department, and shift schedules for nurses, technicians, and administrative staff. Staff must be assigned to tasks such as patient care, performing tests, or handling administrative duties. Appointment and Scheduling must allow patients to schedule appointments with doctors, recording details such as appointment ID, date, time, and doctor assigned. The system must manage doctor schedules to prevent conflicts and ensure effective patient care. Treatment and Billing must record treatment plans, including medications, tests, and procedures prescribed by doctors. The system must generate invoices for treatments, medications, and services, with invoice details such as billing ID, date, amount, and payment status. Medical Records and Reports must maintain medical records for each patient, including treatment history, lab results, and diagnostic reports. The system must generate reports on patient admissions, treatment outcomes, and resource utilization within the hospital.",        
        "output": "@startchen\n\nentity PATIENT {\n    PatientID <<key>>\n    Name\n    DateOfBirth\n    ContactInformation\n    MedicalHistory\n}\n\nentity INPATIENT {\n    PatientID <<FK>>\n    AdmissionID <<FK>>\n}\n\nentity OUTPATIENT {\n    PatientID <<FK>>\n}\n\nentity DOCTOR {\n    DoctorID <<key>>\n    Name\n    Specialization\n    ContactDetails\n    Availability\n}\n\nentity STAFF {\n    StaffID <<key>>\n    Name\n    Role\n    Department\n    ShiftSchedule\n}\n\nentity APPOINTMENT {\n    AppointmentID <<key>>\n    Date\n    Time\n    DoctorID <<FK>>\n    PatientID <<FK>>\n}\n\nentity TREATMENT {\n    TreatmentID <<key>>\n    Medications\n    Tests\n    Procedures\n    DoctorID <<FK>>\n    PatientID <<FK>>\n}\n\nentity INVOICE {\n    BillingID <<key>>\n    Date\n    Amount\n    PaymentStatus\n    PatientID <<FK>>\n}\n\nentity MEDICAL_RECORD {\n    RecordID <<key>>\n    TreatmentHistory\n    LabResults\n    DiagnosticReports\n    PatientID <<FK>>\n}\n\nentity ADMISSION {\n    AdmissionID <<key>>\n    Room\n    Ward\n    AdmissionDate\n    DischargeSummary\n    PatientID <<FK>>\n}\n\nentity SURGERY {\n    SurgeryID <<key>>\n    SurgeryDate\n    SurgeryDetails\n    DoctorID <<FK>>\n    PatientID <<FK>>\n}\n\nentity TASK {\n    TaskID <<key>>\n    Type\n}\n\nrelationship HAS { \n}\nrelationship IS_ADMITTED {\n}\nrelationship ASSIGNED_TO { \n}\nrelationship SCHEDULED_FOR {\n}\nrelationship TREATED_WITH { \n}\nrelationship PAYS {\n}\nrelationship PERFORMS {\n}\nrelationship ASSIST {\n}\nrelationship COVERS {\n}\nrelationship BOOKS {\n}\nrelationship PRESCRIBES {\n}\n\nPATIENT =>= d {INPATIENT, OUTPATIENT}\n\nPATIENT -1- BOOKS\nBOOKS -N- APPOINTMENT\n\nPATIENT -1- TREATED_WITH\nTREATED_WITH -N- TREATMENT\n\nPATIENT -1- PAYS\nPAYS -N- INVOICE\n\nPATIENT -1- HAS\nHAS -N- MEDICAL_RECORD\n\nINPATIENT -1- IS_ADMITTED\nIS_ADMITTED -1- ADMISSION\n\nDOCTOR -1- SCHEDULED_FOR\nSCHEDULED_FOR -N- APPOINTMENT\n\nDOCTOR -1- PRESCRIBES\nPRESCRIBES -N- TREATMENT\n\nTREATMENT -1- COVERS\nCOVERS -1- INVOICE\n\nDOCTOR -1- PERFORMS\nPERFORMS -N- SURGERY\n\nSTAFF -1- ASSIGNED_TO\nASSIGNED_TO -N- TASK\n\nSTAFF -N- ASSIST\nASSIST -1- DOCTOR\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage the operations of a shopping mall, covering tenants (shops), employees, visitors, and services provided within the mall with the following requirements: Shop/Tenant Management must track shops with details such as shop ID, shop name, type of business (e.g., retail, food), floor number, rental amount, and lease period. Each shop must have an associated owner or manager, with details such as owner name, contact information, and contract details. The system must track rental payments made by shops and generate invoices for shop owners. Employee Management must track mall employees, including security personnel, maintenance staff, and management staff. Employees must have attributes such as employee ID, name, position, shift schedule, assigned duties, and the zone of the mall they are assigned to (e.g., parking, food court). Attendance and performance must be monitored for employees. Visitor Management must track visitors, recording daily visitor counts, entry and exit times, and analyzing visitor trends during special events or promotions. Parking Management must manage parking facilities, tracking parking slots by slot ID, floor, availability, and type (e.g., standard, VIP). Visitors must be issued parking tickets, with details such as parking fees and duration of stay. Event and Promotion Management must track events hosted in the mall with event ID, event name, date, location, and organizer details. Promotions run by shops must be tracked with promotion details, duration, and participating stores. Maintenance and Facility Management must manage maintenance requests from shops or employees, recording request ID, description, date reported, status (open, in progress, resolved), and staff assigned. Facilities such as elevators and air conditioning must be tracked for regular servicing. Financial Management must track the mall's financial operations, including rental income, maintenance costs, and utility bills. The system must generate financial reports on earnings, operational expenses, and rental payments, and provide insights into the mall’s financial health.",        
        "output": "@startchen\n\nentity SHOP {\n    ShopID <<key>>\n    ShopName\n    BusinessType\n    FloorNumber\n    RentalAmount\n    LeasePeriod\n    OwnerID <<FK>>\n}\n\nentity SHOP_OWNER {\n    OwnerID <<key>>\n    Name\n    ContactInformation\n    ContractDetails\n}\n\nentity INVOICE {\n    InvoiceID <<key>>\n    Date\n    Amount\n    Status\n    ShopID <<FK>>\n}\n\nentity EMPLOYEE {\n    EmployeeID <<key>>\n    Name\n    Position\n    ShiftSchedule\n    AssignedDuties\n    ZoneID <<FK>>\n    Attendance\n    Performance\n}\n\nentity VISITOR {\n    VisitorID <<key>>\n    EntryTime\n    ExitTime\n}\n\nentity PARKING_SLOT {\n    SlotID <<key>>\n    Floor\n    Availability\n    Type\n}\n\nentity PARKING_TICKET {\n    TicketID <<key>>\n    IssueTime\n    ParkingFee\n    SlotID <<FK>>\n    VisitorID <<FK>>\n}\n\nentity EVENT {\n    EventID <<key>>\n    EventName\n    Date\n    Location\n    OrganizerDetails\n}\n\nentity PROMOTION {\n    PromotionID <<key>>\n    Details\n    Duration\n    ParticipatingStores\n}\n\nentity MAINTENANCE_REQUEST {\n    RequestID <<key>>\n    Description\n    DateReported\n    Status\n    AssignedStaffID <<FK>>\n}\n\nentity FACILITY {\n    FacilityID <<key>>\n    Name\n    ServiceDate\n    Status\n}\n\nentity FINANCIAL_RECORD {\n    RecordID <<key>>\n    RentalIncome\n    MaintenanceCost\n    UtilityBills\n}\n\nentity ZONE {\n    ZoneID <<key>>\n    Name\n    Location\n}\n\nrelationship OWNS {\n}\nrelationship MANAGES {\n}\nrelationship VISITS {\n}\nrelationship INCLUDES {\n}\nrelationship IS_ASSIGNED {\n}\nrelationship HOSTS {\n}\nrelationship RUNS {\n}\nrelationship REQUESTS {\n}\nrelationship MAINTAINS {\n}\nrelationship TRACKS {\n}\nrelationship INVOICES {\n}\nrelationship PAYS {\n}\nrelationship IS_ISSUED {\n}\n\nSHOP_OWNER -1- OWNS\nOWNS -1- SHOP\n\nSHOP_OWNER -1- PAYS\nPAYS -N- INVOICE\n\nFINANCIAL_RECORD -1- TRACKS\nTRACKS -N- INVOICE\n\nSHOP -1- RUNS\nRUNS -N- PROMOTION\n\nEMPLOYEE -N- MANAGES\nMANAGES -1- ZONE\n\nVISITOR -1- VISITS\nVISITS -N- SHOP\n\nVISITOR -1- IS_ISSUED\nIS_ISSUED -1- PARKING_TICKET\n\nPARKING_SLOT -1- IS_ASSIGNED\nIS_ASSIGNED -1- PARKING_TICKET\n\nEVENT -N- HOSTS\nHOSTS -1- SHOP\n\nSHOP -1- REQUESTS\nREQUESTS -N- MAINTENANCE_REQUEST\n\nMAINTENANCE_REQUEST -1- INCLUDES\nINCLUDES -(1,N)- FACILITY\n\nFACILITY -1- MAINTAINS\nMAINTAINS -N- EMPLOYEE\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage firefighters, equipment, emergency responses, and fire stations with the following requirements: Firefighter Management must include tracking firefighter details such as ID, rank, certifications, and shift schedules. Firefighters must be assigned to response teams for emergencies, including fires, accidents, and natural disasters. Incident Management must log emergency incidents with details such as location, type of emergency, response time, and the response teams assigned. Equipment Management must track fire trucks, protective gear, and other firefighting tools, including their condition, availability, and maintenance schedules, ensuring timely upkeep. Fire Station Management must oversee fire stations, recording details such as station location, personnel assignments, and equipment inventory. Training and Certification Management must track firefighter training programs and certifications to ensure skill readiness. Reporting must include generating insights on emergency response times, equipment usage, and firefighter performance for post-incident analysis and operational improvements. Financial Management must track budget allocation for equipment and training expenses to ensure efficient resource usage.",        
        "output": "@startchen\n\nentity FIREFIGHTER {\n    FirefighterID <<key>>\n    Rank\n    Certifications\n    ShiftSchedule\n}\n\nentity RESPONSE_TEAM {\n    TeamID <<key>>\n    Type\n    AssignedFirefighters\n}\n\nentity INCIDENT {\n    IncidentID <<key>>\n    Location\n    EmergencyType\n    ResponseTime\n}\n\nentity EQUIPMENT {\n    EquipmentID <<key>>\n    Type\n    Condition\n    Availability\n    MaintenanceDate\n    AssignedStationID <<FK>>\n}\n\nentity FIRE_STATION {\n    StationID <<key>>\n    Location\n    PersonnelCount\n    EquipmentInventory\n}\n\nentity TRAINING_PROGRAM {\n    ProgramID <<key>>\n    Name\n    Description\n    Duration\n}\n\nentity FINANCIAL_RECORD {\n    RecordID <<key>>\n    BudgetAllocation\n    EquipmentExpense\n    TrainingExpense\n}\n\nrelationship ASSIGNED_TO {\n}\nrelationship RESPONDS_TO {\n}\nrelationship USES {\n}\nrelationship USED_IN {\n}\nrelationship MANAGES {\n}\nrelationship UNDERGOES {\n}\nrelationship TRACKS {\n}\nrelationship INCLUDES {\n}\nrelationship HAS {\n}\n\nFIREFIGHTER -N- ASSIGNED_TO\nASSIGNED_TO -1- RESPONSE_TEAM\n\nRESPONSE_TEAM -1- RESPONDS_TO\nRESPONDS_TO -N- INCIDENT\n\nFIREFIGHTER -N- USES\nUSES -N- EQUIPMENT\n\nEQUIPMENT -N- MANAGES\nMANAGES -1- FIRE_STATION\n\nEQUIPMENT -N- USED_IN\nUSED_IN -1- INCIDENT\n\nFIREFIGHTER -N- UNDERGOES\nUNDERGOES -1- TRAINING_PROGRAM\n\nFINANCIAL_RECORD -1- INCLUDES\nINCLUDES -N- EQUIPMENT\n\nFINANCIAL_RECORD -1- INCLUDES\nINCLUDES -N- TRAINING_PROGRAM\n\nFIRE_STATION -1- TRACKS\nTRACKS -N- FINANCIAL_RECORD\n\nFIRE_STATION -1- HAS\nHAS -N- FIREFIGHTER\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage a mobile application that allows users to create, organize, and manage personal notes with the following requirements: User Management must include tracking user accounts with a unique ID, registration details, and login credentials. Each user must be able to create multiple notes. Note Management must include attributes for notes such as note ID, title, content, optional tags for categorization, creation date, and last modified date. Notes must be organized into folders for better structure. The system must support features like searching notes, sorting notes by date or title, and pinning important notes for quick access. Reminder Management must allow users to set reminders for specific notes, with the app sending notifications when reminders are due. Sync and Backup Management must ensure syncing across devices so users can access their notes on multiple platforms. Users must also be able to back up their data to the cloud to prevent loss of notes. Activity Tracking must log user activities, such as note creation, edits, and folder organization. The system must provide a recycle bin for deleted notes, allowing users to restore notes within a specific time frame.",        
        "output": "@startchen\n\nentity USER {\n    UserID <<key>>\n    Username\n    Password\n    Email\n}\n\nentity NOTE {\n    NoteID <<key>>\n    Title\n    Content\n    Tags\n    CreatedDate\n    LastModifiedDate\n}\n\nentity FOLDER {\n    FolderID <<key>>\n    Name\n    Description\n}\n\nentity REMINDER {\n    ReminderID <<key>>\n    ReminderDateTime\n    NotificationStatus\n}\n\nentity DEVICE {\n    DeviceID <<key>>\n    DeviceType\n    LastSyncDate\n}\n\nentity CLOUD_BACKUP {\n    BackupID <<key>>\n    BackupDate\n    Status\n}\n\nentity ACTIVITY_LOG {\n    LogID <<key>>\n    ActivityType\n    ActivityDate\n}\n\nrelationship CREATES {\n}\n\nrelationship CONTAINS {\n}\n\nrelationship SETS {\n}\n\nrelationship HAS {\n}\n\nrelationship BACKS_UP {\n}\n\nrelationship LOGGED_BY {\n}\n\nrelationship STORES {\n}\n\nrelationship ORGANIZES {\n}\n\nrelationship STORED_IN {\n}\n\nUSER -1- CREATES\nCREATES -N- NOTE\n\nUSER -1- ORGANIZES\nORGANIZES -N- FOLDER\n\nFOLDER -1- CONTAINS\nCONTAINS -N- NOTE\n\nUSER -1- SETS\nSETS -N- REMINDER\n\nNOTE -1- STORED_IN\nSTORED_IN -(1,N)- DEVICE\n\nUSER -1- BACKS_UP\nBACKS_UP -N- NOTE\n\nCLOUD_BACKUP -1- STORES\nSTORES -N- NOTE\n\nACTIVITY_LOG -N- LOGGED_BY\nLOGGED_BY -1- USER\n\nNOTE -1- HAS\nHAS -1- REMINDER\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage the production and operations of a cloth manufacturing factory with the following requirements: Raw Material Management must include tracking raw materials such as cotton, polyester, and dyes, with details like material ID, supplier information, purchase orders, and inventory levels. Production Process Management must track production batches, including batch ID, fabric type, quantity produced, production start and end dates, and machinery used. Machinery Management must monitor machinery usage, maintenance schedules, and operator assignments to ensure efficient workflow. Quality Control Management must record inspections, defects, and quality metrics for each production batch to maintain production standards. Finished Goods Inventory Management must track finished products, including stock levels, sales orders, and shipping logistics. Reporting must include generating insights on production efficiency, material usage, quality control metrics, and inventory levels to support performance analysis and informed decision-making.",        
        "output": "@startchen\n\nentity RAW_MATERIAL {\n    MaterialID <<key>>\n    MaterialType\n    SupplierID <<FK>>\n    PurchaseOrderID <<FK>>\n    InventoryLevel\n}\n\nentity SUPPLIER {\n    SupplierID <<key>>\n    SupplierName\n    ContactInfo\n}\n\nentity PRODUCTION_BATCH {\n    BatchID <<key>>\n    FabricType\n    QuantityProduced\n    ProductionDate\n}\n\nentity MACHINE {\n    MachineID <<key>>\n    MachineType\n    MaintenanceSchedule\n    OperatorID <<FK>>\n}\n\nentity OPERATOR {\n    OperatorID <<key>>\n    OperatorName\n    Shift\n}\n\nentity QUALITY_CONTROL {\n    InspectionID <<key>>\n    BatchID <<FK>>\n    Defects\n    QualityMetrics\n}\n\nentity FINISHED_GOOD {\n    GoodID <<key>>\n    ProductType\n    StockLevel\n    SalesOrderID <<FK>>\n}\n\nentity SALES_ORDER {\n    SalesOrderID <<key>>\n    OrderDate\n    Quantity\n}\n\nentity SHIPPING_LOGISTICS {\n    ShippingID <<key>>\n    GoodID <<FK>>\n    ShippingDate\n    Status\n}\n\nrelationship PRODUCES {\n}\nrelationship TRACKS {\n}\nrelationship ASSIGNED_TO {\n}\nrelationship INSPECTS {\n}\nrelationship CONTAINS {\n}\nrelationship RECORDS {\n}\nrelationship PROVIDES {\n}\nrelationship USES {\n}\n\nSUPPLIER -1- PROVIDES\nPROVIDES -N- RAW_MATERIAL\n\nPRODUCTION_BATCH -1- TRACKS\nTRACKS -N- RAW_MATERIAL\n\nMACHINE -1- USES\nUSES -N- PRODUCTION_BATCH\n\nMACHINE -1- PRODUCES\nPRODUCES -N- FINISHED_GOOD\n\nMACHINE -1- ASSIGNED_TO\nASSIGNED_TO -N- OPERATOR\n\nOPERATOR -1- INSPECTS\nINSPECTS -N- QUALITY_CONTROL\n\nFINISHED_GOOD -N- CONTAINS\nCONTAINS -1- SALES_ORDER\n\nFINISHED_GOOD -1- RECORDS\nRECORDS -1- SHIPPING_LOGISTICS\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage the operations of a disaster management company with the following requirements: Team Management must track emergency response teams, including details such as team member ID, name, role, contact information, and certifications (e.g., first aid, search and rescue). Disaster Response Plan Management must include tracking response plans for various emergencies, with attributes such as plan ID, type of disaster, location, specific procedures, assigned personnel, and contact points for local authorities and agencies. Resource Inventory Management must monitor supplies and equipment, tracking each item by inventory ID, quantity, location, and expiration dates for perishable items. Training Management must document training programs for personnel, including training schedules, attendee lists, and evaluation results to ensure adequate preparation. Reporting must generate insights on past disaster responses, resource usage, and team performance to support continuous improvement and effective planning for future emergencies.",        
        "output": "@startchen\n\nentity MEMBER {\n    MemberID <<key>>\n    Name\n    Role\n    ContactInfo\n    Certification\n}\n\nentity EMERGENCY_RESPONSE_TEAM {\n    TeamID <<key>>\n    TeamName\n    MemberID <<FK>>\n}\n\nentity EMERGENCY {\n    EmergencyID <<key>>\n    EmergencyType\n    Location\n    Date\n    Severity\n}\n\nentity DISASTER_RESPONSE_PLAN {\n    PlanID <<key>>\n    DisasterType\n    Location\n    ContactPoints\n}\n\nentity RESOURCE {\n    ResourceID <<key>>\n    ResourceType\n    Quantity\n    Location\n    ExpirationDate\n}\n\nentity RESOURCE_INVENTORY {\n    InventoryID <<key>>\n    ItemType\n    Quantity\n    Location\n    ExpirationDate\n}\n\nentity TRAINING_PROGRAM {\n    TrainingID <<key>>\n    Schedule\n    AttendeeList\n    EvaluationResults\n}\n\nentity REPORT {\n    ReportID <<key>>\n    EmergencyID <<FK>>\n    ResponseDate\n    ResourceUsage\n    TeamPerformance\n}\n\nrelationship ASSIGNED_TO {\n}\nrelationship HAS {\n}\nrelationship TRACKS {\n}\nrelationship TRAINS {\n}\nrelationship CONTAINS {\n}\nrelationship INCLUDES {\n}\nrelationship RESPONDS_TO {\n}\nrelationship ASSOCIATED_WITH {\n}\n\nEMERGENCY_RESPONSE_TEAM -1- CONTAINS\nCONTAINS -N- MEMBER\n\nDISASTER_RESPONSE_PLAN -1- INCLUDES\nINCLUDES -N- RESOURCE_INVENTORY\n\nDISASTER_RESPONSE_PLAN -N- ASSIGNED_TO\nASSIGNED_TO -N- MEMBER\n\nEMERGENCY -N- RESPONDS_TO\nRESPONDS_TO -1- EMERGENCY_RESPONSE_TEAM\n\nEMERGENCY -1- TRACKS\nTRACKS -1- REPORT\n\nTRAINING_PROGRAM -1- TRAINS\nTRAINS -N- MEMBER\n\nRESOURCE_INVENTORY -1- HAS\nHAS -N- RESOURCE\n\nDISASTER_RESPONSE_PLAN -1- ASSOCIATED_WITH\nASSOCIATED_WITH -1- EMERGENCY\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage a Car Rental System with the following requirements: Customer Management must track customer details such as customer ID, name, contact information, and driver's license details. Vehicle Management must include tracking a fleet of vehicles, with details such as car ID, make and model, license plate, status (available, rented, in maintenance), and rental price per day. Customers must be able to browse available cars based on criteria such as car type (SUV, sedan, etc.), availability, and price. Rental Process Management must handle car rentals, including selecting rental periods, calculating total rental costs (based on daily rates and additional fees like insurance or GPS), and generating rental agreements. Rental agreements must outline terms such as pickup and drop-off locations, dates, conditions, fuel policy (full-to-full, pre-purchase), mileage limits, and any required security deposits. Return Process Management must assess car conditions upon return, track mileage, and record any damages. Feedback Management must allow customers to provide feedback and ratings based on their rental experience. Reporting must generate insights on vehicle usage, customer satisfaction, and financial performance, supporting management in optimizing the fleet and improving services.",        
        "output": "@startchen\n\nentity CUSTOMER {\n  CustomerID <<key>>\n  Name\n  ContactInfo\n  DriversLicense\n}\n\nentity CAR {\n  CarID <<key>>\n  Make\n  Model\n  LicensePlate\n  Status\n  DailyRentalPrice\n}\n\nentity RENTAL_DETAILS {\n  RentalID <<key>>\n  RentalStartDate\n  RentalEndDate\n  TotalCost\n  PickupLocation\n  DropoffLocation\n  FuelPolicy\n  MileageLimit\n  SecurityDeposit\n  CustomerID <<FK>>\n  CarID <<FK>>\n}\n\nentity RENTAL_AGREEMENT {\n  AgreementID <<key>>\n  TermsAndConditions\n  RentalID <<FK>>\n}\n\nentity RETURN_DETAILS {\n  ReturnID <<key>>\n  ReturnDate\n  CarCondition\n  Mileage\n  Damages\n  RentalID <<FK>>\n}\n\nentity FEEDBACK {\n  FeedbackID <<key>>\n  Rating\n  Comments\n  CustomerID <<FK>>\n}\n\nrelationship RENTS {\n}\nrelationship INCLUDES { \n}\nrelationship RETURNED_BY { \n}\nrelationship PROVIDES_FEEDBACK { \n}\nrelationship ASSOCIATED_WITH {\n}\n\nCUSTOMER -N- RENTS\nRENTS -1- CAR\n\nRENTAL_DETAILS -1- INCLUDES\nINCLUDES -1- RENTAL_AGREEMENT\n\nRENTAL_DETAILS -1- INCLUDES\nINCLUDES -1- RETURN_DETAILS\n\nRETURN_DETAILS -1- RETURNED_BY\nRETURNED_BY -1- CUSTOMER\n\nCUSTOMER -N- PROVIDES_FEEDBACK\nPROVIDES_FEEDBACK -1- FEEDBACK\n\nCAR -1- ASSOCIATED_WITH\nASSOCIATED_WITH -N- RENTAL_DETAILS\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage a Package Tracking System with the following requirements: Package Management must include assigning a unique tracking ID to each package and linking it to sender and recipient details, such as names, addresses, and contact information. Transit Tracking must monitor packages through various stages, including pickup, in transit, customs clearance (if applicable), and delivery, with each stage logged by timestamp, location, and status updates (e.g., out for delivery, delayed, delivered). Real-Time Updates must allow customers to view the package’s journey via a mobile app or web portal. Logistics personnel must update the package’s status and location at checkpoints, and the system must send automated notifications for significant updates, such as successful delivery or delays. Warehouse Management must track packages stored at distribution centers, including expected delivery timelines. Delivery Confirmation must capture the recipient’s signature (digitally or physically) upon delivery to confirm receipt. Feedback Management must allow customers to provide feedback on their delivery experience. Reporting must generate insights on delivery performance, customer satisfaction, and package transit times to help logistics companies improve operations and service quality.",        
        "output": "@startchen\nentity SENDER {\n  SenderID <<key>>\n  Name\n  Address\n  ContactInfo\n}\n\nentity RECIPIENT {\n  RecipientID <<key>>\n  Name\n  Address\n  ContactInfo\n}\n\nentity PACKAGE {\n  TrackingID <<key>>\n  Weight\n  Dimensions\n  Status\n  DispatchDate\n  ExpectedDeliveryDate\n  SenderID <<FK>>\n  RecipientID <<FK>>\n}\n\nentity TRANSIT_LOG {\n  LogID <<key>>\n  Timestamp\n  Location\n  StatusUpdate\n  TrackingID <<FK>>\n}\n\nentity WAREHOUSE {\n  WarehouseID <<key>>\n  Location\n  Capacity\n}\n\nentity DELIVERY {\n  DeliveryID <<key>>\n  DeliveryDate\n  RecipientSignature\n  TrackingID <<FK>>\n}\n\nentity FEEDBACK {\n  FeedbackID <<key>>\n  Rating\n  Comments\n  RecipientID <<FK>>\n}\n\nrelationship SENDS {\n}\nrelationship RECEIVES {\n}\nrelationship TRACKED_BY {\n}\nrelationship STORED_AT {\n}\nrelationship CONFIRMED_BY {\n}\nrelationship PROVIDES_FEEDBACK {\n}\n\nSENDER -1- SENDS\nSENDS -N- PACKAGE\n\nRECIPIENT -1- RECEIVES\nRECEIVES -N- PACKAGE\n\nPACKAGE -N- TRACKED_BY\nTRACKED_BY -1- TRANSIT_LOG\n\nPACKAGE -N- STORED_AT\nSTORED_AT -1- WAREHOUSE\n\nPACKAGE -1- CONFIRMED_BY\nCONFIRMED_BY -1- DELIVERY\n\nRECIPIENT -1- PROVIDES_FEEDBACK\nPROVIDES_FEEDBACK -N- FEEDBACK\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage a Snack and Grocery Shop Management System with the following requirements: Product and Inventory Management must register products with attributes such as product ID, name, brand, category (snacks, groceries, beverages), price, stock quantity, and expiration date for perishables. The system must track stock levels and alert managers about low inventory or expiring items. Automatic restocking must be configurable with reorder levels, generating purchase orders for suppliers, and updating inventory upon delivery. Sales and Order Management must process in-store purchases through a point-of-sale (POS) system, recording details such as products sold, payment method, and receipt. For online orders, the system must allow customers to choose delivery or in-store pickup, track order status, and store order IDs, customer details, and transaction data. Loyalty rewards for repeat customers must also be supported. Supplier and Customer Management must store supplier information, including supplier ID, contact details, and products supplied. Purchase orders must track ordered items, quantities, delivery status, and costs. Customer profiles must include customer ID, contact details, and order history to enable personalized promotions and loyalty program management. Customers must earn points redeemable for discounts based on purchase habits. Reporting, Analytics, and Promotions must generate detailed sales reports covering performance trends, top-selling items, and low performers. Analytics on seasonal demand and profit margins must guide inventory and pricing strategies. The system must support creating and tracking time-based discounts and promotions to enhance customer engagement and drive sales. Financial and Payment Management must support various payment methods, ensuring smooth transactions and tracking revenue, expenses, and profits. Refunds and exchanges must be managed seamlessly, updating inventory and customer records. Financial reports must help store owners make informed decisions for efficient financial management.",        
        "output": "@startchen\n\nentity PRODUCT {\n  ProductID <<key>>\n  Name\n  Brand\n  Category\n  Price\n  StockQuantity\n  ExpirationDate\n}\n\nentity INVENTORY {\n  InventoryID <<key>>\n  ProductID <<FK>>\n  ReorderLevel\n  StockLevel\n}\n\nentity SUPPLIER {\n  SupplierID <<key>>\n  Name\n  ContactInfo\n  ProductsSupplied\n}\n\nentity CUSTOMER {\n  CustomerID <<key>>\n  Name\n  ContactInfo\n  LoyaltyPoints\n}\n\nentity ORDER {\n  OrderID <<key>>\n  OrderDate\n  TotalAmount\n  PaymentMethod\n  CustomerID <<FK>>\n}\n\nentity ORDER_DETAILS {\n  OrderDetailsID <<key>>\n  OrderID <<FK>>\n  ProductID <<FK>>\n  Quantity\n  Price\n}\n\nentity PURCHASE_ORDER {\n  PurchaseOrderID <<key>>\n  SupplierID <<FK>>\n  OrderDate\n  Status\n  TotalCost\n}\n\nentity PROMOTION {\n  PromotionID <<key>>\n  Name\n  StartDate\n  EndDate\n  DiscountPercentage\n}\n\nrelationship SUPPLIES {\n}\nrelationship PURCHASED_BY {\n}\nrelationship INCLUDES {\n}\nrelationship BELONGS_TO {\n}\nrelationship MANAGES {\n}\nrelationship APPLIES_TO {\n}\nrelationship CONTAINS {\n}\n\nSUPPLIER -1- SUPPLIES\nSUPPLIES -N- PRODUCT\n\nCUSTOMER -1- PURCHASED_BY\nPURCHASED_BY -N- ORDER\n\nORDER -1- INCLUDES\nINCLUDES -N- ORDER_DETAILS\n\nORDER_DETAILS -N- CONTAINS\nCONTAINS -1- PRODUCT\n\nPRODUCT -N- BELONGS_TO\nBELONGS_TO -1- INVENTORY\n\nPRODUCT -N- APPLIES_TO\nAPPLIES_TO -1- PROMOTION\n\nSUPPLIER -N- MANAGES\nMANAGES -1- PURCHASE_ORDER\n@endchen"
    }
        
]
