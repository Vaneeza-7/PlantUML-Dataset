[
    {
        "input": "Create an entity relationship diagram for this system. Healthcare service has huge demand these days as it really helps in managing a hospital or a medical office. The scope of healthcare service systems is increasing each day and it is true for the entire world. Some of these solutions include improved awareness about healthcare services and health policies. The objective of this system is to provide medical assistance to people instantly with the help of technology. This system eradicates the cultural sensitivity that prevails in many hospitals and improves the quality of medical assistance. The captivating features of this system are online doctors, medicines at doorstep, and bulletin of awareness. The users can also navigate and choose among various insurance schemes that are displayed.\n\nThe primary objectives of Webmed healthcare system are to enable all citizens to receive healthcare services whenever needed, and to deliver health services that are cost-effective and meet pre-established standards of quality. The main functions of this system deal with finance, health A-Z, resources, drugs and supplements, news and experts, payment and feedback. Register function allows the patients or the caregivers to register on the website. Login function allows the patients to access the website. Financing focuses on the purchase of insurance. Health A-Z displays all the diseases along with their symptoms. Resources function consists of the sub-functions including symptoms checker, health calculator, find a doctor based on the geographical location of the patient, insurance guide, and ambulance providence. Drugs and supplements include online medicine delivery, where people could shop for medicines online. News and experts function is to provide health awareness and threats that are prevailing. This function also gives information regarding counselling programs and blood donation camps. The payment function is to reimburse providers for services delivered. The feedback function collects user reviews for the website.",
        "output": "@startchen\n\nentity USER {\n    user_id <<key>>\n    name\n    email\n    password\n    role\n}\n\nentity PATIENT {\n    address\n    phone\n    date_of_birth\n}\n\nentity DOCTOR {\n    specialization\n    phone\n}\n\nUSER ->- d { PATIENT, DOCTOR }\n\nentity INSURANCE {\n    insurance_id <<key>>\n    name\n    type\n    details\n}\n\nentity MEDICINE {\n    medicine_id <<key>>\n    name\n    description\n    price\n    availability\n}\n\nentity APPOINTMENT {\n    appointment_id <<key>>\n    date\n    time\n    location\n    status\n    patient_id <<FK>>\n    doctor_id <<FK>>\n}\n\nentity FEEDBACK {\n    feedback_id <<key>>\n    user_id <<FK>>\n    comments\n    rating\n}\n\nentity PAYMENT {\n    payment_id <<key>>\n    amount\n    date\n    method\n    status\n    user_id <<FK>>\n}\n\nentity RESOURCE {\n    resource_id <<key>>\n    type\n    description\n}\n\nentity COUNSELING_PROGRAM {\n    program_id <<key>>\n    name\n    details\n    date\n    location\n}\n\nrelationship books {\n}\n\nrelationship prescribes {\n}\n\nrelationship enrolls {\n}\n\nrelationship checks {\n}\n\nrelationship gives {\n}\n\nrelationship makes {\n}\n\nrelationship access {\n}\n\nrelationship accesses_program {\n}\n\nrelationship buys {\n}\n\n' Relationships\n\nPATIENT -1- gives\ngives -N- FEEDBACK\n\nPATIENT -1- makes\nmakes -N- PAYMENT\n\nPATIENT -1- books\nbooks -N- APPOINTMENT\n\nDOCTOR -1- prescribes\nprescribes -N- MEDICINE\n\nPATIENT -1- enrolls\nenrolls -N- INSURANCE\n\nUSER -1- access\naccess -N- RESOURCE\n\nPATIENT -1- access\naccess -N- COUNSELING_PROGRAM\n\nPATIENT -1- buys\nbuys -N- MEDICINE\n\n@endchen" 
    },
    {
        "input": "Create an ER diagram for this system. The Online Examination System is a web-based application that allows students to take exams online. The system consists of the following functions: User Registration, Exam Creation, Exam Taking, Result Generation, and Exam Analysis. User Registration – This function allows students to create an account on the online examination system. Exam Creation – This function allows teachers to create exams and set questions. Exam Taking – This function allows students to take exams online. Result Generation – This function generates results for the exams taken by students. Exam Analysis – This function provides analysis of the exams taken by students. The main goal of the system is to provide a platform for students to take exams online.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  username\n  password\n}\n\nentity Student {\n}\n\nentity Teacher {\n}\n\nUser =>= d { Student, Teacher }\n\nentity Exam {\n  exam_id <<key>>\n  title\n  created_date\n}\n\nentity Question {\n  question_id <<key>>\n  content\n  answer_options\n  correct_answer\n}\n\nentity ExamResult {\n  result_id <<key>>\n  score\n  completion_date\n}\n\nrelationship REGISTERS {\n  registration_date\n}\n\nrelationship CREATES {\n}\n\nrelationship CONTAINS {\n}\n\nrelationship TAKES {\n  start_time\n  end_time\n}\n\nrelationship GENERATES {\n}\n\nrelationship RESULTS_FOR {\n}\n\nREGISTERS -1- Student\nREGISTERS -N- Exam\n\nCREATES -1- Teacher\nCREATES -N- Exam\n\nCONTAINS -1- Exam\nCONTAINS -N- Question\n\nTAKES -1- Student\nTAKES -N- Exam\n\nGENERATES -1- Exam\nGENERATES -N- ExamResult\n\nRESULTS_FOR -1- Student\nRESULTS_FOR -1- Exam\nRESULTS_FOR -1- ExamResult\n\n@endchen"
    },
    {
        "input": "Create an ER diagram for this system. The Online Voting System is a web-based application that allows citizens to vote online. The system consists of the following functions: Voter Registration, Candidate Registration, Voting, Result Generation, and Voter Analysis. Voter Registration – This function allows citizens to register as voters in the online voting system. Candidate Registration – This function allows candidates to register for elections. Voting – This function allows voters to cast their votes online. Result Generation – This function generates results for the elections. Voter Analysis – This function provides analysis of the votes cast by voters. The main goal of the system is to provide a platform for citizens to vote online.",
        "output": "@startchen\n\nentity Voter {\n  voter_id <<key>>\n  name\n  address\n  date_of_birth\n  registration_date\n}\n\nentity Candidate {\n  candidate_id <<key>>\n  name\n  party\n  registration_date\n}\n\nentity Election {\n  election_id <<key>>\n  title\n  election_date\n}\n\nentity Vote {\n  vote_id <<key>>\n  timestamp\n}\n\nentity Result {\n  result_id <<key>>\n  total_votes\n  winner\n}\n\nrelationship REGISTERS_AS_VOTER {\n  registration_date\n}\n\nrelationship REGISTERS_AS_CANDIDATE {\n  registration_date\n}\n\nrelationship CASTS_VOTE {\n  vote_time\n}\n\nrelationship GENERATES {\n}\n\nREGISTERS_AS_VOTER -1- Voter\nREGISTERS_AS_VOTER -1- Election\n\nREGISTERS_AS_CANDIDATE -1- Candidate\nREGISTERS_AS_CANDIDATE -1- Election\n\nCASTS_VOTE -1- Voter\nCASTS_VOTE -1- Candidate\nCASTS_VOTE -1- Vote\n\nGENERATES -1- Election\nGENERATES -N- Result\n\n@endchen"
    },
    {
        "input": "Give me an ER diagram for this E-Ticketing System for Buses. In this case study, a software package to automate the manual procedures of reserving a bus ticket is made through Software Maintenance and Development Center (SMDC) Travels. Specifically, the objectives of this case study consist of providing a web-based bus ticket reservation function where a customer can buy a bus ticket through the online system without a need to queue up at the counter to purchase a bus ticket, enabling customers to check the availability and types of buses online. Customer can check the time departure for every Indian Tourist Centre (ITC) bus through the system, easing bus ticket payment by obtaining a bank pin after payments is made to the various designated banks, the ability of customers to cancel their reservation, admin user privileges in updating and cancelling payment, route and vehicle records.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  phone\n}\n\nentity Bus {\n  bus_id <<key>>\n  bus_type\n  capacity\n  operator\n}\n\nentity Route {\n  route_id <<key>>\n  origin\n  destination\n  distance\n}\n\nentity Schedule {\n  schedule_id <<key>>\n  departure_time\n  arrival_time\n  date\n}\n\nentity Reservation {\n  reservation_id <<key>>\n  status\n  reservation_date\n}\n\nentity Payment {\n  payment_id <<key>>\n  payment_date\n  amount\n  status\n  bank_pin\n}\n\nentity Admin {\n  admin_id <<key>>\n  username\n  password\n}\n\nrelationship CHECKS_AVAILABILITY {\n}\n\nrelationship RESERVES {\n  reservation_date\n}\n\nrelationship PAYS_FOR {\n  payment_date\n}\n\nrelationship CANCELS_RESERVATION {\n  cancellation_date\n}\n\nrelationship ASSIGNS {\n}\n\nrelationship FOLLOWS_ROUTE {\n}\n\nrelationship USES {\n}\n\nrelationship MANAGES {\n  manage_date\n}\n\nCHECKS_AVAILABILITY -1- Customer\nCHECKS_AVAILABILITY -N- Bus\n\nRESERVES -1- Customer\nRESERVES -1- Reservation\n\nPAYS_FOR -1- Customer\nPAYS_FOR -1- Payment\n\nCANCELS_RESERVATION -1- Customer\nCANCELS_RESERVATION -1- Reservation\n\nASSIGNS -1- Bus\nASSIGNS -N- Route\n\nFOLLOWS_ROUTE -1- Bus\nFOLLOWS_ROUTE -N- Schedule\n\nUSES -1- Reservation\nUSES -1- Bus\n\nMANAGES -1- Admin\nMANAGES -N- Reservation\n\n@endchen"          
    },
    {
        "input": "The Weather Monitoring System allows people to directly check the weather status online. The functionalities are Weather Status, Live Updating, Alert, Graphical Representation, Future Prediction and Weekly Analysis. Weather Status – With this function, temperature, humidity, rainfall, pressure and dew point are measured using sensors. Live Updating – Data are live updated to be viewed by the user. Alert – This functionality provides tips and alerts to the user on certain weather conditions. Graphical Representation – Plotting of graphs based on variations in temperature for easier analysis. Future Prediction – This functionality helps in predicting the weather for the next few days. WeeklyAnalysis – Displaying the average, the highest and lowest temperature of the week. The final goal is to provide detailed weather conditions for the user based on his/her location. Give me an ERD for this system.",
        "output": "@startchen\n\nentity Location {\n  location_id <<key>>\n  city\n  region\n  country\n}\n\nentity SensorData {\n  data_id <<key>>\n  timestamp\n  temperature\n  humidity\n  rainfall\n  pressure\n  dew_point\n}\n\nentity WeatherAlert {\n  alert_id <<key>>\n  alert_type\n  message\n  alert_time\n}\n\nentity Prediction {\n  prediction_id <<key>>\n  prediction_date\n  predicted_temperature\n  predicted_humidity\n  predicted_rainfall\n}\n\nrelationship MEASURES {\n}\n\nrelationship ALERTS {\n}\n\nrelationship PREDICTS {\n}\n\nMEASURES -1- Location\nMEASURES -N- SensorData\n\nALERTS -1- Location\nALERTS -N- WeatherAlert\n\nPREDICTS -1- Location\nPREDICTS -N- Prediction\n\n@endchen"          
    },
    {
        "input": "The Online Shopping System is a web-based application that allows customers to purchase products online. The system consists of the following functions: User Registration, Product Catalog, Shopping Cart, Payment Gateway, Order History, and Customer Support. User Registration – This function allows users to create an account on the website. Product Catalog – This function displays all the products available for purchase. Shopping Cart – This function allows users to add products to their cart. Payment Gateway – This function allows users to make payments for their purchases. Order History – This function displays the user's past orders. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient and user-friendly platform for customers to shop online. Create an ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  username\n  email\n  password\n  registration_date\n}\n\nentity Product {\n  product_id <<key>>\n  name\n  description\n  price\n  stock\n  category\n}\n\nentity ShoppingCart {\n  cart_id <<key>>\n  created_date\n}\n\nentity CartItem {\n  item_id <<key>>\n  quantity\n}\n\nentity Order {\n  order_id <<key>>\n  order_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  payment_date\n  amount\n  payment_method\n  payment_status\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship REGISTERS {\n  registration_date\n}\n\nrelationship ADDS_TO_CART {\n}\n\nrelationship CONTAINS {\n}\n\nrelationship PLACES_ORDER {\n  order_date\n}\n\nrelationship PAYS_FOR {\n  payment_date\n}\n\nrelationship SUPPORTS {\n}\n\nrelationship INCLUDES {\n}\n\nrelationship REPRESENTS {\n}\n\nREGISTERS -1- User\nREGISTERS -1- ShoppingCart\n\nADDS_TO_CART -1- User\nADDS_TO_CART -N- CartItem\n\nCONTAINS -1- ShoppingCart\nCONTAINS -N- CartItem\n\nREPRESENTS -1- CartItem\nREPRESENTS -1- Product\n\nPLACES_ORDER -1- User\nPLACES_ORDER -1- Order\n\nPAYS_FOR -1- Order\nPAYS_FOR -1- Payment\n\nSUPPORTS -1- User\nSUPPORTS -N- CustomerSupport\n\nINCLUDES -1- Order\nINCLUDES -N- CartItem\n\n@endchen"          
    },
    {
        "input": "The Library Management System is a software application that helps in maintaining a library. The system consists of the following functions: User Registration, Book Catalog, Borrowing Books, Returning Books, Renewing Books, and Late Fee Calculation. User Registration – This function allows users to create an account in the library system. Book Catalog – This function displays all the books available in the library. Borrowing Books – This function allows users to borrow books from the library. Returning Books – This function allows users to return books to the library. Renewing Books – This function allows users to renew the borrowed books. Late Fee Calculation – This function calculates the late fee for books returned after the due date. The main goal of the system is to provide an efficient and organized way of managing library operations. Create an ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  phone\n  registration_date\n}\n\nentity Book {\n  isbn <<key>>\n  title\n  author\n  publisher\n  genre\n  publication_year\n}\n\nentity BorrowRequest {\n  request_id <<key>>\n  borrow_date\n  due_date\n  return_date\n  status <<derived>>\n  late_fee\n}\n\nrelationship REGISTERS {\n  registration_date\n}\n\nrelationship BORROWS {\n  borrow_date\n  due_date\n}\n\nrelationship RETURNS {\n  return_date\n}\n\nrelationship RENEWS {\n  renewal_date\n}\n\nREGISTERS -1- User\nREGISTERS -1- BorrowRequest\n\nBORROWS -1- User\nBORROWS -1- Book\nBORROWS -N- BorrowRequest\n\nRETURNS -1- User\nRETURNS -N- BorrowRequest\n\nRENEWS -1- User\nRENEWS -N- BorrowRequest\n\n@endchen"              
    },
    {
        "input": "Citizens in every district face the difficulty with the issuing of government certificates like birth/death certificates, income and caste certificates, old age and widow pensions, etc. This can be done with e-Province. This case study demonstrates how to make the government services available to the citizens in a convenient, efficient, and transparent manner, by enabling it simply by reliable access over the Internet. The main objective is to bring the public services closer to the citizens. To fulfill the vision of providing an easy and convenient service to the citizens through remote access primarily through Common Service Centre (CSCs), the e-Province project is created. This case study aims to develop a State Portal (SP) to provide all the citizens of the respective province to access the services under a single interface mechanism in the form of the Portal. The various modules in the e-Province project are an Admin module that creates, updates, deactivates the users and performs various other tasks. A Login module that allows the users to login with their unique Application number with approved status. A User module that allows the approved users to register for the respective certificates. A User Profile module that creates the pre-requisite information of the user that needs to be stored in the database. The Certificate module contains the required forms that are to be filled with the information of the users. Give me an ER diagram for this system.",
        "output": "@startchen\n\nentity Citizen {\n  citizen_id <<key>>\n  name\n  address\n  date_of_birth\n  contact_number\n  email\n}\n\nentity Admin {\n  admin_id <<key>>\n  username\n  password\n}\n\nentity Application {\n  application_id <<key>>\n  application_date\n  status\n}\n\nentity Certificate {\n  certificate_id <<key>>\n  certificate_type\n  issue_date\n  expiry_date\n}\n\nentity UserProfile {\n  profile_id <<key>>\n  citizen_id <<foreign>>\n  created_date\n  last_updated\n}\n\nentity CommonServiceCentre {\n  csc_id <<key>>\n  location\n  contact_info\n}\n\nrelationship MANAGES {\n}\n\nrelationship SUBMITS {\n  application_date\n}\n\nrelationship ISSUES {\n  issue_date\n}\n\nrelationship ACCESS_VIA_CSC {\n  access_date\n}\n\nrelationship APPROVES {\n  approval_date\n}\n\nrelationship MAINTAINS_PROFILE {\n  created_date\n  last_updated\n}\n\nMANAGES -1- Admin\nMANAGES -N- Citizen\n\nSUBMITS -1- Citizen\nSUBMITS -N- Application\n\nISSUES -1- Application\nISSUES -1- Certificate\n\nACCESS_VIA_CSC -1- CommonServiceCentre\nACCESS_VIA_CSC -N- Application\n\nAPPROVES -1- Admin\nAPPROVES -N- Application\n\nMAINTAINS_PROFILE -1- Citizen\nMAINTAINS_PROFILE -1- UserProfile\n\n@endchen"          
    },
    {
        "input": "The Online Banking System is a web-based application that allows customers to perform banking transactions online. The system consists of the following functions: User Registration, Account Management, Fund Transfer, Bill Payment, Transaction History, and Customer Support. User Registration – This function allows users to create an account on the online banking system. Account Management – This function allows users to view and manage their accounts. Fund Transfer – This function allows users to transfer funds between accounts. Bill Payment – This function allows users to pay bills online. Transaction History – This function displays the user's transaction history. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a secure and convenient platform for customers to perform banking transactions online. Create an er diagram for this system.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  phone\n  registration_date\n}\n\nentity Account {\n  account_id <<key>>\n  account_type\n  balance\n  status\n}\n\nentity Transaction {\n  transaction_id <<key>>\n  transaction_date\n  amount\n  transaction_type\n  description\n}\n\nentity BillPayment {\n  bill_id <<key>>\n  payee_name\n  bill_amount\n  due_date\n  payment_date\n}\n\nentity FundTransfer {\n  transfer_id <<key>>\n  from_account <<foreign>>\n  to_account <<foreign>>\n  transfer_date\n  transfer_amount\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship OWNS {\n}\n\nrelationship MAKES {\n  transaction_date\n}\n\nrelationship PAYS_BILL {\n  payment_date\n}\n\nrelationship TRANSFERS_FUNDS {\n  transfer_date\n}\n\nrelationship SUPPORTS {\n}\n\nOWNS -1- Customer\nOWNS -N- Account\n\nMAKES -1- Account\nMAKES -N- Transaction\n\nPAYS_BILL -1- Account\nPAYS_BILL -N- BillPayment\n\nTRANSFERS_FUNDS -1- Account\nTRANSFERS_FUNDS -N- FundTransfer\n\nSUPPORTS -1- Customer\nSUPPORTS -N- CustomerSupport\n\n@endchen"
    },
    {
        "input": "Give me ERD for this. Maintaining the authentic documents physically in a single location is considered to be a challenging task. Thus, digitizing documents enables centralized storage of all the physical documents, enabling easy retrieval from anywhere at any time. It also prevents the troubles caused by missing any of those physical certificates. This can be achieved through the DigiDocLocker which is a platform for issuance and verification of documents and certificates in a digital format, thereby eliminating the use of physical documents. DigiDocLocker aims at benefiting all the citizens of the country by providing access to authentic documents/certificates such as driving licence, vehicle registration, and academic mark sheets in digital format from the original issuers of these certificates. DigiDocLocker has the following functionalities:\ni. A Registration module allows the users to register and a Login module that allows the authorized users.\nii. An Upload Document module allows the users to upload documents such as driving licence, vehicle registration, academic mark sheet, and other relevant documents in various file formats.\niii. A Profile module displays the complete profile of the user as available in the database.\niv. An Issuer module displays the certificate issuers’ names and the number of documents issued to the user by the issuer. For example, the Income Tax Department, Government of India has provided PAN Verification Records to Indian citizens via DigiLocker.\nv. A Requester module displays the requesters’ names and the number of documents requested from the user by the requesters. For example, citizens applying through Union Public Service Commission (UPSC)'s Online Recruitment Application (ORA) can upload documents through DigiDocLocker as well.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  phone\n  registration_date\n}\n\nentity Document {\n  document_id <<key>>\n  document_type\n  upload_date\n  file_format\n  document_url\n}\n\nentity Profile {\n  profile_id <<key>>\n  user_id <<foreign>>\n  full_name\n  address\n  date_of_birth\n}\n\nentity Issuer {\n  issuer_id <<key>>\n  issuer_name\n  issuer_type\n}\n\nentity Requester {\n  requester_id <<key>>\n  requester_name\n  requester_type\n}\n\nrelationship REGISTERS {\n  registration_date\n}\n\nrelationship UPLOADS {\n  upload_date\n}\n\nrelationship ASSOCIATED_WITH {\n}\n\nrelationship ISSUED_BY {\n  issue_date\n}\n\nrelationship REQUESTED_BY {\n  request_date\n}\n\nREGISTERS -1- User\nREGISTERS -1- Profile\n\nUPLOADS -1- User\nUPLOADS -N- Document\n\nASSOCIATED_WITH -1- Profile\nASSOCIATED_WITH -N- Document\n\nISSUED_BY -1- Issuer\nISSUED_BY -N- Document\n\nREQUESTED_BY -1- Requester\nREQUESTED_BY -N- Document\n\n@endchen"
    },
    {
        "input": "Various new small scale and medium scale sellers face difficulties to reach out to the customers and sell their products along with other competing products in the market. This increases their overall cost, thus reducing their profit or even causing loss. E-Retail is an online marketplace application case study where small and medium scale sellers can list, showcase, advertise, and sell their products directly to the customers without any physical store. E-Retail aims in providing a dynamic platform for all small and medium scale sellers to reach out and sell their products directly to all range of customers at a competing price without the need of any physical store. This enables the sellers to eliminate the cost of rent or maintenance of a physical store and to minimize other related costs. It also aims in promoting direct communication between the seller and customer, hence providing a trusted relationship between them. New sellers can easily authenticate and sign up to the portal and sell their products in the portal. The application offers separate login for sellers and customers, where the sellers and customers can sign in and start using the application. Customers can view all the products available from various sellers and buy those products. It also facilitates online payments for purchasing the products. Customers can rate or give a review for the product and seller. Customers can also report a seller for any violations in delivery or if the product does not meet the specified requirement. Customers can also view the contact information and the rating of the seller before buying the product. Give a ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  phone\n  address\n  registration_date\n}\n\nentity Customer {\n}\n\nentity Seller {\n  seller_id <<key>>\n  rating\n}\n\nUser =>= d { Customer, Seller }\n\nentity Product {\n  product_id <<key>>\n  name\n  description\n  price\n  category\n  stock\n  rating\n  upload_date\n}\n\nentity Order {\n  order_id <<key>>\n  order_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity Review {\n  review_id <<key>>\n  rating\n  comment\n  review_date\n}\n\nentity Report {\n  report_id <<key>>\n  report_date\n  issue_type\n  description\n}\n\nrelationship LISTS_PRODUCT {\n  listing_date\n}\n\nrelationship PLACES_ORDER {\n  order_date\n}\n\nrelationship MAKES_PAYMENT {\n  payment_date\n}\n\nrelationship HAS_SELLERREVIEWS {\n  review_date\n}\n\nrelationship HAS_PRODUCTREVIEWS {\n  review_date\n}\n\nrelationship REPORTS_SELLER {\n  report_date\n}\n\nrelationship GIVES{\n}\n\nLISTS_PRODUCT -1- Seller\nLISTS_PRODUCT -N- Product\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nMAKES_PAYMENT -1- Order\nMAKES_PAYMENT -1- Payment\n\nGIVES -1- Customer\nGIVES -N- Review\n\nHAS_PRODUCTREVIEWS -N- Review\nHAS_PRODUCTREVIEWS -1- Product\n\nHAS_SELLERREVIEWS -N- Review\nHAS_SELLERREVIEWS -1- Seller\n\nREPORTS_SELLER -1- Customer\nREPORTS_SELLER -N- Report\n\n@endchen"          
    },
    {
        "input": "The Online Food Ordering System is a web-based application that allows customers to order food online. The system consists of the following functions: User Registration, Restaurant Selection, Menu Browsing, Order Placement, Payment Gateway, Order Tracking, and Customer Support. User Registration – This function allows users to create an account on the online food ordering system. Restaurant Selection – This function allows users to select a restaurant from which they want to order food. Menu Browsing – This function allows users to browse the menu of the selected restaurant. Order Placement – This function allows users to place an order for food. Payment Gateway – This function allows users to make payments for their orders. Order Tracking – This function allows users to track the status of their orders. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to order food online. Create an ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  phone\n  address\n  registration_date\n}\n\nentity Restaurant {\n  restaurant_id <<key>>\n  name\n  location\n  contact_info\n  rating\n}\n\nentity Menu {\n  menu_id <<key>>\n  restaurant_id <<foreign>>\n  menu_type\n}\n\nentity MenuItem {\n  item_id <<key>>\n  menu_id <<foreign>>\n  name\n  description\n  price\n  availability\n}\n\nentity Order {\n  order_id <<key>>\n  order_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity OrderTracking {\n  tracking_id <<key>>\n  order_id <<foreign>>\n  tracking_status\n  update_time\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship SELECTS {\n}\n\nrelationship BROWSES_MENU {\n}\n\nrelationship CONTAINS_ITEMS {\n}\n\nrelationship ASSOCIATED_WITH {\n}\n\nrelationship INCLUDES_ITEMS {\n}\n\nrelationship PLACES_ORDER {\n  order_date\n}\n\nrelationship MAKES_PAYMENT {\n  payment_date\n}\n\nrelationship TRACKS_ORDER {\n  update_time\n}\n\nrelationship CONTACTS_SUPPORT {\n}\n\nSELECTS -1- User\nSELECTS -N- Restaurant\n\nBROWSES_MENU -1- User\nBROWSES_MENU -1- Menu\n\nCONTAINS_ITEMS -1- Menu\nCONTAINS_ITEMS -N- MenuItem\n\nASSOCIATED_WITH -1- Menu\nASSOCIATED_WITH -1- Restaurant\n\nINCLUDES_ITEMS -1- Order\nINCLUDES_ITEMS -N- MenuItem\n\nPLACES_ORDER -1- User\nPLACES_ORDER -N- Order\n\nMAKES_PAYMENT -1- Order\nMAKES_PAYMENT -1- Payment\n\nTRACKS_ORDER -1- User\nTRACKS_ORDER -N- OrderTracking\n\nCONTACTS_SUPPORT -1- User\nCONTACTS_SUPPORT -N- CustomerSupport\n\n@endchen"          
    },
    {
        "input": "The Online Movie Ticket Booking System is a web-based application that allows customers to book movie tickets online. The system consists of the following functions: User Registration, Movie Selection, Seat Selection, Payment Gateway, Ticket Confirmation, Ticket Cancellation, and Customer Support. User Registration – This function allows users to create an account on the online movie ticket booking system. Movie Selection – This function allows users to select a movie for which they want to book tickets. Seat Selection – This function allows users to select seats for the selected movie. Payment Gateway – This function allows users to make payments for their ticket bookings. Ticket Confirmation – This function confirms the booking of tickets. Ticket Cancellation – This function allows users to cancel their ticket bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to book movie tickets online. Create an ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  phone\n  registration_date\n}\n\nentity Movie {\n  movie_id <<key>>\n  title\n  genre\n  duration\n  rating\n  release_date\n}\n\nentity Screening {\n  screening_id <<key>>\n  movie_id <<foreign>>\n  theater\n  screening_date\n  screening_time\n}\n\nentity Seat {\n  seat_id <<key>>\n  screening_id <<foreign>>\n  seat_number\n  seat_type\n  status\n}\n\nentity Booking {\n  booking_id <<key>>\n  user_id <<foreign>>\n  screening_id <<foreign>>\n  booking_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  booking_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  user_id <<foreign>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship SELECTS_MOVIE {\n}\n\nrelationship SELECTS_SEAT {\n}\n\nrelationship MAKES_BOOKING {\n}\n\nrelationship MAKES_PAYMENT {\n}\n\nrelationship ASSOCIATED_WITH {\n}\n\nrelationship CANCELS_BOOKING {\n  cancellation_date\n}\n\nrelationship CONTACTS_SUPPORT {\n}\n\nrelationship SHOWS {\n}\n\nrelationship HAS_SEATS {\n}\n\nSELECTS_MOVIE -1- User\nSELECTS_MOVIE -N- Movie\n\nSELECTS_SEAT -1- Booking\nSELECTS_SEAT -N- Seat\n\nMAKES_BOOKING -1- User\nMAKES_BOOKING -1- Booking\n\nMAKES_PAYMENT -1- Booking\nMAKES_PAYMENT -1- Payment\n\nASSOCIATED_WITH -1- Booking\nASSOCIATED_WITH -1- Screening\n\nCANCELS_BOOKING -1- User\nCANCELS_BOOKING -1- Booking\n\nCONTACTS_SUPPORT -1- User\nCONTACTS_SUPPORT -N- CustomerSupport\n\nSHOWS -1- Screening\nSHOWS -1- Movie\n\nHAS_SEATS -1- Screening\nHAS_SEATS -N- Seat\n\n@endchen"          
    },
    {
        "input": "The Online Hotel Booking System is a web-based application that allows customers to book hotel rooms online. The system consists of the following functions: User Registration, Hotel Selection, Room Selection, Payment Gateway, Booking Confirmation, Booking Cancellation, and Customer Support. User Registration – This function allows users to create an account on the online hotel booking system. Hotel Selection – This function allows users to select a hotel for which they want to book rooms. Room Selection – This function allows users to select rooms in the selected hotel. Payment Gateway – This function allows users to make payments for their room bookings. Booking Confirmation – This function confirms the booking of rooms. Booking Cancellation – This function allows users to cancel their room bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to book hotel rooms online. Create an ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  phone\n  registration_date\n}\n\nentity Hotel {\n  hotel_id <<key>>\n  name\n  location\n  rating\n  contact_info\n}\n\nentity Room {\n  room_id <<key>>\n  hotel_id <<foreign>>\n  room_type\n  price\n  availability_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  user_id <<foreign>>\n  hotel_id <<foreign>>\n  booking_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  booking_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  user_id <<foreign>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship REGISTERS {\n}\n\nrelationship SELECTS_HOTEL {\n}\n\nrelationship SELECTS_ROOM {\n}\n\nrelationship MAKES_BOOKING {\n}\n\nrelationship MAKES_PAYMENT {\n}\n\nrelationship CONFIRMS_BOOKING {\n}\n\nrelationship CANCELS_BOOKING {\n  cancellation_date\n}\n\nrelationship CONTACTS_SUPPORT {\n}\n\nrelationship HAS_ROOMS {\n}\n\nREGISTERS -1- User\n\nSELECTS_HOTEL -1- User\nSELECTS_HOTEL -N- Hotel\n\nSELECTS_ROOM -1- Booking\nSELECTS_ROOM -N- Room\n\nMAKES_BOOKING -1- User\nMAKES_BOOKING -1- Booking\n\nMAKES_PAYMENT -1- Booking\nMAKES_PAYMENT -1- Payment\n\nCONFIRMS_BOOKING -1- Booking\nCONFIRMS_BOOKING -1- Hotel\n\nCANCELS_BOOKING -1- User\nCANCELS_BOOKING -1- Booking\n\nCONTACTS_SUPPORT -1- User\nCONTACTS_SUPPORT -N- CustomerSupport\n\nHAS_ROOMS -1- Hotel\nHAS_ROOMS -N- Room\n\n@endchen"          
    },
    {
        "input": "The Online Flight Booking System is a web-based application that allows customers to book flight tickets online. The system consists of the following functions: User Registration, Flight Selection, Seat Selection, Payment Gateway, Ticket Confirmation, Ticket Cancellation, and Customer Support. User Registration – This function allows users to create an account on the online flight booking system. Flight Selection – This function allows users to select a flight for which they want to book tickets. Seat Selection – This function allows users to select seats for the selected flight. Payment Gateway – This function allows users to make payments for their ticket bookings. Ticket Confirmation – This function confirms the booking of tickets. Ticket Cancellation – This function allows users to cancel their ticket bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to book flight tickets online. Create an ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  phone\n  registration_date\n}\n\nentity Flight {\n  flight_id <<key>>\n  airline\n  departure_city\n  arrival_city\n  departure_time\n  arrival_time\n}\n\nentity Seat {\n  seat_id <<key>>\n  flight_id <<foreign>>\n  seat_number\n  seat_type\n  status\n}\n\nentity Booking {\n  booking_id <<key>>\n  user_id <<foreign>>\n  flight_id <<foreign>>\n  booking_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  booking_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  user_id <<foreign>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship SELECTS_FLIGHT {\n}\n\nrelationship SELECTS_SEAT {\n}\n\nrelationship MAKES_BOOKING {\n}\n\nrelationship MAKES_PAYMENT {\n}\n\nrelationship CONFIRMS_BOOKING {\n}\n\nrelationship CANCELS_BOOKING {\n  cancellation_date\n}\n\nrelationship CONTACTS_SUPPORT {\n}\n\nSELECTS_FLIGHT -1- User\nSELECTS_FLIGHT -N- Flight\n\nSELECTS_SEAT -1- Booking\nSELECTS_SEAT -N- Seat\n\nMAKES_BOOKING -1- User\nMAKES_BOOKING -1- Booking\n\nMAKES_PAYMENT -1- Booking\nMAKES_PAYMENT -1- Payment\n\nCONFIRMS_BOOKING -1- Booking\nCONFIRMS_BOOKING -1- Flight\n\nCANCELS_BOOKING -1- User\nCANCELS_BOOKING -1- Booking\n\nCONTACTS_SUPPORT -1- User\nCONTACTS_SUPPORT -N- CustomerSupport\n\n@endchen"
    },
    {
        "input": "The Online Event Management System is a web-based application that allows users to manage events online. The system consists of the following functions: User Registration, Event Creation, Event Promotion, Ticket Booking, Payment Gateway, Event Tracking, and Customer Support. User Registration – This function allows users to create an account on the online event management system. Event Creation – This function allows users to create events and manage event details. Event Promotion – This function allows users to promote events to attract attendees. Ticket Booking – This function allows users to book tickets for events. Payment Gateway – This function allows users to make payments for ticket bookings. Event Tracking – This function allows users to track the status of events and ticket bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a platform for users to manage and promote events online. Create an ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  phone\n  registration_date\n}\n\nentity Event {\n  event_id <<key>>\n  name\n  description\n  location\n  start_date\n  end_date\n}\n\nentity Ticket {\n  ticket_id <<key>>\n  event_id <<foreign>>\n  user_id <<foreign>>\n  booking_date\n  amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  ticket_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  user_id <<foreign>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship CREATES_EVENT {\n}\n\nrelationship PROMOTES_EVENT {\n}\n\nrelationship BOOKS_TICKET {\n}\n\nrelationship MAKES_PAYMENT {\n}\n\nrelationship TRACKS_EVENT {\n}\n\nrelationship CONTACTS_SUPPORT {\n}\n\nCREATES_EVENT -1- User\nCREATES_EVENT -N- Event\n\nPROMOTES_EVENT -1- User\nPROMOTES_EVENT -N- Event\n\nBOOKS_TICKET -1- User\nBOOKS_TICKET -1- Ticket\n\nMAKES_PAYMENT -1- Ticket\nMAKES_PAYMENT -1- Payment\n\nTRACKS_EVENT -1- User\nTRACKS_EVENT -N- Event\n\nCONTACTS_SUPPORT -1- User\nCONTACTS_SUPPORT -N- CustomerSupport\n\n@endchen"
    },
    {
        "input": "Give ER diagram for this. The need for law and enforcement in a country with a high population like India is salient. Lawyers play a major role in maintaining most of their data as hard copies. This project is mainly designed for lawyers to make their work more easy and efficient. It is a responsive web application that would provide lawyers with various services that would help them to maintain their documents. The services include a logbook that has details about the cases along with a calendar. The lawyers can also upload and save documents related to their case. It contains formats of model forms and links to online filing. It also provides quick references of common cases and detailed information about laws through e-books. Information about the judicial exams for lawyers is also made available. Furthermore, the web application contains news updates for lawyers, blogs and feedback. This case study will serve as a small hand tool for lawyers to maintain the soft copies of their data.",
        "output": "@startchen\n\nentity Lawyer {\n  lawyer_id <<key>>\n  name\n  email\n  phone\n  registration_date\n}\n\nentity Case {\n  case_id <<key>>\n  lawyer_id <<foreign>>\n  case_type\n  case_details\n  case_date\n}\n\nentity Document {\n  document_id <<key>>\n  case_id <<foreign>>\n  document_type\n  document_url\n}\n\nentity Calendar {\n  calendar_id <<key>>\n  lawyer_id <<foreign>>\n  event_date\n  event_details\n}\n\nentity Form {\n  form_id <<key>>\n  form_type\n  form_url\n}\n\nentity EBook {\n  ebook_id <<key>>\n  ebook_title\n  ebook_url\n}\n\nentity Exam {\n  exam_id <<key>>\n  exam_name\n  exam_date\n  exam_details\n}\n\nentity News {\n  news_id <<key>>\n  news_title\n  news_date\n  news_details\n}\n\nentity Blog {\n  blog_id <<key>>\n  blog_title\n  blog_date\n  blog_details\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  lawyer_id <<foreign>>\n  feedback_date\n  feedback_details\n}\n\nrelationship HANDLES_CASE {\n}\n\nrelationship UPLOADS_DOCUMENT {\n}\n\nrelationship MANAGES_SCHEDULE {\n}\n\nrelationship ACCESSES {\n}\n\nrelationship PROVIDES_FEEDBACK {\n}\n\nHANDLES_CASE -1- Lawyer\nHANDLES_CASE -N- Case\n\nUPLOADS_DOCUMENT -1- Case\nUPLOADS_DOCUMENT -N- Document\n\nMANAGES_SCHEDULE -1- Lawyer\nMANAGES_SCHEDULE -N- Calendar\n\nACCESSES -1- Lawyer\nACCESSES -N- Form\nACCESSES -N- EBook\nACCESSES -N- Exam\nACCESSES -N- News\nACCESSES -N- Blog\n\nPROVIDES_FEEDBACK -1- Lawyer\nPROVIDES_FEEDBACK -N- Feedback\n\n@endchen"          
    },
    {
        "input": "This case study is helpful to people who forget their mobile phones at home as a part of their busy daily routines. Keeping tick of essentials in this fast-paced life sometimes turns out to be quite demanding. People sometimes forget their phones at home. What if we need to make an important call and we don’t remember the contact number? Sometimes our phones just get disappeared and the scariest part is when the phone is put on silent mode. We sometimes want to lock our phones when they aren’t around us. Need to know the exact location of your phone? Therein comes the use of ‘My Helper’. The solutions to all the problems stated above can be solved easily and very quickly if you have the application ‘My Helper’ pre-installed on your phone and you have completed configuring the app. All you need to do is just send an SMS to your mobile number from any phone that you have access to…and there goes your problem solved. The scope of this system is increasing every day across the entire world where everything is happening at the speed of a Formula 1 Car on a race track. The objective of this system is to provide help to people facing these types of problems instantly with the help of advanced technology. The alluring features of this system are Remote Access without the Internet, Track your phone through an SMS, HassleFree as no OTP and ID PASSWORD is required and an SMS can help you change the sound profile of your phone (silent to normal) without Internet. The system is user friendly and the application will be available to even basic smartphones. Give me an ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  phone_number\n  email\n  registration_date\n}\n\nentity Device {\n  device_id <<key>>\n  user_id <<foreign>>\n  device_name\n  device_type\n  device_status\n  last_known_location\n}\n\nentity SMSCommand {\n  command_id <<key>>\n  command_type\n  description\n  execution_result\n}\n\nentity LocationHistory {\n  location_id <<key>>\n  device_id <<foreign>>\n  location_date\n  latitude\n  longitude\n}\n\nentity ProfileChange {\n  profile_change_id <<key>>\n  device_id <<foreign>>\n  change_date\n  previous_profile\n  new_profile\n}\n\nrelationship OWNS_DEVICE {\n}\n\nrelationship SENDS_COMMAND {\n}\n\nrelationship TRACKS_LOCATION {\n}\n\nrelationship CHANGES_PROFILE {\n}\n\nOWNS_DEVICE -1- User\nOWNS_DEVICE -N- Device\n\nSENDS_COMMAND -1- Device\nSENDS_COMMAND -N- SMSCommand\n\nTRACKS_LOCATION -1- Device\nTRACKS_LOCATION -N- LocationHistory\n\nCHANGES_PROFILE -1- Device\nCHANGES_PROFILE -N- ProfileChange\n\n@endchen"          
    },
    {
        "input": "Create an entity relationship diagram for this system. The all in one COVID-19 management system simplifies the entire process of decreasing the virus load in the community by digitalization. It includes tracking and treating COVID-19 patients and monitoring the spread of the virus. It aims to assist healthcare organizations and governments to assess patient risk profiles and provide awareness to common people by connecting them with virtual care capabilities. With the current epidemiological situation of COVID-19, there is a high demand to reduce contact between persons and digitize the whole process. This will effectively reduce the infection rate, help the common people and empower medical professionals across the world to help more patients through telemedicine and virtual care.",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  age\n  gender\n  address\n  phone\n  email\n  registration_date\n}\n\nentity HealthcareProvider {\n  provider_id <<key>>\n  name\n  location\n  contact_info\n}\n\nentity TestResult {\n  result_id <<key>>\n  patient_id <<foreign>>\n  test_date\n  test_result\n}\n\nentity TreatmentPlan {\n  plan_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  treatment_date\n  treatment_details\n}\n\nentity AwarenessCampaign {\n  campaign_id <<key>>\n  campaign_name\n  campaign_date\n  campaign_details\n}\n\nentity VirtualCare {\n  care_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  care_date\n  care_details\n}\n\nrelationship HAS {\n}\n\nrelationship ASSIGNED_TREATMENT {\n}\n\nrelationship ASSIGNS_TREATMENT {\n}\n\nrelationship CONDUCTS_CAMPAIGN {\n}\n\nrelationship PROVIDES_VIRTUAL_CARE {\n}\n\nrelationship USES_VIRTUAL_CARE {\n}\n\nHAS -1- Patient\nHAS -N- TestResult\n\nASSIGNED_TREATMENT -1- Patient\nASSIGNED_TREATMENT -N- TreatmentPlan\n\nASSIGNS_TREATMENT -1- HealthcareProvider\nASSIGNS_TREATMENT -N- TreatmentPlan\n\nCONDUCTS_CAMPAIGN -1- HealthcareProvider\nCONDUCTS_CAMPAIGN -N- AwarenessCampaign\n\nUSES_VIRTUAL_CARE -1- Patient\nUSES_VIRTUAL_CARE -N- VirtualCare\n\nPROVIDES_VIRTUAL_CARE -1- HealthcareProvider\nPROVIDES_VIRTUAL_CARE -N- VirtualCare\n\n@endchen"          
    },
    {
        "input": "Give an ER diagram for this. Most of the car owners do not know whether their car is at risk and needs to be serviced. This considerably increases the risk of malfunctioning of major parts of a car such as the braking system and engine which lead to accidents. Car Care is a multi-brand car service and maintenance application that maintains the date at which the specific part of a car is installed and notifies the expiry date of the parts of the car for both the driver and authorized service centre, so that the car can be serviced. This application enables car owners and service centres to separately login and enter their cars information. After issuing the car, the service centre employee enters the estimated expiry dates of parts of the car in this app. This application notifies the car owners and service centres when the expiry date for parts of the car is reached. Then the service centre employee contacts the owner of a car about service, once the owner accepts service request, the service centre employee picks up the car from home, this saves the time for owner of car. And then service centre employee examines the entire car and prepares the list of the damaged parts of the car and send it to the owner of the car through this app, once the owner selects the damaged parts to be serviced, the employee services the owner selected parts and updates the information about changed parts in the app so that the car can be service again on the expiry date of changed parts. Thus, this application helps in exchanging information between car owners and service centres. This application also enables the online payment for the services.",
        "output": "@startchen\n\nentity CarOwner {\n  owner_id <<key>>\n  name\n  email\n  phone\n  address\n  registration_date\n}\n\nentity ServiceCenter {\n  center_id <<key>>\n  name\n  location\n  contact_info\n}\n\nentity Car {\n  car_id <<key>>\n  owner_id <<foreign>>\n  make\n  model\n  year\n  registration_number\n}\n\nentity CarPart {\n  part_id <<key>>\n  car_id <<foreign>>\n  part_name\n  install_date\n  expiry_date\n  status\n}\n\nentity ServiceRequest {\n  request_id <<key>>\n  car_id <<foreign>>\n  center_id <<foreign>>\n  request_date\n  status\n}\n\nentity Service {\n  service_id <<key>>\n  request_id <<foreign>>\n  service_date\n  total_cost\n  payment_status\n}\n\nentity PartReplacement {\n  replacement_id <<key>>\n  service_id <<foreign>>\n  part_id <<foreign>>\n  replaced_date\n  cost\n}\n\nrelationship OWNS {\n}\n\nrelationship MONITORS {\n}\n\nrelationship SUBMITS_REQUEST {\n}\n\nrelationship HANDLES_SERVICE {\n}\n\nrelationship REPLACES_PART {\n}\n\nrelationship MAKES_PAYMENT {\n}\n\nOWNS -1- CarOwner\nOWNS -N- Car\n\nMONITORS -1- Car\nMONITORS -N- CarPart\n\nSUBMITS_REQUEST -1- CarOwner\nSUBMITS_REQUEST -N- ServiceRequest\n\nHANDLES_SERVICE -1- ServiceCenter\nHANDLES_SERVICE -N- ServiceRequest\n\nREPLACES_PART -1- Service\nREPLACES_PART -N- PartReplacement\n\nMAKES_PAYMENT -1- CarOwner\nMAKES_PAYMENT -N- Service\n\n@endchen"
    }

]