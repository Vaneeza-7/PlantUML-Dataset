[
    {
        "input": "Create a usecase diagram for this system. Healthcare service has huge demand these days as it really helps in managing a hospital or a medical office. The scope of healthcare service systems is increasing each day and it is true for the entire world. Some of these solutions include improved awareness about healthcare services and health policies. The objective of this system is to provide medical assistance to people instantly with the help of technology. This system eradicates the cultural sensitivity that prevails in many hospitals and improves the quality of medical assistance. The captivating features of this system are online doctors, medicines at doorstep, and bulletin of awareness. The users can also navigate and choose among various insurance schemes that are displayed.\n\nThe primary objectives of Webmed healthcare system are to enable all citizens to receive healthcare services whenever needed, and to deliver health services that are cost-effective and meet pre-established standards of quality. The main functions of this system deal with finance, health A-Z, resources, drugs and supplements, news and experts, payment and feedback. Register function allows the patients or the caregivers to register on the website. Login function allows the patients to access the website. Financing focuses on the purchase of insurance. Health A-Z displays all the diseases along with their symptoms. Resources function consists of the sub-functions including symptoms checker, health calculator, find a doctor based on the geographical location of the patient, insurance guide, and ambulance providence. Drugs and supplements include online medicine delivery, where people could shop for medicines online. News and experts function is to provide health awareness and threats that are prevailing. This function also gives information regarding counselling programs and blood donation camps. The payment function is to reimburse providers for services delivered. The feedback function collects user reviews for the website.",
        "output": "@startuml\nleft to right direction\n\nactor ServiceProvider\nactor User\n\nrectangle System {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Use Facilities\" as UC3\n    usecase \"Access Finance\" as UC4\n    usecase \"Access Health A-Z\" as UC5\n    usecase \"Use Resources\" as UC6\n    usecase \"Do Payment\" as UC7\n    usecase \"Give Feedback\" as UC8\n    usecase \"Logout\" as UC9\n    usecase \"Access News And Experts\" as UC10\n    usecase \"Get Drugs And Supplements\" as UC11\n}\n\nServiceProvider --> UC6\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC9\nUser --> UC7\nUser --> UC6\nUser --> UC10\nUser --> UC11\nUser --> UC5\nUser --> UC4\n\n\n\n\nUC7 --> UC8 : <<extend>>\n@enduml"   
    },
    {
        "input": "Create a usecase diagram for this system. The Online Examination System is a web-based application that allows students to take exams online. The system consists of the following functions: User Registration, Exam Creation, Exam Taking, Result Generation, and Exam Analysis. User Registration – This function allows students to create an account on the online examination system. Exam Creation – This function allows teachers to create exams and set questions. Exam Taking – This function allows students to take exams online. Result Generation – This function generates results for the exams taken by students. Exam Analysis – This function provides analysis of the exams taken by students. The main goal of the system is to provide a platform for students to take exams online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Teacher\n\nrectangle Online_Examination_System {\n    usecase \"Register\" as UC1\n    usecase \"Create Exam\" as UC2\n    usecase \"Take Exam\" as UC3\n    usecase \"Generate Result\" as UC4\n    usecase \"Analyze Exam\" as UC5\n}\n\nStudent --> UC1\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\n\nTeacher --> UC2\n\nUC3 --> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Create a usecase diagram for this system. The Online Voting System is a web-based application that allows citizens to vote online. The system consists of the following functions: Voter Registration, Candidate Registration, Voting, Result Generation, and Voter Analysis. Voter Registration – This function allows citizens to register as voters in the online voting system. Candidate Registration – This function allows candidates to register for elections. Voting – This function allows voters to cast their votes online. Result Generation – This function generates results for the elections. Voter Analysis – This function provides analysis of the votes cast by voters. The main goal of the system is to provide a platform for citizens to vote online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Citizen\nactor Candidate\n\nrectangle Online_Voting_System {\n    usecase \"Register as Voter\" as UC1\n    usecase \"Register as Candidate\" as UC2\n    usecase \"Cast Vote\" as UC3\n    usecase \"Generate Result\" as UC4\n    usecase \"Analyze Votes\" as UC5\n}\n\nCitizen --> UC1\nCitizen --> UC3\nCitizen --> UC4\nCitizen --> UC5\n\nCandidate --> UC2\n\nUC3 --> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Give me a use case diagram for this E-Ticketing System for Buses. In this case study, a software package to automate the manual procedures of reserving a bus ticket is made through Software Maintenance and Development Center (SMDC) Travels. Specifically, the objectives of this case study consist of providing a web-based bus ticket reservation function where a customer can buy a bus ticket through the online system without a need to queue up at the counter to purchase a bus ticket, enabling customers to check the availability and types of buses online. Customer can check the time departure for every Indian Tourist Centre (ITC) bus through the system, easing bus ticket payment by obtaining a bank pin after payments is made to the various designated banks, the ability of customers to cancel their reservation, admin user privileges in updating and cancelling payment, route and vehicle records.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Manager\n\nrectangle Bus_E-Ticketing_System {\n    usecase \"Registration\" as UC1\n    usecase \"Make Reservation\" as UC2\n    usecase \"Cancellation\" as UC3\n    usecase \"Do Payment\" as UC4\n    usecase \"Check Status\" as UC5\n    usecase \"Edit Profile\" as UC6\n    usecase \"Delete Account\" as UC7\n    usecase \"Manage Transactions\" as UC8\n    usecase \"Update Routes\" as UC9\n    usecase \"Update Bus Schedules\" as UC10\n    usecase \"Update Vehicle Records\" as UC11\n    usecase \"Update User Credentials\" as UC12\n    usecase \"Manage Account\" as UC13\n    usecase \"Generate Reports\" as UC14\n}\n\nCustomer --> UC1\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC13\nCustomer --> UC2\n\nManager --> UC8\nManager --> UC9\nManager --> UC10\nManager --> UC11\nManager --> UC14\n\nactor Admin <<secondary>>\n\nAdmin --> UC10\nAdmin --> UC12\nAdmin --> UC7\n\nUC4 --> UC3 : <<extend>>\nUC13 --> UC7 : <<extend>>\nUC13 --> UC6 : <<extend>>\n@enduml"    
    },
    {
        "input": "The Weather Monitoring System allows people to directly check the weather status online. The functionalities are Weather Status, Live Updating, Alert, Graphical Representation, Future Prediction and Weekly Analysis. Weather Status – With this function, temperature, humidity, rainfall, pressure and dew point are measured using sensors. Live Updating – Data are live updated to be viewed by the user. Alert – This functionality provides tips and alerts to the user on certain weather conditions. Graphical Representation – Plotting of graphs based on variations in temperature for easier analysis. Future Prediction – This functionality helps in predicting the weather for the next few days. WeeklyAnalysis – Displaying the average, the highest and lowest temperature of the week. The final goal is to provide detailed weather conditions for the user based on his/her location. Give me a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Weather_Monitoring_System {\n    usecase \"Check Weather Status\" as UC1\n    usecase \"Live Update\" as UC2\n    usecase \"Get Alerts\" as UC3\n    usecase \"Generate Graphical Representation\" as UC4\n    usecase \"Predict Future Weather\" as UC5\n    usecase \"Weekly Analysis\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\n\nUC1 --> UC2 : <<extend>>\nUC4 --> UC5 : <<extend>>\n@enduml"
    },
    {
        "input": "The Online Shopping System is a web-based application that allows customers to purchase products online. The system consists of the following functions: User Registration, Product Catalog, Shopping Cart, Payment Gateway, Order History, and Customer Support. User Registration – This function allows users to create an account on the website. Product Catalog – This function displays all the products available for purchase. Shopping Cart – This function allows users to add products to their cart. Payment Gateway – This function allows users to make payments for their purchases. Order History – This function displays the user's past orders. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient and user-friendly platform for customers to shop online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Shopping_System {\n    usecase \"Register\" as UC1\n    usecase \"View Products\" as UC2\n    usecase \"Add To Cart\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"View Order History\" as UC5\n    usecase \"Contact Support\" as UC6\n    usecase \"Provide Support\" as UC7\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n\nSupport --> UC7\nUC6 --> UC7 : <<include>>\n@enduml"
    },
    {
        "input": "The Library Management System is a software application that helps in maintaining a library. The system consists of the following functions: User Registration, Book Catalog, Borrowing Books, Returning Books, Renewing Books, and Late Fee Calculation. User Registration – This function allows users to create an account in the library system. Book Catalog – This function displays all the books available in the library. Borrowing Books – This function allows users to borrow books from the library. Returning Books – This function allows users to return books to the library. Renewing Books – This function allows users to renew the borrowed books. Late Fee Calculation – This function calculates the late fee for books returned after the due date. The main goal of the system is to provide an efficient and organized way of managing library operations. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Librarian\nactor User\n\nrectangle Library_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"View Books\" as UC2\n    usecase \"Borrow Book\" as UC3\n    usecase \"Return Book\" as UC4\n    usecase \"Renew Book\" as UC5\n    usecase \"Calculate Late Fee\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\n\nLibrarian -right-> UC6\n\nUC5 --> UC6 : <<include>>\n@enduml"
          
    },
    {
        "input": "Citizens in every district face the difficulty with the issuing of government certificates like birth/death certificates, income and caste certificates, old age and widow pensions, etc. This can be done with e-Province. This case study demonstrates how to make the government services available to the citizens in a convenient, efficient, and transparent manner, by enabling it simply by reliable access over the Internet. The main objective is to bring the public services closer to the citizens. To fulfill the vision of providing an easy and convenient service to the citizens through remote access primarily through Common Service Centre (CSCs), the e-Province project is created. This case study aims to develop a State Portal (SP) to provide all the citizens of the respective province to access the services under a single interface mechanism in the form of the Portal. The various modules in the e-Province project are an Admin module that creates, updates, deactivates the users and performs various other tasks. A Login module that allows the users to login with their unique Application number with approved status. A User module that allows the approved users to register for the respective certificates. A User Profile module that creates the pre-requisite information of the user that needs to be stored in the database. The Certificate module contains the required forms that are to be filled with the information of the users. Give me a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Citizen\nactor Admin\n\nrectangle E-Province {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Apply for Certificate\" as UC3\n    usecase \"Issue Certificate\" as UC4\n    usecase \"Manage User Profile\" as UC5\n    usecase \"View User Profile\" as UC6\n    usecase \"Deactivate User\" as UC7\n}\n\nCitizen --> UC1\nCitizen --> UC2\nCitizen --> UC3\nCitizen --> UC5\n\nAdmin --> UC4\nAdmin --> UC6\nAdmin --> UC5\n\nUC5 --> UC7 : <<extend>>\n@enduml"  
    },

    {
        "input": "The Online Banking System is a web-based application that allows customers to perform banking transactions online. The system consists of the following functions: User Registration, Account Management, Fund Transfer, Bill Payment, Transaction History, and Customer Support. User Registration – This function allows users to create an account on the online banking system. Account Management – This function allows users to view and manage their accounts. Fund Transfer – This function allows users to transfer funds between accounts. Bill Payment – This function allows users to pay bills online. Transaction History – This function displays the user's transaction history. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a secure and convenient platform for customers to perform banking transactions online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Banking_System {\n    usecase \"Register\" as UC1\n    usecase \"Manage Account\" as UC2\n    usecase \"Transfer Funds\" as UC3\n    usecase \"Pay Bills\" as UC4\n    usecase \"View Transaction History\" as UC5\n    usecase \"Contact Support\" as UC6\n    usecase \"Provide Support\" as UC7\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n\nSupport --> UC7\nUC6 --> UC7 : <<include>>\n\nUC3 --> UC4 : <<extend>>\n@enduml"    
    },
    {
        "input": "Give me usecase diagram for this. Maintaining the authentic documents physically in a single location is considered to be a challenging task. Thus, digitizing documents enables centralized storage of all the physical documents, enabling easy retrieval from anywhere at any time. It also prevents the troubles caused by missing any of those physical certificates. This can be achieved through the DigiDocLocker which is a platform for issuance and verification of documents and certificates in a digital format, thereby eliminating the use of physical documents. DigiDocLocker aims at benefiting all the citizens of the country by providing access to authentic documents/certificates such as driving licence, vehicle registration, and academic mark sheets in digital format from the original issuers of these certificates. DigiDocLocker has the following functionalities:\ni. A Registration module allows the users to register and a Login module that allows the authorized users.\nii. An Upload Document module allows the users to upload documents such as driving licence, vehicle registration, academic mark sheet, and other relevant documents in various file formats.\niii. A Profile module displays the complete profile of the user as available in the database.\niv. An Issuer module displays the certificate issuers’ names and the number of documents issued to the user by the issuer. For example, the Income Tax Department, Government of India has provided PAN Verification Records to Indian citizens via DigiLocker.\nv. A Requester module displays the requesters’ names and the number of documents requested from the user by the requesters. For example, citizens applying through Union Public Service Commission (UPSC)'s Online Recruitment Application (ORA) can upload documents through DigiDocLocker as well.",
        "output": "@startuml\nleft to right direction\n\nactor Citizen\nactor \"Requester (Eg: UPSC)\" as Requester\nactor \"Issuer (Eg: Income Tax Department)\" as Issuer\n\nrectangle DigiDocLocker {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Request Document\" as UC3\n    usecase \"Upload Document\" as UC4\n    usecase \"View Profile\" as UC5\n    usecase \"Issue Document\" as UC6\n}\n\nCitizen --> UC1\nCitizen --> UC2\nCitizen --> UC4\nCitizen --> UC5\n\nRequester --> UC3\nRequester --> UC2\nIssuer --> UC2\nIssuer --> UC6\n@enduml"  
    },
    {
        "input": "Various new small scale and medium scale sellers face difficulties to reach out to the customers and sell their products along with other competing products in the market. This increases their overall cost, thus reducing their profit or even causing loss. E-Retail is an online marketplace application case study where small and medium scale sellers can list, showcase, advertise, and sell their products directly to the customers without any physical store. E-Retail aims in providing a dynamic platform for all small and medium scale sellers to reach out and sell their products directly to all range of customers at a competing price without the need of any physical store. This enables the sellers to eliminate the cost of rent or maintenance of a physical store and to minimize other related costs. It also aims in promoting direct communication between the seller and customer, hence providing a trusted relationship between them. New sellers can easily authenticate and sign up to the portal and sell their products in the portal. The application offers separate login for sellers and customers, where the sellers and customers can sign in and start using the application. Customers can view all the products available from various sellers and buy those products. It also facilitates online payments for purchasing the products. Customers can rate or give a review for the product and seller. Customers can also report a seller for any violations in delivery or if the product does not meet the specified requirement. Customers can also view the contact information and the rating of the seller before buying the product. Give a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Seller\nactor Customer\n\nrectangle E-Retail {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"List Products\" as UC3\n    usecase \"View Products\" as UC4\n    usecase \"Buy Products\" as UC5\n    usecase \"Rate Product\" as UC6\n    usecase \"Report Seller\" as UC7\n    usecase \"View Seller Information\" as UC8\n    usecase \"Make Payment\" as UC9\n}\n\nSeller --> UC1\nSeller --> UC2\nSeller --> UC3\nSeller --> UC4\n\nCustomer --> UC2\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\nCustomer --> UC8\n\nUC5 --> UC6 : <<extend>>\nUC5 --> UC9 : <<include>>\n@enduml"            
    },
    {
        "input": "The Online Food Ordering System is a web-based application that allows customers to order food online. The system consists of the following functions: User Registration, Restaurant Selection, Menu Browsing, Order Placement, Payment Gateway, Order Tracking, and Customer Support. User Registration – This function allows users to create an account on the online food ordering system. Restaurant Selection – This function allows users to select a restaurant from which they want to order food. Menu Browsing – This function allows users to browse the menu of the selected restaurant. Order Placement – This function allows users to place an order for food. Payment Gateway – This function allows users to make payments for their orders. Order Tracking – This function allows users to track the status of their orders. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to order food online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Food_Ordering_System {\n    usecase \"Register\" as UC1\n    usecase \"Select Restaurant\" as UC2\n    usecase \"Browse Menu\" as UC3\n    usecase \"Place Order\" as UC4\n    usecase \"Make Payment\" as UC5\n    usecase \"Track Order\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC4 --> UC5 : <<include>>\n@enduml"          
        
    },
    {
        "input": "The Online Movie Ticket Booking System is a web-based application that allows customers to book movie tickets online. The system consists of the following functions: User Registration, Movie Selection, Seat Selection, Payment Gateway, Ticket Confirmation, Ticket Cancellation, and Customer Support. User Registration – This function allows users to create an account on the online movie ticket booking system. Movie Selection – This function allows users to select a movie for which they want to book tickets. Seat Selection – This function allows users to select seats for the selected movie. Payment Gateway – This function allows users to make payments for their ticket bookings. Ticket Confirmation – This function confirms the booking of tickets. Ticket Cancellation – This function allows users to cancel their ticket bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to book movie tickets online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Movie_Ticket_Booking_System {\n    usecase \"Register\" as UC1\n    usecase \"Select Movie\" as UC2\n    usecase \"Select Seats\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Confirm Ticket\" as UC5\n    usecase \"Cancel Ticket\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC5 --> UC6 : <<extend>>\n@enduml"       
    },
    {
        "input": "The Online Hotel Booking System is a web-based application that allows customers to book hotel rooms online. The system consists of the following functions: User Registration, Hotel Selection, Room Selection, Payment Gateway, Booking Confirmation, Booking Cancellation, and Customer Support. User Registration – This function allows users to create an account on the online hotel booking system. Hotel Selection – This function allows users to select a hotel for which they want to book rooms. Room Selection – This function allows users to select rooms in the selected hotel. Payment Gateway – This function allows users to make payments for their room bookings. Booking Confirmation – This function confirms the booking of rooms. Booking Cancellation – This function allows users to cancel their room bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to book hotel rooms online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Hotel_Booking_System {\n    usecase \"Register\" as UC1\n    usecase \"Select Hotel\" as UC2\n    usecase \"Select Room\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Confirm Booking\" as UC5\n    usecase \"Cancel Booking\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC5 --> UC6 : <<extend>>\n@enduml"
    },
    {
        "input": "The Online Flight Booking System is a web-based application that allows customers to book flight tickets online. The system consists of the following functions: User Registration, Flight Selection, Seat Selection, Payment Gateway, Ticket Confirmation, Ticket Cancellation, and Customer Support. User Registration – This function allows users to create an account on the online flight booking system. Flight Selection – This function allows users to select a flight for which they want to book tickets. Seat Selection – This function allows users to select seats for the selected flight. Payment Gateway – This function allows users to make payments for their ticket bookings. Ticket Confirmation – This function confirms the booking of tickets. Ticket Cancellation – This function allows users to cancel their ticket bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to book flight tickets online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Flight_Booking_System {\n    usecase \"Register\" as UC1\n    usecase \"Select Flight\" as UC2\n    usecase \"Select Seats\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Confirm Ticket\" as UC5\n    usecase \"Cancel Ticket\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC5 --> UC6 : <<extend>>\n@enduml"
    },
    {
        "input": "The Online Event Management System is a web-based application that allows users to manage events online. The system consists of the following functions: User Registration, Event Creation, Event Promotion, Ticket Booking, Payment Gateway, Event Tracking, and Customer Support. User Registration – This function allows users to create an account on the online event management system. Event Creation – This function allows users to create events and manage event details. Event Promotion – This function allows users to promote events to attract attendees. Ticket Booking – This function allows users to book tickets for events. Payment Gateway – This function allows users to make payments for ticket bookings. Event Tracking – This function allows users to track the status of events and ticket bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a platform for users to manage and promote events online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor \"Customer Support\" as Support\n\nrectangle Online_Event_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"Create Event\" as UC2\n    usecase \"Promote Event\" as UC3\n    usecase \"Book Ticket\" as UC4\n    usecase \"Make Payment\" as UC5\n    usecase \"Track Event\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC4 --> UC5 : <<include>>\n@enduml"
    },
    {
        "input": "Give use case diagram for this. The need for law and enforcement in a country with a high population like India is salient. Lawyers play a major role in maintaining most of their data as hard copies. This project is mainly designed for lawyers to make their work more easy and efficient. It is a responsive web application that would provide lawyers with various services that would help them to maintain their documents. The services include a logbook that has details about the cases along with a calendar. The lawyers can also upload and save documents related to their case. It contains formats of model forms and links to online filing. It also provides quick references of common cases and detailed information about laws through e-books. Information about the judicial exams for lawyers is also made available. Furthermore, the web application contains news updates for lawyers, blogs and feedback. This case study will serve as a small hand tool for lawyers to maintain the soft copies of their data.",
        "output": "@startuml\nleft to right direction\n\nactor Lawyer\nactor Admin\n\nrectangle Law_Enforcement_System {\n    usecase \"Register\" as UC1\n    usecase \"View Case details and logs\" as UC2\n    usecase \"Add case\" as UC3\n    usecase \"Update details\" as UC4\n    usecase \"Criminal\" as UC5\n    usecase \"Civil\" as UC6\n    usecase \"Filing online\" as UC7\n    usecase \"Download Model Forms\" as UC8\n    usecase \"Display Links\" as UC9\n    usecase \"Display Forms\" as UC10\n    usecase \"Quick references\" as UC11\n    usecase \"Books\" as UC12\n    usecase \"Add feedback\" as UC13\n    usecase \"View Blogs and news updates\" as UC14\n    usecase \"Download\" as UC15\n    usecase \"Upload Documents\" as UC16\n    usecase \"Update Logs\" as UC17\n    usecase \"Update Calendar\" as UC18\n    usecase \"Set reminders\" as UC19\n}\n\nLawyer --> UC1\nLawyer --> UC2\nLawyer --> UC3\nLawyer --> UC7\nLawyer --> UC8\nLawyer --> UC13\nLawyer --> UC14\n\nUC3 --> UC4 : <<include>>\nUC4 --> UC5 : <<extend>>\nUC4 --> UC6 : <<extend>>\nUC7 --> UC9 : <<extend>>\nUC8 --> UC10 : <<include>>\nUC8 --> UC11 : <<extend>>\nUC11 --> UC12 : <<extend>>\n\nAdmin --> UC16\nAdmin --> UC17\nAdmin --> UC18\nAdmin --> UC19\n\nUC16 --> UC15 : <<extend>>\nUC19 --> UC18 : <<include>>\n@enduml"  
    },
    {
        "input": "This case study is helpful to people who forget their mobile phones at home as a part of their busy daily routines. Keeping tick of essentials in this fast-paced life sometimes turns out to be quite demanding. People sometimes forget their phones at home. What if we need to make an important call and we don’t remember the contact number? Sometimes our phones just get disappeared and the scariest part is when the phone is put on silent mode. We sometimes want to lock our phones when they aren’t around us. Need to know the exact location of your phone? Therein comes the use of ‘My Helper’. The solutions to all the problems stated above can be solved easily and very quickly if you have the application ‘My Helper’ pre-installed on your phone and you have completed configuring the app. All you need to do is just send an SMS to your mobile number from any phone that you have access to…and there goes your problem solved. The scope of this system is increasing every day across the entire world where everything is happening at the speed of a Formula 1 Car on a race track. The objective of this system is to provide help to people facing these types of problems instantly with the help of advanced technology. The alluring features of this system are Remote Access without the Internet, Track your phone through an SMS, HassleFree as no OTP and ID PASSWORD is required and an SMS can help you change the sound profile of your phone (silent to normal) without Internet. The system is user friendly and the application will be available to even basic smartphones. Give me a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle My_Helper {\n    usecase \"Send SMS\" as UC1\n    usecase \"Track Phone\" as UC2\n    usecase \"Lock Phone\" as UC3\n    usecase \"Change Sound Profile\" as UC4\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\n\nUC1 --> UC4 : <<extend>>\n@enduml"  
    },
    {
        "input": "Create a use case diagram for this system. The all in one COVID-19 management system simplifies the entire process of decreasing the virus load in the community by digitalization. It includes tracking and treating COVID-19 patients and monitoring the spread of the virus. It aims to assist healthcare organizations and governments to assess patient risk profiles and provide awareness to common people by connecting them with virtual care capabilities. With the current epidemiological situation of COVID-19, there is a high demand to reduce contact between persons and digitize the whole process. This will effectively reduce the infection rate, help the common people and empower medical professionals across the world to help more patients through telemedicine and virtual care.",
        "output": "@startuml\nleft to right direction\n\nactor Healthcare_Organization\nactor Government\nactor Patient\n\nrectangle COVID-19_Management_System {\n    usecase \"Track COVID-19 Patients\" as UC1\n    usecase \"Treat COVID-19 Patients\" as UC2\n    usecase \"Monitor Virus Spread\" as UC3\n    usecase \"Assess Patient Risk\" as UC4\n    usecase \"Provide Awareness\" as UC5\n    usecase \"Connect with Virtual Care\" as UC6\n    usecase \"Buy Medicines\" as UC7\n}\n\nHealthcare_Organization --> UC1\nHealthcare_Organization --> UC2\nHealthcare_Organization --> UC4\nHealthcare_Organization --> UC6\n\nGovernment --> UC3\nGovernment --> UC4\nGovernment --> UC5\n\nPatient --> UC1\nPatient --> UC7\nPatient --> UC6\n\nUC4 --> UC6 : <<extend>>\n@enduml"  
    },
    {
        "input": "Give a use case diagram for this. Most of the car owners do not know whether their car is at risk and needs to be serviced. This considerably increases the risk of malfunctioning of major parts of a car such as the braking system and engine which lead to accidents. Car Care is a multi-brand car service and maintenance application that maintains the date at which the specific part of a car is installed and notifies the expiry date of the parts of the car for both the driver and authorized service centre, so that the car can be serviced. This application enables car owners and service centres to separately login and enter their cars information. After issuing the car, the service centre employee enters the estimated expiry dates of parts of the car in this app. This application notifies the car owners and service centres when the expiry date for parts of the car is reached. Then the service centre employee contacts the owner of a car about service, once the owner accepts service request, the service centre employee picks up the car from home, this saves the time for owner of car. And then service centre employee examines the entire car and prepares the list of the damaged parts of the car and send it to the owner of the car through this app, once the owner selects the damaged parts to be serviced, the employee services the owner selected parts and updates the information about changed parts in the app so that the car can be service again on the expiry date of changed parts. Thus, this application helps in exchanging information between car owners and service centres. This application also enables the online payment for the services.",
        "output": "@startuml\nleft to right direction\n\nactor Car_Owner\nactor Service_Centre\n\nrectangle Car_Care {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Enter Car Information\" as UC3\n    usecase \"Enter Expiry Dates\" as UC4\n    usecase \"Notify Expiry\" as UC5\n    usecase \"Accept Service Request\" as UC6\n    usecase \"Pick Up Car\" as UC7\n    usecase \"Examine Car\" as UC8\n    usecase \"Prepare List\" as UC9\n    usecase \"Select Damaged Parts\" as UC10\n    usecase \"Service Parts\" as UC11\n    usecase \"Update Information\" as UC12\n    usecase \"Make Payment\" as UC13\n}\n\nCar_Owner --> UC1\nCar_Owner --> UC2\nCar_Owner --> UC3\nCar_Owner --> UC5\nCar_Owner --> UC6\nCar_Owner --> UC10\nCar_Owner --> UC13\n\nService_Centre --> UC2\nService_Centre --> UC4\nService_Centre --> UC7\nService_Centre --> UC8\nService_Centre --> UC9\nService_Centre --> UC11\nService_Centre --> UC12\n\nUC6 --> UC7 : <<extend>>\nUC9 --> UC10 : <<include>>\nUC11 --> UC12 : <<extend>>\n@enduml"          
    },
    {
        "input": "Public Distribution System (PDS) is an Indian food security system. It is established by the Government of India under the Ministry of Consumer Affairs, Food, and Public Distribution and managed jointly with state governments in India. The traditional PDS is used to distribute grocery items to India’s poor who are valid ration cardholders. The validity and the allocation of the ration cards are monitored by the state governments. A ration cardholder should be given 35 kg of food grain as per the norms of PDS. However, there are concerns about the efficiency of the distribution process. In order to make it efficient and improve the current system of PDS, we are implementing e-Ration Shop. Here, we are going to make a website for shopping purposes. Using this website ration cardholder can order his/her grocery items from the PDS online. The main reason for using this website is to make this process computerized and to remove the drawbacks of the present way of issuing products based on the ration card. The main drawback in the current system is that the PDS has been criticized for its urban bias and its failure to serve the poorer sections of the population effectively. Also, many retail shopkeepers have a large number of bogus cards to sell food grains in the open market. Many PDS dealers resort to malpractice since they acquire less Salary so, by this project we are solving this problem too. Most of the time, users do not get their rightful entitlement in terms of quantity. What’s meant for them or the farm produce procured by the PDS is diverted to the open market. So in order to avoid all these drawbacks, we are going to use the e-Ration Shop which will help us to avoid the corruption in PDS if not eradicate it. The various importance of the proposed case study is every shop’s geo-location will be located on the map, all the information regarding shop and shopkeeper respective to the ration card and region, shop opening and closing details will be available, stock provided based on category, retailers can add, edit, delete and update their shop’s other items also, retailers can advertise their shops, stock availability will be notified on regular basis, product delivery feature, complaint forum for complaints by users, easy payment system by PayTM, COD etc., admin and moderator features for government and shopkeepers and authentication system by Aadhaar number and One-Time Pin (OTP). Generate a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor \"Ration_Cardholder (Customer)\" as Ration_Cardholder\nactor \"Retailer (Shopkeeper)\" as Retailer\nactor Admin\nactor Moderator\n\nrectangle E-Ration_Shop {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Order Grocery Items\" as UC3\n    usecase \"View Shop Details\" as UC4\n    usecase \"View Stock\" as UC5\n    usecase \"Manage Stock\" as UC6\n    usecase \"Advertise Shop\" as UC7\n    usecase \"Notify Stock Availability\" as UC8\n    usecase \"Deliver Products\" as UC9\n    usecase \"Complaint Forum\" as UC10\n    usecase \"Make Payment\" as UC11\n    usecase \"Manage Users\" as UC12\n    usecase \"Monitor System Usage\" as UC13\n    usecase \"Approve Retailer Applications\" as UC14\n    usecase \"Generate Reports\" as UC15\n    usecase \"Manage Content\" as UC16\n    usecase \"Review Complaints\" as UC17\n    usecase \"Authentication with Aadhaar and OTP\" as UC18\n}\n\nRation_Cardholder --> UC1\nRation_Cardholder --> UC2\nRation_Cardholder --> UC3\nRation_Cardholder --> UC4\nRation_Cardholder --> UC5\nRation_Cardholder --> UC10\nRation_Cardholder --> UC11\n\nRetailer --> UC4\nRetailer --> UC6\nRetailer --> UC7\nRetailer --> UC9\n\nAdmin --> UC12\nAdmin --> UC13\nAdmin --> UC14\nAdmin --> UC15\nAdmin --> UC18\n\nModerator --> UC16\nModerator --> UC17\n\nUC3 --> UC9 : <<extend>>\nUC5 --> UC8 : <<extend>>\n@enduml"          
    },
    {
        "input": "The ‘Textile Management System’ case study is designed to monitor all the processes in a textile manufacturing industry. There are various processes such as order receiving, purchase of raw materials, classification of raw materials, production of goods and selling the products. The main aim of this system is to ensure the reliability of data and to ease the process of manufacturing and transportation of garments and raw materials. This system ensures that the hardships prevailing in the manual systems are overridden by reducing the errors in data handling. The major functionalities are customer registration, sampling, stock checking, purchasing and processing of raw materials, production of garments, product checking and clearance, shipment, billing and report generation. Generate a use case diagram for this.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Manufacturer\n\nrectangle Textile_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"Sample Products\" as UC2\n    usecase \"Check Stock\" as UC3\n    usecase \"Purchase Raw Materials\" as UC4\n    usecase \"Process Raw Materials\" as UC5\n    usecase \"Produce Garments\" as UC6\n    usecase \"Check Products\" as UC7\n    usecase \"Clearance of Products\" as UC8\n    usecase \"Ship Products\" as UC9\n    usecase \"Generate Bill\" as UC10\n    usecase \"Generate Reports\" as UC11\n    usecase \"Order Garments\" as UC12\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC12\n\nManufacturer --> UC3\nManufacturer --> UC4\nManufacturer --> UC5\nManufacturer --> UC6\nManufacturer --> UC7\nManufacturer --> UC8\nManufacturer --> UC9\nManufacturer --> UC10\nManufacturer --> UC11\n\nUC7 --> UC8 : <<extend>>\n@enduml"          
    },
    {
        "input": "Create a use case diagram for a hotel reservation system. The system allows customers to book rooms online, check room availability, and make payments. The hotel management can add or update room details, view reservations, and generate reports. The system also includes a customer support feature to assist users with their queries and issues.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor HotelManager\nactor \"Customer Support\" as Support\n\nrectangle Hotel_Reservation_System {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Search Rooms\" as UC3\n    usecase \"Book Room\" as UC4\n    usecase \"Make Payment\" as UC5\n    usecase \"View Reservation\" as UC6\n    usecase \"Manage Room Details\" as UC7\n    usecase \"Generate Report\" as UC8\n    usecase \"Contact Support\" as UC9\n    usecase \"Provide Support\" as UC10\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC9\n\nHotelManager --> UC7\nHotelManager --> UC8\n\nSupport --> UC10\nUC9 --> UC10 : <<include>>\n@enduml"
    },
    {
        "input": "Create a use case diagram for a Learning Management System. The Learning Management System (LMS) is designed as a comprehensive platform that facilitates educational interactions between students and instructors. For students, it offers the ability to register, enroll in courses, submit assignments, and access their grades in a structured and accessible manner. On the other hand, instructors are provided with tools to design courses, manage student assignments, and grade submissions with efficiency.\n Additionally, the system fosters collaboration and communication through integrated discussion forums, allowing participants to engage in course-related discussions. A feedback mechanism also exists, enabling students to share their learning experiences, providing insights that instructors can use to improve their courses. The LMS aims to streamline the educational process, bringing convenience to both teaching and learning.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Instructor\n\nrectangle Learning_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"Enroll in Course\" as UC2\n    usecase \"Submit Assignment\" as UC3\n    usecase \"View Grades\" as UC4\n    usecase \"Create Course\" as UC5\n    usecase \"Manage Assignments\" as UC6\n    usecase \"Grade Submissions\" as UC7\n    usecase \"Join Discussion Forum\" as UC8\n    usecase \"Provide Feedback\" as UC9\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC8\nStudent --> UC9\n\nInstructor --> UC5\nInstructor --> UC6\nInstructor --> UC7\n@enduml"
    },
    {
        "input": "Create a use case diagram for an inventory management system. The system tracks inventory levels, orders, and deliveries. Store managers can view inventory levels, reorder products, and manage suppliers. The system also generates reports on product usage and reorder history.",
        "output": "@startuml\nleft to right direction\n\nactor StoreManager\nactor Supplier\n\nrectangle Inventory_Management_System {\n    usecase \"View Inventory\" as UC1\n    usecase \"Reorder Product\" as UC2\n    usecase \"Manage Suppliers\" as UC3\n    usecase \"Track Deliveries\" as UC4\n    usecase \"Generate Reports\" as UC5\n}\n\nStoreManager --> UC1\nStoreManager --> UC2\nStoreManager --> UC3\nStoreManager --> UC5\n\nSupplier --> UC4\n@enduml"
    },
    {
        "input": "Create a use case diagram for an online examination system. The system allows students to register, take exams, and view their scores. Instructors can create exams, grade submissions, and view results. The system also provides a feedback mechanism for students to rate their exams.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Instructor\n\nrectangle Online_Examination_System {\n    usecase \"Register\" as UC1\n    usecase \"Take Exam\" as UC2\n    usecase \"View Scores\" as UC3\n    usecase \"Create Exam\" as UC4\n    usecase \"Grade Submissions\" as UC5\n    usecase \"View Results\" as UC6\n    usecase \"Provide Feedback\" as UC7\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC7\n\nInstructor --> UC4\nInstructor --> UC5\nInstructor --> UC6\n@enduml"
    },
    {
        "input": "Create a use case diagram for an e-library system. The system allows users to browse e-books, borrow e-books, and return them. Librarians can manage the collection of e-books and issue reminders for overdue e-books. The system also allows users to leave reviews for the e-books.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Librarian\n\nrectangle E-Library_System {\n    usecase \"Browse E-books\" as UC1\n    usecase \"Borrow E-book\" as UC2\n    usecase \"Return E-book\" as UC3\n    usecase \"Leave Review\" as UC4\n    usecase \"Manage Collection\" as UC5\n    usecase \"Issue Reminders\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\n\nLibrarian --> UC5\nLibrarian --> UC6\n@enduml"
    },
    {
        "input": "Design a use case diagram for a gym management system that caters to both users and trainers. Users will have the ability to sign up and become members of the gym, allowing them to book sessions with their preferred schedules and track their fitness journey over time. They can monitor their progress and track improvements through personalized dashboards. To maintain membership, users can manage their payments seamlessly through the integrated payment gateway, ensuring that all fees are handled efficiently. Trainers, on the other hand, can set up workout plans tailored to their clients’ needs, manage their schedules, and closely monitor the progress of each client. The system is built to facilitate smooth communication between users and trainers while managing the operational side of the gym effectively.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Trainer\n\nrectangle Gym_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"Book Session\" as UC2\n    usecase \"Track Progress\" as UC3\n    usecase \"Create Workout Plan\" as UC4\n    usecase \"Manage Schedule\" as UC5\n    usecase \"Track Client Progress\" as UC6\n    usecase \"Make Payment\" as UC7\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC7\n\nTrainer --> UC4\nTrainer --> UC5\nTrainer --> UC6\n@enduml"
    },
    {
        "input": "Design a use case diagram for a warehouse management system that handles the complex operations of managing inventory, shipments, and employee schedules. The system monitors stock levels in real-time, tracking shipments and deliveries to ensure that stock data is always accurate. Warehouse managers are given the ability to manage the entire stock lifecycle — adding, removing, and updating items as needed through a consolidated 'Manage Stock' function. Additionally, managers can generate detailed operational reports and oversee employee scheduling to align resources with demand. The system's inventory optimization feature ensures that stock is dynamically adjusted based on real-time demand patterns, maintaining an efficient flow of goods through the warehouse.",
        "output": "@startuml\nleft to right direction\n\nactor WarehouseManager\nactor Employee\n\nrectangle Warehouse_Management_System {\n    usecase \"Track Stock\" as UC1\n    usecase \"Manage Shipments\" as UC2\n    usecase \"Manage Deliveries\" as UC3\n    usecase \"Manage Stock\" as UC4\n    usecase \"Generate Reports\" as UC5\n    usecase \"Manage Employee Schedule\" as UC6\n    usecase \"Optimize Inventory\" as UC7\n}\n\nWarehouseManager --> UC1\nWarehouseManager --> UC4\nWarehouseManager --> UC5\nWarehouseManager --> UC6\nWarehouseManager --> UC7\n\nEmployee --> UC2\nEmployee --> UC3\n@enduml"
    },
    {
        "input": "Design a use case diagram for a hospital management system that facilitates interactions between patients and healthcare providers. The system allows patients to manage their healthcare by offering features such as booking appointments with available doctors and viewing their medical records for ongoing treatments. When patients visit the hospital, they are able to pay for the services they have used through the system's billing module, which generates invoices for medical services. After consultations, doctors prescribe medications to patients, and these prescriptions are delivered electronically to ensure quick access. Doctors can also efficiently manage patient records, keeping them up-to-date with relevant information, and have the ability to schedule follow-up appointments with patients, ensuring continuity of care. Furthermore, the system enables healthcare providers to issue prescriptions electronically, minimizing paperwork and streamlining the patient’s treatment process.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Doctor\n\nrectangle Hospital_Management_System {\n    usecase \"Book Appointment\" as UC1\n    usecase \"View Medical Records\" as UC2\n    usecase \"Receive Prescription\" as UC3\n    usecase \"Manage Patient Records\" as UC4\n    usecase \"Schedule Appointments\" as UC5\n    usecase \"Prescribe Medications\" as UC6\n    usecase \"Generate Bill\" as UC7\n}\n\nPatient --> UC1\nPatient --> UC2\nPatient --> UC3\nPatient --> UC7\n\nDoctor --> UC4\nDoctor --> UC5\nDoctor --> UC6\n@enduml"
    },
    {
        "input": "Design a use case diagram for a banking system that caters to both customers and bank employees. Customers can perform various transactions such as depositing money, withdrawing money, transferring funds, and checking their account balance. They can also apply for loans and view their transaction history. Bank employees have access to additional features such as managing customer accounts, approving loan applications, and generating reports. The system is designed to provide a seamless banking experience for customers while enabling efficient operations for bank employees.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor BankEmployee\n\nrectangle Banking_System {\n    usecase \"Deposit Money\" as UC1\n    usecase \"Withdraw Money\" as UC2\n    usecase \"Transfer Funds\" as UC3\n    usecase \"Check Balance\" as UC4\n    usecase \"Apply for Loan\" as UC5\n    usecase \"View Transaction History\" as UC6\n    usecase \"Manage Accounts\" as UC7\n    usecase \"Approve Loan Applications\" as UC8\n    usecase \"Generate Reports\" as UC9\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n\nBankEmployee --> UC7\nBankEmployee --> UC8\nBankEmployee --> UC9\n@enduml"
    },
    {
        "input": "Design a use case diagram for a car rental system that allows customers to rent cars and manage their bookings. Customers can search for available cars, select the desired car, and make a reservation. They can also view their booking history and cancel bookings if needed. The system provides a seamless experience for customers to rent cars for their travel needs. Additionally, the system allows car rental agencies to manage their fleet, track bookings, and generate reports on rental activity.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor CarRentalAgency\n\nrectangle Car_Rental_System {\n    usecase \"Search Cars\" as UC1\n    usecase \"Select Car\" as UC2\n    usecase \"Make Reservation\" as UC3\n    usecase \"View Booking History\" as UC4\n    usecase \"Cancel Booking\" as UC5\n    usecase \"Manage Fleet\" as UC6\n    usecase \"Track Bookings\" as UC7\n    usecase \"Generate Reports\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\n\nCarRentalAgency --> UC6\nCarRentalAgency --> UC7\nCarRentalAgency --> UC8\n@enduml"
    },
    {
        "input": "Design a use case diagram for a Final Year Project (FYP) management system that supports the complex workflow of managing final year projects. The system allows students to submit their project proposals for approval and upload progress reports at various stages of the project. Throughout the process, they can track the evaluation status of their work to ensure timely feedback and meet deadlines. Supervisors play a crucial role by reviewing student submissions, providing detailed feedback, and setting important project deadlines, ensuring that students stay on track. Additionally, panel members are responsible for evaluating projects during key milestones, offering scores, and submitting comments to guide students towards successful project completion. The system also empowers the FYP committee to oversee the entire process by assigning panel members to each project, approving or rejecting proposals based on academic standards, and ensuring the overall quality of the projects being submitted. A built-in communication feature enables seamless interaction between students, supervisors, and panel members, fostering collaboration and guidance throughout the project lifecycle.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Supervisor\nactor Panel_Member\nactor FYP_Committee\n\nrectangle FYP_Management_System {\n    usecase \"Submit Proposal\" as UC1\n    usecase \"Upload Progress Report\" as UC2\n    usecase \"Track Evaluation Status\" as UC3\n    usecase \"Review Submissions\" as UC4\n    usecase \"Provide Feedback\" as UC5\n    usecase \"Set Project Deadlines\" as UC6\n    usecase \"Monitor Progress\" as UC7\n    usecase \"Evaluate Projects\" as UC8\n    usecase \"Assign Panel Members\" as UC9\n    usecase \"Approve Proposals\" as UC10\n    usecase \"Ensure Academic Standards\" as UC11\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\n\nSupervisor --> UC4\nSupervisor --> UC5\nSupervisor --> UC6\nSupervisor --> UC7\n\nPanel_Member --> UC4\nPanel_Member --> UC8\n\nFYP_Committee --> UC9\nFYP_Committee --> UC10\nFYP_Committee --> UC11\n\nUC4 --> UC5 : <<extend>>\n@enduml"
    },
    {
        "input": "Create a use case diagram for a Volunteer Management System that facilitates the organization of non-profit activities, ensuring smooth coordination among all participants. Volunteers have the ability to express interest in events by signing up through the system, while also being able to track their involvement across different activities. They are required to update their availability to make sure their participation aligns with ongoing or future events. Additionally, tasks are assigned based on specific criteria, ensuring that responsibilities are distributed according to both the availability and expertise of individuals involved. This system also keeps a detailed record of the time each participant dedicates to the organization, which is useful for tracking overall engagement. Events are scheduled in advance, and once all necessary arrangements have been made, including the approval of volunteer rosters, key individuals monitor the success and effectiveness of the event. An integrated reporting mechanism allows for the evaluation of participation and impact, helping ensure that the organization can continually refine its volunteer efforts.",
        "output": "@startuml\nleft to right direction\n\nactor Volunteer\nactor Coordinator\nactor Event_Manager\n\nrectangle Volunteer_Management_System {\n    usecase \"Sign Up for Event\" as UC1\n    usecase \"View Assigned Tasks\" as UC2\n    usecase \"Track Participation Hours\" as UC3\n    usecase \"Update Availability\" as UC4\n    usecase \"Assign Tasks\" as UC5\n    usecase \"Track Volunteer Participation\" as UC6\n    usecase \"Schedule Events\" as UC7\n    usecase \"Approve Volunteer Rosters\" as UC8\n    usecase \"Monitor Event Success\" as UC9\n    usecase \"Generate Reports\" as UC10\n}\n\nVolunteer --> UC1\nVolunteer --> UC2\nVolunteer --> UC3\nVolunteer --> UC4\n\nCoordinator --> UC5\nCoordinator --> UC6\n\nEvent_Manager --> UC7\nEvent_Manager --> UC8\nEvent_Manager --> UC9\nEvent_Manager --> UC10\n\nUC6 --> UC10 : <<include>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for a company's hiring system, for a fictional company called TechHire Solutions, which streamlines the recruitment process from initial candidate interest to final hiring decisions. Candidates who wish to apply for positions at TechHire Solutions must first submit their applications, which include resumes and cover letters. Once submitted, the system scans the resumes for relevant skills, experience, and qualifications, automatically filtering out those who don't meet the basic criteria. The shortlisted candidates are then moved forward in the process, where they are scheduled for various interview rounds, including technical assessments and HR interviews. Throughout this process, interviewers are able to log their feedback and ratings after each round, which contributes to the final decision-making. Finally, the system assists in selecting the most qualified candidates based on the gathered feedback, and an offer letter is generated for the chosen candidates. The system also tracks the overall hiring status, ensuring transparency and consistency across all stages of the recruitment cycle.",
        "output": "@startuml\nleft to right direction\n\nactor Candidate\nactor Recruiter\nactor Interviewer\n\nrectangle Hiring_System_TechHire_Solutions {\n    usecase \"Submit Application\" as UC1\n    usecase \"Scan Resume\" as UC2\n    usecase \"Shortlist Candidates\" as UC3\n    usecase \"Schedule Interviews\" as UC4\n    usecase \"Provide Interview Feedback\" as UC5\n    usecase \"Select Candidates\" as UC6\n    usecase \"Generate Offer Letter\" as UC7\n    usecase \"Track Hiring Status\" as UC8\n}\n\nCandidate --> UC1\n\nRecruiter --> UC2\nRecruiter --> UC3\nRecruiter --> UC4\nRecruiter --> UC6\nRecruiter --> UC7\nRecruiter --> UC8\n\nInterviewer --> UC5\n@enduml"
    },
    {
        "input": "Design a use case diagram for GitHub Universe 2023 Management System. The system is designed to manage the complex lifecycle of GitHub Universe, the annual flagship event, from sponsor engagement to event scheduling and participant interaction. The system allows sponsors to submit proposals and review their benefits, while the organizers handle sponsor onboarding, tracking branding throughout the event, and managing overall event schedules. Participants can register, sign up for keynotes and workshops, and give feedback about the sessions they attend. For speakers, the system enables them to schedule and present their technical talks. Real-time notifications keep all users updated about the latest event information. Organizers will also be able to monitor attendance and generate reports based on user feedback and overall event metrics.",
        "output": "@startuml\nleft to right direction\n\nactor Participant\nactor Sponsor\nactor Organizer\nactor Speaker\n\nrectangle GitHub_Universe_Management_System {\n    usecase \"Register for Event\" as UC1\n    usecase \"Sign Up for Sessions\" as UC2\n    usecase \"Manage Sponsor Onboarding\" as UC3\n    usecase \"Track Sponsor Branding\" as UC4\n    usecase \"Manage Event Schedule\" as UC5\n    usecase \"Send Real-Time Updates\" as UC6\n    usecase \"Submit Session Feedback\" as UC7\n    usecase \"Give Tech-Talks\" as UC8\n    usecase \"Generate Reports\" as UC9\n    usecase \"Monitor Attendance\" as UC10\n    usecase \"Submit Sponsorship Proposal\" as UC11\n    usecase \"Review Sponsorship Benefits\" as UC12\n}\n\nParticipant --> UC1\nParticipant --> UC2\nParticipant --> UC7\n\nSponsor --> UC11\nSponsor --> UC4\n\nOrganizer --> UC5\nOrganizer --> UC6\nOrganizer --> UC9\nOrganizer --> UC10\nOrganizer --> UC3\nOrganizer --> UC4\n\nSpeaker --> UC8\n@enduml"
    },
    {
        "input": "Design a use case diagram for a university course registration system that simplifies the process of enrolling in courses and managing academic schedules. Students can search for available courses, add them to their course list, and register for the upcoming semester. The system also allows students to drop courses if needed and view their academic history. Professors can view the list of enrolled students, assign grades, and provide feedback on assignments. The system ensures that students and professors can easily manage their academic responsibilities and stay informed about course-related activities.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Professor\n\nrectangle Course_Registration_System {\n    usecase \"Search Courses\" as UC1\n    usecase \"Add Course\" as UC2\n    usecase \"Register for Semester\" as UC3\n    usecase \"Drop Course\" as UC4\n    usecase \"View Academic History\" as UC5\n    usecase \"View Enrolled Students\" as UC6\n    usecase \"Assign Grades\" as UC7\n    usecase \"Provide Feedback\" as UC8\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\n\nProfessor --> UC6\nProfessor --> UC7\nProfessor --> UC8\n@enduml"
    },
    {
        "input": "Design a use case diagram for a social media platform that connects users through shared interests and activities. Users can create profiles, post content, and interact with other users through comments and likes. The platform also offers group features, allowing users to join communities and participate in group discussions. Additionally, users can send private messages to each other and receive notifications about new activities on the platform. The system aims to foster a sense of community and engagement among its users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Social_Media_Platform {\n    usecase \"Create Profile\" as UC1\n    usecase \"Post Content\" as UC2\n    usecase \"Interact with Users\" as UC3\n    usecase \"Join Groups\" as UC4\n    usecase \"Participate in Discussions\" as UC5\n    usecase \"Send Messages\" as UC6\n    usecase \"Receive Notifications\" as UC7\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n@enduml"
    },
    {
        "input": "Design a use case diagram for a social networking platform like Facebook. The platform allows individuals to shape their online identity by creating personalized profiles, which serve as the foundation for user engagement. Users can build meaningful connections by sending and accepting friend requests, gradually expanding their network. Beyond mere connections, users are provided with tools to express themselves by sharing life moments, thoughts, and experiences through posts, which may include text, photos, or videos. These updates can then be engaged with by other users, creating a vibrant interaction space. Users are notified in real-time about interactions, such as reactions to their posts or new connections. Additionally, the platform enables private conversations through messaging, allowing users to stay in touch and share media directly. The platform also offers a space for business users, who can create pages for their ventures, post updates, and manage advertisements targeted at their audience. Moderators ensure a safe environment by monitoring content, while administrators manage platform-wide activities, including enforcing community guidelines.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Moderator\nactor Admin\n\nrectangle Facebook_System {\n    usecase \"Create Profile\" as UC1\n    usecase \"Manage Friends\" as UC2\n    usecase \"Share Life Moments\" as UC3\n    usecase \"Post Content\" as UC4\n    usecase \"Engage with Posts\" as UC5\n    usecase \"Send Private Messages\" as UC6\n    usecase \"Receive Notifications\" as UC7\n    usecase \"Create Business Page\" as UC8\n    usecase \"Manage Advertisements\" as UC9\n    usecase \"Monitor and Moderate Content\" as UC10\n    usecase \"Enforce Community Guidelines\" as UC11\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\n\nModerator --> UC10\n\nAdmin --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for a blood donation app that connects donors, recipients, and blood banks, helping people in emergencies or for regular donations. The app allows users to register as donors, find donors in urgent situations based on blood type and location, and post blood requests. Donors are notified of blood requests and can donate blood. Recipients can find nearby hospitals, while blood banks organize donation drives and track blood availability to ensure sufficient supply. The app aims to simplify the blood donation process and improve access to life-saving resources for those in need.",
        "output": "@startuml\nleft to right direction\n\nactor Donor\nactor Recipient\nactor BloodBank\n\nrectangle Blood_Donation_App {\n    usecase \"Register as Donor\" as UC1\n    usecase \"Find Blood Donor\" as UC2\n    usecase \"Post Blood Request\" as UC3\n    usecase \"Receive Notifications\" as UC4\n    usecase \"Locate Nearby Hospitals\" as UC5\n    usecase \"Organize Blood Donation Drives\" as UC6\n    usecase \"Track Blood Availability\" as UC7\n    usecase \"Donate Blood\" as UC8\n}\n\nDonor --> UC1\nDonor --> UC8\nDonor --> UC4\nRecipient --> UC2\nRecipient --> UC3\nRecipient --> UC5\nRecipient --> UC4\nBloodBank --> UC6\nBloodBank --> UC7\n@enduml"
    },
    {
        "input": "Design a use case diagram for a ride-sharing platform like Uber. The platform connects drivers and passengers, enabling them to request rides, track their location, and pay for services. Passengers can view available drivers, request rides to specific destinations, and rate drivers based on their experience. Drivers, on the other hand, can accept ride requests, navigate to the passenger's location, and provide a safe and efficient ride. The platform also includes features for customer support, allowing users to report issues and receive assistance when needed.",
        "output": "@startuml\nleft to right direction\n\nactor Passenger\nactor Driver\nactor CustomerSupport\n\nrectangle Ride_Sharing_Platform {\n    usecase \"Request Ride\" as UC1\n    usecase \"Track Location\" as UC2\n    usecase \"Pay for Service\" as UC3\n    usecase \"Rate Driver\" as UC4\n    usecase \"Accept Ride Request\" as UC5\n    usecase \"Navigate to Location\" as UC6\n    usecase \"Provide Ride\" as UC7\n    usecase \"Resolve Issues\" as UC8\n    usecase \"Provide Assistance\" as UC9\n}\n\nPassenger --> UC1\nPassenger --> UC2\nPassenger --> UC3\nPassenger --> UC4\n\nDriver --> UC5\nDriver --> UC6\nDriver --> UC7\n\nCustomerSupport --> UC8\nCustomerSupport --> UC9\n@enduml"
    },
    {
        "input": "Design a use case diagram for a food delivery platform like DoorDash. The platform connects customers with restaurants, allowing them to order food for delivery or pickup. Customers can browse restaurant menus, place orders, and track the status of their deliveries. Restaurants can receive orders, prepare food, and notify customers when their orders are ready. Delivery drivers can accept delivery requests, pick up orders, and deliver them to customers. The platform also includes features for customer support, enabling users to report issues and receive assistance.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Restaurant\nactor Driver\nactor CustomerSupport\n\nrectangle Food_Delivery_Platform {\n    usecase \"Browse Menus\" as UC1\n    usecase \"Place Order\" as UC2\n    usecase \"Track Delivery\" as UC3\n    usecase \"Receive Orders\" as UC4\n    usecase \"Prepare Food\" as UC5\n    usecase \"Notify Order Ready\" as UC6\n    usecase \"Accept Delivery Request\" as UC7\n    usecase \"Pick Up Order\" as UC8\n    usecase \"Deliver Order\" as UC9\n    usecase \"Resolve Issues\" as UC10\n    usecase \"Provide Assistance\" as UC11\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\n\nRestaurant --> UC4\nRestaurant --> UC5\nRestaurant --> UC6\n\nDriver --> UC7\nDriver --> UC8\nDriver --> UC9\n\nCustomerSupport --> UC10\nCustomerSupport --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for a job finder app specifically designed to support women's career aspirations, called **SheWorks**. The app focuses on helping women find jobs that align with their skills and needs, such as flexible working hours, remote work opportunities, and women-centric organizations. SheWorks allows users to create profiles and upload their resumes, where they can search and apply for job listings that cater to their preferences. The app not only supports job seekers but also empowers employers to list vacancies that are more inclusive, offering features like mentorship programs or leadership roles for women. The platform integrates resume scanning and recommendation algorithms to match users with relevant job opportunities. Employers can shortlist candidates based on their profiles, and users can schedule interviews directly through the app. Notifications are sent to keep users informed of job updates, interview calls, and feedback. Additionally, the app promotes career development by offering workshops, events, and networking opportunities to encourage women in their professional growth.",
        "output": "@startuml\nleft to right direction\n\nactor Job_Seeker\nactor Employer\nactor Mentor\n\nrectangle SheWorks_App {\n    usecase \"Create Profile\" as UC1\n    usecase \"Upload Resume\" as UC2\n    usecase \"Search for Jobs\" as UC3\n    usecase \"Apply for Job\" as UC4\n    usecase \"Receive Notifications\" as UC5\n    usecase \"Schedule Interview\" as UC6\n    usecase \"Attend Workshops\" as UC7\n    usecase \"Participate in Networking Events\" as UC8\n    usecase \"Shortlist Candidates\" as UC9\n    usecase \"Post Job Vacancies\" as UC10\n    usecase \"Offer Mentorship\" as UC11\n    usecase \"Receive Job Recommendations\" as UC12\n}\n\nJob_Seeker --> UC1\nJob_Seeker --> UC2\nJob_Seeker --> UC3\nJob_Seeker --> UC4\nJob_Seeker --> UC6\nJob_Seeker --> UC5\nJob_Seeker --> UC7\nJob_Seeker --> UC8\nJob_Seeker --> UC12\n\nEmployer --> UC9\nEmployer --> UC10\n\nMentor --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for a web app developed to manage a large-scale hackathon event. The app streamlines the organization of the event, allowing participants to register, form teams, and submit their projects. It also facilitates communication between participants, mentors, and organizers by providing features like chat rooms, notifications, and announcements. For organizers, the app includes features to manage event schedules, monitor team progress, and coordinate judging rounds. Mentors can offer guidance through dedicated channels, review project progress, and provide feedback. Judges can evaluate projects, score submissions, and provide feedback directly through the app. Additionally, sponsors have the option to submit branding materials, contribute prizes, and track the visibility of their sponsorships throughout the event. The platform ensures a smooth flow of communication, event updates, and project tracking, making the hackathon experience efficient for all involved.",
        "output": "@startuml\nleft to right direction\n\nactor Participant\nactor Organizer\nactor Mentor\nactor Judge\nactor Sponsor\n\nrectangle Hackathon_Management_System {\n    usecase \"Register for Event\" as UC1\n    usecase \"Form Team\" as UC2\n    usecase \"Submit Project\" as UC3\n    usecase \"Chat with Team\" as UC4\n    usecase \"Receive Notifications\" as UC5\n    usecase \"View Event Schedule\" as UC6\n    usecase \"Provide Mentorship\" as UC7\n    usecase \"Review Project Progress\" as UC8\n    usecase \"Evaluate Projects\" as UC9\n    usecase \"Score Submissions\" as UC10\n    usecase \"Manage Judging Rounds\" as UC11\n    usecase \"Submit Sponsorship Materials\" as UC12\n    usecase \"Track Sponsorship Visibility\" as UC13\n    usecase \"Coordinate Announcements\" as UC14\n}\n\nParticipant --> UC1\nParticipant --> UC2\nParticipant --> UC3\nParticipant --> UC4\nParticipant --> UC5\nParticipant --> UC6\n\nOrganizer --> UC6\nOrganizer --> UC14\nOrganizer --> UC11\nOrganizer --> UC8\n\nMentor --> UC7\nMentor --> UC8\n\nJudge --> UC9\nJudge --> UC10\n\nSponsor --> UC12\nSponsor --> UC13\n@enduml"
    },
    {
        "input": "Design a use case diagram for a seminar management system. The system aims to manage every aspect of a large seminar, from organizing the venue to managing guest speakers and attendees. The platform allows organizers to schedule events, allocate the auditorium for sessions, and track audience attendance. It also supports guest speaker management, where the system handles speaker invitations, biographies, and session assignments. Audience members can register for the seminar, book seats, and receive notifications about upcoming sessions. Real-time updates about speaker schedules and session changes are provided to both attendees and organizers. The platform also offers a feedback mechanism for audience members to evaluate sessions. Sponsors and partners can promote their brands through the platform, ensuring visibility during the event. Additionally, the system supports guest list management, session timings, and overall event coordination to ensure smooth operations.",
        "output": "@startuml\nleft to right direction\n\nactor Audience\nactor Organizer\nactor Guest_Speaker\nactor Sponsor\n\nrectangle Seminar_Management_System {\n    usecase \"Register for Seminar\" as UC1\n    usecase \"Book Seat\" as UC2\n    usecase \"Receive Notifications\" as UC3\n    usecase \"View Session Schedule\" as UC4\n    usecase \"Submit Feedback\" as UC5\n    usecase \"Manage Auditorium Allocation\" as UC6\n    usecase \"Manage Speaker Sessions\" as UC7\n    usecase \"Invite Guest Speakers\" as UC8\n    usecase \"Track Attendance\" as UC9\n    usecase \"Coordinate Event Timings\" as UC10\n    usecase \"Promote Sponsor Branding\" as UC11\n    usecase \"Manage Seminar Session Content\" as UC12\n}\n\nAudience --> UC1\nAudience --> UC2\nAudience --> UC3\nAudience --> UC4\nAudience --> UC5\n\nOrganizer --> UC6\nOrganizer --> UC7\nOrganizer --> UC8\nOrganizer --> UC9\nOrganizer --> UC10\n\nGuest_Speaker --> UC7\nGuest_Speaker --> UC12\n\nSponsor --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for a project management system that supports the planning, execution, and monitoring of projects. The system allows project managers to create project plans, assign tasks to team members, and track progress. Team members can view their assigned tasks, update task statuses, and communicate with other team members. The system also includes features for generating reports, monitoring project timelines, and identifying potential risks. Stakeholders can access project information, review progress reports, and provide feedback on project deliverables. The platform aims to streamline project management processes and improve collaboration among team members.",
        "output": "@startuml\nleft to right direction\n\nactor ProjectManager\nactor TeamMember\nactor Stakeholder\n\n rectangle Project_Management_System {\n    usecase \"Create Project Plan\" as UC1\n    usecase \"Assign Tasks\" as UC2\n    usecase \"Track Progress\" as UC3\n    usecase \"View Assigned Tasks\" as UC4\n    usecase \"Update Task Status\" as UC5\n    usecase \"Communicate with Team\" as UC6\n    usecase \"Generate Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Risks\" as UC9\n    usecase \"Access Project Information\" as UC10\n    usecase \"Review Progress Reports\" as UC11\n    usecase \"Provide Feedback\" as UC12\n}\n\nProjectManager --> UC1\nProjectManager --> UC2\nProjectManager --> UC3\nProjectManager --> UC7\nProjectManager --> UC8\nProjectManager --> UC9\n\nTeamMember --> UC4\nTeamMember --> UC5\nTeamMember --> UC6\n\nStakeholder --> UC10\nStakeholder --> UC11\nStakeholder --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a customer relationship management (CRM) system that helps businesses manage interactions with customers and potential customers. The system allows sales teams to track leads, manage customer accounts, and analyze sales data. Marketing teams can create targeted campaigns, track customer engagement, and generate reports on campaign performance. Customer support teams can log customer inquiries, resolve issues, and provide feedback on customer satisfaction. The system aims to improve customer relationships, increase sales, and enhance overall customer experience.",
        "output": "@startuml\nleft to right direction\n\nactor SalesTeam\nactor MarketingTeam\nactor CustomerSupport\n\nrectangle CRM_System {\n    usecase \"Track Leads\" as UC1\n    usecase \"Manage Customer Accounts\" as UC2\n    usecase \"Analyze Sales Data\" as UC3\n    usecase \"Create Campaigns\" as UC4\n    usecase \"Track Customer Engagement\" as UC5\n    usecase \"Generate Reports\" as UC6\n    usecase \"Log Customer Inquiries\" as UC7\n    usecase \"Resolve Issues\" as UC8\n    usecase \"Provide Feedback\" as UC9\n}\n\nSalesTeam --> UC1\nSalesTeam --> UC2\nSalesTeam --> UC3\n\nMarketingTeam --> UC4\nMarketingTeam --> UC5\nMarketingTeam --> UC6\n\nCustomerSupport --> UC7\nCustomerSupport --> UC8\nCustomerSupport --> UC9\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a content management system (CMS) that allows users to create, manage, and publish digital content. The system supports content creation, editing, and collaboration among users. Users can upload media files, organize content into categories, and schedule content publication. The system also includes features for content approval, version control, and content analytics. Administrators can manage user permissions, monitor content performance, and ensure the security of the system. The platform aims to streamline content management processes and improve content delivery to users.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Administrator\n\nrectangle Content_Management_System {\n    usecase \"Create Content\" as UC1\n    usecase \"Edit Content\" as UC2\n    usecase \"Collaborate on Content\" as UC3\n    usecase \"Upload Media Files\" as UC4\n    usecase \"Organize Content\" as UC5\n    usecase \"Schedule Publication\" as UC6\n    usecase \"Approve Content\" as UC7\n    usecase \"Version Control\" as UC8\n    usecase \"Analyze Content\" as UC9\n    usecase \"Manage Permissions\" as UC10\n    usecase \"Monitor Performance\" as UC11\n    usecase \"Ensure Security\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC8\n\nAdministrator --> UC7\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a learning management system (LMS) that supports online education and training. The system allows instructors to create courses, upload learning materials, and assess student performance. Students can enroll in courses, access course content, and submit assignments. The system includes features for quizzes, discussions, and grading. Administrators can manage user accounts, monitor course enrollment, and generate reports on student progress. The platform aims to provide a seamless learning experience for students and instructors.",
        "output": "@startuml\nleft to right direction\n\nactor Instructor\nactor Student\nactor Administrator\n\nrectangle Learning_Management_System {\n    usecase \"Create Courses\" as UC1\n    usecase \"Upload Learning Materials\" as UC2\n    usecase \"Assess Student Performance\" as UC3\n    usecase \"Enroll in Courses\" as UC4\n    usecase \"Access Course Content\" as UC5\n    usecase \"Submit Assignments\" as UC6\n    usecase \"Take Quizzes\" as UC7\n    usecase \"Participate in Discussions\" as UC8\n    usecase \"Grade Assignments\" as UC9\n    usecase \"Manage User Accounts\" as UC10\n    usecase \"Monitor Course Enrollment\" as UC11\n    usecase \"Generate Reports\" as UC12\n}\n\nInstructor --> UC1\nInstructor --> UC2\nInstructor --> UC3\nInstructor --> UC9\n\nStudent --> UC4\nStudent --> UC5\nStudent --> UC6\nStudent --> UC7\nStudent --> UC8\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a project tracking system that helps teams manage tasks, deadlines, and progress on projects. The system allows team members to create tasks, assign tasks to team members, and set deadlines for completion. Team members can update task statuses, track progress, and communicate with other team members. The system includes features for generating reports, monitoring project timelines, and identifying bottlenecks. Project managers can oversee project progress, allocate resources, and ensure project milestones are met. The platform aims to improve project efficiency, collaboration, and communication among team members.",
        "output": "@startuml\nleft to right direction\n\nactor TeamMember\nactor ProjectManager\n\nrectangle Project_Tracking_System {\n    usecase \"Create Tasks\" as UC1\n    usecase \"Assign Tasks\" as UC2\n    usecase \"Set Deadlines\" as UC3\n    usecase \"Update Task Status\" as UC4\n    usecase \"Track Progress\" as UC5\n    usecase \"Communicate with Team\" as UC6\n    usecase \"Generate Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Bottlenecks\" as UC9\n    usecase \"Oversee Project Progress\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Milestones\" as UC12\n}\n\nTeamMember --> UC1\nTeamMember --> UC2\nTeamMember --> UC3\nTeamMember --> UC4\nTeamMember --> UC5\nTeamMember --> UC6\nTeamMember --> UC7\n\nProjectManager --> UC8\nProjectManager --> UC9\nProjectManager --> UC10\nProjectManager --> UC11\nProjectManager --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a task management system that helps individuals organize and track their tasks. The system allows users to create tasks, set priorities, and deadlines for completion. Users can update task statuses, track progress, and categorize tasks based on different criteria. The system includes features for generating task lists, setting reminders, and organizing tasks into projects. Users can also share tasks with collaborators, assign tasks to team members, and receive notifications about task updates. The platform aims to improve task management efficiency and help users stay organized.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Collaborator\n\nrectangle Task_Management_System {\n    usecase \"Create Tasks\" as UC1\n    usecase \"Set Priorities\" as UC2\n    usecase \"Set Deadlines\" as UC3\n    usecase \"Update Task Status\" as UC4\n    usecase \"Track Progress\" as UC5\n    usecase \"Categorize Tasks\" as UC6\n    usecase \"Generate Task Lists\" as UC7\n    usecase \"Set Reminders\" as UC8\n    usecase \"Organize Tasks\" as UC9\n    usecase \"Share Tasks\" as UC10\n    usecase \"Assign Tasks\" as UC11\n    usecase \"Receive Notifications\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\n\nCollaborator --> UC10\nCollaborator --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for a bug tracking system that helps software development teams manage and resolve software defects. The system allows developers to log bugs, assign bugs to team members, and track bug fixes. Team members can update bug statuses, prioritize bugs, and communicate with other team members about bug resolutions. The system includes features for generating bug reports, monitoring bug resolution timelines, and identifying recurring bugs. Project managers can oversee bug resolution progress, allocate resources to fix bugs, and ensure software quality standards are met. The platform aims to improve software quality, collaboration, and communication among team members.",
        "output": "@startuml\nleft to right direction\n\nactor Developer\nactor ProjectManager\n\nrectangle Bug_Tracking_System {\n    usecase \"Log Bugs\" as UC1\n    usecase \"Assign Bugs\" as UC2\n    usecase \"Track Bug Fixes\" as UC3\n    usecase \"Update Bug Status\" as UC4\n    usecase \"Prioritize Bugs\" as UC5\n    usecase \"Communicate with Team\" as UC6\n    usecase \"Generate Bug Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Recurring Bugs\" as UC9\n    usecase \"Oversee Bug Resolution\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Software Quality\" as UC12\n}\n\nDeveloper --> UC1\nDeveloper --> UC2\nDeveloper --> UC3\nDeveloper --> UC4\nDeveloper --> UC5\nDeveloper --> UC6\nDeveloper --> UC7\n\nProjectManager --> UC8\nProjectManager --> UC9\nProjectManager --> UC10\nProjectManager --> UC11\nProjectManager --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a customer support system that helps businesses manage customer inquiries, issues, and feedback. The system allows customer support agents to log customer inquiries, assign tickets to agents, and track ticket resolutions. Agents can update ticket statuses, prioritize tickets, and communicate with customers about issue resolutions. The system includes features for generating support reports, monitoring ticket resolution timelines, and identifying recurring issues. Managers can oversee ticket resolution progress, allocate resources to resolve issues, and ensure customer satisfaction standards are met. The platform aims to improve customer support efficiency, collaboration, and communication among support agents.",
        "output": "@startuml\nleft to right direction\n\nactor CustomerSupportAgent\nactor Manager\n\nrectangle Customer_Support_System {\n    usecase \"Log Customer Inquiries\" as UC1\n    usecase \"Assign Tickets\" as UC2\n    usecase \"Track Ticket Resolutions\" as UC3\n    usecase \"Update Ticket Status\" as UC4\n    usecase \"Prioritize Tickets\" as UC5\n    usecase \"Communicate with Customers\" as UC6\n    usecase \"Generate Support Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Recurring Issues\" as UC9\n    usecase \"Oversee Ticket Resolution\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Customer Satisfaction\" as UC12\n}\n\nCustomerSupportAgent --> UC1\nCustomerSupportAgent --> UC2\nCustomerSupportAgent --> UC3\nCustomerSupportAgent --> UC4\nCustomerSupportAgent --> UC5\nCustomerSupportAgent --> UC6\nCustomerSupportAgent --> UC7\n\nManager --> UC8\nManager --> UC9\nManager --> UC10\nManager --> UC11\nManager --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a help desk system that assists users in resolving technical issues and inquiries. The system allows users to log help desk tickets, assign tickets to support agents, and track ticket resolutions. Support agents can update ticket statuses, prioritize tickets, and communicate with users about issue resolutions. The system includes features for generating help desk reports, monitoring ticket resolution timelines, and identifying recurring issues. Managers can oversee ticket resolution progress, allocate resources to resolve issues, and ensure service level agreements are met. The platform aims to improve help desk efficiency, collaboration, and communication between users and support agents.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor SupportAgent\nactor Manager\n\nrectangle Help_Desk_System {\n    usecase \"Log Help Desk Tickets\" as UC1\n    usecase \"Assign Tickets\" as UC2\n    usecase \"Track Ticket Resolutions\" as UC3\n    usecase \"Update Ticket Status\" as UC4\n    usecase \"Prioritize Tickets\" as UC5\n    usecase \"Communicate with Users\" as UC6\n    usecase \"Generate Help Desk Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Recurring Issues\" as UC9\n    usecase \"Oversee Ticket Resolution\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Service Level Agreements\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nSupportAgent --> UC3\nSupportAgent --> UC4\nSupportAgent --> UC5\nSupportAgent --> UC6\nSupportAgent --> UC7\n\nManager --> UC8\nManager --> UC9\nManager --> UC10\nManager --> UC11\nManager --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a library management system that helps librarians manage library resources, patrons, and circulation activities. The system allows librarians to catalog books, manage patron accounts, and track book loans. Patrons can search for books, check out books, and renew book loans. The system includes features for generating library reports, monitoring book circulation, and identifying overdue books. Administrators can oversee library operations, allocate resources, and ensure library policies are enforced. The platform aims to improve library efficiency, patron services, and resource management.",
        "output": "@startuml\nleft to right direction\n\nactor Librarian\nactor Patron\nactor Administrator\n\nrectangle Library_Management_System {\n    usecase \"Catalog Books\" as UC1\n    usecase \"Manage Patron Accounts\" as UC2\n    usecase \"Track Book Loans\" as UC3\n    usecase \"Search for Books\" as UC4\n    usecase \"Check Out Books\" as UC5\n    usecase \"Renew Book Loans\" as UC6\n    usecase \"Generate Library Reports\" as UC7\n    usecase \"Monitor Book Circulation\" as UC8\n    usecase \"Identify Overdue Books\" as UC9\n    usecase \"Oversee Library Operations\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Enforce Library Policies\" as UC12\n}\n\nLibrarian --> UC1\nLibrarian --> UC2\nLibrarian --> UC3\nLibrarian --> UC7\nLibrarian --> UC8\nLibrarian --> UC9\n\nPatron --> UC4\nPatron --> UC5\nPatron --> UC6\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a hotel management system that helps hotel staff manage guest reservations, room assignments, and hotel services. The system allows hotel staff to create guest reservations, assign rooms, and track guest check-ins and check-outs. Guests can book rooms, request services, and provide feedback on their stay. The system includes features for generating hotel reports, monitoring room availability, and identifying guest preferences. Managers can oversee hotel operations, allocate resources, and ensure guest satisfaction. The platform aims to improve hotel efficiency, guest services, and room management.",
        "output": "@startuml\nleft to right direction\n\nactor HotelStaff\nactor Guest\nactor Manager\n\nrectangle Hotel_Management_System {\n    usecase \"Create Guest Reservations\" as UC1\n    usecase \"Assign Rooms\" as UC2\n    usecase \"Track Check-Ins and Check-Outs\" as UC3\n    usecase \"Book Rooms\" as UC4\n    usecase \"Request Services\" as UC5\n    usecase \"Provide Feedback\" as UC6\n    usecase \"Generate Hotel Reports\" as UC7\n    usecase \"Monitor Room Availability\" as UC8\n    usecase \"Identify Guest Preferences\" as UC9\n    usecase \"Oversee Hotel Operations\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Guest Satisfaction\" as UC12\n}\n\nHotelStaff --> UC1\nHotelStaff --> UC2\nHotelStaff --> UC3\nHotelStaff --> UC7\nHotelStaff --> UC8\nHotelStaff --> UC9\n\nGuest --> UC4\nGuest --> UC5\nGuest --> UC6\n\nManager --> UC10\nManager --> UC11\nManager --> UC12\n@enduml"
    },
    {
        "input": "Draw a use case diagram for this system. The Prime Minister of India has announced a new scheme of National Health ID on August 15, 2020. According to this proposal, every Indian will get a unique Health ID based on their mobile number or Aadhaar number. The National Health ID will be a repository of all health-related information of a person. According to the National Health Authority (NHA), every patient who wishes to have their health records available digitally must start by creating a Health ID. Each Health ID will be linked to a health data consent manager – such as the National Digital Health Mission (NDHM) which will be used to seek the patient’s consent and allow for seamless flow of health information from the Personal Health Records module. This Health ID prevents various insurance frauds committed by several health agencies, hospitals including both doctors and patients. This will reduce the paper works and help patients easily maintain their health records. It can be used for further diagnosis. Children who are born after the implementation of the National Health ID will have all their medications recorded including the vaccines, etc.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor HealthAuthority\nactor HealthDataConsentManager\n\nrectangle National_Health_ID_System {\n    usecase \"Create Health ID\" as UC1\n    usecase \"Seek Patient's Consent\" as UC2\n    usecase \"Maintain Health Records\" as UC3\n    usecase \"Use for Patient Diagnosis\" as UC4\n    usecase \"Record Medications\" as UC5\n}\n\nPatient --> UC1\nPatient --> UC3\n\nHealthDataConsentManager --> UC2\nHealthAuthority --> UC5\nHealthAuthority --> UC4\n@enduml"      
    },
    {
        "input": "Design a use case diagram. Amidst this pandemic period, students are being educated through online education platforms on smartphones and other similar devices. Many underprivileged children are unable to get access to such devices. Also, the people who are willing to help aren’t able to reach the needy due to lockdown. The ultimate aim of this system is to help such children by giving the collected devices from the people who were willing to help them. This system requests the donors to enter the details regarding the device they are willing to donate. It also requests the address details of the donor in order to reach them. On successful entry of such details, the user has to wait for the approval of the device. The admin has to verify the details of the device and assign it to a pickup executive for collection. This system also allows the volunteers to join the team. So that they could be helped by picking up the devices in their locality.",
        "output": "@startuml\nleft to right direction\n\nactor Donor\nactor Admin\nactor Volunteer\n\nrectangle Device_Donation_System {\n    usecase \"Enter Device Details\" as UC1\n    usecase \"Enter Address Details\" as UC2\n    usecase \"Wait for Approval\" as UC3\n    usecase \"Verify Device Details\" as UC4\n    usecase \"Assign Pickup Executive\" as UC5\n    usecase \"Join a Team\" as UC6\n}\n\nDonor --> UC1\nDonor --> UC2\nDonor --> UC3\n\nAdmin --> UC4\nAdmin --> UC5\n\nVolunteer --> UC6\n@enduml"            
    },
    {
        "input": "Design a use case diagram for a car rental system that allows users to rent cars for short periods of time. The system allows users to search for available cars, select a car for rental, and make a reservation. Users can specify the rental duration, pick-up location, and drop-off location. The system includes features for generating rental agreements, tracking rental durations, and processing payments. Administrators can manage car listings, monitor reservations, and ensure the availability of cars for rental. The platform aims to provide a convenient and efficient car rental experience for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Administrator\n\nrectangle Car_Rental_System {\n    usecase \"Search for Available Cars\" as UC1\n    usecase \"Select Car for Rental\" as UC2\n    usecase \"Make Reservation\" as UC3\n    usecase \"Specify Rental Duration\" as UC4\n    usecase \"Specify Pick&Drop Location\" as UC5\n    usecase \"Generate Rental Agreements\" as UC7\n    usecase \"Track Rental Durations\" as UC8\n    usecase \"Process Payments\" as UC9\n    usecase \"Manage Car Listings\" as UC10\n    usecase \"Monitor Reservations\" as UC11\n    usecase \"Confirm Car Availability\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nAdministrator --> UC7\nAdministrator --> UC8\nAdministrator --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"   
    },
    {
        "input": "Draw a use case diagram for this. College magazines provide an authoritative, recognizable and artistic platform of expression to the student body. However, paperback college magazines narrow the scope for a more extensive audience and are lavish of important resources like paper, especially when the magazines are printed seasonally on campus year after year. Consequently, many students may not be able to make it to the print media of the college. To subdue these shortcomings, an online college magazine system can be developed. This system will enable students of the college to liberally generate content for and about the college. Anyone in any part of the world can read and rate articles being published in the online magazine. Resource usage is much more minimal, but the experience is as efficient as in paperback magazines. With the help of this software, they will be able to read, write, draft, edit and publish all forms of content like articles, essays, op-eds, photography, poetry, etc. Selected students and faculty can regularly write and post articles for the magazine. Contributors (like alumni) can write for the magazine occasionally. Guests or readers can read, comment on and rate articles. Guests can also act as contributors if interested. Moderators will review articles before publishing to decide the pertinence of content. Articles will be organized based on categories appropriate to the workflow of the college. Thus, the implementation of this system will benefit all members of the college by providing consistent campus-related news and also by improving the literary and technical insight of faculty and students who write for the magazine.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Guest\nactor Moderator\n\nUser <|-- Student\nUser <|-- Faculty\nUser <|-- Contributor\n\nrectangle Online_College_Magazine_System {\n    usecase \"Manage Articles\" as UC1\n    usecase \"Rate Articles\" as UC2\n    usecase \"Comment on Articles\" as UC3\n    usecase \"Organize Articles\" as UC4\n    usecase \"Generate Content\" as UC5\n    usecase \"Review Articles\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\n\nGuest --> UC2\nGuest --> UC3\nGuest --> UC5\n\nModerator --> UC6\n@enduml"          
    },
    {
        "input": "Give use case diagram for this case study. Rules and regulations are paramount to all aspects of life. Certain proponents have asserted that crime which is a violation against laws of the society, is integral to the human nature and hence the society can never be completely free from it. In the existing system, all work is done on papers, so it is very difficult to secure crime reports data. This system needs more manpower to track the records of crimes and it lacks security. Modern society is characterized by increasing levels of risk posed by internal and external security threats. This poses the importance to develop an automated crime management system to keep a record of the crime and the criminals involved. The proposed crime bureau is a database system in which the police keeps the record of criminals who have been arrested, to be arrested, or escaped and the complaints. This will help the police department in enhanced management of information. The main entities in the whole process include; the petitioner (the person who files a First Incident Report (FIR)), victim, accused or criminal, case and investigating officer. The proposed crime record management system can overcome all the limitations of the existing system. This system provides proper security and reduces the manual work. This project helps to maintain a database through which the entire crime activities in the state can be monitored.",
        "output": "@startuml\nleft to right direction\n\nactor Petitioner\nactor Victim\nactor Accused\nactor InvestigatingOfficer\n\nrectangle Crime_Record_Management_System {\n    usecase \"File FIR\" as UC1\n    usecase \"Record Complaints\" as UC2\n    usecase \"Track Criminals\" as UC3\n    usecase \"Manage Cases\" as UC4\n    usecase \"Monitor Crime Activities\" as UC5\n}\n\nPetitioner --> UC1\nVictim --> UC2\nAccused --> UC3\nInvestigatingOfficer --> UC4\nInvestigatingOfficer --> UC5\n@enduml"
    },
    {
        "input": "Design use case diagram for this system. In our modern metropolitan city, people don’t follow the traffic rules. The outcome of it is unfortunate. In India, 64.4% of the total deaths are accounted by road accidents. As the automobiles get revolutionized the number of vehicles keep increasing. Conventional traffic signals are not efficient and strict. Smart traffic system aims in minimizing the risks of accidents by precautionary taking actions on people who violate the traffic rules. Cameras to monitor the roads with high traffic levels in order to facilitate the traffic signal. Helmet and seat belt detection using image processing to warn the drivers. Details of the driver are submitted to the traffic police, when he/she violates the law more than two times via the number plate which is captured by cameras. Street lights are operated based on the population density on road at night, thereby saving electricity. License will be cancelled as penalty, if the law is violated. Details of the driver will be passed on to successive signals on account of speeding. Automated traffic lights regulate the traffic flow in order to avoid congestions.",
        "output": "@startuml\nleft to right direction\n\nactor TrafficPolice\n\nrectangle Smart_Traffic_System {\n    usecase \"Monitor Roads\" as UC1\n    usecase \"Detect Helmet/Seat Belt\" as UC2\n    usecase \"Submit Driver Violations\" as UC3\n    usecase \"Operate Street Lights\" as UC4\n    usecase \"Cancel License\" as UC5\n    usecase \"Regulate Traffic Lights\" as UC6\n}\n\nUC2 --> UC3 : <<extend>>\n\nTrafficPolice --> UC1\nTrafficPolice --> UC2\nTrafficPolice --> UC3\nTrafficPolice --> UC5\nUC3 --> UC5 :<<include>>\n\nUC1 --> UC4 : <<include>>\nUC1 --> UC6 : <<include>>\n@enduml"          
    },
    {
        "input": "Job seekers work hard to gain the right skills and knowledge to give them an edge over others in the role they seek. However, at times, despite their best efforts, one may find it difficult to move a step closer to this sought-after job. Hence a platform for listing out the availability of jobs irrespective of the field is required. Furthermore, a job site serves a dual purpose. On one hand, it lists out the availability of jobs to candidates, and on the other, it serves as a database of registered candidate’s profiles for companies to shortlist. The objective is to develop a software solution to predict the availability of jobs based on location, sectors, package, platform, interest and eligibility. As it is important to keep the candidates engaged during their job search, it is important to provide facets on the above-mentioned criteria so that they can narrow down to the jobs of their choice.",
        "output": "@startuml\nleft to right direction\n\nactor JobSeeker\nactor Company\n\nrectangle Job_Portal_System {\n    usecase \"See Available Job Listings\" as UC1\n    usecase \"See Job Availability Predictions\" as UC2\n    usecase \"Search Jobs by Filters\" as UC3\n    usecase \"Register Profile\" as UC4\n    usecase \"Shortlist Candidates\" as UC5\n    usecase \"Post Job Listings\" as UC6\n    usecase \"Apply for Job\" as UC7\n}\n\nJobSeeker --> UC1\nJobSeeker --> UC2\nJobSeeker --> UC3\nJobSeeker --> UC4\nJobSeeker --> UC7\n\nCompany --> UC4\nCompany --> UC5\nCompany --> UC6\n@enduml"          
    },
    {
        "input": "Coronavirus pandemic is spreading in large numbers. Experts suggest that social distancing has been used for a long time as one of the methods to reduce the spike in diseases and infectious illnesses. In India alone, the cases have sharply spiked up in the past two weeks, which has led to imposing even tougher measures. By identifying ‘hotspots’, necessary mapping can help deal with the problem of community transmission, i.e., when cases start spreading within the population in such a way that people don’t know how they were exposed to the contagion. This is known as ‘Stage 3’ of an outbreak. The Aarogya Setu app, which is a coronavirus tracker of sorts works on the basis of contact tracing and can help a user identify possible coronavirus ‘hotspot’ around his or her area. It can help people stay safe and adopt necessary precautions in some areas where there are cases and accordingly, help stop or prevent community transmission to an extent. On the basis of geotagging, it can also alert a specific user about their proximity to a nearby infection case or hotspot. The app also helps users self-identify their risk and monitor their health assessment, considering the times when it can get difficult (and most of all, is not particularly safe to step out and visit health clinics). Aarogya Setu app also helps people identify the symptoms, alert them about the best safety precautions and other relevant information concerning the spread of COVID-19. While this is a noble initiative, the app also lists down basic quarantine measures for those who are considered to be in the ‘high-risk’ category. It can also help people, who have had a travel history self-quarantine and prevent any risk of transmission. I want a use case diagram for this.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Aarogya_Setu_App {\n    usecase \"Identify Hotspots\" as UC1\n    usecase \"Contact Tracing\" as UC2\n    usecase \"Check Proximity to Infection\" as UC3\n    usecase \"Self-Identify Risk\" as UC4\n    usecase \"Monitor Health Assessment\" as UC5\n    usecase \"Identify Symptoms\" as UC6\n    usecase \"Receive Safety Precautions Alerts\" as UC7\n    usecase \"Access Quarantine Measures List\" as UC8\n    usecase \"Get Self-Quarantine Help\" as UC9\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\n@enduml"          
    },


    {
        "input": "Create a use case diagram for a wedding planner system that helps couples plan and organize their wedding events. The system allows couples to create wedding budgets, select venues, and hire vendors for services like catering, photography, and entertainment. Couples can manage guest lists, send invitations, and track RSVPs. The system includes features for creating wedding timelines, managing seating arrangements, and coordinating event logistics. Wedding planners can oversee the planning process, communicate with vendors, and ensure that all aspects of the wedding are executed smoothly. The platform aims to streamline wedding planning processes and create memorable experiences for couples and their guests.",
        "output": "@startuml\nleft to right direction\n\nactor Couple\nactor WeddingPlanner\n\nrectangle Wedding_Planner_System {\n    usecase \"Create Wedding Budget\" as UC1\n    usecase \"Select Venues\" as UC2\n    usecase \"Hire Vendors\" as UC3\n    usecase \"Manage Guest Lists\" as UC4\n    usecase \"Send Invitations\" as UC5\n    usecase \"Track RSVPs\" as UC6\n    usecase \"Create Wedding Timelines\" as UC7\n    usecase \"Manage Seating Arrangements\" as UC8\n    usecase \"Coordinate Event Logistics\" as UC9\n    usecase \"Oversee Planning Process\" as UC10\n    usecase \"Communicate with Vendors\" as UC11\n    usecase \"Ensure Smooth Execution\" as UC12\n}\n\nCouple --> UC1\nCouple --> UC2\nCouple --> UC3\nCouple --> UC4\nCouple --> UC5\nCouple --> UC6\nCouple --> UC7\nCouple --> UC8\nCouple --> UC9\n\nWeddingPlanner --> UC10\nWeddingPlanner --> UC11\nWeddingPlanner --> UC12\n@enduml"

    },
    {
        "input": "Create a use case diagram for an arcade management system that helps arcade owners manage games, tickets, and customer interactions. The system allows arcade owners to add new games, set game prices, and track game usage. Customers can purchase tickets, play games, and redeem tickets for prizes. The system includes features for managing customer accounts, tracking ticket balances, and generating reports on game popularity. Arcade owners can oversee arcade operations, allocate resources, and ensure customer satisfaction. The platform aims to provide a fun and engaging experience for arcade customers.",
        "output": "@startuml\nleft to right direction\n\nactor ArcadeOwner\nactor Customer\n\nrectangle Arcade_Management_System {\n    usecase \"Add New Games\" as UC1\n    usecase \"Set Game Prices\" as UC2\n    usecase \"Track Game Usage\" as UC3\n    usecase \"Purchase Tickets\" as UC4\n    usecase \"Play Games\" as UC5\n    usecase \"Redeem Tickets\" as UC6\n    usecase \"Manage Customer Accounts\" as UC7\n    usecase \"Track Ticket Balances\" as UC8\n    usecase \"Generate Reports\" as UC9\n    usecase \"Oversee Arcade Operations\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Customer Satisfaction\" as UC12\n}\n\nArcadeOwner --> UC1\nArcadeOwner --> UC2\nArcadeOwner --> UC3\nArcadeOwner --> UC7\nArcadeOwner --> UC8\nArcadeOwner --> UC9\nArcadeOwner --> UC10\nArcadeOwner --> UC11\nArcadeOwner --> UC12\n\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n@enduml"
    },
    {
        "input": "Create a use case diagram for a mobile application that helps blind people navigate and explore their surroundings. The application uses GPS technology to provide audio directions, location information, and points of interest to users. Blind users can search for nearby places, plan routes, and receive real-time updates on their location. The application includes features for setting preferences, saving favorite locations, and accessing emergency services. The platform aims to improve the independence and mobility of blind individuals in urban environments.",
        "output": "@startuml\nleft to right direction\n\nactor BlindUser\n\nrectangle Blind_Navigation_App {\n    usecase \"Get Audio Directions\" as UC1\n    usecase \"Search for Nearby Places\" as UC2\n    usecase \"Plan Routes\" as UC3\n    usecase \"Receive Real-Time Updates\" as UC4\n    usecase \"Set Preferences\" as UC5\n    usecase \"Save Favorite Locations\" as UC6\n    usecase \"Access Emergency Services\" as UC7\n}\n\nBlindUser --> UC1\nBlindUser --> UC2\nBlindUser --> UC3\nBlindUser --> UC4\nBlindUser --> UC5\nBlindUser --> UC6\nBlindUser --> UC7\n@enduml"

    },
    {
        "input": "Create a use case diagram for a mobile application that translates sign language gestures into text and speech. The application uses image recognition technology to interpret hand movements and gestures made by users. Deaf users can communicate with hearing individuals by signing words and phrases, which are then converted into text or spoken words. The application includes features for customizing sign language dictionaries, saving common phrases, and adjusting translation settings. The platform aims to bridge the communication gap between deaf and hearing individuals.",
        "output": "@startuml\nleft to right direction\n\nactor DeafUser\nactor HearingUser\n\nrectangle Sign_Language_Translator_App {\n    usecase \"Translate Sign Language Gestures\" as UC1\n    usecase \"Communicate with Hearing Users\" as UC2\n    usecase \"Convert Gestures to Text\" as UC3\n    usecase \"Convert Gestures to Speech\" as UC4\n    usecase \"Customize Dictionaries\" as UC5\n    usecase \"Save Common Phrases\" as UC6\n    usecase \"Adjust Translation Settings\" as UC7\n}\n\nDeafUser --> UC1\nDeafUser --> UC2\nDeafUser --> UC3\nDeafUser --> UC4\nDeafUser --> UC5\nDeafUser --> UC6\nDeafUser --> UC7\n\nHearingUser --> UC2\n@enduml"
    },
    {
        "input": "Create a use case diagram for a glacier melting prediction system that helps scientists monitor and analyze the melting of glaciers due to climate change. The system uses satellite imagery, weather data, and historical records to predict the rate of glacier melting and its impact on sea levels. Scientists can input data, run simulations, and visualize the results of glacier melting predictions. The system includes features for generating reports, sharing data with other researchers, and identifying trends in glacier melting patterns. The platform aims to provide valuable insights into the effects of climate change on glaciers and the environment.",
        "output": "@startuml\nleft to right direction\n\nactor Scientist\n\nrectangle Glacier_Melting_Prediction_System {\n    usecase \"Input Data\" as UC1\n    usecase \"Run Simulations\" as UC2\n    usecase \"Visualize Results\" as UC3\n    usecase \"Generate Reports\" as UC4\n    usecase \"Share Data\" as UC5\n    usecase \"Identify Trends\" as UC6\n}\n\nScientist --> UC1\nScientist --> UC2\nScientist --> UC3\nScientist --> UC4\nScientist --> UC5\nScientist --> UC6\n@enduml"
    },
    {
        "input": "Create a use case diagram for an air quality monitoring system that helps environmental agencies track and analyze air pollution levels in urban areas. The system uses sensors, weather data, and pollution sources to measure air quality parameters such as particulate matter, ozone, and nitrogen dioxide. Environmental agencies can monitor real-time air quality data, set pollution thresholds, and issue alerts for high pollution levels. The system includes features for generating air quality reports, mapping pollution sources, and identifying trends in air pollution patterns. The platform aims to improve air quality monitoring and management in urban environments.",
        "output": "@startuml\nleft to right direction\n\nactor EnvironmentalAgency\n\nrectangle Air_Quality_Monitoring_System {\n    usecase \"Monitor Air Quality Data\" as UC1\n    usecase \"Set Pollution Thresholds\" as UC2\n    usecase \"Issue Pollution Alerts\" as UC3\n    usecase \"Generate Reports\" as UC4\n    usecase \"Map Pollution Sources\" as UC5\n    usecase \"Identify Trends\" as UC6\n}\n\nEnvironmentalAgency --> UC1\nEnvironmentalAgency --> UC2\nEnvironmentalAgency --> UC3\nEnvironmentalAgency --> UC4\nEnvironmentalAgency --> UC5\nEnvironmentalAgency --> UC6\n@enduml"
    },
    {
        "input": "Create a use case diagram for a diagramming tool that helps software engineers create UML diagrams, flowcharts, and other visual representations of software systems. The tool provides a user-friendly interface for designing diagrams, adding shapes and connectors, and customizing visual elements. Software engineers can collaborate on diagrams, share diagrams with team members, and export diagrams in various formats. The tool includes features for version control, diagram templates, and integration with other software development tools. The platform aims to streamline the diagramming process and enhance communication among software development teams.",
        "output": "@startuml\nleft to right direction\n\nactor SoftwareEngineer\nactor TeamMember\n\nrectangle Diagramming_Tool {\n    usecase \"Create UML Diagrams\" as UC1\n    usecase \"Create Flowcharts\" as UC2\n    usecase \"Customize Visual Elements\" as UC3\n    usecase \"Collaborate on Diagrams\" as UC4\n    usecase \"Share Diagrams\" as UC5\n    usecase \"Export Diagrams\" as UC6\n    usecase \"Version Control\" as UC7\n    usecase \"Diagram Templates\" as UC8\n    usecase \"Integrate with Other Tools\" as UC9\n}\n\nSoftwareEngineer --> UC1\nSoftwareEngineer --> UC2\nSoftwareEngineer --> UC3\nSoftwareEngineer --> UC4\nSoftwareEngineer --> UC5\nSoftwareEngineer --> UC6\nSoftwareEngineer --> UC7\nSoftwareEngineer --> UC8\nSoftwareEngineer --> UC9\n\nTeamMember --> UC4\nTeamMember --> UC5\nTeamMember --> UC6\n@enduml"
    },
    {
        "input": "Create a use case diagram for a fitness application that helps users track their workouts, set fitness goals, and monitor their progress. The application allows users to log exercises, track calories burned, and create personalized workout plans. Users can set fitness goals, view workout summaries, and receive notifications for workout reminders. The application includes features for tracking nutrition, logging meals, and calculating daily calorie intake. Users can monitor their nutrition intake, view meal summaries, and receive alerts for meal planning. The platform aims to promote healthy lifestyles, improve fitness habits, and enhance user well-being.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Fitness_Application {\n    usecase \"Log Exercises\" as UC1\n    usecase \"Track Calories Burned\" as UC2\n    usecase \"Create Workout Plans\" as UC3\n    usecase \"Set Fitness Goals\" as UC4\n    usecase \"View Workout Summaries\" as UC5\n    usecase \"Receive Workout Reminders\" as UC6\n    usecase \"Track Nutrition\" as UC7\n    usecase \"Log Meals\" as UC8\n    usecase \"Calculate Calorie Intake\" as UC9\n    usecase \"Monitor Nutrition Intake\" as UC10\n    usecase \"View Meal Summaries\" as UC11\n    usecase \"Receive Meal Planning Alerts\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\n@enduml"
    },
    {
        "input": "Create a use case diagram for a hostel finding application that helps students search for and book hostel accommodations near their educational institutions. The application allows students to search for hostels based on location, price, and amenities. Students can view hostel details, check availability, and book rooms online. The application includes features for filtering search results, viewing hostel reviews, and comparing hostel options. Students can manage bookings, receive booking confirmations, and access directions to hostels. The platform aims to simplify the process of finding and booking hostel accommodations for students.",
        "output": "@startuml\nleft to right direction\n\nactor Student\n\nrectangle Hostel_Finding_Application {\n    usecase \"Search Hostels\" as UC1\n    usecase \"Book Hostel Accommodations\" as UC2\n    usecase \"Filter Search Results\" as UC3\n    usecase \"View Hostel Reviews\" as UC4\n    usecase \"Compare Hostel Options\" as UC5\n    usecase \"Manage Bookings\" as UC6\n    usecase \"Receive Booking Confirmations\" as UC7\n    usecase \"Access Directions to Hostels\" as UC8\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\nStudent --> UC6\nStudent --> UC7\nStudent --> UC8\n@enduml"
    },
    {
        "input": "Create a use case diagram for a messaging application that allows users to send text messages, photos, videos, and voice messages to their contacts. The application supports group chats, message encryption, and multimedia sharing. Users can create chat groups, add or remove participants, and customize chat settings. The application includes features for sending notifications, archiving messages, and blocking contacts. Users can manage message storage, view message histories, and receive message alerts. The platform aims to facilitate communication and collaboration among users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Messaging_Application {\n    usecase \"Send Text Messages\" as UC1\n    usecase \"Send Photos\" as UC2\n    usecase \"Send Videos\" as UC3\n    usecase \"Send Voice Messages\" as UC4\n    usecase \"Support Group Chats\" as UC5\n    usecase \"Encrypt Messages\" as UC6\n    usecase \"Share Multimedia\" as UC7\n    usecase \"Create Chat Groups\" as UC8\n    usecase \"Add/Remove Participants\" as UC9\n    usecase \"Customize Chat Settings\" as UC10\n    usecase \"Send Notifications\" as UC11\n    usecase \"Archive Messages\" as UC12\n    usecase \"Block Contacts\" as UC13\n    usecase \"Manage Message Storage\" as UC14\n    usecase \"View Message Histories\" as UC15\n    usecase \"Receive Message Alerts\" as UC16\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\nUser --> UC16\n@enduml"
    },
    {
        "input": "Create a use case diagram for a social media application that allows users to share photos, videos, and messages with their friends. The application supports multimedia sharing, chat messaging, and story posting. Users can create posts, view stories, and send direct messages to contacts. The application includes features for adding friends, following users, and commenting on posts. Users can manage privacy settings, view activity feeds, and receive notifications for new content. The platform aims to connect users and facilitate social interactions.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Social_Media_Application {\n    usecase \"Share Photos\" as UC1\n    usecase \"Share Videos\" as UC2\n    usecase \"Share Messages\" as UC3\n    usecase \"Support Multimedia Sharing\" as UC4\n    usecase \"Support Chat Messaging\" as UC5\n    usecase \"Support Story Posting\" as UC6\n    usecase \"Create Posts\" as UC7\n    usecase \"View Stories\" as UC8\n    usecase \"Send Direct Messages\" as UC9\n    usecase \"Add Friends\" as UC10\n    usecase \"Follow Users\" as UC11\n    usecase \"Comment on Posts\" as UC12\n    usecase \"Manage Privacy Settings\" as UC13\n    usecase \"View Activity Feeds\" as UC14\n    usecase \"Receive Notifications\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I need a use case diagram for a logo design application that helps users create custom logos for their businesses, websites, and products. The application provides a user-friendly interface for designing logos, selecting colors, and adding text and graphics. Users can customize logo templates, save logo designs, and download logos in various formats. The application includes features for sharing logos on social media, collaborating on logo projects, and accessing design tools. Users can manage logo projects, view design histories, and receive design suggestions. The platform aims to empower users to create professional and visually appealing logos.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Logo_Design_Application {\n    usecase \"Create Custom Logos\" as UC1\n    usecase \"Select Colors\" as UC2\n    usecase \"Add Text and Graphics\" as UC3\n    usecase \"Customize Logo Templates\" as UC4\n    usecase \"Save Logo Designs\" as UC5\n    usecase \"Download Logos\" as UC6\n    usecase \"Share Logos\" as UC7\n    usecase \"Collaborate on Projects\" as UC8\n    usecase \"Access Design Tools\" as UC9\n    usecase \"Manage Logo Projects\" as UC10\n    usecase \"View Design Histories\" as UC11\n    usecase \"Receive Design Suggestions\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\n@enduml"
    },
    {
        "input": "Create a use case diagram for an e-commerce named Daraz platform that allows users to browse products, add items to their cart, and make purchases online. The platform supports product categories, search filters, and product recommendations. Users can create accounts, view order histories, and track order shipments. The platform includes features for processing payments, managing inventory, and generating sales reports. Administrators can add new products, update product listings, and monitor user activity. The platform aims to provide a seamless and secure online shopping experience for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Administrator\n\nrectangle Daraz_E-Commerce_Platform {\n    usecase \"Browse Products\" as UC1\n    usecase \"Add Items to Cart\" as UC2\n    usecase \"Make Purchases\" as UC3\n    usecase \"Support Product Categories\" as UC4\n    usecase \"Support Search Filters\" as UC5\n    usecase \"Provide Product Recommendations\" as UC6\n    usecase \"Create Accounts\" as UC7\n    usecase \"View Order Histories\" as UC8\n    usecase \"Track Order Shipments\" as UC9\n    usecase \"Process Payments\" as UC10\n    usecase \"Manage Inventory\" as UC11\n    usecase \"Generate Sales Reports\" as UC12\n    usecase \"Add New Products\" as UC13\n    usecase \"Update Product Listings\" as UC14\n    usecase \"Monitor User Activity\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\n\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Create a use case diagram for a bidding application that allows users to participate in online auctions, place bids on items, and win auctions. The application supports auction categories, bid notifications, and auction countdowns. Users can create accounts, view auction listings, and place bids on items. The application includes features for tracking bid histories, managing auction wins, and receiving auction alerts. Users can manage auction activities, view auction results, and receive payment instructions. The platform aims to provide an engaging and competitive bidding experience for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Bidding_Application {\n    usecase \"Participate in Online Auctions\" as UC1\n    usecase \"Place Bids on Items\" as UC2\n    usecase \"Win Auctions\" as UC3\n    usecase \"Support Auction Categories\" as UC4\n    usecase \"Provide Bid Notifications\" as UC5\n    usecase \"Include Auction Countdowns\" as UC6\n    usecase \"Create Accounts\" as UC7\n    usecase \"View Auction Listings\" as UC8\n    usecase \"Track Bid Histories\" as UC9\n    usecase \"Manage Auction Wins\" as UC10\n    usecase \"Receive Auction Alerts\" as UC11\n    usecase \"Manage Auction Activities\" as UC12\n    usecase \"View Auction Results\" as UC13\n    usecase \"Receive Payment Instructions\" as UC14\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\n@enduml"
    },
    {
        "input": "Create a use case diagram for a house-helper/maid finding application that helps users find and hire domestic helpers for household chores. The application allows users to search for helpers based on services, availability, and ratings. Users can view helper profiles, request services, and schedule appointments. The application includes features for managing bookings, tracking service histories, and providing feedback on helpers. Users can manage helper preferences, view service summaries, and receive notifications for service reminders. The platform aims to simplify the process of finding and hiring domestic helpers for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle House_Helper_Finding_Application {\n    usecase \"Search for Helpers\" as UC1\n    usecase \"Hire Domestic Helpers\" as UC2\n    usecase \"View Helper Profiles\" as UC3\n    usecase \"Request Services\" as UC4\n    usecase \"Schedule Appointments\" as UC5\n    usecase \"Manage Bookings\" as UC6\n    usecase \"Track Service Histories\" as UC7\n    usecase \"Provide Feedback on Helpers\" as UC8\n    usecase \"Manage Helper Preferences\" as UC9\n    usecase \"View Service Summaries\" as UC10\n    usecase \"Receive Service Reminders\" as UC11\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\n@enduml"
    },
    {
        "input": "I want a use case diagram for a pharmaceutical supply chain management system that helps pharmaceutical companies manage the production, distribution, and sales of pharmaceutical products. The system allows companies to track inventory, manage orders, and monitor shipments. Companies can input production data, generate purchase orders, and track product deliveries. The system includes features for managing suppliers, tracking sales data, and generating reports on product performance. Administrators can oversee supply chain operations, allocate resources, and ensure product quality. The platform aims to streamline pharmaceutical supply chain processes and improve product distribution.",
        "output": "@startuml\nleft to right direction\n\nactor PharmaceuticalCompany\nactor Administrator\n\nrectangle Pharmaceutical_Supply_Chain_Management_System {\n    usecase \"Track Inventory\" as UC1\n    usecase \"Manage Orders\" as UC2\n    usecase \"Monitor Shipments\" as UC3\n    usecase \"Input Production Data\" as UC4\n    usecase \"Generate Purchase Orders\" as UC5\n    usecase \"Track Product Deliveries\" as UC6\n    usecase \"Manage Suppliers\" as UC7\n    usecase \"Track Sales Data\" as UC8\n    usecase \"Generate Reports\" as UC9\n    usecase \"Oversee Operations\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Product Quality\" as UC12\n}\n\nPharmaceuticalCompany --> UC1\nPharmaceuticalCompany --> UC2\nPharmaceuticalCompany --> UC3\nPharmaceuticalCompany --> UC4\nPharmaceuticalCompany --> UC5\nPharmaceuticalCompany --> UC6\nPharmaceuticalCompany --> UC7\nPharmaceuticalCompany --> UC8\nPharmaceuticalCompany --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "I want a use case diagram for a learn how to code application that helps users learn programming languages, practice coding exercises, and build software projects. The application provides interactive coding tutorials, code editors, and project templates. Users can create accounts, view coding lessons, and complete coding challenges. The application includes features for tracking coding progress, managing code repositories, and sharing code snippets. Users can manage coding preferences, view project histories, and receive coding tips and suggestions. The platform aims to empower users to develop coding skills and build software projects.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Learn_How_to_Code_Application {\n    usecase \"Learn Programming Languages\" as UC1\n    usecase \"Practice Coding Exercises\" as UC2\n    usecase \"Build Software Projects\" as UC3\n    usecase \"Provide Coding Tutorials\" as UC4\n    usecase \"Support Code Editors\" as UC5\n    usecase \"Include Project Templates\" as UC6\n    usecase \"Create Accounts\" as UC7\n    usecase \"View Coding Lessons\" as UC8\n    usecase \"Complete Coding Challenges\" as UC9\n    usecase \"Track Coding Progress\" as UC10\n    usecase \"Manage Code Repositories\" as UC11\n    usecase \"Share Code Snippets\" as UC12\n    usecase \"Manage Coding Preferences\" as UC13\n    usecase \"View Project Histories\" as UC14\n    usecase \"Receive Coding Tips\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a data visualization application that helps users create visual representations of data, analyze trends, and present insights. The application provides data import tools, chart templates, and customization options. Users can import data sets, create charts, and customize chart styles. The application includes features for saving visualizations, sharing data insights, and exporting charts in various formats. Users can manage data sources, view visualization histories, and receive data analysis suggestions. The platform aims to simplify the process of data visualization and enhance data-driven decision-making.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Data_Visualization_Application {\n    usecase \"Create Visual Representations\" as UC1\n    usecase \"Analyze Trends\" as UC2\n    usecase \"Present Insights\" as UC3\n    usecase \"Provide Data Import Tools\" as UC4\n    usecase \"Support Chart Templates\" as UC5\n    usecase \"Include Customization Options\" as UC6\n    usecase \"Import Data Sets\" as UC7\n    usecase \"Create Charts\" as UC8\n    usecase \"Customize Chart Styles\" as UC9\n    usecase \"Save Visualizations\" as UC10\n    usecase \"Share Data Insights\" as UC11\n    usecase \"Export Charts\" as UC12\n    usecase \"Manage Data Sources\" as UC13\n    usecase \"View Visualization Histories\" as UC14\n    usecase \"Receive Data Analysis Suggestions\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a matchmaking application named 'Find the one', that helps users find compatible partners, build relationships, and connect with like-minded individuals. The application provides user profiles, matching algorithms, and chat messaging features. Users can create profiles, view partner suggestions, and send messages to potential matches. The application includes features for tracking relationship statuses, managing connections, and receiving relationship advice. Users can manage privacy settings, view relationship histories, and receive notifications for new matches. The platform aims to facilitate meaningful connections and foster healthy relationships among users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Find_the_One_Matchmaking_Application {\n    usecase \"Find Compatible Partners\" as UC1\n    usecase \"Build Relationships\" as UC2\n    usecase \"Connect with Like-Minded Individuals\" as UC3\n    usecase \"Provide User Profiles\" as UC4\n    usecase \"Support Matching Algorithms\" as UC5\n    usecase \"Include Chat Messaging Features\" as UC6\n    usecase \"Create Profiles\" as UC7\n    usecase \"View Partner Suggestions\" as UC8\n    usecase \"Send Messages\" as UC9\n    usecase \"Track Relationship Statuses\" as UC10\n    usecase \"Manage Connections\" as UC11\n    usecase \"Receive Relationship Advice\" as UC12\n    usecase \"Manage Privacy Settings\" as UC13\n    usecase \"View Relationship Histories\" as UC14\n    usecase \"Receive New Match Notifications\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a food delivery application named 'FoodPanda' that allows users to order food from restaurants, track deliveries, and provide feedback on food quality. The application supports restaurant listings, menu browsing, and order customization. Users can create accounts, browse menus, and place orders for delivery. The application includes features for tracking order statuses, managing delivery addresses, and rating food items. Users can manage payment methods, view order histories, and receive notifications for order updates. The platform aims to provide a convenient and reliable food delivery service for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle FoodPanda_Food_Delivery_Application {\n    usecase \"Order Food from Restaurants\" as UC1\n    usecase \"Track Deliveries\" as UC2\n    usecase \"Provide Feedback on Food Quality\" as UC3\n    usecase \"Support Restaurant Listings\" as UC4\n    usecase \"Support Menu Browsing\" as UC5\n    usecase \"Support Order Customization\" as UC6\n    usecase \"Create Accounts\" as UC7\n    usecase \"Browse Menus\" as UC8\n    usecase \"Place Orders for Delivery\" as UC9\n    usecase \"Track Order Statuses\" as UC10\n    usecase \"Manage Delivery Addresses\" as UC11\n    usecase \"Rate Food Items\" as UC12\n    usecase \"Manage Payment Methods\" as UC13\n    usecase \"View Order Histories\" as UC14\n    usecase \"Receive Order Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a web vulnerability scanner that helps hackers identify security vulnerabilities in web applications and websites. The scanner uses automated tools, manual testing, and security checks to detect common vulnerabilities such as SQL injection, cross-site scripting, and insecure configurations. Hackers can input target URLs, run scans, and analyze scan results for potential vulnerabilities. The scanner includes features for generating vulnerability reports, exploiting security flaws, and providing recommendations for remediation. Hackers can manage scan settings, view scan histories, and receive alerts for critical vulnerabilities. The platform aims to assist hackers in identifying and exploiting security weaknesses in web applications.",
        "output": "@startuml\nleft to right direction\n\nactor Hacker\n\nrectangle Web_Vulnerability_Scanner {\n    usecase \"Identify Security Vulnerabilities\" as UC1\n    usecase \"Detect Common Vulnerabilities\" as UC2\n    usecase \"Run Scans\" as UC3\n    usecase \"Analyze Scan Results\" as UC4\n    usecase \"Generate Reports\" as UC5\n    usecase \"Exploit Security Flaws\" as UC6\n    usecase \"Get Recommendations\" as UC7\n    usecase \"Manage Scan Settings\" as UC8\n    usecase \"View Scan Histories\" as UC9\n    usecase \"Receive Alerts\" as UC10\n}\n\nHacker --> UC1\nHacker --> UC2\nHacker --> UC3\nHacker --> UC4\nHacker --> UC5\nHacker --> UC6\nHacker --> UC7\nHacker --> UC8\nHacker --> UC9\nHacker --> UC10\n@enduml"
    },
    {
        "input": "I want a use case diagram for a course management system that helps students enroll in courses, view course materials, and submit assignments. The system allows instructors to create courses, upload course materials, and grade assignments. Students can search for courses, enroll in courses, and access course materials online. The system includes features for tracking student progress, managing course schedules, and generating course reports. Instructors can monitor student performance, provide feedback on assignments, and communicate with students. The platform aims to facilitate online learning and improve course management processes.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Instructor\n\nrectangle Course_Management_System {\n    usecase \"Enroll in Courses\" as UC1\n    usecase \"View Course Materials\" as UC2\n    usecase \"Submit Assignments\" as UC3\n    usecase \"Create Courses\" as UC4\n    usecase \"Upload Course Materials\" as UC5\n    usecase \"Grade Assignments\" as UC6\n    usecase \"Search for Courses\" as UC7\n    usecase \"Access Course Materials\" as UC8\n    usecase \"Track Student Progress\" as UC9\n    usecase \"Manage Course Schedules\" as UC10\n    usecase \"Generate Course Reports\" as UC11\n    usecase \"Monitor Student Performance\" as UC12\n    usecase \"Provide Feedback on Assignments\" as UC13\n    usecase \"Communicate with Students\" as UC14\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC7\nStudent --> UC8\nStudent --> UC9\nStudent --> UC10\nStudent --> UC11\n\nInstructor --> UC4\nInstructor --> UC5\nInstructor --> UC6\nInstructor --> UC12\nInstructor --> UC13\nInstructor --> UC14\n@enduml"
    },
    {
        "input": "I want a use case diagram for a video streaming application that allows users to watch videos, create playlists, and share content with friends. The application supports video categories, search filters, and video recommendations. Users can create accounts, watch videos, and like or dislike videos. The application includes features for creating playlists, sharing videos on social media, and commenting on videos. Users can manage video preferences, view video histories, and receive notifications for new content. The platform aims to provide an engaging and personalized video streaming experience for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Video_Streaming_Application {\n    usecase \"Watch Videos\" as UC1\n    usecase \"Create Playlists\" as UC2\n    usecase \"Share Content\" as UC3\n    usecase \"Support Video Categories\" as UC4\n    usecase \"Support Search Filters\" as UC5\n    usecase \"Provide Video Recommendations\" as UC6\n    usecase \"Create Accounts\" as UC7\n    usecase \"Like/Dislike Videos\" as UC8\n    usecase \"Share Videos on Social Media\" as UC9\n    usecase \"Comment on Videos\" as UC10\n    usecase \"Manage Video Preferences\" as UC11\n    usecase \"View Video Histories\" as UC12\n    usecase \"Receive New Content Notifications\" as UC13\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\n@enduml"
    },
    {
        "input": "I want a use case diagram for a zoo management system that helps zookeepers manage animals, exhibits, and visitor information. The system allows zookeepers to input animal data, track feeding schedules, and monitor animal health. Visitors can view exhibit information, purchase tickets, and attend animal shows. The system includes features for managing exhibit maintenance, tracking visitor attendance, and generating reports on animal populations. Administrators can oversee zoo operations, allocate resources, and ensure visitor safety. The platform aims to streamline zoo management processes and enhance visitor experiences.",
        "output": "@startuml\nleft to right direction\n\nactor Zookeeper\nactor Visitor\nactor Administrator \n\nrectangle Zoo_Management_System {\n    usecase \"Manage Animals\" as UC1\n    usecase \"Manage Exhibits\" as UC2\n    usecase \"Manage Visitor Information\" as UC3\n    usecase \"Input Animal Data\" as UC4\n    usecase \"Track Feeding Schedules\" as UC5\n    usecase \"Monitor Animal Health\" as UC6\n    usecase \"View Exhibit Information\" as UC7\n    usecase \"Purchase Tickets\" as UC8\n    usecase \"Attend Animal Shows\" as UC9\n    usecase \"Manage Exhibit Maintenance\" as UC10\n    usecase \"Track Visitor Attendance\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Visitor Safety\" as UC15\n}\n\nZookeeper --> UC1\nZookeeper --> UC2\nZookeeper --> UC3\nZookeeper --> UC4\nZookeeper --> UC5\nZookeeper --> UC6\n\nVisitor --> UC7\nVisitor --> UC8\nVisitor --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a welcome party planner application that helps event organizers plan and manage welcome parties for new employees. The application allows organizers to create party schedules, invite guests, and coordinate party activities. New employees can view party details, RSVP to events, and participate in party games. The application includes features for managing party budgets, tracking guest attendance, and providing event feedback. Organizers can manage party themes, view party histories, and receive notifications for party updates. The platform aims to create a welcoming and engaging experience for new employees.",
        "output": "@startuml\nleft to right direction\n\nactor Organizer\nactor NewEmployee\n\nrectangle Welcome_Party_Planner_Application {\n    usecase \"Plan Welcome Parties\" as UC1\n    usecase \"Manage Party Schedules\" as UC2\n    usecase \"Invite Guests\" as UC3\n    usecase \"Coordinate Party Activities\" as UC4\n    usecase \"View Party Details\" as UC5\n    usecase \"RSVP to Events\" as UC6\n    usecase \"Participate in Party Games\" as UC7\n    usecase \"Manage Party Budgets\" as UC8\n    usecase \"Track Guest Attendance\" as UC9\n    usecase \"Provide Event Feedback\" as UC10\n    usecase \"Manage Party Themes\" as UC11\n    usecase \"View Party Histories\" as UC12\n    usecase \"Receive Party Updates\" as UC13\n}\n\nOrganizer --> UC1\nOrganizer --> UC2\nOrganizer --> UC3\nOrganizer --> UC4\nOrganizer --> UC8\nOrganizer --> UC9\nOrganizer --> UC10\nOrganizer --> UC11\nOrganizer --> UC12\nOrganizer --> UC13\n\nNewEmployee --> UC5\nNewEmployee --> UC6\nNewEmployee --> UC7\n@enduml"
    },
    {
        "input": "I want a use case diagram for a trip planner application that helps users plan and organize trips, create itineraries, and share travel experiences. The application allows users to search for destinations, book accommodations, and arrange transportation. Users can create trip plans, view trip details, and add activities to their itineraries. The application includes features for managing trip budgets, tracking travel expenses, and sharing trip photos. Users can manage travel preferences, view trip histories, and receive notifications for trip updates. The platform aims to simplify the trip planning process and enhance travel experiences for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Trip_Planner_Application {\n    usecase \"Plan Trips\" as UC1\n    usecase \"Organize Itineraries\" as UC2\n    usecase \"Share Travel Experiences\" as UC3\n    usecase \"Search Destinations\" as UC4\n    usecase \"Book Accommodations\" as UC5\n    usecase \"Arrange Transportation\" as UC6\n    usecase \"Create Trip Plans\" as UC7\n    usecase \"View Trip Details\" as UC8\n    usecase \"Add Activities to Itineraries\" as UC9\n    usecase \"Manage Trip Budgets\" as UC10\n    usecase \"Track Travel Expenses\" as UC11\n    usecase \"Share Trip Photos\" as UC12\n    usecase \"Manage Travel Preferences\" as UC13\n    usecase \"View Trip Histories\" as UC14\n    usecase \"Receive Trip Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a cafe management system that helps cafe owners manage orders, track inventory, and analyze sales data. The system allows cafe owners to input menu items, process orders, and manage customer payments. Customers can view menu options, place orders, and pay for purchases. The system includes features for tracking inventory levels, managing supplier relationships, and generating reports on sales performance. Administrators can oversee cafe operations, allocate resources, and ensure customer satisfaction. The platform aims to streamline cafe management processes and improve customer service.",
        "output": "@startuml\nleft to right direction\n\nactor CafeOwner\nactor Customer\nactor Administrator \n\nrectangle Cafe_Management_System {\n    usecase \"Manage Orders\" as UC1\n    usecase \"Track Inventory\" as UC2\n    usecase \"Analyze Sales Data\" as UC3\n    usecase \"Input Menu Items\" as UC4\n    usecase \"Process Orders\" as UC5\n    usecase \"Manage Customer Payments\" as UC6\n    usecase \"View Menu Options\" as UC7\n    usecase \"Place Orders\" as UC8\n    usecase \"Pay for Purchases\" as UC9\n    usecase \"Track Inventory Levels\" as UC10\n    usecase \"Manage Supplier Relationships\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Customer Satisfaction\" as UC15\n}\n\nCafeOwner --> UC1\nCafeOwner --> UC2\nCafeOwner --> UC3\nCafeOwner --> UC4\nCafeOwner --> UC5\nCafeOwner --> UC6\n\nCustomer --> UC7\nCustomer --> UC8\nCustomer --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a crime management system that helps law enforcement agencies manage criminal cases, track suspects, and analyze crime data. The system allows investigators to input case details, gather evidence, and identify suspects. Officers can search for criminal records, issue warrants, and make arrests. The system includes features for tracking case progress, managing evidence storage, and generating reports on crime trends. Administrators can oversee law enforcement operations, allocate resources, and ensure public safety. The platform aims to streamline crime management processes and improve crime prevention efforts.",
        "output": "@startuml\nleft to right direction\n\nactor Investigator\nactor Officer\nactor Administrator \n\nrectangle Crime_Management_System {\n    usecase \"Manage Criminal Cases\" as UC1\n    usecase \"Track Suspects\" as UC2\n    usecase \"Analyze Crime Data\" as UC3\n    usecase \"Input Case Details\" as UC4\n    usecase \"Gather Evidence\" as UC5\n    usecase \"Identify Suspects\" as UC6\n    usecase \"Search Criminal Records\" as UC7\n    usecase \"Issue Warrants\" as UC8\n    usecase \"Make Arrests\" as UC9\n    usecase \"Track Case Progress\" as UC10\n    usecase \"Manage Evidence Storage\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Public Safety\" as UC15\n}\n\nInvestigator --> UC1\nInvestigator --> UC2\nInvestigator --> UC3\nInvestigator --> UC4\nInvestigator --> UC5\nInvestigator --> UC6\n\nOfficer --> UC7\nOfficer --> UC8\nOfficer --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a country's intelligence agency that helps intelligence officers manage national security threats, track suspects, and analyze intelligence data. The system allows officers to input threat details, gather intelligence, and identify suspects. Officers can search for criminal records, issue warrants, and make arrests. The system includes features for tracking threat levels, managing intelligence storage, and generating reports on security trends. Administrators can oversee intelligence operations, allocate resources, and ensure national security. The platform aims to streamline intelligence management processes and improve security efforts.",
        "output": "@startuml\nleft to right direction\n\nactor IntelligenceOfficer\nactor Administrator \n\nrectangle Intelligence_Agency_System {\n    usecase \"Manage National Security Threats\" as UC1\n    usecase \"Track Suspects\" as UC2\n    usecase \"Analyze Intelligence Data\" as UC3\n    usecase \"Input Threat Details\" as UC4\n    usecase \"Gather Intelligence\" as UC5\n    usecase \"Identify Suspects\" as UC6\n    usecase \"Search Criminal Records\" as UC7\n    usecase \"Issue Warrants\" as UC8\n    usecase \"Make Arrests\" as UC9\n    usecase \"Track Threat Levels\" as UC10\n    usecase \"Manage Intelligence Storage\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure National Security\" as UC15\n}\n\nIntelligenceOfficer --> UC1\nIntelligenceOfficer --> UC2\nIntelligenceOfficer --> UC3\nIntelligenceOfficer --> UC4\nIntelligenceOfficer --> UC5\nIntelligenceOfficer --> UC6\n\nAdministrator --> UC7\nAdministrator --> UC8\nAdministrator --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a protest management system that helps protest organizers manage demonstrations, track participants, and analyze protest data. The system allows organizers to input protest details, gather information, and identify participants. Officers can monitor protest activities, issue permits, and ensure public safety. The system includes features for tracking protest progress, managing protest locations, and generating reports on protest trends. Administrators can oversee protest operations, allocate resources, and ensure peaceful demonstrations. The platform aims to streamline protest management processes and improve protest coordination efforts.",
        "output": "@startuml\nleft to right direction\n\nactor Organizer\nactor Officer\nactor Administrator \n\nrectangle Protest_Management_System {\n    usecase \"Manage Demonstrations\" as UC1\n    usecase \"Track Participants\" as UC2\n    usecase \"Analyze Protest Data\" as UC3\n    usecase \"Input Protest Details\" as UC4\n    usecase \"Gather Information\" as UC5\n    usecase \"Identify Participants\" as UC6\n    usecase \"Monitor Protest Activities\" as UC7\n    usecase \"Issue Permits\" as UC8\n    usecase \"Ensure Public Safety\" as UC9\n    usecase \"Track Protest Progress\" as UC10\n    usecase \"Manage Protest Locations\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Peaceful Demonstrations\" as UC15\n}\n\nOrganizer --> UC1\nOrganizer --> UC2\nOrganizer --> UC3\nOrganizer --> UC4\nOrganizer --> UC5\nOrganizer --> UC6\n\nOfficer --> UC7\nOfficer --> UC8\nOfficer --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a boycott management system that helps activists organize boycotts, track supporters, and analyze boycott data. The system allows activists to input boycott details, gather information, and identify supporters. Officers can monitor boycott activities, issue statements, and ensure public safety. The system includes features for tracking boycott progress, managing boycott locations, and generating reports on boycott trends. Administrators can oversee boycott operations, allocate resources, and ensure peaceful demonstrations. The platform aims to streamline boycott management processes and improve boycott coordination efforts.",
        "output": "@startuml\nleft to right direction\n\nactor Activist\nactor Officer\nactor Administrator \n\nrectangle Boycott_Management_System {\n    usecase \"Organize Boycotts\" as UC1\n    usecase \"Track Supporters\" as UC2\n    usecase \"Analyze Boycott Data\" as UC3\n    usecase \"Input Boycott Details\" as UC4\n    usecase \"Gather Information\" as UC5\n    usecase \"Identify Supporters\" as UC6\n    usecase \"Monitor Boycott Activities\" as UC7\n    usecase \"Issue Statements\" as UC8\n    usecase \"Ensure Public Safety\" as UC9\n    usecase \"Track Boycott Progress\" as UC10\n    usecase \"Manage Boycott Locations\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Peaceful Demonstrations\" as UC15\n}\n\nActivist --> UC1\nActivist --> UC2\nActivist --> UC3\nActivist --> UC4\nActivist --> UC5\nActivist --> UC6\n\nOfficer --> UC7\nOfficer --> UC8\nOfficer --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a disaster management system that helps emergency responders manage disasters, track victims, and analyze disaster data. The system allows responders to input disaster details, gather information, and identify victims. Officers can monitor disaster activities, issue alerts, and ensure public safety. The system includes features for tracking disaster progress, managing disaster locations, and generating reports on disaster trends. Administrators can oversee disaster operations, allocate resources, and ensure timely responses. The platform aims to streamline disaster management processes and improve disaster response efforts.",
        "output": "@startuml\nleft to right direction\n\nactor Responder\nactor Officer\nactor Administrator \n\nrectangle Disaster_Management_System {\n    usecase \"Manage Disasters\" as UC1\n    usecase \"Track Victims\" as UC2\n    usecase \"Analyze Disaster Data\" as UC3\n    usecase \"Input Disaster Details\" as UC4\n    usecase \"Gather Information\" as UC5\n    usecase \"Identify Victims\" as UC6\n    usecase \"Monitor Disaster Activities\" as UC7\n    usecase \"Issue Alerts\" as UC8\n    usecase \"Ensure Public Safety\" as UC9\n    usecase \"Track Disaster Progress\" as UC10\n    usecase \"Manage Disaster Locations\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Timely Responses\" as UC15\n}\n\nResponder --> UC1\nResponder --> UC2\nResponder --> UC3\nResponder --> UC4\nResponder --> UC5\nResponder --> UC6\n\nOfficer --> UC7\nOfficer --> UC8\nOfficer --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a disaster recovery system that helps organizations recover from disasters, restore operations, and minimize downtime. The system allows organizations to input disaster recovery plans, activate recovery procedures, and restore critical systems. IT staff can monitor recovery progress, test backup systems, and ensure data integrity. The system includes features for tracking recovery timelines, managing recovery resources, and generating reports on recovery performance. Administrators can oversee recovery operations, allocate resources, and ensure business continuity. The platform aims to streamline disaster recovery processes and improve organizational resilience.",
        "output": "@startuml\nleft to right direction\n\nactor Organization\nactor ITStaff\nactor Administrator \n\nrectangle Disaster_Recovery_System {\n    usecase \"Recover from Disasters\" as UC1\n    usecase \"Restore Operations\" as UC2\n    usecase \"Minimize Downtime\" as UC3\n    usecase \"Input Recovery Plans\" as UC4\n    usecase \"Activate Recovery Procedures\" as UC5\n    usecase \"Restore Critical Systems\" as UC6\n    usecase \"Monitor Recovery Progress\" as UC7\n    usecase \"Test Backup Systems\" as UC8\n    usecase \"Ensure Data Integrity\" as UC9\n    usecase \"Track Recovery Timelines\" as UC10\n    usecase \"Manage Recovery Resources\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Business Continuity\" as UC15\n}\n\nOrganization --> UC1\nOrganization --> UC2\nOrganization --> UC3\nOrganization --> UC4\nOrganization --> UC5\nOrganization --> UC6\n\nITStaff --> UC7\nITStaff --> UC8\nITStaff --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a calculator application that helps users perform basic arithmetic operations such as addition, subtraction, multiplication, and division. The application provides a user-friendly interface with buttons for numbers and operators. Users can input numerical values, select operators, and view calculation results. The application includes features for clearing input, performing multiple operations, and saving calculation history. Users can customize calculator settings, view calculation logs, and receive notifications for calculation errors. The platform aims to provide a convenient and efficient calculator tool for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Calculator_Application {\n    usecase \"Perform Addition\" as UC1\n    usecase \"Perform Subtraction\" as UC2\n    usecase \"Perform Multiplication\" as UC3\n    usecase \"Perform Division\" as UC4\n    usecase \"Provide User-Friendly Interface\" as UC5\n    usecase \"Input Numerical Values\" as UC6\n    usecase \"Select Operators\" as UC7\n    usecase \"View Calculation Results\" as UC8\n    usecase \"Clear Input\" as UC9\n    usecase \"Perform Multiple Operations\" as UC10\n    usecase \"Save Calculation History\" as UC11\n    usecase \"Customize Calculator Settings\" as UC12\n    usecase \"View Calculation Logs\" as UC13\n    usecase \"Receive Calculation Error Notifications\" as UC14\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a code repository platform that helps developers manage source code, collaborate on projects, and track code changes. The platform provides version control tools, code review features, and project management capabilities. Developers can create repositories, commit code changes, and merge code branches. The platform includes features for tracking code histories, managing project issues, and automating code testing. Developers can manage code access permissions, view project wikis, and receive notifications for code updates. The platform aims to streamline code collaboration and improve software development processes.",
        "output": "@startuml\nleft to right direction\n\nactor Developer\n\nrectangle Code_Repository_Platform {\n    usecase \"Manage Source Code\" as UC1\n    usecase \"Collaborate on Projects\" as UC2\n    usecase \"Track Code Changes\" as UC3\n    usecase \"Provide Version Control Tools\" as UC4\n    usecase \"Support Code Review Features\" as UC5\n    usecase \"Include Project Management Capabilities\" as UC6\n    usecase \"Create Repositories\" as UC7\n    usecase \"Commit Code Changes\" as UC8\n    usecase \"Merge Code Branches\" as UC9\n    usecase \"Track Code Histories\" as UC10\n    usecase \"Manage Project Issues\" as UC11\n    usecase \"Automate Code Testing\" as UC12\n    usecase \"Manage Code Access Permissions\" as UC13\n    usecase \"View Project Wikis\" as UC14\n    usecase \"Receive Code Update Notifications\" as UC15\n}\n\nDeveloper --> UC1\nDeveloper --> UC2\nDeveloper --> UC3\nDeveloper --> UC4\nDeveloper --> UC5\nDeveloper --> UC6\nDeveloper --> UC7\nDeveloper --> UC8\nDeveloper --> UC9\nDeveloper --> UC10\nDeveloper --> UC11\nDeveloper --> UC12\nDeveloper --> UC13\nDeveloper --> UC14\nDeveloper --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a meeting scheduler application that helps users schedule meetings, invite participants, and manage meeting details. The application provides calendar integration, availability checks, and reminder notifications. Users can create meeting requests, send invitations, and set meeting agendas. The application includes features for tracking meeting schedules, managing participant responses, and generating meeting reports. Users can customize meeting settings, view meeting histories, and receive notifications for upcoming meetings. The platform aims to streamline meeting scheduling processes and improve communication among participants.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Meeting_Scheduler_Application {\n    usecase \"Schedule Meetings\" as UC1\n    usecase \"Invite Participants\" as UC2\n    usecase \"Manage Meeting Details\" as UC3\n    usecase \"Provide Calendar Integration\" as UC4\n    usecase \"Support Availability Checks\" as UC5\n    usecase \"Send Reminder Notifications\" as UC6\n    usecase \"Create Meeting Requests\" as UC7\n    usecase \"Send Invitations\" as UC8\n    usecase \"Set Meeting Agendas\" as UC9\n    usecase \"Track Meeting Schedules\" as UC10\n    usecase \"Manage Participant Responses\" as UC11\n    usecase \"Generate Meeting Reports\" as UC12\n    usecase \"Customize Meeting Settings\" as UC13\n    usecase \"View Meeting Histories\" as UC14\n    usecase \"Receive Meeting Notifications\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I need a use case diagram for a webinar platform that helps users host webinars, engage with attendees, and analyze webinar data. The platform provides webinar creation tools, interactive features, and audience engagement options. Hosts can schedule webinars, invite participants, and present webinar content. The platform includes features for tracking attendee interactions, managing webinar recordings, and generating analytics reports. Hosts can customize webinar settings, view webinar histories, and receive notifications for upcoming webinars. The platform aims to facilitate online events and enhance audience engagement.",
        "output": "@startuml\nleft to right direction\n\nactor Host\n\nrectangle Webinar_Platform {\n    usecase \"Host Webinars\" as UC1\n    usecase \"Engage with Attendees\" as UC2\n    usecase \"Analyze Webinar Data\" as UC3\n    usecase \"Provide Webinar Creation Tools\" as UC4\n    usecase \"Support Interactive Features\" as UC5\n    usecase \"Offer Audience Engagement Options\" as UC6\n    usecase \"Schedule Webinars\" as UC7\n    usecase \"Invite Participants\" as UC8\n    usecase \"Present Webinar Content\" as UC9\n    usecase \"Track Attendee Interactions\" as UC10\n    usecase \"Manage Webinar Recordings\" as UC11\n    usecase \"Generate Analytics Reports\" as UC12\n    usecase \"Customize Webinar Settings\" as UC13\n    usecase \"View Webinar Histories\" as UC14\n    usecase \"Receive Webinar Notifications\" as UC15\n}\n\nHost --> UC1\nHost --> UC2\nHost --> UC3\nHost --> UC4\nHost --> UC5\nHost --> UC6\nHost --> UC7\nHost --> UC8\nHost --> UC9\nHost --> UC10\nHost --> UC11\nHost --> UC12\nHost --> UC13\nHost --> UC14\nHost --> UC15\n@enduml"
    },
    {
        "input": "I need a use case diagram for a video conferencing application named 'Zoom' that helps users host virtual meetings, collaborate with team members, and communicate with clients. The application provides video and audio conferencing tools, screen sharing features, and chat messaging options. Users can schedule meetings, invite participants, and join virtual rooms. The application includes features for recording meetings, managing meeting settings, and generating meeting reports. Users can customize meeting backgrounds, view meeting histories, and receive notifications for upcoming meetings. The platform aims to facilitate remote communication and improve virtual collaboration.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Zoom_Video_Conferencing_Application {\n    usecase \"Host Virtual Meetings\" as UC1\n    usecase \"Collaborate with Team Members\" as UC2\n    usecase \"Communicate with Clients\" as UC3\n    usecase \"Provide Video Conferencing Tools\" as UC4\n    usecase \"Offer Screen Sharing Features\" as UC5\n    usecase \"Support Chat Messaging Options\" as UC6\n    usecase \"Schedule Meetings\" as UC7\n    usecase \"Invite Participants\" as UC8\n    usecase \"Join Virtual Rooms\" as UC9\n    usecase \"Record Meetings\" as UC10\n    usecase \"Manage Meeting Settings\" as UC11\n    usecase \"Generate Meeting Reports\" as UC12\n    usecase \"Customize Meeting Backgrounds\" as UC13\n    usecase \"View Meeting Histories\" as UC14\n    usecase \"Receive Meeting Notifications\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a team collaboration platform named 'Slack' that helps users communicate, share files, and collaborate on projects. The platform provides messaging channels, file sharing options, and project management tools. Users can create channels, send messages, and share documents with team members. The platform includes features for tracking project progress, managing team tasks, and generating productivity reports. Users can customize notification settings, view message histories, and receive alerts for important updates. The platform aims to streamline team communication and enhance collaboration among users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Slack_Team_Collaboration_Platform {\n    usecase \"Communicate\" as UC1\n    usecase \"Share Files\" as UC2\n    usecase \"Collaborate on Projects\" as UC3\n    usecase \"Provide Messaging Channels\" as UC4\n    usecase \"Offer File Sharing Options\" as UC5\n    usecase \"Support Project Management Tools\" as UC6\n    usecase \"Create Channels\" as UC7\n    usecase \"Send Messages\" as UC8\n    usecase \"Share Documents\" as UC9\n    usecase \"Track Project Progress\" as UC10\n    usecase \"Manage Team Tasks\" as UC11\n    usecase \"Generate Productivity Reports\" as UC12\n    usecase \"Customize Notification Settings\" as UC13\n    usecase \"View Message Histories\" as UC14\n    usecase \"Receive Alerts\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Create a use case diagram for a project management tool named 'Trello' that helps users organize tasks, track project progress, and collaborate with team members. The platform provides task boards, task cards, and project timelines. Users can create task boards, add task cards, and assign tasks to team members. The platform includes features for tracking task statuses, managing project deadlines, and generating progress reports on projects. Users can customize task labels, view task histories, and receive notifications for task updates. The platform aims to streamline task management and improve project coordination among users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Trello_Project_Management_Tool {\n    usecase \"Organize Tasks\" as UC1\n    usecase \"Track Project Progress\" as UC2\n    usecase \"Collaborate with Team Members\" as UC3\n    usecase \"Provide Task Boards\" as UC4\n    usecase \"Offer Task Cards\" as UC5\n    usecase \"Support Project Timelines\" as UC6\n    usecase \"Create Task Boards\" as UC7\n    usecase \"Add Task Cards\" as UC8\n    usecase \"Assign Tasks\" as UC9\n    usecase \"Track Task Statuses\" as UC10\n    usecase \"Manage Project Deadlines\" as UC11\n    usecase \"Generate Progress Reports\" as UC12\n    usecase \"Customize Task Labels\" as UC13\n    usecase \"View Task Histories\" as UC14\n    usecase \"Receive Task Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a celebrity news and events platform that helps users stay updated on celebrity news, events, and entertainment industry trends. The platform provides news articles, event listings, and celebrity profiles. Users can read news articles, view event schedules, and explore celebrity profiles. The platform includes features for tracking trending topics, managing event registrations, and generating reports on celebrity engagements. Users can customize news preferences, view event histories, and receive notifications for upcoming events. The platform aims to provide a comprehensive and engaging platform for celebrity enthusiasts.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Celebrity_News_and_Events_Platform {\n    usecase \"Stay Updated on Celebrity News\" as UC1\n    usecase \"Explore Celebrity Profiles\" as UC2\n    usecase \"View Event Schedules\" as UC3\n    usecase \"Provide News Articles\" as UC4\n    usecase \"Offer Event Listings\" as UC5\n    usecase \"Support Celebrity Profiles\" as UC6\n    usecase \"Read News Articles\" as UC7\n    usecase \"View Event Schedules\" as UC8\n    usecase \"Explore Celebrity Profiles\" as UC9\n    usecase \"Track Trending Topics\" as UC10\n    usecase \"Manage Event Registrations\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize News Preferences\" as UC13\n    usecase \"View Event Histories\" as UC14\n    usecase \"Receive Event Notifications\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a tech-talk platform that helps users engage in tech discussions, share knowledge, and collaborate on tech projects. The platform provides discussion forums, knowledge sharing tools, and project management features. Users can participate in tech discussions, share tech resources, and collaborate on tech projects. The platform includes features for tracking tech trends, managing project tasks, and generating reports on tech innovations. Users can customize discussion preferences, view project histories, and receive notifications for tech updates. The platform aims to create a vibrant tech community and foster collaboration among tech enthusiasts.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Tech_Talk_Platform {\n    usecase \"Engage in Tech Discussions\" as UC1\n    usecase \"Share Knowledge\" as UC2\n    usecase \"Collaborate on Tech Projects\" as UC3\n    usecase \"Provide Discussion Forums\" as UC4\n    usecase \"Offer Knowledge Sharing Tools\" as UC5\n    usecase \"Support Project Management Features\" as UC6\n    usecase \"Participate in Tech Discussions\" as UC7\n    usecase \"Share Tech Resources\" as UC8\n    usecase \"Collaborate on Tech Projects\" as UC9\n    usecase \"Track Tech Trends\" as UC10\n    usecase \"Manage Project Tasks\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Discussion Preferences\" as UC13\n    usecase \"View Project Histories\" as UC14\n    usecase \"Receive Tech Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a babysitter management system that helps parents find babysitters, schedule babysitting sessions, and track babysitter activities. The system allows parents to search for available babysitters, book babysitting appointments, and communicate with babysitters. Babysitters can view babysitting requests, accept appointments, and provide care for children. The system includes features for tracking babysitting schedules, managing payment transactions, and generating reports on babysitter performance. Parents can customize babysitting preferences, view babysitter histories, and receive notifications for babysitting updates. The platform aims to provide a reliable and convenient solution for parents to manage babysitting needs.",
        "output": "@startuml\nleft to right direction\n\nactor Parent\nactor Babysitter\n\nrectangle Babysitter_Management_System {\n    usecase \"Find Babysitters\" as UC1\n    usecase \"Schedule Babysitting Sessions\" as UC2\n    usecase \"Track Babysitter Activities\" as UC3\n    usecase \"Search for Available Babysitters\" as UC4\n    usecase \"Book Babysitting Appointments\" as UC5\n    usecase \"Communicate with Babysitters\" as UC6\n    usecase \"View Babysitting Requests\" as UC7\n    usecase \"Accept Appointments\" as UC8\n    usecase \"Provide Care for Children\" as UC9\n    usecase \"Track Babysitting Schedules\" as UC10\n    usecase \"Manage Payment Transactions\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Babysitting Preferences\" as UC13\n    usecase \"View Babysitter Histories\" as UC14\n    usecase \"Receive Babysitting Updates\" as UC15\n}\n\nParent --> UC1\nParent --> UC2\nParent --> UC3\nParent --> UC4\nParent --> UC5\nParent --> UC6\n\nBabysitter --> UC7\nBabysitter --> UC8\nBabysitter --> UC9\n\nParent --> UC10\nParent --> UC11\nParent --> UC12\nParent --> UC13\nParent --> UC14\nParent --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a WhatsApp sticker maker application that helps users create custom stickers, share stickers with friends, and manage sticker collections. The application allows users to design stickers, import images, and add text to stickers. Users can save stickers to collections, share stickers in chats, and download sticker packs. The application includes features for editing sticker designs, managing sticker categories, and generating reports on sticker usage. Users can customize sticker settings, view sticker histories, and receive notifications for sticker updates. The platform aims to provide a fun and creative tool for users to express themselves through stickers.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle WhatsApp_Sticker_Maker_Application {\n    usecase \"Create Custom Stickers\" as UC1\n    usecase \"Share Stickers with Friends\" as UC2\n    usecase \"Manage Sticker Collections\" as UC3\n    usecase \"Design Stickers\" as UC4\n    usecase \"Import Images\" as UC5\n    usecase \"Add Text to Stickers\" as UC6\n    usecase \"Save Stickers to Collections\" as UC7\n    usecase \"Share Stickers in Chats\" as UC8\n    usecase \"Download Sticker Packs\" as UC9\n    usecase \"Edit Sticker Designs\" as UC10\n    usecase \"Manage Sticker Categories\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Sticker Settings\" as UC13\n    usecase \"View Sticker Histories\" as UC14\n    usecase \"Receive Sticker Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for an AI-based slides/presentation maker that helps users create professional presentations, design slides, and analyze presentation data. The platform provides templates, design tools, and data visualization options. Users can create slides, add content, and customize slide layouts. The platform includes features for tracking presentation progress, managing slide transitions, and generating reports on presentation engagement. Users can customize presentation settings, view presentation histories, and receive notifications for presentation updates. The platform aims to streamline presentation creation and enhance visual communication.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle AI_Based_Slides_Presentation_Maker {\n    usecase \"Create Professional Presentations\" as UC1\n    usecase \"Design Slides\" as UC2\n    usecase \"Analyze Presentation Data\" as UC3\n    usecase \"Provide Templates\" as UC4\n    usecase \"Offer Design Tools\" as UC5\n    usecase \"Support Data Visualization Options\" as UC6\n    usecase \"Create Slides\" as UC7\n    usecase \"Add Content\" as UC8\n    usecase \"Customize Slide Layouts\" as UC9\n    usecase \"Track Presentation Progress\" as UC10\n    usecase \"Manage Slide Transitions\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Presentation Settings\" as UC13\n    usecase \"View Presentation Histories\" as UC14\n    usecase \"Receive Presentation Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for an AI-based resume builder that helps users create professional resumes, design resume templates, and analyze resume data. The platform provides resume templates, design tools, and data visualization options. Users can create resumes, add content, and customize resume layouts. The platform includes features for tracking resume progress, managing resume sections, and generating reports on resume engagement. Users can customize resume settings, view resume histories, and receive notifications for resume updates. The platform aims to streamline resume creation and enhance job application processes.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle AI_Based_Resume_Builder {\n    usecase \"Create Professional Resumes\" as UC1\n    usecase \"Design Resume Templates\" as UC2\n    usecase \"Analyze Resume Data\" as UC3\n    usecase \"Provide Resume Templates\" as UC4\n    usecase \"Offer Design Tools\" as UC5\n    usecase \"Support Data Visualization Options\" as UC6\n    usecase \"Create Resumes\" as UC7\n    usecase \"Add Content\" as UC8\n    usecase \"Customize Resume Layouts\" as UC9\n    usecase \"Track Resume Progress\" as UC10\n    usecase \"Manage Resume Sections\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Resume Settings\" as UC13\n    usecase \"View Resume Histories\" as UC14\n    usecase \"Receive Resume Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for an AI-based chatbot that helps users interact with automated responses, provide information, and analyze user queries. The platform provides chatbot templates, design tools, and data visualization options. Users can chat with the chatbot, ask questions, and receive answers. The platform includes features for tracking chatbot interactions, managing user queries, and generating reports on chatbot performance. Users can customize chatbot settings, view chatbot histories, and receive notifications for chatbot updates. The platform aims to streamline user interactions and enhance customer support processes.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle AI_Based_Chatbot {\n    usecase \"Interact with Automated Responses\" as UC1\n    usecase \"Provide Information\" as UC2\n    usecase \"Analyze User Queries\" as UC3\n    usecase \"Provide Chatbot Templates\" as UC4\n    usecase \"Offer Design Tools\" as UC5\n    usecase \"Support Data Visualization Options\" as UC6\n    usecase \"Chat with Chatbot\" as UC7\n    usecase \"Ask Questions\" as UC8\n    usecase \"Receive Answers\" as UC9\n    usecase \"Track Chatbot Interactions\" as UC10\n    usecase \"Manage User Queries\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Chatbot Settings\" as UC13\n    usecase \"View Chatbot Histories\" as UC14\n    usecase \"Receive Chatbot Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Give a use case diagram for a VR-based training platform that helps users engage in virtual training sessions, learn new skills, and analyze training data. The platform provides VR training modules, interactive simulations, and progress tracking tools. Users can participate in VR training sessions, complete skill challenges, and receive feedback on performance. The platform includes features for tracking training progress, managing skill assessments, and generating reports on training outcomes. Users can customize training settings, view training histories, and receive notifications for training updates. The platform aims to provide an immersive and effective training experience for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle VR_Based_Training_Platform {\n    usecase \"Engage in Virtual Training Sessions\" as UC1\n    usecase \"Learn New Skills\" as UC2\n    usecase \"Analyze Training Data\" as UC3\n    usecase \"Provide VR Training Modules\" as UC4\n    usecase \"Offer Interactive Simulations\" as UC5\n    usecase \"Support Progress Tracking Tools\" as UC6\n    usecase \"Participate in VR Training Sessions\" as UC7\n    usecase \"Complete Skill Challenges\" as UC8\n    usecase \"Receive Feedback on Performance\" as UC9\n    usecase \"Track Training Progress\" as UC10\n    usecase \"Manage Skill Assessments\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Training Settings\" as UC13\n    usecase \"View Training Histories\" as UC14\n    usecase \"Receive Training Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Give a use case diagram for a VR-based social platform named 'Connexus' that helps introverts connect with like-minded individuals, engage in virtual social activities, and analyze social interactions. The platform provides VR social spaces, interactive games, and privacy settings. Users can create virtual avatars, join social events, and interact with other users. The platform includes features for tracking social connections, managing privacy preferences, and generating reports on social engagements. Users can customize social settings, view social histories, and receive notifications for social updates. The platform aims to provide a safe and inclusive space for introverts to socialize and build connections.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Connexus_VR_Social_Platform {\n    usecase \"Connect with Like-Minded Individuals\" as UC1\n    usecase \"Engage in Virtual Social Activities\" as UC2\n    usecase \"Analyze Social Interactions\" as UC3\n    usecase \"Provide VR Social Spaces\" as UC4\n    usecase \"Offer Interactive Games\" as UC5\n    usecase \"Support Privacy Settings\" as UC6\n    usecase \"Create Virtual Avatars\" as UC7\n    usecase \"Join Social Events\" as UC8\n    usecase \"Interact with Other Users\" as UC9\n    usecase \"Track Social Connections\" as UC10\n    usecase \"Manage Privacy Preferences\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Social Settings\" as UC13\n    usecase \"View Social Histories\" as UC14\n    usecase \"Receive Social Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Give a use case diagram for a VR-based public speaking app that helps users overcome stage fright, practice public speaking, and analyze speaking performance. The platform provides VR speaking environments, speech coaching tools, and audience feedback options. Users can practice speeches, receive coaching tips, and improve speaking skills. The platform includes features for tracking speaking progress, managing speech evaluations, and generating reports on speaking performance. Users can customize speaking settings, view speaking histories, and receive notifications for speaking updates. The platform aims to provide a supportive and effective tool for users to enhance their public speaking abilities.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle VR_Based_Public_Speaking_App {\n    usecase \"Overcome Stage Fright\" as UC1\n    usecase \"Practice Public Speaking\" as UC2\n    usecase \"Analyze Speaking Performance\" as UC3\n    usecase \"Provide VR Speaking Environments\" as UC4\n    usecase \"Offer Speech Coaching Tools\" as UC5\n    usecase \"Support Audience Feedback Options\" as UC6\n    usecase \"Practice Speeches\" as UC7\n    usecase \"Receive Coaching Tips\" as UC8\n    usecase \"Improve Speaking Skills\" as UC9\n    usecase \"Track Speaking Progress\" as UC10\n    usecase \"Manage Speech Evaluations\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Speaking Settings\" as UC13\n    usecase \"View Speaking Histories\" as UC14\n    usecase \"Receive Speaking Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Give a use case diagram for a VR-based physiotherapy app that helps users perform physical therapy exercises, track progress, and analyze rehabilitation data. The platform provides VR exercise routines, motion tracking tools, and progress monitoring features. Users can follow guided exercises, monitor movements, and improve physical mobility. The platform includes features for tracking exercise progress, managing rehabilitation goals, and generating reports on rehabilitation outcomes. Users can customize exercise settings, view exercise histories, and receive notifications for exercise updates. The platform aims to provide an interactive and effective tool for users to recover from injuries and improve physical well-being.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle VR_Based_Physiotherapy_App {\n    usecase \"Perform Physical Therapy Exercises\" as UC1\n    usecase \"Track Progress\" as UC2\n    usecase \"Analyze Rehabilitation Data\" as UC3\n    usecase \"Provide VR Exercise Routines\" as UC4\n    usecase \"Offer Motion Tracking Tools\" as UC5\n    usecase \"Support Progress Monitoring Features\" as UC6\n    usecase \"Follow Guided Exercises\" as UC7\n    usecase \"Monitor Movements\" as UC8\n    usecase \"Improve Physical Mobility\" as UC9\n    usecase \"Track Exercise Progress\" as UC10\n    usecase \"Manage Rehabilitation Goals\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Exercise Settings\" as UC13\n    usecase \"View Exercise Histories\" as UC14\n    usecase \"Receive Exercise Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Give a use case diagram for a Salah Tracker app that helps users track their daily prayers, set prayer reminders, and analyze prayer habits. The app provides prayer tracking tools, reminder notifications, and prayer statistics. Users can log their daily prayers, receive reminders for prayer times, and view prayer history. The app includes features for tracking prayer progress, managing prayer goals, and generating reports on prayer habits. Users can customize prayer settings, view prayer histories, and receive notifications for prayer updates. The app aims to help users maintain consistent prayer habits and improve their spiritual well-being.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Salah_Tracker_App {\n    usecase \"Track Daily Prayers\" as UC1\n    usecase \"Set Prayer Reminders\" as UC2\n    usecase \"Analyze Prayer Habits\" as UC3\n    usecase \"Provide Prayer Tracking Tools\" as UC4\n    usecase \"Offer Reminder Notifications\" as UC5\n    usecase \"Support Prayer Statistics\" as UC6\n    usecase \"Log Daily Prayers\" as UC7\n    usecase \"Receive Reminders for Prayer Times\" as UC8\n    usecase \"View Prayer History\" as UC9\n    usecase \"Track Prayer Progress\" as UC10\n    usecase \"Manage Prayer Goals\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Prayer Settings\" as UC13\n    usecase \"View Prayer Histories\" as UC14\n    usecase \"Receive Prayer Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {    
        "input": "Design a use case diagram for an online pharmacy system. The traditional method of going to a physical store, selecting medicines, and making purchases often consumes a lot of time and energy. In case of exchanges or returns, the customer needs to revisit the store, adding to the inconvenience. The Online Pharmacy platform offers a streamlined solution where customers can easily select required medicines and place orders with a single click. To use the system, the customer first creates an account, providing essential details like name, address, and identification number. Once logged in, the customer can track the status of their order in real-time. The primary goal of this platform is to ensure access to medicines for all users while allowing the admin to manage supplier information and updates efficiently.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Admin\n\nrectangle Online_Pharmacy_System {\n    usecase \"Create Account\" as UC1\n    usecase \"Select Medicines\" as UC2\n    usecase \"Place Order\" as UC3\n    usecase \"View Order Status\" as UC4\n    usecase \"Manage Supplier Information\" as UC5\n    usecase \"Provide Supplier Details\" as UC6\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\n\nAdmin --> UC5\nAdmin --> UC6\n@enduml"
    },
    {
        "input": "Design a use case diagram for a health equity management system that aims to address healthcare disparities and ensure equitable medical interventions for all patients. The system targets a wide range of users including patients, caretakers, healthcare providers, medical professionals, and government officials. One of the core functionalities of the system is patient classification based on social determinants such as economic status, health insurance, demographics, and hereditary health conditions. The system ensures that each patient receives appropriate and equitable treatment based on their classification. Patients can input their health information into the system, which is cross-verified with their public health records and data from healthcare providers. Another key feature is the notification system that alerts patients to relevant medical events and health schemes. Personal health tracking is available for patients to monitor their medical history. Healthcare providers use the system to plan health worker activity according to the needs of their patients, while the government can access the data to implement intervention schemes and improve public health outcomes. Overall, the system facilitates the registration of patients, classification of social and medical data, and collaboration between healthcare providers and government for equitable healthcare distribution.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Caretaker\nactor Healthcare_Provider\nactor Medical_Professional\nactor Government_Official\n\nrectangle Health_Equity_Management_System {\n    usecase \"Register and Upload Social and Medical Data\" as UC1\n    usecase \"Classify Patients Based on Social Determinants\" as UC2\n    usecase \"Track Personal Health\" as UC3\n    usecase \"Plan Health Worker Activity\" as UC4\n    usecase \"Notify Relevant Medical Events\" as UC5\n    usecase \"Access and Analyze Health Data\" as UC6\n    usecase \"Implement Intervention Schemes\" as UC7\n}\n\nPatient --> UC1\nPatient --> UC3\nPatient --> UC5\n\nCaretaker --> UC3\n\nHealthcare_Provider --> UC4\nHealthcare_Provider --> UC6\n\nMedical_Professional --> UC6\n\nGovernment_Official --> UC6\nGovernment_Official --> UC7\n\nUC1 --> UC2 : <<include>>\n@enduml"
    },
    {
        "input": "This case study primarily focuses on developing a health equity management application aimed at addressing healthcare disparities across different classes of patients. The application targets various users, including patients, caretakers, healthcare providers, medical professionals, and government officials. A critical feature of the system is classifying patients based on social determinants such as economic status, health insurance, medical allowances, age, disability type, and hereditary conditions. The goal is to ensure that every patient receives appropriate medical intervention and equitable treatment. Patients can input health data, which is corroborated with public health records and data from healthcare providers. The system also notifies patients of relevant medical events, health schemes, and provides personal health-tracking functionalities. Additionally, healthcare providers can plan and schedule health worker activities based on patient needs. The data is analyzed by the government to implement intervention schemes and eliminate health discrepancies. The application ensures seamless collaboration between patients, healthcare providers, and government authorities to extend healthcare services without disparities. Design a use case diagram for this case study.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Caretaker\nactor Healthcare_Provider\nactor Medical_Professional\nactor Government_Official\n\nrectangle Health_Equity_Management_System {\n    usecase \"Register and Upload Social and Medical Data\" as UC1\n    usecase \"Classify Patients Based on Social Determinants\" as UC2\n    usecase \"Track Personal Health\" as UC3\n    usecase \"Plan Health Worker Activity\" as UC4\n    usecase \"Notify Relevant Medical Events\" as UC5\n    usecase \"Access and Analyze Health Data\" as UC6\n    usecase \"Implement Intervention Schemes\" as UC7\n}\n\nPatient --> UC1\nPatient --> UC3\nPatient --> UC5\n\nCaretaker --> UC3\n\nHealthcare_Provider --> UC4\nHealthcare_Provider --> UC6\n\nMedical_Professional --> UC6\n\nGovernment_Official --> UC6\nGovernment_Official --> UC7\n\nUC1 --> UC2 : <<include>>\n@enduml"
    },
    {
        "input": "e-Med is a comprehensive personal medical assistant designed to help individuals manage their healthcare routines. It assists users in maintaining their medicine intake schedules by sending reminders for timely consumption and notifies users when they need to restock their medications. In addition to this, e-Med facilitates the scheduling of regular appointments with family doctors, either monthly or yearly, to ensure consistent medical follow-up. One of the standout features of the tool is the emergency button, which can immediately contact individuals listed in the user's emergency contact list during critical situations. The tool also enables users to keep a record of their medical history, such as blood sugar levels and blood pressure, through the Medical Notes feature. This makes e-Med an essential tool for individuals of all ages, particularly those managing ongoing health conditions, helping them maintain a healthy lifestyle with ease and reliability. Design a use case diagram for the e-Med system.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Doctor <<secondary>>\nactor Emergency_Contact <<secondary>>\n\nrectangle e-Med_System {\n    usecase \"Set Medicine Intake Schedule\" as UC1\n    usecase \"Receive Medicine Restock Notifications\" as UC2\n    usecase \"Schedule Appointments\" as UC3\n    usecase \"Press Emergency Button\" as UC4\n    usecase \"Contact Emergency Contacts\" as UC5\n    usecase \"Record Medical History\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC6\n\nEmergency_Contact --> UC5\nDoctor --> UC3\n@enduml"
    },
    {
        "input": "Health is wealth. Health plays a major role in everyone’s life. People consume unhealthy food and ruin their diet. Some medication results in side effects. This application benefits people with rich nutrients to improve their health. The application provides recommendations of nutrients they need. Users can provide their daily diet cycle and get good recommendations to improve it. They can also provide their medical reports to get nutrients according to their medical state. The user also gets the privilege to enter the disease name and get the nutrient benefit for fighting that disease. Users can ping professional nutritionists for more clarification. Users are authenticated and recommendation is provided by a trained machine learning model. Design a use case diagram for this application.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Nutritionist <<secondary>>\n\nrectangle Health_Application {\n    usecase \"Provide Daily Diet Cycle\" as UC1\n    usecase \"Get Nutrient Recommendations\" as UC2\n    usecase \"Upload Medical Reports\" as UC3\n    usecase \"Receive Medical-based Nutrient Suggestions\" as UC4\n    usecase \"Enter Disease Information\" as UC5\n    usecase \"Get Disease-based Nutrient Benefits\" as UC6\n    usecase \"Contact Nutritionist\" as UC7\n    usecase \"Authenticate User\" as UC8\n    usecase \"Receive ML-based Nutrient Recommendations\" as UC9\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\n\nNutritionist --> UC7\n@enduml"
    },
    {
        "input": "The Health Tracker application is designed to help users monitor their health and fitness goals. Users can input their daily food intake, exercise routines, and water consumption to track their progress. The app provides personalized recommendations based on the user's health data and goals. Users can set reminders for meals, workouts, and hydration to stay on track. The app also offers a social feature where users can connect with friends and share their achievements. The Health Tracker aims to promote a healthy lifestyle and provide users with the tools they need to reach their fitness goals. Design a use case diagram for the Health Tracker application.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Friend <<secondary>>\n\nrectangle Health_Tracker_Application {\n    usecase \"Input Daily Food Intake\" as UC1\n    usecase \"Track Exercise Routines\" as UC2\n    usecase \"Monitor Water Consumption\" as UC3\n    usecase \"Receive Personalized Recommendations\" as UC4\n    usecase \"Set Reminders\" as UC5\n    usecase \"Connect with Friends\" as UC6\n    usecase \"Share Achievements\" as UC7\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nFriend --> UC6\n@enduml"
    },
    {
        "input": "The FitnessPal application is designed to help users achieve their fitness goals by providing personalized workout plans and nutrition recommendations. Users can input their fitness preferences, dietary restrictions, and health goals to receive tailored suggestions. The app tracks users' progress, sets reminders for workouts and meals, and offers a variety of exercise routines and recipes. Users can connect with fitness trainers and nutritionists for additional guidance and support. The FitnessPal app aims to empower users to lead a healthy and active lifestyle. Design a use case diagram for the FitnessPal application.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Fitness_Trainer <<secondary>>\nactor Nutritionist <<secondary>>\n\nrectangle FitnessPal_Application {\n    usecase \"Input Fitness Preferences\" as UC1\n    usecase \"Provide Dietary Restrictions\" as UC2\n    usecase \"Set Health Goals\" as UC3\n    usecase \"Receive Personalized Suggestions\" as UC4\n    usecase \"Track Progress\" as UC5\n    usecase \"Set Reminders\" as UC6\n    usecase \"Access Exercise Routines\" as UC7\n    usecase \"Explore Recipes\" as UC8\n    usecase \"Connect with Fitness Trainers\" as UC9\n    usecase \"Consult Nutritionists\" as UC10\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\n\nFitness_Trainer --> UC9\nNutritionist --> UC10\n@enduml"
    },
    {
        "input": "The first phase of a person’s life is confined mainly by education and training. Hence, counselling is an important aspect for the students of the current technological generation as an individual counsellor may remain in contact with all individual students as well as parents. Student Counselling Management System will simplify the process and reduce the manual paperwork. It is used to smoothen the work of each counsellor who is facing problems currently, and making complete atomization of manual process to computerized system. The main objective of the Student Counselling Management System is to design a system to rationalize the admission to particular courses in a university/institution. Through this system, the student will be able to register for counselling if he is eligible. If the student is qualifying the criteria then he will get the information regarding the colleges and the universities in which he can apply. The main features are online admission, report generation based on student’s merit list and keeping track of counselling procedures and finally publishing results. A student can also get the information regarding how many seats have been booked and vacant seats available in the institution. Design a use case diagram for the Student Counselling Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Counsellor\n\nrectangle Student_Counselling_Management_System {\n    usecase \"Register for Counselling\" as UC1\n    usecase \"Check Eligibility Criteria\" as UC2\n    usecase \"View College Information\" as UC3\n    usecase \"Track Counselling Procedures\" as UC4\n    usecase \"Generate Reports\" as UC5\n    usecase \"Monitor Seat Availability\" as UC6\n    usecase \"Publish Results\" as UC7\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC6\nStudent --> UC7\n\nCounsellor --> UC4\nCounsellor --> UC5\n@enduml"
    },
    {
        "input": "A visa is a document issued by a country giving a certain individual permission to enter a country for a given period of time for certain purposes. It is received after several verifications through offline mode. It requires the applicant to go to the Passport Verification Centre for the verification of documents. Sometimes even the cost of getting the visa will be high as there may be middlemen involved in it. It takes anywhere from two weeks to two months to receive the visa if applied in offline mode. With the use of an online visa processing system, the middlemen entry in getting the visa gets reduced and the process of application of visa becomes easier. The overall aim of the system is that the applicant can apply for the visa from anywhere and at any time. The applicant can apply for the visa and submit it online. It provides more flexibility to the applicant compared to the existing system. There are certain types of visas that the applicant can apply for such as employment visa, study visa, resident visa, H1 visa, business visa, etc. People who apply for the visa for work, education, etc will be benefitted a lot from this system. The applicant should register by providing a valid email and a password. The applicant has to log in to apply for the visa. The credentials are checked for correctness and the applicant is allowed to log in. Once the applicant logs in, he/she will be shown the application form which asks the applicant to provide the necessary details and asks him/her to attach the necessary documents. It also provides a list of visas to choose from. He/she can also view the details of fair to visa for each country. The applicant can view, modify and delete the details applied. The system will have a provision for the administrator to view the details of what types of visas are required by the applicant. The administrator will also be able to update and delete the details of the applicants. The administrator will have a facility to interact with the Visa Consultant Officer. The Visa Consultant Officer can be able to view and check the document proofs (valid passport, Demand Draft Visa Fee I-20 form, letter of admission, aid letter, etc.) submitted by the applicant and can be able to view the purpose of application of visa. He/She has the authority to accept/reject the visa application applied by the applicant. Design a use case diagram for the Online Visa Processing System.",
        "output": "@startuml\nleft to right direction\n\nactor Applicant\nactor Administrator\nactor Visa_Consultant_Officer\n\nrectangle Online_Visa_Processing_System {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Apply for Visa\" as UC3\n    usecase \"Submit Documents\" as UC4\n    usecase \"Select Visa Type\" as UC5\n    usecase \"View/Modify Application\" as UC6\n    usecase \"Delete Application\" as UC7\n    usecase \"Check Visa Status\" as UC8\n    usecase \"Update Applicant Details\" as UC9\n    usecase \"Interact with Visa Consultant Officer\" as UC10\n    usecase \"Approve/Reject Application\" as UC11\n    usecase \"View Visa Details\" as UC12\n    usecase \"View Document Proofs\" as UC13\n}\n\nApplicant --> UC1\nApplicant --> UC2\nApplicant --> UC3\nApplicant --> UC4\nApplicant --> UC5\nApplicant --> UC6\nApplicant --> UC7\nApplicant --> UC8\n\nAdministrator --> UC9\nAdministrator --> UC10\nAdministrator --> UC11\n\nVisa_Consultant_Officer --> UC10\nVisa_Consultant_Officer --> UC12\nVisa_Consultant_Officer --> UC13\n@enduml"
    },
    {
        "input": "Placement provides the opportunity for the students to gain specific subject skills as well as real work employability skills. Placement Offices play a crucial role in providing students the necessary training and various opportunities where the students can effectively evidence their various skills and abilities on their resume. Hence, the Automation of Placement office provides a more smooth placement process for both the companies and the students. This system mainly focuses on flows between the company’s activity, Registration, Resumes, Users, Skills, and Their Training. Hence, the system comprises five modules, namely, User module, Company module, Admin module, Registration module, and Training module. Design a use case diagram for the Automation of Placement Office.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Company\nactor Admin\n\nrectangle Placement_Automation_System {\n    usecase \"Register as Student\" as UC1\n    usecase \"Register as Company\" as UC2\n    usecase \"Upload Resume\" as UC3\n    usecase \"View Available Skills Training\" as UC4\n    usecase \"Enroll in Training\" as UC5\n    usecase \"Post Job Opportunity\" as UC6\n    usecase \"Manage Placement Drives\" as UC7\n    usecase \"View Registered Companies\" as UC8\n    usecase \"Track Placement Status\" as UC9\n    usecase \"Manage Student Training Records\" as UC10\n}\n\nStudent --> UC1\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\nStudent --> UC9\n\nCompany --> UC2\nCompany --> UC6\nCompany --> UC8\n\nAdmin --> UC7\nAdmin --> UC10\n@enduml"
    },
    {
        "input": "In India, 1 out of 4 farmers own a smartphone. But they don’t use it optimally for insights on farming based on real-time data – such as weather, soil conditions, market conditions, labour availability etcetera, which can allow them to make data-driven decisions to get the best possible results. Current technologies that solve such issues are either paid services or inaccurate. They also tend to be more complex making it really hard for anyone to understand and interpret. An application if developed should primarily aim at reducing the risks, reducing the costs, improving yield, and most importantly, easy for anyone to interpret. Design a use case diagram for the Farming Insights Application.",
        "output": "@startuml\nleft to right direction\n\nactor Farmer\nactor Data_Provider <<secondary>>\nactor Market_Agent <<secondary>>\n\nrectangle Farming_Insights_Application {\n    usecase \"Get Real-Time Weather Insights\" as UC1\n    usecase \"Receive Soil Condition Alerts\" as UC2\n    usecase \"Track Market Trends\" as UC3\n    usecase \"Access Labour Availability Info\" as UC4\n    usecase \"Get Farming Recommendations\" as UC5\n    usecase \"Make Data-Driven Decisions\" as UC6\n}\n\nFarmer --> UC1\nFarmer --> UC2\nFarmer --> UC3\nFarmer --> UC4\nFarmer --> UC5\n\nUC5 --> UC6 : <<include>>\nData_Provider --> UC1\nData_Provider --> UC2\n\nMarket_Agent --> UC3\n@enduml"
    },
    {
        "input": "This system is useful in the road transport and highways field (Ministry of Road Transport and Highways). Green rides is a technical solution for the general public to guide them to a less polluted path while travelling, to know about the traffic jam, identification of accident-prone spots, meals-on-wheel, the establishment of drive-mode applications. This app consists of a Google map view on the main screen. A user can select the source to destination path which then will be processed to give a number of routes to reach the destination from source with amount of traffic at various locations in that path along with current pollution status in that route (which updates overtime). If there exists a traffic jam, a user can blow a horn to all users within a specific radius. According to his current location in the form of a small notification which the persons in the specified radius will receive. The accidents that occurred at specific spots will be reported by the user to the concerned authority who will do the rescue operations and hence the accident-prone areas will be categorized based on the number of accidents taking place and a notification appears for the user to drive slow and safe when they are in that particular location. The road authority admin checks the system often. Meals-on-wheel provides information about hotels and restaurants which are available in the chosen route so that the user can place the order as per the available menu at a particular eating place including time of service so that one need not wait at the restaurant for placing the order. Drive-mode helps to minimize the risks of accidents while attending mobile phones during driving. This module would send an SMS to the caller that the particular person is driving when the geo-coordinates show the mobile shifting of the driver is beyond some specified speed limit (say, 20 kmph). Before start of the journey, this module can be turned on. The feedback feature allows the user to give feedbacks about the accuracy in the traffic and pollution levels in a given area. Design a use case diagram for the Green Rides Application.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor \"Road Authority Admin\" as Admin\nactor \"Hotel/Restaurant\" as Restaurant\n\nrectangle Green_Rides_App {\n    usecase \"Select Route\" as UC1\n    usecase \"View Traffic and Pollution Levels\" as UC2\n    usecase \"Receive Notifications for Traffic Jams\" as UC3\n    usecase \"Report Accident Spots\" as UC4\n    usecase \"Use Meals-on-Wheel Service\" as UC5\n    usecase \"Activate Drive Mode\" as UC6\n    usecase \"Provide Feedback\" as UC7\n    usecase \"Track Accident-Prone Areas\" as UC8\n    usecase \"Monitor Road Conditions\" as UC9\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nAdmin --> UC9\nAdmin --> UC8\n\nRestaurant --> UC5\n@enduml"
    },
    {
        "input": "To provide an online platform to manage the buying, selling and storage of artistic creations provided by creators/other platforms or auctions and to organize events to exhibit these products. The system is a gallery having art pieces with its description, price and other information and the order activity, payment activity, order update activity and so on. The objective is to provide an online platform through which museums and art galleries can make use of to exhibit their collections in times of unavailable street galleries. Like in times of pandemic also people need not bother not going to a museum or art gallery instead they can have online art shopping and art exhibits. The system should be immune to any chances of misuse and unauthorized reproduction of works of arts and designs. There will be two types of users accessing the system: Admin (Creators/authority of the art displayed) and Customer (One who looks to buy the art). The main features provided for the admin are that they will be able to update, add, delete, input price, description and information about an art (stock availability), generate report of gallery and that for the customers are that they will be able to order (Payment), delete order, view end-user projected art particulars. Design a use case diagram for the Art Gallery Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Admin\n\nrectangle Art_Gallery_Management_System {\n    usecase \"Browse Art\" as UC1\n    usecase \"View Art Details\" as UC2\n    usecase \"Place Order\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Cancel Order\" as UC5\n    usecase \"Manage Art\" as UC6\n    usecase \"Update Art Details\" as UC7\n    usecase \"Generate Gallery Report\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\n\nAdmin --> UC6\nAdmin --> UC7\nAdmin --> UC8\n@enduml"
    },
    {
        "input": "The students in our college have a lot of unnecessary goods lying around, whereas many other people might be benefitted from those things. So I would like to put forward a website that can be used to sell or trade the goods with someone who needs them. It proves to be extremely useful in cases like buying and trading second-hand books or study materials among students and faculties. Initially, the website can exclusively only be accessed by the students within the PSG Tech College campus. Later on, if expected demands are met, it shall be expanded to other colleges. The sellers are given special accounts in which they are rated based on their previous records with which the buyers can choose their seller. Design a use case diagram for the College Trade Platform.",
        "output": "@startuml\nleft to right direction\n\nactor Student\n\nrectangle College_Trade_Platform {\n    usecase \"Register\" as UC1\n    usecase \"Post Items for Sale/Trade\" as UC2\n    usecase \"Search for Goods\" as UC3\n    usecase \"Rate Sellers\" as UC4\n    usecase \"Buy/Trade Items\" as UC5\n    usecase \"Access Seller Ratings\" as UC6\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC5\nStudent --> UC4\nStudent --> UC6\n@enduml"
    },
    {
        "input": "Online learning is a part of many institution’s course offerings around the world. The scope of online quiz systems increased in this pandemic situation. The objective of the system is to maintain and improve the education rate by conducting quizzes (exams). The system acts as a bridge between student and teacher to gain knowledge and monitor it by the institution (admin). This system provides teachers to know about the students in remote education. The delightful features of the system are online teachers, remote tests, auto evaluation and feedback from students. Admin is responsible for the registration of both teachers and students. Teachers define the number of questions, time of the quiz, schedule for the quiz and they can edit it. At the end of a quiz, students can see the correct answers and their performance. Design a use case diagram for the Online Quiz System.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Teacher\nactor Admin\n\nrectangle Online_Quiz_System {\n    usecase \"Register Students and Teachers\" as UC1\n    usecase \"Create Quiz\" as UC2\n    usecase \"Schedule Quiz\" as UC3\n    usecase \"Edit Quiz\" as UC4\n    usecase \"Take Quiz\" as UC5\n    usecase \"Auto Evaluation\" as UC6\n    usecase \"View Correct Answers\" as UC7\n    usecase \"Provide Feedback\" as UC8\n}\n\nAdmin --> UC1\n\nTeacher --> UC2\nTeacher --> UC3\nTeacher --> UC4\nTeacher --> UC6\n\nStudent --> UC5\nStudent --> UC7\nStudent --> UC8\n\nUC5 --> UC6 : <<include>>\n@enduml"
    },
    {
        "input": "The book bank management is a software in which a member can register themselves and then he can borrow books from the book bank or the members can buy the books from the book bank. A Book Bank lends books and magazines to members, who are registered in the system. It mainly concentrates on providing the book for authorized members only. A member can reserve a book or magazine that is not currently available in the book bank, so that when it is returned or purchased by the book bank, that person is notified. The book bank can easily create, replace and delete information about the titles, members and reservations from the system. The main issue of the system is that only registered members can lend the book from the book bank. In the case of lending, we should maintain the database for the status and issue of the book and also we have to calculate the fine amount with respect to the due date. We should maintain the book according to the department, genres, and year of study. Another main issue of the system is that if the user takes the book and misplaces it on another shelf, then we have the chip of bar scanner to scan the books and indicate to the admin that the book has been replaced. All the above issues will be satisfied by developing the software as a user-friendly system. The main functionality of the system is that User Authentication, Book storing, Book retrieval, Book for buying, Stock Updating, Due fine, E-books, Payment, Book maintenance, Sales report, User records and Sorting. The software is developed to satisfy the needs according to the members. The software will be very useful in the area of institutions, libraries and for general citizens. The software is developed to act as a useful interface for the users to easily access books. Design a use case diagram for the Book Bank Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Member\nactor Admin\n\nrectangle Book_Bank_Management_System {\n    usecase \"User Authentication\" as UC1\n    usecase \"Borrow Books\" as UC2\n    usecase \"Buy Books\" as UC3\n    usecase \"Reserve Books\" as UC4\n    usecase \"Return Books\" as UC5\n    usecase \"Update Stock\" as UC6\n    usecase \"Calculate Due Fine\" as UC7\n    usecase \"Track Misplaced Books\" as UC8\n    usecase \"Manage Book Titles\" as UC9\n    usecase \"Generate Sales Reports\" as UC10\n    usecase \"Manage User Records\" as UC11\n    usecase \"Handle Payments\" as UC12\n}\n\nMember --> UC1\nMember --> UC2\nMember --> UC3\nMember --> UC4\nMember --> UC5\nMember --> UC7\n\nAdmin --> UC6\nAdmin --> UC7\nAdmin --> UC8\nAdmin --> UC9\nAdmin --> UC10\nAdmin --> UC11\nAdmin --> UC12\n\nUC2 --> UC7 : <<extend>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for Mega Associates website. Mega Associates is an evolving architectural firm that is facing fierce competition. The competitors have a modern, well-built website that is pulling some of the firm’s clients towards themselves. In order to avoid a situation like this and to retain all the firm’s clients and attract new ones, a refreshing website is needed. The website of the firm should include the major projects of the firm, a brief on all the available departments and collaborations, recent news with respect to the firm, the firm’s insights, the history of the firm, mail or chat feature, and career opportunities with regard to the firm.",
        "output": "@startuml\nleft to right direction\n\nactor Client\nactor Job_Seeker\nactor Administrator\n\nrectangle Mega_Associates_Website {\n    usecase \"View Major Projects\" as UC1\n    usecase \"Explore Departments & Collaborations\" as UC2\n    usecase \"Read Recent News\" as UC3\n    usecase \"Explore Firm Insights\" as UC4\n    usecase \"Learn Firm History\" as UC5\n    usecase \"Contact via Mail or Chat\" as UC6\n    usecase \"View Career Opportunities\" as UC7\n    usecase \"Manage Website Content\" as UC8\n}\n\nClient --> UC1\nClient --> UC2\nClient --> UC3\nClient --> UC4\nClient --> UC5\nClient --> UC6\n\nJob_Seeker --> UC7\n\nAdministrator --> UC8\n@enduml"
    },
    {
        "input": "The policies and guidelines for startups vary from state to state. Also, startups related to a particular domain are emphasized in particular areas. The people with startup ideas at different levels of implementation have to approach different firms or individuals for investment who are in their nearest business circles, if not in the same state. All of these factors will adversely impact the opportunities for startups. Startup Meet is a platform for people to privately approach firms or angel investors with their ideas implemented at different levels for funding and mentorship. Additionally, government policies and loan schemes of different states can be known and applied through the platform. If investors or mentors are interested in the idea, a virtual presentation can be given. Profiles for investors and entrepreneurs will showcase what each party is looking for. Entrepreneurs can request investors or mentors from different states for submitting their ideas. Once accepted, an abstract can be sent. If the investors like it, they can call for a presentation. The mentors also provide guidance. The government loans and policies can be viewed and applied for through the portal. Startup Meet is a comprehensive platform for people involved in startups. Design a use case diagram for the Startup Meet System.",
        "output": "@startuml\nleft to right direction\n\nactor Entrepreneur\nactor Investor\nactor Mentor\nactor Government_Agency <<secondary>>\n\nrectangle Startup_Meet_System {\n    usecase \"Create Startup Profile\" as UC1\n    usecase \"Request Funding\" as UC2\n    usecase \"Submit Abstract\" as UC3\n    usecase \"Give Virtual Presentation\" as UC4\n    usecase \"Apply for Government Loans\" as UC5\n    usecase \"View Government Policies\" as UC6\n    usecase \"Provide Mentorship\" as UC7\n    usecase \"Review Startup Ideas\" as UC8\n    usecase \"Accept Investment Proposal\" as UC9\n}\n\nEntrepreneur --> UC1\nEntrepreneur --> UC2\nEntrepreneur --> UC3\nEntrepreneur --> UC4\nEntrepreneur --> UC5\nEntrepreneur --> UC6\n\nInvestor --> UC8\nInvestor --> UC9\nInvestor --> UC4\n\nMentor --> UC7\nMentor --> UC8\n\nGovernment_Agency --> UC5\nGovernment_Agency --> UC6\n@enduml"
    },
    {
        "input": "The Video Suggestion System is used in social networking platforms such as YouTube and Facebook. The ultimate aim of this system is to suggest videos to the users based on factors such as trending topics, user preferences, similar viewing patterns, and search results. The Video Suggestion System helps users by offering relevant content without the need for manual searching. It plays a crucial role in the entertainment sector by enhancing user engagement. The system operates by collecting user activity data, processing it, generating a dataset based on these interactions, and finally suggesting videos when users refresh their page or request recommendations. Design a use case diagram for the Video Suggestion System.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Data_Processor <<secondary>>\n\nrectangle Video_Suggestion_System {\n    usecase \"Collect User Activity\" as UC1\n    usecase \"Process User Data\" as UC2\n    usecase \"Generate Video Dataset\" as UC3\n    usecase \"Suggest Videos\" as UC4\n    usecase \"Refresh and Update Suggestions\" as UC5\n}\n\nUser --> UC4\nUser --> UC5\n\nData_Processor --> UC1\nData_Processor --> UC2\nData_Processor --> UC3\n\nUC1 --> UC2 : <<include>>\nUC2 --> UC3 : <<include>>\nUC3 --> UC4 : <<include>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for a library management system. Following are the functional requirements of the library management system:\n1. Any library member should be able to search books by their title, author, subject category as well by the publication date.\n2. Each book will have a unique identification number and other details including a rack number which will help to physically locate the book.\n3. There could be more than one copy of a book, and library members should be able to check-out and reserve any copy. We will call each copy of a book, a book item.\n4. The library management system should be able to retrieve information like who took a particular book or what are the books checked-out by a specific library member.\n5. There should be a maximum limit (5) on how many books a member can check-out.\n6. There should be a maximum limit (10) on how many days a member can keep a book.\n7. The system should be able to collect fines for books returned after the due date.\n8. Members should be able to reserve books that are not currently available.\n9. The system should be able to send notifications whenever the reserved books become available, as well as when the book is not returned within the due date.\n10. Each book and member card will have a unique barcode.\n11. The system will be able to read barcodes from books and members’ library cards.",
        "output": "@startuml\nleft to right direction\n\nactor Library_Member\nactor Librarian\n\nrectangle Library_Management_System {\n    usecase \"Search Books\" as UC1\n    usecase \"Check-out Book\" as UC2\n    usecase \"Reserve Book\" as UC3\n    usecase \"Retrieve Book Information\" as UC4\n    usecase \"Return Book\" as UC5\n    usecase \"Collect Fines\" as UC6\n    usecase \"Send Notifications\" as UC7\n}\n\nLibrary_Member --> UC1\nLibrary_Member --> UC2\nLibrary_Member --> UC3\nLibrary_Member --> UC5\nLibrary_Member --> UC6\n\nLibrarian --> UC6\nLibrarian --> UC4\n\nUC5 --> UC7 : <<extend>>\nUC3 --> UC7 : <<extend>>\n@enduml"
    },
    {
        "input": "Design a use case diagram based on the following requirements:\n1. During a semester, a lecturer reads one or more lectures.\n2. Sometimes the lecturer is on leave to focus on doing research; in this case, (s)he does not give a lecture.\n3. A student usually attends one or more lectures, unless (s)he has something better to do.\n4. During the semester, there will be several exercises which are meant to be solved by small study groups.\n5. Each student is assigned to one particular study group for the whole semester in the course management system.\n6. A study group consists of two to three students.\n7. After submission of a solution by a study group, it is graded by a tutor.",
        "output": "@startuml\nleft to right direction\n\nactor Lecturer\nactor Student\nactor Tutor\n\nrectangle Course_Management_System {\n    usecase \"Give Lecture\" as UC1\n    usecase \"Attend Lecture\" as UC2\n    usecase \"Assign Study Group\" as UC3\n    usecase \"Submit Solution\" as UC4\n    usecase \"Grade Solution\" as UC5\n}\n\nLecturer --> UC1\nLecturer --> UC3 : <<include>>\nStudent --> UC2\nStudent --> UC4\nStudent --> UC3\nTutor --> UC5\nUC4 --> UC5 : <<include>>\n@enduml"
    },
    {
        "input": "The content management system shall allow an administrator to create a new blog account, provided the personal details of the new blogger are verified using the author credentials database. The content management system shall allow an administrator to create a new personal Wiki, provided the personal details of the applying author are verified using the Author Credentials service. Design a use case diagram for the content management system.",
        "output": "@startuml\nleft to right direction\n\nactor Administrator\nactor \"Verification Service\" as VerificationService <<secondary>>\n\nrectangle Content_Management_System {\n    usecase \"Create New Blog Account\" as UC1\n    usecase \"Create New Wiki\" as UC2\n    usecase \"Verify Author Details\" as UC3\n}\n\nAdministrator --> UC1\nAdministrator --> UC2\nUC1 --> UC3 : <<include>>\nUC2 --> UC3 : <<include>>\n\nVerificationService --> UC3\n@enduml"
    },
    {
        "input": "Design a use case diagram for the eDoc system. The eDoc Health Record Management System must support the creation and management of patient profiles, allowing comprehensive organization of personal information. The eDoc Health Record Management System must enable comprehensive medical history input and organization for each patient. The eDoc Health Record Management System must provide advanced appointment scheduling, including reminders for both patients and healthcare providers. The eDoc Health Record Management System must ensure secure data storage that complies with healthcare regulations, including HIPAA. The eDoc Health Record Management System must integrate telemedicine practices, allowing remote consultations and interactions with patients. The eDoc Health Record Management System must allow patient access via secure portals, ensuring privacy and data protection. The eDoc Health Record Management System must offer data analysis, collaboration, and reporting functionalities for healthcare teams to improve decision-making and patient care. The eDoc Health Record Management System must support import/export capabilities for easy data accessibility and transfer between systems. The eDoc Health Record Management System must perform regular backups and include data recovery options to ensure data integrity and availability. The eDoc Health Record Management System must manage patient medication records, including medication reminders for patients. The eDoc Health Record Management System must store and manage records for lab results, imaging, and diagnostic reports to support healthcare providers in making informed decisions.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Healthcare_Provider\nactor System_Admin\n\nrectangle eDoc_Health_Record_Management_System {\n    usecase \"Manage Patient Profile\" as UC1\n    usecase \"Input Medical History\" as UC2\n    usecase \"Schedule Appointments\" as UC3\n    usecase \"Send Appointment Reminders\" as UC4\n    usecase \"Perform Telemedicine Consultations\" as UC5\n    usecase \"Access Secure Patient Portals\" as UC6\n    usecase \"Analyze Data and Generate Reports\" as UC7\n    usecase \"Import/Export Health Data\" as UC8\n    usecase \"Perform Data Backup and Recovery\" as UC9\n    usecase \"Manage Medication Records\" as UC10\n    usecase \"Store and Manage Diagnostic Records\" as UC11\n}\n\nPatient --> UC1\nPatient --> UC2\nPatient --> UC3\nPatient --> UC6\nPatient --> UC10\n\nHealthcare_Provider --> UC2\nHealthcare_Provider --> UC3\nHealthcare_Provider --> UC5\nHealthcare_Provider --> UC7\nHealthcare_Provider --> UC10\nHealthcare_Provider --> UC11\n\nSystem_Admin --> UC8\nSystem_Admin --> UC9\n\nUC3 --> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "The HealthCare Management System has these functions: The Creation and Management of Patient Profiles. Comprehensive Medical History Input and Organization. Advanced Appointment Scheduling with Reminders. Secure Data Storage Compliant with Healthcare Regulations. Integration of Telemedicine Practices. Patient Access via Secure Portals. Data Analysis, Collaboration, and Reporting for Healthcare Teams. Import/Export Capabilities for Data Accessibility. Regular Backups and Data Recovery Options. Medication Management with Reminders. Record Storage for Lab Results, Imaging, and Diagnostic Reports. Design a use case diagram for the HealthCare Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Healthcare_Provider\nactor System_Admin\n\nrectangle HealthCare_Management_System {\n    usecase \"Manage Patient Profiles\" as UC1\n    usecase \"Input Medical History\" as UC2\n    usecase \"Schedule Appointments\" as UC3\n    usecase \"Send Appointment Reminders\" as UC4\n    usecase \"Perform Telemedicine Consultations\" as UC5\n    usecase \"Access Patient Portal\" as UC6\n    usecase \"Analyze Data and Generate Reports\" as UC7\n    usecase \"Import/Export Health Data\" as UC8\n    usecase \"Perform Data Backup and Recovery\" as UC9\n    usecase \"Manage Medication Records\" as UC10\n    usecase \"Store Diagnostic Reports\" as UC11\n}\n\nPatient --> UC1\nPatient --> UC2\nPatient --> UC3\nPatient --> UC6\nPatient --> UC10\n\nHealthcare_Provider --> UC2\nHealthcare_Provider --> UC3\nHealthcare_Provider --> UC5\nHealthcare_Provider --> UC7\nHealthcare_Provider --> UC10\nHealthcare_Provider --> UC11\n\nSystem_Admin --> UC8\nSystem_Admin --> UC9\n\nUC3 --> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Parcel Delivery Management System shall allow:\n- Advanced parcel tracking.\n- Efficient management of returns.\n- Real-time parcel inventory control.\n- Seamless customer support interactions.\n- Secure and user-friendly payment processing.\nDesign a use case diagram for the Parcel Delivery Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Admin\n\nrectangle Parcel_Delivery_Management_System {\n    usecase \"Track Parcels\" as UC1\n    usecase \"Manage Returns\" as UC2\n    usecase \"Monitor Inventory\" as UC3\n    usecase \"Access Customer Support\" as UC4\n    usecase \"Process Payments\" as UC5\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC4\nCustomer --> UC5\n\nAdmin --> UC3\n@enduml"
    },
    {
        "input": "The Crime Information System includes the following key product functions:\n• User Management\n• Receive Crime Related Notifications\n• Update FIR\n• Create FIR\n• Access Police Station Information\n• Access Crime Database\n• Community Safety Forums\n• Manage Criminal Records\n• Search Criminal Records.\nDesign a use case diagram for the Crime Information System.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Police_Officer\nactor Admin\n\nrectangle Crime_Information_System {\n    usecase \"User Management\" as UC1\n    usecase \"Receive Crime Notifications\" as UC2\n    usecase \"Update FIR\" as UC3\n    usecase \"Create FIR\" as UC4\n    usecase \"Access Police Station Info\" as UC5\n    usecase \"Access Crime Database\" as UC6\n    usecase \"Join Community Safety Forums\" as UC7\n    usecase \"Manage Criminal Records\" as UC8\n    usecase \"Search Criminal Records\" as UC9\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC7\n\nPolice_Officer --> UC3\nPolice_Officer --> UC4\nPolice_Officer --> UC6\nPolice_Officer --> UC9\n\nAdmin --> UC1\nAdmin --> UC5\nAdmin --> UC8\n@enduml"
    },
    {
        "input": "The Timetable Management System has the following functional requirements:\nUser Registration and Login: The system must allow users to register and log in securely.\nEnroll Student: The system must enable administrators to enroll students and manage their information.\nAllocate Courses to Students: The system must allow administrators to assign courses to students.\nAllocate Courses to Faculty: The system must provide functionality to assign courses to faculty members.\nAdd Faculty Time Preference: The system must allow faculty members to input their preferred time slots for lectures.\nGenerate Timetable: The system must generate timetables based on student courses, faculty preferences, and available resources.\nAllocate Lecture Halls: The system must allocate available lecture halls based on the generated timetable.\nGenerate Course Report: The system must generate reports detailing course allocations and schedules.\nStudent Course Report: The system must provide students with reports showing their enrolled courses and schedules.\nFaculty Course Report: The system must provide faculty with reports detailing their course assignments and schedules.\nDesign a use case diagram for the Timetable Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Admin\nactor Faculty\n\nrectangle Timetable_Management_System {\n    usecase \"Register and Login\" as UC1\n    usecase \"Enroll Student\" as UC2\n    usecase \"Allocate Courses to Students\" as UC3\n    usecase \"Allocate Courses to Faculty\" as UC4\n    usecase \"Add Faculty Time Preferences\" as UC5\n    usecase \"Generate Timetable\" as UC6\n    usecase \"Allocate Lecture Halls\" as UC7\n    usecase \"Generate Course Report\" as UC8\n    usecase \"Generate Student Course Report\" as UC9\n    usecase \"Generate Faculty Course Report\" as UC10\n}\n\nStudent --> UC1\nStudent --> UC9\n\nAdmin --> UC1\nAdmin --> UC2\nAdmin --> UC3\nAdmin --> UC4\nAdmin --> UC6\nAdmin --> UC7\nAdmin --> UC8\n\nFaculty --> UC1\nFaculty --> UC5\nFaculty --> UC10\n\nUC6 --> UC7 : <<extend>>\n@enduml"
    },
    {
        "input": "Cricket Stadium Management System:\n1. The system allows fans to access comprehensive information about upcoming events in the stadium, including match schedules, team line-ups, and other relevant details.\n2. Fans can explore different pricing plans for tickets, view seat availability, and securely purchase tickets for their desired events through the system.\n3. The system provides a platform for sponsors to explore available sponsorship options within the stadium, enabling them to contribute to the operations and engage with the cricket community.\n4. Sponsors can track the return on investment (ROI) for their sponsorships through the system, allowing them to evaluate the effectiveness and impact of their contributions.\n Draw a use case diagram for the Cricket Stadium Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Fan\nactor Sponsor\n\nrectangle Cricket_Stadium_Management_System {\n    usecase \"View Event Information\" as UC1\n    usecase \"Explore Pricing Plans\" as UC2\n    usecase \"Check Seat Availability\" as UC3\n    usecase \"Purchase Tickets\" as UC4\n    usecase \"Explore Sponsorship Options\" as UC5\n    usecase \"Track Sponsorship ROI\" as UC6\n}\n\nFan --> UC1\nFan --> UC2\nFan --> UC3\nFan --> UC4\n\nSponsor --> UC5\nSponsor --> UC6\n@enduml"
    },
    {
        "input": "The Tech E-Commerce system allows customers to browse the catalog of tech goods and repair services offered by Tempest Electronics. Customers can add items to a shopping cart and proceed with the checkout process to purchase products or services. Additionally, customers can review their past orders and cancel any ongoing repair orders if needed. The system provides functionality for managing account details, such as updating personal information and billing details. Customers also have the ability to provide feedback on purchased goods and services. Lastly, the system includes a helpline feature, allowing customers to contact support for inquiries and assistance.\n Design a use case diagram for the Tech E-Commerce System.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Support <<secondary>>\n\nrectangle Tech_E_Commerce_System {\n    usecase \"Browse Catalog\" as UC1\n    usecase \"Add Items to Cart\" as UC2\n    usecase \"Checkout\" as UC3\n    usecase \"Review Past Orders\" as UC4\n    usecase \"Cancel Repair Order\" as UC5\n    usecase \"Manage Account Details\" as UC6\n    usecase \"Provide Feedback\" as UC7\n    usecase \"Contact Helpline\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\nCustomer --> UC8\n\nSupport --> UC8\n@enduml"
    },
    {
        "input": "Give use case diagram for Clinic Management System:\n\n1. The system must allow for patient registration and management of patient information, including personal details, medical history, and contact information.\n\n2. The system must support appointment scheduling, allowing patients to book appointments, and must send reminders to both patients and staff.\n\n3. The system must facilitate billing and invoicing, generating accurate bills based on services provided and tracking payment statuses.\n\n4. The system must enable staff collaboration and communication, allowing healthcare professionals to share information and communicate seamlessly within the system.\n\n5. The system must generate reports and analytics based on patient data, appointments, and billing information, providing insights for operational improvement.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Staff\n\nrectangle Clinic_Management_System {\n    usecase \"Register Patient\" as UC1\n    usecase \"Manage Patient Information\" as UC2\n    usecase \"Schedule Appointment\" as UC3\n    usecase \"Send Appointment Reminders\" as UC4\n    usecase \"Generate Bills\" as UC5\n    usecase \"Track Payment Status\" as UC6\n    usecase \"Staff Collaboration\" as UC7\n    usecase \"Generate Reports and Analytics\" as UC8\n}\n\nPatient --> UC1\nPatient --> UC3\nPatient --> UC6\n\nStaff --> UC2\nStaff --> UC7\nStaff --> UC5\nStaff --> UC8\n\nUC3 --> UC4 : <<include>>\n@enduml"
    },
    {
        "input": "Law Keeper - Law Firm Management System:\nThe system allows lawyers to create, update, and manage case files, ensuring easy access to case-related documents and information. Users can create and assign tasks related to cases, ensuring all relevant deadlines and responsibilities are tracked and completed. LawKeeper provides a repository for research documents and legal references, allowing users to search and manage these materials to assist with case preparation.\nThe system facilitates seamless communication between lawyers and clients, offering a centralized platform to provide updates, share documents, and answer queries. LawKeeper also helps users monitor and manage critical case deadlines by providing alerts and reminders to ensure tasks are completed on time.\nAdditionally, the system tracks billable hours for each client and enables both clients and lawyers to review billing details, ensuring transparency in transactions and payments.\nClients can also file new cases and share relevant case documents through the platform.",
        "output": "@startuml\nleft to right direction\n\nactor Lawyer\nactor Client\n\nrectangle LawKeeper_Management_System {\n    usecase \"Manage Case Files\" as UC1\n    usecase \"Create and Assign Tasks\" as UC2\n    usecase \"Access Legal References\" as UC3\n    usecase \"Send Case Updates\" as UC4\n    usecase \"Monitor Case Deadlines\" as UC5\n    usecase \"Track Billable Hours\" as UC6\n    usecase \"Review Billing Details\" as UC7\n    usecase \"Receive Updates\" as UC8\n    usecase \"Review Payments\" as UC9\n    usecase \"File a Case\" as UC10\n    usecase \"Share Documents\" as UC11\n}\n\nLawyer --> UC1\nLawyer --> UC2\nLawyer --> UC3\nLawyer --> UC4\nLawyer --> UC5\nLawyer --> UC6\nLawyer --> UC7\n\nClient --> UC8\nClient --> UC9\nClient --> UC10\nClient --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for the Online Shopping System. The system must allow customers to browse products, add items to their shopping cart, and proceed with the checkout process. Customers should be able to create an account, manage their profile, and view order history. The system must support secure payment processing and provide order tracking functionality. Additionally, the system should allow administrators to manage product listings, view sales reports, and process customer inquiries.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Admin\nactor \"Payment Gateway\" as Payment_Gateway <<secondary>>\n\nrectangle Online_Shopping_System {\n    usecase \"Browse Products\" as UC1\n    usecase \"Add to Cart\" as UC2\n    usecase \"Checkout\" as UC3\n    usecase \"Create Account\" as UC4\n    usecase \"Manage Profile\" as UC5\n    usecase \"View Order History\" as UC6\n    usecase \"Secure Payment Processing\" as UC7\n    usecase \"Order Tracking\" as UC8\n    usecase \"Manage Product Listings\" as UC9\n    usecase \"View Sales Reports\" as UC10\n    usecase \"Process Customer Inquiries\" as UC11\n    usecase \"Process Payment\" as UC12\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\nCustomer --> UC8\n\nAdmin --> UC9\nAdmin --> UC10\nAdmin --> UC11\n\nUC12 --> Payment_Gateway\n@enduml"
    },
    {
        "input": "Design a use case diagram for an automatic teller machine (ATM) with the following requirements:\n1. The ATM system must check the validity of the inserted ATM card.\n2. The ATM system must validate the PIN number entered by the customer.\n3. The ATM system must ensure that no more than $250 is dispensed against any ATM card within a 24-hour period.\n4. The ATM system must be written in C++.\n5. The ATM system must communicate with the bank using 256-bit encryption.\n6. The ATM system must validate an ATM card in three seconds or less.\n7. The ATM system must validate a PIN in three seconds or less.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Bank_System <<secondary>>\n\nrectangle ATM_System {\n    usecase \"Insert ATM Card\" as UC1\n    usecase \"Enter PIN\" as UC2\n    usecase \"Withdraw Cash\" as UC3\n    usecase \"Check Account Balance\" as UC4\n    usecase \"Transfer Funds\" as UC5\n    usecase \"Check Card Validity\" as UC6\n    usecase \"Validate PIN\" as UC7\n    usecase \"Dispense Cash\" as UC8\n    usecase \"Check Daily Limit\" as UC9\n    usecase \"Handle Bank Communication\" as UC10\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\n\nUC1 --> UC6 : <<include>>\nUC2 --> UC7 : <<include>>\nUC3 --> UC9 : <<include>>\nUC3 --> UC8 : <<include>>\nUC5 --> UC10 : <<include>>\n\nBank_System --> UC10\n@enduml"
    },
    {
        "input": "Design a use case diagram for a hotel management system with the following requirements:\n1. The system must allow guests to check-in and check-out of the hotel.\n2. The system must provide room booking functionality, allowing guests to reserve rooms for their stay.\n3. The system must support room service requests, enabling guests to order food and other services to their rooms.\n4. The system must generate invoices for guests, detailing their stay and any additional charges.\n5. The system must allow hotel staff to manage room availability, view guest information, and process payments.",
        "output": "@startuml\nleft to right direction\n\nactor Guest\nactor Staff\n\nrectangle Hotel_Management_System {\n    usecase \"Check-in\" as UC1\n    usecase \"Check-out\" as UC2\n    usecase \"Book Room\" as UC3\n    usecase \"Order Room Service\" as UC4\n    usecase \"Generate Invoice\" as UC5\n    usecase \"Manage Room Availability\" as UC6\n    usecase \"View Guest Information\" as UC7\n    usecase \"Process Payments\" as UC8\n}\n\nGuest --> UC1\nGuest --> UC2\nGuest --> UC3\nGuest --> UC4\nGuest --> UC5\n\nStaff --> UC6\nStaff --> UC7\nStaff --> UC8\n@enduml"
    },
    {
        "input": "Design a use case diagram for the Altered State University (ASU) Registration System with the following requirements:\n1. Professors indicate which courses they will teach online.\n2. A course catalog can be printed.\n3. Allow students to select online four courses for the upcoming semester.\n4. No course may have more than 10 students or less than 3 students.\n5. When the registration is completed, the system sends information to the billing system.\n6. Professors can obtain course rosters online.\n7. Students can add or drop classes online.",
        "output": "@startuml\nleft to right direction\n\nactor Professor\nactor Student\nactor Billing_System <<secondary>>\n\nrectangle ASU_Registration_System {\n    usecase \"Indicate Courses to Teach\" as UC1\n    usecase \"Print Course Catalog\" as UC2\n    usecase \"Select Courses for Semester\" as UC3\n    usecase \"Add or Drop Classes\" as UC4\n    usecase \"Send Information to Billing System\" as UC5\n    usecase \"Obtain Course Rosters\" as UC6\n}\n\nProfessor --> UC1\nProfessor --> UC6\nProfessor --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC2\nUC3 --> UC5 : <<include>>\nUC4 --> UC5 : <<include>>\n\nBilling_System --> UC5\n@enduml"
    },
    {
        "input": "Design a use case diagram for the Cafe Management System with the following requirements:\n1. The system must allow staff to log in with existing credentials or create a new account for access.\n2. The system must provide a centralized dashboard where staff can view key metrics, notifications, and navigate to other functionalities.\n3. The system must enable staff to add, update, and delete items in the inventory, track stock levels, set reorder points, and automate restocking processes.\n4. The system must facilitate the creation, modification, and deletion of menu items, allowing customization of menu categories and pricing. Menu images should also be available.\n5. The system must streamline the order placement process for customers, providing order confirmation and status updates to both customers and staff.\n6. The system must maintain a database of customer profiles, capturing and storing customer preferences and order history.\n7. The system must generate comprehensive graphs (such as Area Chart and Bar Chart) on sales and customer trends. Jasper reports must be used to produce receipts for customers.",
        "output": "@startuml\nleft to right direction\n\nactor Staff\nactor Customer\n\nrectangle Cafe_Management_System {\n    usecase \"Log in or Create Account\" as UC1\n    usecase \"Access Centralized Dashboard\" as UC2\n    usecase \"Manage Inventory\" as UC3\n    usecase \"Manage Menu Items\" as UC4\n    usecase \"Place Orders\" as UC5\n    usecase \"Give Order Status Updates\" as UC6\n    usecase \"Manage Customer Profiles\" as UC7\n    usecase \"Generate Sales Graphs\" as UC8\n    usecase \"Generate Receipts\" as UC9\n}\n\nStaff --> UC1\nStaff --> UC2\nStaff --> UC3\nStaff --> UC4\nStaff --> UC7\nStaff --> UC8\nStaff --> UC9\n\nCustomer --> UC1\nCustomer --> UC5\nUC5 --> UC6 : <<include>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for a Business Process Outsourcing (BPO) Management System with the following requirements:\n1. The system must provide a personalized profile for each user, ensuring security for individual accounts.\n2. The system must allow users to personalize their account and change their password as needed.\n3. The system must enable clients to post project requests with specific requirements for Business Process Outsourcing (BPO) organizations to choose from.\n4. The system must allow BPO organizations to search for and respond to project requests posted by clients.\n5. The system must facilitate the transfer of documents required by the BPO organization, allowing the receiver to download them.\n6. The system must provide clients with constant updates on the progress of their project or work.\n7. The system must enable clients to check the quality of their product or service and request any necessary modifications.\n8. The system must allow BPO organizations to upload the final product or service for further procedures such as payment or shipment.\n9. The system must facilitate payments from clients to BPO organizations at the end of their agreement.\n10. The system must ensure that the product or service is delivered to the client after completion.\n11. The system must allow clients to rate the services provided by the BPO organization.",
        "output": "@startuml\nleft to right direction\n\nactor Client\nactor BPO_Organization\nactor Payment_Gateway <<secondary>>\n\nrectangle BPO_Management_System {\n    usecase \"Create and Manage Profile\" as UC1\n    usecase \"Post Project Request\" as UC2\n    usecase \"Search and Respond to Projects\" as UC3\n    usecase \"Transfer and Download Documents\" as UC4\n    usecase \"Receive Project Updates\" as UC5\n    usecase \"Check Product Quality and Request Modifications\" as UC6\n    usecase \"Upload Final Product\" as UC7\n    usecase \"Process Payment\" as UC8\n    usecase \"Deliver Product\" as UC9\n    usecase \"Rate Services\" as UC10\n}\n\nClient --> UC1\nClient --> UC2\nClient --> UC5\nClient --> UC6\nClient --> UC10\n\nBPO_Organization --> UC1\nBPO_Organization --> UC3\nBPO_Organization --> UC4\nBPO_Organization --> UC7\nBPO_Organization --> UC9\n\nPayment_Gateway --> UC8\n\nUC7 --> UC8 : <<include>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for the information system of the student office of a university. The system should support the following activities:\n• Many important administrative activities of a university are processed by the student office. Students can register for studies (matriculation), enroll, and withdraw from studies here. Matriculation involves enrolling, that is, registering for studies.\n• Students receive their certificates from the student office. The certificates are printed out by an employee. Lecturers send grading information to the student office. The notification system then informs the students automatically that a certificate has been issued.\n• There is a differentiation between two types of employees in the student office: a) those that are exclusively occupied with the administration of student data (service employee, or ServEmp), and b) those that fulfill the remaining tasks (administration employee, or AdminEmp), whereas all employees (ServEmp and AdminEmp) can issue information.\n• Administration employees issue certificates when the students come to collect them. Administration employees also create courses. When creating courses, they can reserve lecture halls.",    
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Lecturer\nactor ServEmp <<secondary>>\nactor AdminEmp\n\nrectangle Student_Office_Information_System {\n    usecase \"Register for Studies (Matriculation)\" as UC1\n    usecase \"Enroll in Studies\" as UC2\n    usecase \"Withdraw from Studies\" as UC3\n    usecase \"Send Grading Information\" as UC4\n    usecase \"Print and Issue Certificates\" as UC5\n    usecase \"Create Courses\" as UC6\n    usecase \"Reserve Lecture Halls\" as UC7\n    usecase \"Send Certificate Notifications\" as UC8\n    usecase \"Provide Information\" as UC9\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\n\nLecturer --> UC4\n\nServEmp --> UC9\n\nAdminEmp --> UC5\nAdminEmp --> UC6\nAdminEmp --> UC7\nAdminEmp --> UC9\n\nUC4 --> UC5 : <<include>>\nUC5 --> UC8 : <<include>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for the Information System of a University. The system should support the following activities:\n• A university consists of multiple faculties which are composed of various institutes. Each faculty and each institute has a name. An address is known for each institute.\n• Each faculty is led by a dean, who is an employee of the university.\n• The total number of employees is known. Employees have a social security number, a name, and an e-mail address. There is a distinction between research and administrative personnel.\n• Research associates are assigned to at least one institute. The field of study of each research associate is known. Furthermore, research associates can be involved in projects for a certain number of hours, and the name, starting date, and end date of the projects are known. Some research associates teach courses. They are called lecturers.\n• Courses have a unique number (ID), a name, and a weekly duration in hours.",      
        "output": "@startuml\nleft to right direction\n\nactor Dean\nactor Research_Associate\nactor Admin_Personnel\nactor Lecturer\nactor University_Admin\n\nLecturer <|-- Research_Associate\n\nrectangle University_Information_System {\n    usecase \"Manage Faculty Details\" as UC1\n    usecase \"Manage Institute Details\" as UC2\n    usecase \"Record Faculty and Institute Addresses\" as UC3\n    usecase \"Manage Employee Information\" as UC4\n    usecase \"Assign Research Associates to Institutes\" as UC5\n    usecase \"Track Research Projects\" as UC6\n    usecase \"Track Course Details\" as UC7\n}\n\nDean --> UC1\nDean --> UC2\nDean --> UC3\n\nResearch_Associate --> UC5\nResearch_Associate --> UC6\n\nAdmin_Personnel --> UC4\nUniversity_Admin --> UC4\nUniversity_Admin --> UC6\nUniversity_Admin --> UC7\n\nLecturer --> UC7\n\nUC5 --> UC6 : <<include>>\n@enduml"
    },
    {
        "input": "The purpose of the Legal Eagle Case Management System is to provide a comprehensive and efficient platform for legal professionals, case managers, and clients to manage legal cases seamlessly. The system aims to streamline various aspects of case management, including case creation, status tracking, updates, client communication, reports and analytics generation, legal research, and document management. By offering these functionalities, the system enhances collaboration, communication, and decision-making within legal organizations, contributing to improved case outcomes. Design a use case diagram for the Legal Eagle Case Management System.",    
        "output": "@startuml\nleft to right direction\n\nactor Legal_Professional\nactor Client\nactor Legal_Researcher\nactor Voice_Assistant <<secondary>>\n\nrectangle Legal_Eagle_Case_Management_System {\n    usecase \"Create Case\" as UC1\n    usecase \"Track Case Status\" as UC2\n    usecase \"Update Case Status\" as UC3\n    usecase \"File a Case\" as UC4\n    usecase \"Receive Case Updates\" as UC5\n    usecase \"Generate Reports and Analytics\" as UC6\n    usecase \"Perform Legal Research\" as UC7\n    usecase \"Manage Documents\" as UC8\n    usecase \"Activate Using Voice\" as UC9\n}\n\nLegal_Professional --> UC1\nLegal_Professional --> UC2\nLegal_Professional --> UC3\nLegal_Professional --> UC6\nLegal_Professional --> UC7\nLegal_Professional --> UC8\n\nClient --> UC4\nClient --> UC5\n\nLegal_Researcher --> UC7\n\nVoice_Assistant --> UC9\n\nUC1 --> UC9 : <<extend>>\nUC3 --> UC9 : <<extend>>\nUC4 --> UC9 : <<extend>>\nUC5 --> UC9 : <<extend>>\n@enduml"
    },
    {
        "input": "TimeCraft is designed to revolutionize the parcel delivery experience, targeting major delivery companies such as FedEx and DHL. By leveraging technology, it aims to simplify parcel handling for senders, receivers, and delivery companies. The primary objectives of TimeCraft include improving parcel tracking accuracy, reducing rough handling issues, and empowering customers and delivery companies with more control and real-time information. Give use case diagram for the TimeCraft Parcel Management System.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Delivery_Company\n\nUser <|-- Sender\nUser <|-- Receiver\n\nrectangle TimeCraft_Parcel_Management_System {\n    usecase \"Track Parcels\" as UC1\n    usecase \"Report Rough Handling Issues\" as UC2\n    usecase \"Update Parcel Status\" as UC3\n    usecase \"Receive Real-Time Updates\" as UC4\n    usecase \"Schedule Parcel Pickup\" as UC5\n    usecase \"Manage Parcel Routes\" as UC6\n    usecase \"Control Delivery Options\" as UC7\n}\n\nSender --> UC5\nSender --> UC2\nSender --> UC1\n\nReceiver --> UC4\nReceiver --> UC1\n\nDelivery_Company --> UC6\nDelivery_Company --> UC7\nDelivery_Company --> UC3\n\n@enduml"
    },
    {
        "input": "The Employee Management System (EMS) is an innovative platform designed to streamline the management of employee information. EMS offers features like real-time tracking of attendance, salary management, and automated reporting tools to empower HR teams with seamless data management and decision-making. Design a use case diagram for the Employee Management System.",
        "output": "@startuml\nleft to right direction\n\nactor HR_Team\nactor Employee\n\nrectangle Employee_Management_System {\n    usecase \"Manage Employee Information\" as UC1\n    usecase \"Track Attendance\" as UC2\n    usecase \"Manage Salaries\" as UC3\n    usecase \"Generate Reports\" as UC4\n    usecase \"View Attendance Record\" as UC5\n}\n\nHR_Team --> UC1\nHR_Team --> UC2\nHR_Team --> UC3\nHR_Team --> UC4\n\nEmployee --> UC5\nEmployee --> UC1\n@enduml"
    },
    {
        "input": "RoboCop Crime Information System aims to enhance public safety and facilitate law enforcement by providing a centralized platform for accessing and managing crime-related information. The system offers up-to-date crime statistics, user management, crime-related notifications, FIR (First Information Report) handling, access to nearest police station information, a comprehensive crime database, community safety forums, and tools for law enforcement to manage and search criminal records. Design a use case diagram for the RoboCop Crime Information System.",
        "output": "@startuml\nleft to right direction\n\nactor Law_Enforcement_Agent\nactor Citizen\n\nrectangle RoboCop_Crime_Information_System {\n    usecase \"Manage User Accounts\" as UC1\n    usecase \"Receive Crime Notifications\" as UC2\n    usecase \"Handle FIR\" as UC3\n    usecase \"Access Police Station Info\" as UC4\n    usecase \"View Crime Statistics\" as UC5\n    usecase \"Access Crime Database\" as UC6\n    usecase \"Manage Criminal Records\" as UC7\n    usecase \"Search Criminal Records\" as UC8\n    usecase \"Participate in Safety Forums\" as UC9\n}\n\nCitizen --> UC2\nCitizen --> UC3\nCitizen --> UC4\nCitizen --> UC9\n\nLaw_Enforcement_Agent --> UC1\nLaw_Enforcement_Agent --> UC2\nLaw_Enforcement_Agent --> UC3\nLaw_Enforcement_Agent --> UC4\nLaw_Enforcement_Agent --> UC5\nLaw_Enforcement_Agent --> UC6\nLaw_Enforcement_Agent --> UC7\nLaw_Enforcement_Agent --> UC8\n\nUC3 --> UC2 : <<include>>\n@enduml"
    },
    {
        "input": "The Anywhere Grocery Store Management System is an automated solution designed to streamline key operations in grocery stores, addressing challenges like inventory control, sales processing, and customer service inefficiencies. The system integrates inventory management, point of sale operations, supplier management, customer relationship management, and online shopping with delivery into a cohesive platform. By automating these processes, it improves accuracy, speeds up transactions, and enhances decision-making, ultimately boosting operational efficiency and customer satisfaction. Design a use case diagram for the Anywhere Grocery Store Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Supplier <<secondary>>\nactor Store_Manager\n\nrectangle Anywhere_Grocery_Store_Management_System {\n    usecase \"Manage Inventory\" as UC1\n    usecase \"Process Sales\" as UC2\n    usecase \"Manage Suppliers\" as UC3\n    usecase \"Handle Customer Service Requests\" as UC4\n    usecase \"Online Shopping\" as UC5\n    usecase \"Track Orders\" as UC6\n    usecase \"View Sales Reports\" as UC7\n    usecase \"Provide Stock\" as UC8\n    usecase \"Deliver Orders\" as UC9\n}\n\nCustomer --> UC5\nCustomer --> UC6\n\nStore_Manager --> UC1\nStore_Manager --> UC2\nStore_Manager --> UC3\nStore_Manager --> UC4\nStore_Manager --> UC7\nStore_Manager --> UC9\n\nSupplier --> UC8\n@enduml"
    },
    {
        "input": "The Gym Management System is a centralized software solution designed to streamline gym operations by integrating member management, class scheduling, attendance tracking, payments, and inventory management. It allows gym administrators to manage member registrations, class schedules, and payments, while enabling trainers to access class assignments and track attendance. The system also facilitates communication between members and staff, supports automated payment processing, and ensures real-time updates on inventory. Biometric or card-based attendance tracking and seamless communication tools enhance overall operational efficiency. Design a use case diagram for the Gym Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Member\nactor Trainer\nactor Gym_Admin\nactor Payment_Gateway <<secondary>>\n\nrectangle Gym_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"View Class Schedule\" as UC2\n    usecase \"Track Attendance\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Manage Inventory\" as UC5\n    usecase \"Communicate with Staff\" as UC6\n    usecase \"Assign Classes\" as UC7\n    usecase \"Process Payment\" as UC8\n    usecase \"Track Real-time Inventory\" as UC9\n}\n\nMember --> UC1\nMember --> UC2\nMember --> UC4\nMember --> UC6\n\nTrainer --> UC7\nTrainer --> UC3\n\nGym_Admin --> UC2\nGym_Admin --> UC5\nGym_Admin --> UC9\nGym_Admin --> UC8\n\nPayment_Gateway --> UC8\n@enduml"
    },
    {
        "input": "The Time Table Generating Management System is a comprehensive software solution designed to automate the creation and management of timetables in educational institutions. By utilizing intelligent algorithms, the system optimizes resource allocation, minimizes scheduling conflicts, and enhances productivity. The System allows administrators to enroll students, allocate courses to both students and faculty, and generate optimized timetables. Faculty members can input time preferences, while students can view their course schedules. The system also automatically allocates lecture halls and generates reports for both students and faculty, detailing their assigned courses and schedules. Design a use case diagram for the Time Table Generating Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Admin\nactor Faculty\nactor Student\n\nrectangle Time_Table_Generating_Management_System {\n    usecase \"Enroll Students\" as UC1\n    usecase \"Allocate Courses to Students\" as UC2\n    usecase \"Allocate Courses to Faculty\" as UC3\n    usecase \"Generate Timetable\" as UC4\n    usecase \"Allocate Lecture Halls\" as UC5\n    usecase \"Generate Reports\" as UC6\n    usecase \"Input Time Preferences\" as UC7\n    usecase \"View Course Schedule\" as UC8\n}\n\nAdmin --> UC1\nAdmin --> UC2\nAdmin --> UC3\nAdmin --> UC4\nAdmin --> UC5\nAdmin --> UC6\n\nFaculty --> UC7\nFaculty --> UC6\n\nStudent --> UC8\n@enduml"
    },
    {
        "input": "Cricket stadium management system provides a user-friendly platform for fans to buy tickets, access event information, and stay updated on all the happenings within the stadium. Additionally, the system facilitates seamless sponsorship opportunities for businesses to contribute to the stadium's operations and engage with the cricket community. Draw a use case diagram for the Cricket Stadium Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Fan\nactor Sponsor\n\nrectangle Cricket_Stadium_Management_System {\n    usecase \"Buy Tickets\" as UC1\n    usecase \"Access Event Information\" as UC2\n    usecase \"Receive Event Updates\" as UC3\n    usecase \"Explore Sponsorship Opportunities\" as UC4\n    usecase \"Engage with Cricket Community\" as UC5\n}\n\nFan --> UC1\nFan --> UC2\nFan --> UC3\n\nSponsor --> UC4\nSponsor --> UC5\n@enduml"
    },
    {
        "input": "The e-commerce system allows customers to log in and purchase tech goods and tech-related services at an affordable price. The system allows for managing orders, providing feedback, a customer helpline, and a wide catalog of products for meeting customer tech needs. The system also provides support for customers through a dedicated support team. Design a use case diagram for the e-commerce system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Support <<secondary>>\n\nrectangle E_Commerce_System {\n    usecase \"Log In\" as UC1\n    usecase \"Purchase Tech Goods\" as UC2\n    usecase \"Purchase Tech Services\" as UC3\n    usecase \"Track Orders\" as UC4\n    usecase \"Provide Feedback\" as UC5\n    usecase \"Access Customer Helpline\" as UC6\n    usecase \"Browse Product Catalog\" as UC7\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC6\n@enduml"
    },
    {
        "input": "Clinisync automates core clinic operations by providing a platform for managing patient information, scheduling appointments, handling billing, and supporting administrative tasks. The system enables efficient collaboration between staff members and allows for streamlined processes such as patient registration, appointment management, invoicing, and reporting. By facilitating these interactions, Clinisync improves clinic workflows and ensures that both administrative and clinical tasks are efficiently managed. Design a use case diagram for the Clinisync System.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Staff\n\nrectangle Clinisync_System {\n    usecase \"Register\" as UC1\n    usecase \"Manage Patient Information\" as UC2\n    usecase \"Schedule Appointment\" as UC3\n    usecase \"Handle Billing\" as UC4\n    usecase \"Generate Reports\" as UC5\n    usecase \"Manage Invoicing\" as UC6\n}\n\nPatient --> UC1\nPatient --> UC3\n\nStaff --> UC2\nStaff --> UC3\nStaff --> UC4\nStaff --> UC5\nStaff --> UC6\n@enduml"
    },
    {
        "input": "LawKeeper is a comprehensive law firm management information system designed to streamline and automate key operational tasks for law firms. The application allows lawyers to easily access and manage clientele files, track billable hours, organize case files, and manage appointments. The system is also designed to enhance client satisfaction by providing timely updates on case progress, access to essential documents, and visibility into billable hours and lawyer expertise. Additionally, clients can conduct transactions and track their cases through the platform, improving overall communication and transparency. Design a use case diagram for the LawKeeper System.",
        "output": "@startuml\nleft to right direction\n\nactor Lawyer\nactor Client\nactor Payment_Gateway <<secondary>>\n\nrectangle LawKeeper_System {\n    usecase \"Access and Manage Client Files\" as UC1\n    usecase \"Track Billable Hours\" as UC2\n    usecase \"Organize Case Files\" as UC3\n    usecase \"Manage Appointments\" as UC4\n    usecase \"Track Case Progress\" as UC5\n    usecase \"Receive Case Progress Updates\" as UC6\n    usecase \"Access Essential Documents\" as UC7\n    usecase \"View Billable Hours\" as UC8\n    usecase \"Conduct Transactions\" as UC9\n    usecase \"Process Payment\" as UC10\n}\n\nLawyer --> UC1\nLawyer --> UC2\nLawyer --> UC3\nLawyer --> UC4\n\nClient --> UC5\nClient --> UC7\nClient --> UC8\nClient --> UC9\n\nUC5 --> UC6 : <<include>>\nUC9 --> UC10 : <<include>>\n\nPayment_Gateway --> UC10\n@enduml"
    },
    {
        "input": "Real Estate Management System (REMS) is designed to simplify and automate property management, focusing on improving operational efficiency, transaction automation, and client engagement. It provides a centralized platform to streamline property listings, tracking, and financial management for various types of real estate properties. By minimizing manual processes and enhancing key interactions between property managers and clients, the system ensures seamless handling of sales, rentals, and leasing, while also offering robust financial tools for better decision-making. Additionally, REMS includes compliance reporting, data analytics for market insights, and is scalable to meet the needs of both small and large firms. Design a use case diagram for the Real Estate Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Property_Manager\nactor Client\nactor Financial_System <<secondary>>\n\nrectangle Real_Estate_Management_System {\n    usecase \"Manage Property Listings\" as UC1\n    usecase \"Track Property\" as UC2\n    usecase \"Handle Sales\" as UC3\n    usecase \"Handle Rentals\" as UC4\n    usecase \"Handle Leasing\" as UC5\n    usecase \"Generate Compliance Reports\" as UC6\n    usecase \"Analyze Market Data\" as UC7\n    usecase \"Make Transactions\" as UC8\n    usecase \"View Property\" as UC9\n}\n\nProperty_Manager --> UC1\nProperty_Manager --> UC2\nProperty_Manager --> UC3\nProperty_Manager --> UC4\nProperty_Manager --> UC5\nProperty_Manager --> UC6\nProperty_Manager --> UC7\n\nClient --> UC8\nClient --> UC9\n\nUC3 --> UC8 : <<include>>\nUC4 --> UC8 : <<include>>\nUC5 --> UC8 : <<include>>\n\nFinancial_System --> UC8\n@enduml"
    },
    {
        "input": "Design a use case diagram for a Real Estate Management System (REMS) that simplifies property management. The system allows property managers to handle property listings, track properties, and manage sales, rentals, and leasing. It includes compliance report generation and market data analysis for making informed decisions. Clients can view property details and perform transactions, while the system integrates with an external financial system for seamless payment processing.",
        "output": "@startuml\nleft to right direction\n\nactor Property_Manager\nactor Client\nactor Financial_System <<secondary>>\n\nrectangle Real_Estate_Management_System {\n    usecase \"Manage Property Listings\" as UC1\n    usecase \"Track Property\" as UC2\n    usecase \"Handle Sales\" as UC3\n    usecase \"Handle Rentals\" as UC4\n    usecase \"Handle Leasing\" as UC5\n    usecase \"Generate Compliance Reports\" as UC6\n    usecase \"Analyze Market Data\" as UC7\n    usecase \"Make Transactions\" as UC8\n    usecase \"View Property\" as UC9\n}\n\nProperty_Manager --> UC1\nProperty_Manager --> UC2\nProperty_Manager --> UC3\nProperty_Manager --> UC4\nProperty_Manager --> UC5\nProperty_Manager --> UC6\nProperty_Manager --> UC7\n\nClient --> UC8\nClient --> UC9\n\nUC3 --> UC8 : <<include>>\nUC4 --> UC8 : <<include>>\nUC5 --> UC8 : <<include>>\n\nFinancial_System --> UC8\n@enduml"
    },
    {
        "input": "An all-inclusive event management tool called EventEase is made to make every part of planning and executing an event easier. EventEase makes it simple for organizers to establish, modify, and oversee events by allowing them to enter vital information like names, descriptions, dates, venues, and different kinds and prices of tickets. Easy registration, safe online ticket purchases, and prompt updates via email or the EventEase mobile app are all advantages for attendees. The platform delivers strong statistics for evaluating the success of an event based on ticket sales, attendance demographics, and revenue. It also combines reliable payment processing technologies to ensure seamless transactions. Additionally, EventEase maintains the highest standards of security to protect customer data and privacy while ensuring effective communication through newsletters, social network integrations, and real-time notifications. For thorough monitoring, administrators can access a single dashboard that allows for effective management of speakers, venues, attendees, and financial details. EventEase offers an all-in-one solution for effective event planning and management, with a focus on accessibility, scalability, and user-friendliness. Give a use case diagram for EventEase.",
       "output": "@startuml\nleft to right direction\n\nactor Organizer\nactor Attendee\nactor Sponsor\nactor Payment_System <<secondary>>\n\nrectangle EventEase_Management_System {\n    usecase \"Register for Event\" as UC3\n    usecase \"Purchase Tickets\" as UC5\n    usecase \"Access Event Dashboard\" as UC8\n    usecase \"Receive Event Updates\" as UC6\n    usecase \"View Event Performance Metrics\" as UC7\n    usecase \"Manage Event Logistics\" as UC9\n    usecase \"Monitor Event Progress\" as UC10\n    usecase \"Promote Sponsor Branding\" as UC11\n    usecase \"Process Payment\" as UC12\n}\n\nOrganizer --> UC9\nOrganizer --> UC10\nOrganizer --> UC8\nOrganizer --> UC11\nOrganizer --> UC7\nOrganizer --> UC8\nAttendee --> UC3\nAttendee --> UC5\nAttendee --> UC6\nAttendee --> UC8\n\nSponsor --> UC11\n\nUC5 --> UC12 : <<include>>\n\nPayment_System --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for EventEase, an event management platform that helps organizers manage and plan events. The system supports functions like attendee registration, ticket purchases, event updates, and monitoring performance metrics. Administrators can manage event logistics and oversee event details through a centralized dashboard, while customers can buy tickets and receive updates about the events. Payment systems are integrated to handle transactions securely.",
        "output": "@startuml\nleft to right direction\n\nactor Organizer\nactor Attendee\nactor Sponsor\nactor Payment_System <<secondary>>\n\nrectangle EventEase_Management_System {\n    usecase \"Register for Event\" as UC3\n    usecase \"Purchase Tickets\" as UC5\n    usecase \"Access Event Dashboard\" as UC8\n    usecase \"Receive Event Updates\" as UC6\n    usecase \"View Event Performance Metrics\" as UC7\n    usecase \"Manage Event Logistics\" as UC9\n    usecase \"Monitor Event Progress\" as UC10\n    usecase \"Promote Sponsor Branding\" as UC11\n    usecase \"Process Payment\" as UC12\n}\n\nOrganizer --> UC9\nOrganizer --> UC10\nOrganizer --> UC8\nOrganizer --> UC11\nOrganizer --> UC7\n\nAttendee --> UC3\nAttendee --> UC5\nAttendee --> UC6\nAttendee --> UC8\n\nSponsor --> UC11\n\nUC5 --> UC12 : <<include>>\n\nPayment_System --> UC12\n@enduml"
    },
    {
        "input": "The Online Learning Management System (OLMS) is a comprehensive platform designed to facilitate online education and training. OLMS offers features like course creation, student enrollment, assessments, and progress tracking. It also provides tools for communication, collaboration, and content delivery. The system aims to enhance the learning experience for students and streamline the teaching process for instructors. Design a use case diagram for the Online Learning Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Instructor\nactor Student\n\nrectangle Online_Learning_Management_System {\n    usecase \"Create Course\" as UC1\n    usecase \"Enroll Students\" as UC2\n    usecase \"Assess Students\" as UC3\n    usecase \"Track Progress\" as UC4\n    usecase \"Communicate through Chat\" as UC5\n    usecase \"Deliver Content\" as UC6\n    usecase \"Take Assessment\" as UC7\n}\n\nInstructor --> UC1\nInstructor --> UC2\nInstructor --> UC3\nInstructor --> UC4\nInstructor --> UC5\nInstructor --> UC6\nStudent --> UC5\nStudent --> UC7\n@enduml"
    },
    {
        "input": "Design a use case diagram for a crypto exchange system involving currency exchange, trading, viewing market trends, and updating market trends using external market data from sources like Binance and Kraken.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor \"External Market API (Binance, Kraken)\" as ExternalMarketAPI <<secondary>>\n\nrectangle Crypto_Exchange_System {\n    usecase \"Exchange Cryptocurrencies\" as UC1\n    usecase \"Perform Trading\" as UC2\n    usecase \"View Market Trends\" as UC3\n    usecase \"Update Market Trends\" as UC4\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\n\nUC3 --> UC4 : <<include>>\nExternalMarketAPI --> UC4\n@enduml"
    }
]

