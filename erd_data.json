[
    {
        "input": "Give the ERD for this system. The company is organized into departments. Each department has a unique name, a unique number, and a particular employee who manages the department. We keep track of the start date when that employee began managing the department. A department may have several locations. A department controls a number of projects, each of which has a unique name, a unique number, and a single location. The database will store each employee’s name, Social Security number, address, salary, sex (gender), and birth date. An employee is assigned to one department, but may work on several projects, which are not necessarily controlled by the same department. It is required to keep track of the current number of hours per week that an employee works on each project, as well as the direct supervisor of each employee (who is another employee). The database will keep track of the dependents of each employee for insurance purposes, including each dependent’s first name, sex, birth date, and relationship to the employee.",
        "output": "@startchen\nentity Department {\n    name <<key>>\n    number\n    start_date\n    locations\n}\n\nentity Employee {\n    ssn <<key>>\n    name\n    address\n    salary\n    sex\n    birth_date\n    supervisor_ssn <<FK>>\n    department_number <<FK>>\n}\n\nentity Project {\n    name <<key>>\n    number\n    location\n    department_number\n}\n\nentity Dependent {\n    id <<key>>\n    first_name\n    sex\n    birth_date\n    relationship\n    employee_ssn <<FK>>\n}\n\nentity Supervisor {\n    ssn <<key>>\n    name\n}\n\nrelationship manages {\n}\n\nrelationship controls {\n}\n\nrelationship works_on {\n}\n\nrelationship has {\n}\n\nrelationship supervises {\n}\n\n' Relationships\nDepartment -1- manages\nmanages -N- Employee\nDepartment -1- controls\ncontrols -N- Project\nEmployee -1- works_on\nworks_on -N- Project\nEmployee -1- has\nhas -N- Dependent\nSupervisor -1- supervises\nsupervises -N- Employee\n\n@endchen"
    },
    {
        "input": "Give the ERD for this system. 1. The university is organized into colleges (COLLEGE), and each college has a unique name (CName), a main office (COffice) and phone (CPhone), and a particular faculty member who is dean of the college. 2. Each college administers a number of academic departments (DEPT). 3. Each department has a unique name (DName), a unique code number (DCode), a main office (DOffice) and phone (DPhone), and a particular faculty member who chairs the department. We keep track of the start date (CStartDate) when that faculty member began chairing the department. 4. A department offers a number of courses (COURSE), each of which has a unique course name (CoName), a unique code number (CCode), a course level (Level: this can be coded as 1 for freshman level, 2 for sophomore, 3 for junior, 4 for senior, 5 for MS level, and 6 for PhD level), a course credit hours (Credits), and a course description (CDesc). 5. The database also keeps track of instructors (INSTRUCTOR); and each instructor has a unique identifier (Id), name (IName), office (IOffice), phone (IPhone), and rank (Rank); in addition, each instructor works for one primary academic department. 6. The database will keep student data (STUDENT) and stores each student’s name (SName, composed of first name (FName), middle name (MName), last name (LName)), student id (Sid, unique for every student), address (Addr), phone (Phone), major code (Major), and date of birth (DoB). 7. A student is assigned to one primary academic department. 8. It is required to keep track of the student’s grades in each section the student has completed. 9. Courses are offered as sections (SECTION). 10. Each section is related to a single course and a single instructor and has a unique section identifier (SecId). 11. A section also has a section number (SecNo: this is coded as 1, 2, 3, . . . for multiple sections offered during the same semester/year), semester (Sem), year (Year), classroom (CRoom: this is coded as a combination of building code (Bldg) and room number (RoomNo) within the building), and days/times (DaysTime: for example, ‘MWF 9am-9.50am’ or ‘TR 3.30pm-5.20pm’—restricted to only allowed days/time values). 12. The database keeps track of the students in each section, and the grade is recorded when available (this is a many-to-many relationship between students and sections). 13. A section must have at least five students.",
        "output": "@startchen\nentity College {\n    CName <<key>>\n    COffice\n    CPhone\n}\n\nentity Faculty {\n    FacultyId <<key>>\n    FacultyName\n}\n\nentity Dean {\n    Id <<key>>\n    Name\n    FacultyId <<FK>>\n}\n\nentity Department {\n    DName <<key>>\n    DCode <<key>>\n    DOffice\n    DPhone\n    CStartDate\n    DeanId <<FK>>\n}\n\nentity Course {\n    CoName <<key>>\n    CCode <<key>>\n    Level\n    Credits\n    CDesc\n}\n\nentity Instructor {\n    Id <<key>>\n    IName\n    IOffice\n    IPhone\n    Rank\n    DepartmentCode <<FK>>\n}\n\nentity Student {\n    Sid <<key>>\n    Name {\n        FName\n        MName\n        LName\n    }\n    Addr\n    Phone\n    Major\n    DoB\n    DepartmentCode <<FK>>\n}\n\nentity Section {\n    SecId <<key>>\n    SecNo\n    Sem\n    Year\n    CRoom\n    DaysTime\n    grade\n}\n\nrelationship administers {\n}\n\nrelationship offers {\n}\n\nrelationship teaches {\n}\n\nrelationship employs {\n}\n\nrelationship enrolls {\n}\n\nrelationship has {\n}\n\nrelationship supervises {\n}\n\n' Relationships\nCollege -1- administers\nadministers -N- Department\nDepartment -1- employs\nemploys -N- Faculty\nDepartment -1- has\nhas -N- Course\nDepartment -1- employs\nemploys -N- Instructor\nInstructor -1- teaches\nteaches -N- Section\nCourse -1- has\nhas -N- Section\nStudent -N- enrolls\nenrolls -N- Section\nDean -1- supervises\nsupervises -N- Department\n\n@endchen"
    },
    {
        "input": "Design an ER schema for keeping track of information about votes taken in the U.S. House of Representatives during the current two-year congressional session. The database needs to keep track of each U.S. STATE’s Name (e.g., ‘Texas’, ‘New York’, ‘California’) and include the Region of the state (whose domain is {‘Northeast’, ‘Midwest’, ‘Southeast’, ‘Southwest’, ‘West’}). Each CONGRESS_PERSON in the House of Representatives is described by his or her Name, plus the District represented, the Start_date when the congressperson was first elected, and the political Party to which he or she belongs (whose domain is {‘Republican’, ‘Democrat’, ‘Independent’, ‘Other’}). The database keeps track of each BILL (i.e., proposed law), including the Bill_name, the Date_of_vote on the bill, whether the bill Passed_or_failed (whose domain is {‘Yes’, ‘No’}), and the Sponsor (the congressperson(s) who sponsored—that is, proposed—the bill). The database also keeps track of how each congressperson voted on each bill (domain of Vote attribute is {‘Yes’, ‘No’, ‘Abstain’, ‘Absent’}).",
        "output": "@startchen\nentity State {\n    Name <<key>>\n    Region {\n        ' Domains\n        Northeast\n        Midwest\n        Southeast\n        Southwest\n        West\n    }\n}\n\nentity CongressPerson {\n    Name <<key>>\n    District\n    Start_date\n    Party {\n        ' Domains\n        Republican\n        Democrat\n        Independent\n        Other\n    }\n}\n\nentity Bill {\n    Bill_name <<key>>\n    Date_of_vote\n    Passed_or_failed {\n        ' Domains\n        Yes\n        No\n    }\n    Sponsor <<FK>>\n}\n\nentity Vote {\n    VoteID <<key>>\n    CongressPerson_Name <<FK>>\n    Bill_Name <<FK>>\n    Vote {\n        ' Domains\n        Yes\n        No\n        Abstain\n        Absent\n    }\n}\n\nrelationship administers{\n}\n\nrelationship sponsors {\n}\n\nrelationship votes_on {\n}\n\nrelationship relates_to {\n}\n\n' Relationships\nState -1- administers\nadministers -N- CongressPerson\nCongressPerson -N- sponsors\nsponsors -1- Bill\nCongressPerson -N- votes_on\nvotes_on -N- Vote\nVote -N- relates_to\nrelates_to -1- Bill\n@endchen"
    },
    {
        "input": "Give ERD for this system. A database is being constructed to keep track of the teams and games of a sports league. A team has a number of players, not all of whom participate in each game. It is desired to keep track of the players participating in each game for each team, the positions they played in that game, and the result of the game.",
        "output": "@startchen\nentity Team {\n    TeamID <<key>>\n    TeamName\n}\n\nentity Player {\n    PlayerID <<key>>\n    PlayerName\n    TeamID <<FK>>\n}\n\nentity Game {\n    GameID <<key>>\n    Date\n    Opponent\n    Result\n}\n\nentity Participation {\n    ParticipationID <<key>>\n    PlayerID <<FK>>\n    GameID <<FK>>\n    PositionPlayed\n}\n\nrelationship has {\n}\n\nrelationship plays_in {\n}\n\nrelationship participates_in {\n}\n\nrelationship involves {\n}\n\n' Relationships\nTeam -1- has\nhas -N- Player\nPlayer -N- plays_in\nplays_in -N- Game\nPlayer -N- participates_in\nparticipates_in -N- Participation\nGame -1- involves\ninvolves -N- Participation\n@endchen"
    },
    {
        "input": "Give an ERD for this system. Consider a MAIL_ORDER database in which employees take orders for parts from customers. The data requirements are summarized as follows:\n1. The mail order company has employees, each identified by a unique employee number, first and last name, and Zip Code.\n2. Each customer of the company is identified by a unique customer number, first and last name, and Zip Code.\n3. Each part sold by the company is identified by a unique part number, a part name, price, and quantity in stock.\n4. Each order placed by a customer is taken by an employee and is given a unique order number. Each order contains specified quantities of one or more parts. Each order has a date of receipt as well as an expected ship date. The actual ship date is also recorded.",
        "output": "@startchen\nentity Company {\n    CompanyID <<key>>\n    CompanyName\n    Address\n    ZipCode\n}\n\nentity Employee {\n    EmployeeID <<key>>\n    FirstName\n    LastName\n    ZipCode\n    CompanyID <<FK>>\n}\n\nentity Customer {\n    CustomerID <<key>>\n    FirstName\n    LastName\n    ZipCode\n    CompanyID <<FK>>\n}\n\nentity Part {\n    PartNumber <<key>>\n    PartName\n    Price\n    QuantityInStock\n}\n\nentity Order {\n    OrderNumber <<key>>\n    OrderDate\n    ExpectedShipDate\n    ActualShipDate\n    EmployeeID <<FK>>\n    CustomerID <<FK>>\n}\n\nentity OrderDetail {\n    OrderDetailID <<key>>\n    OrderNumber <<FK>>\n    PartNumber <<FK>>\n    Quantity\n}\n\nrelationship employs {\n}\n\nrelationship serves {\n}\n\nrelationship takes {\n}\n\nrelationship places {\n}\n\nrelationship contains {\n}\n\nrelationship included_in {\n}\n}\n\n' Relationships\nCompany -1- employs\nemploys -N- Employee\nCompany -1- serves\nserves -N- Customer\nEmployee -1- takes\ntakes -N- Order\nCustomer -1- places\nplaces -N- Order\nOrder -1- contains\ncontains -N- OrderDetail\nPart -1- included_in\nincluded_in -N- OrderDetail\n\n@endchen"
    },
    {
        "input": "Give the ERD for this system. Consider a MOVIE database in which data is recorded about the movie industry. The data requirements are summarized as follows:\n1. Each movie is identified by title and year of release. Each movie has a length in minutes. Each has a production company, and each is classified under one or more genres (such as horror, action, drama, and so forth).\n2. Each movie has one or more directors and one or more actors appearing in it.\n3. Each movie also has a plot outline. Finally, each movie has zero or more quotable quotes, each of which is spoken by a particular actor appearing in the movie.\n4. Actors are identified by name and date of birth and appear in one or more movies. Each actor has a role in the movie.\n5. Directors are also identified by name and date of birth and direct one or more movies. It is possible for a director to act in a movie (including one that he or she may also direct).\n6. Production companies are identified by name and each has an address. A production company produces one or more movies.",
        "output": "@startchen\nentity Movie {\n    Title <<key>>\n    YearOfRelease\n    LengthInMinutes\n    PlotOutline\n}\n\nentity Genre {\n    GenreName <<key>>\n}\n\nentity Actor {\n    ActorName <<key>>\n    DateOfBirth\n}\n\nentity Director {\n    DirectorName <<key>>\n    DateOfBirth\n}\n\nentity ProductionCompany {\n    CompanyName <<key>>\n    Address\n}\n\nentity Quote {\n    QuoteID <<key>>\n    QuoteText\n}\n\nentity Role {\n    RoleID <<key>>\n    RoleName\n    ActorName <<FK>>\n    MovieTitle <<FK>>\n}\n\nrelationship belongs_to {\n}\n\nrelationship acts_in {\n}\n\nrelationship directs {\n}\n\nrelationship produces {\n}\n\nrelationship has {\n}\n\nrelationship spoken_by {\n}\n\nrelationship features {\n}\n\nrelationship plays {\n}\n\n' Relationships\nMovie -1- belongs_to\nbelongs_to -N- Genre\nMovie -N- acts_in\nacts_in -N- Actor\nMovie -N- acts_in\nacts_in -N- Director\nMovie -N- directs\ndirects -N- Director\nProductionCompany -1- produces\nproduces -N- Movie\nMovie -1- has\nhas -N- Quote\nQuote -N- spoken_by\nspoken_by -1- Actor\nActor -N- plays\nplays -N- Role\nMovie -N- features\nfeatures -N- Role\n\n@endchen"
    },
    {
        "input": "Give the ERD for this system. Consider a CONFERENCE_REVIEW database in which researchers submit their research papers for consideration. Reviews by reviewers are recorded for use in the paper selection process. The database system caters primarily to reviewers who record answers to evaluation questions for each paper they review and make recommendations regarding whether to accept or reject the paper. The data requirements are summarized as follows: 1. Authors of papers are uniquely identified by e-mail id. First and last names are also recorded. 2. Each paper is assigned a unique identifier by the system and is described by a title, abstract, and the name of the electronic file containing the paper. 3. A paper may have multiple authors, but one of the authors is designated as the contact author. 4. Reviewers of papers are uniquely identified by e-mail address. Each reviewer’s first name, last name, phone number, affiliation, and topics of interest are also recorded. 5. Each paper is assigned between two and four reviewers. A reviewer rates each paper assigned to him or her on a scale of 1 to 10 in four categories: technical merit, readability, originality, and relevance to the conference. 6. Finally, each reviewer provides an overall recommendation regarding each paper. 7. Each review contains two types of written comments: one to be seen by the review committee only and the other as feedback to the author(s).",
        "output": "@startchen\nentity Author {\n    EmailID <<key>>\n    FirstName\n    LastName\n}\n\nentity Paper {\n    PaperID <<key>>\n    Title\n    Abstract\n    FileName\n    ContactAuthorID <<FK>>\n}\n\nentity Reviewer {\n    EmailID <<key>>\n    FirstName\n    LastName\n    PhoneNumber\n    Affiliation\n    TopicsOfInterest\n}\n\nentity Review {\n    ReviewID <<key>>\n    PaperID <<FK>>\n    ReviewerID <<FK>>\n    TechnicalMeritRating\n    ReadabilityRating\n    OriginalityRating\n    RelevanceRating\n    OverallRecommendation\n    CommitteeComments\n    AuthorFeedback\n}\n\nrelationship has {\n}\n\nrelationship submits {\n}\n\nrelationship rates {\n}\n\nrelationship assigned_to {\n}\n\nrelationship reviews {\n}\n\n' Relationships\nAuthor -N- submits\nsubmits -1- Paper\nPaper -N- assigned_to\nassigned_to -N- Reviewer\nReviewer -N- reviews\nreviews -1- Review\nReview -1- rates\nrates -1- Paper\n\n@endchen"
    },
    {
        "input": "The following narrative describes a simplified version of the organization of Olympic facilities planned for the summer Olympics. Draw an EER diagram that shows the entity types, attributes, relationships, and specializations for this application. State any assumptions you make. The Olympic facilities are divided into sports complexes. Sports complexes are divided into one-sport and multisport types. Multisport complexes have areas of the complex designated for each sport with a location indicator (e.g., center, NE corner, and so on). A complex has a location, chief organizing individual, total occupied area, and so on. Each complex holds a series of events (e.g., the track stadium may hold many different races). For each event, there is a planned date, duration, number of participants, number of officials, and so on. A roster of all officials will be maintained together with the list of events each official will be involved in. Different equipment is needed for the events (e.g., goal posts, poles, parallel bars) as well as for maintenance. The two types of facilities (one-sport and multisport) will have different types of information. For each type, the number of facilities needed is kept, together with an approximate budget.",
        "output": "@startchen\nentity SportsComplex {\n    ComplexID <<key>>\n    Location\n    ChiefOrganizingIndividual\n    TotalOccupiedArea\n    NumberOfFacilities\n    ApproximateBudget\n}\n\nentity OneSportComplex {\n}\n\nentity MultiSportComplex {\n    AreaID <<key>>\n    SportType\n    LocationIndicator\n}\n\nentity Event {\n    EventID <<key>>\n    PlannedDate\n    Duration\n    NumberOfParticipants\n    NumberOfOfficials\n}\n\nentity Official {\n    OfficialID <<key>>\n    Name\n    Role\n}\n\nentity Equipment {\n    EquipmentID <<key>>\n    EquipmentType\n}\n\nentity Roster {\n    RosterID <<key>>\n}\n\nrelationship hosts {\n}\n\nrelationship involves {\n}\n\nrelationship requires {\n}\n\nrelationship listed_in {\n}\n\n' Relationships\nSportsComplex -1- hosts\nhosts -N- Event\nEvent -N- involves\ninvolves -1- Official\nMultiSportComplex -1- requires\nrequires -N- Equipment\nOneSportComplex -1- requires\nrequires -N- Equipment\nOfficial -N- listed_in\nlisted_in -1- Roster\n\n' Specialization\nSportsComplex ->- OneSportComplex\nSportsComplex ->- MultiSportComplex\n\n@endchen"
    },
    {
        "input": "Provide ERD for this system. The Georgia Tech Library (GTL) has approximately 16,000 members, 100,000 titles, and 250,000 volumes (an average of 2.5 copies per book). About 10% of the volumes are out on loan at any one time. The librarians ensure that the books that members want to borrow are available when the members want to borrow them. Also, the librarians must know how many copies of each book are in the library or out on loan at any given time. A catalog of books is available online that lists books by author, title, and subject area. For each title in the library, a book description is kept in the catalog; the description ranges from one sentence to several pages. The reference librarians want to be able to access this description when members request information about a book. Library staff includes chief librarian, departmental associate librarians, reference librarians, check-out staff, and library assistants. Books can be checked out for 21 days. Members are allowed to have only five books out at a time. Members usually return books within three to four weeks. Most members know that they have one week of grace before a notice is sent to them, so they try to return books before the grace period ends. About 5% of the members have to be sent reminders to return books. Most overdue books are returned within a month of the due date. Approximately 5% of the overdue books are either kept or never returned. The most active members of the library are defined as those who borrow books at least ten times during the year. The top 1% of membership does 15% of the borrowing, and the top 10% of the membership does 40% of the borrowing. About 20% of the members are totally inactive in that they are members who never borrow. To become a member of the library, applicants fill out a form including their SSN, campus and home mailing addresses, and phone numbers. The librarians issue a numbered, machine-readable card with the member’s photo on it. This card is good for four years. A month before a card expires, a notice is sent to a member for renewal. Professors at the institute are considered automatic members. When a new faculty member joins the institute, his or her information is pulled from the employee records and a library card is mailed to his or her campus address. Professors are allowed to check out books for three-month intervals and have a two-week grace period. Renewal notices to professors are sent to their campus address. The library does not lend some books, such as reference books, rare books, and maps. The librarians must differentiate between books that can be lent and those that cannot be lent. In addition, the librarians have a list of some books they are interested in acquiring but cannot obtain, such as rare or out-of-print books and books that were lost or destroyed but have not been replaced. The librarians must have a system that keeps track of books that cannot be lent as well as books that they are interested in acquiring. Some books may have the same title; therefore, the title cannot be used as a means of identification. Every book is identified by its International Standard Book Number (ISBN), a unique international code assigned to all books. Two books with the same title can have different ISBNs if they are in different languages or have different bindings (hardcover or softcover). Editions of the same book have different ISBNs. The proposed database system must be designed to keep track of the members, the books, the catalog, and the borrowing activity.",
        "output": "@startchen\nentity Member {\n    MemberID <<key>>\n    SSN\n    FirstName\n    LastName\n    CampusAddress\n    HomeAddress\n    PhoneNumber\n    MembershipType\n    CardExpirationDate\n    IsActive\n}\n\nentity Book {\n    ISBN <<key>>\n    Title\n    Author\n    SubjectArea\n    Description\n    CanBeLent\n    IsRare\n}\n\nentity Loan {\n    LoanID <<key>>\n    MemberID <<FK>>\n    ISBN <<FK>>\n    CheckoutDate\n    DueDate\n    ReturnDate\n    IsOverdue\n}\n\nentity Librarian {\n    LibrarianID <<key>>\n    Name\n    Role\n}\n\nentity Catalog {\n    CatalogID <<key>>\n    ISBN <<FK>>\n    Title\n    Author\n    SubjectArea\n    Description\n}\n\nentity Reminder {\n    ReminderID <<key>>\n    MemberID <<FK>>\n    NoticeDate\n    RenewalDate\n}\n\nrelationship borrows {\n}\n\nrelationship manages {\n}\n\nrelationship issues {\n}\n\nrelationship has {\n}\n\nrelationship includes {\n}\n\n' Relationships\nMember -N- borrows\nborrows -N- Loan\nLibrarian -N- manages\nmanages -N- Catalog\nCatalog -1- has\nhas -N- Book\nMember -N- issues\nissues -1- Reminder\nLoan -1- includes\nincludes -(1,5)- Book\n\n@endchen"
    },
    {
        "input": "Give an ERD for this scenario. Design a database to keep track of information for an art museum. Assume that the following requirements were collected: 1. The museum has a collection of ART_OBJECTS. Each ART_OBJECT has a unique Id_no, an Artist (if known), a Year (when it was created, if known), a Title, and a Description. The art objects are categorized in several ways, as discussed below. 2. ART_OBJECTS are categorized based on their type. There are three main types—PAINTING, SCULPTURE, and STATUE—plus another type called OTHER to accommodate objects that do not fall into one of the three main types. 3. A PAINTING has a Paint_type (oil, watercolor, etc.), material on which it is Drawn_on (paper, canvas, wood, etc.), and Style (modern, abstract, etc.). 4. A SCULPTURE or a statue has a Material from which it was created (wood, stone, etc.), Height, Weight, and Style. 5. An art object in the OTHER category has a Type (print, photo, etc.) and Style. 6. ART_OBJECTs are categorized as either PERMANENT_COLLECTION (objects that are owned by the museum) and BORROWED. Information captured about objects in the PERMANENT_COLLECTION includes Date_acquired, Status (on display, on loan, or stored), and Cost. Information captured about BORROWED objects includes the Collection from which it was borrowed, Date_borrowed, and Date_returned. 7. Information describing the country or culture of Origin (Italian, Egyptian, American, Indian, and so forth) and Epoch (Renaissance, Modern, Ancient, and so forth) is captured for each ART_OBJECT. 8. The museum keeps track of ARTIST information, if known: Name, DateBorn (if known), Date_died (if not living), Country_of_origin, Epoch, Main_style, and Description. The Name is assumed to be unique. 9. Different EXHIBITIONS occur, each having a Name, Start_date, and End_date. EXHIBITIONS are related to all the art objects that were on display during the exhibition. 10. Information is kept on other COLLECTIONS with which the museum interacts; this information includes Name (unique), Type (museum, personal, etc.), Description, Address, Phone, and current Contact_person.",
        "output": "@startchen left to right direction entity \"ART_OBJECT\" as ART_OBJECT { Id_no <<key>> Artist Year Title Description } entity \"PAINTING\" as PAINTING { Paint_type Drawn_on Style } entity \"SCULPTURE\" as SCULPTURE { Material Height Weight Style } entity \"STATUE\" as STATUE { Material Height Weight Style } entity \"OTHER\" as OTHER { Type Style } entity \"PERMANENT_COLLECTION\" as PERMANENT_COLLECTION { Date_acquired Status Cost } entity \"BORROWED\" as BORROWED { Collection Date_borrowed Date_returned } entity \"ORIGIN\" as ORIGIN { Country_or_Culture Epoch } entity \"ARTIST\" as ARTIST { Name <<key>> DateBorn Date_died Country_of_origin Epoch Main_style Description } entity \"EXHIBITION\" as EXHIBITION { Name <<key>> Start_date End_date } entity \"COLLECTION\" as COLLECTION { Name <<key>> Type Description Address Phone Contact_person } relationship \"CREATED_BY\" as CREATED_BY <<identifying>> { } relationship \"ORIGINATED_FROM\" as ORIGINATED_FROM { } relationship \"DISPLAYED_IN\" as DISPLAYED_IN { } relationship \"PART_OF\" as PART_OF { } relationship \"BORROWED_FROM\" as BORROWED_FROM { } relationship \"IS_A\" as IS_A { } relationship \"PROVIDES\" as PROVIDES { } ARTIST -1- CREATED_BY CREATED_BY -N- ART_OBJECT ART_OBJECT -N- ORIGINATED_FROM ORIGINATED_FROM -1- ORIGIN ART_OBJECT -N- DISPLAYED_IN DISPLAYED_IN -1- EXHIBITION ART_OBJECT -N- PART_OF PART_OF -1- PERMANENT_COLLECTION ART_OBJECT -N- BORROWED_FROM BORROWED_FROM -1- BORROWED ART_OBJECT -1- IS_A IS_A -1- PAINTING IS_A -1- SCULPTURE IS_A -1- STATUE IS_A -1- OTHER COLLECTION -1- PROVIDES PROVIDES -N- BORROWED @endchen"
    },
    {
        "input": "Provide an ERD for the following scenario. 1. An EER diagram for a small-private-airport database; the database is used to keep track of airplanes, their owners, airport employees, and pilots. 2. Each AIRPLANE has a registration number [Reg#], is of a particular plane type [OF_TYPE], and is stored in a particular hangar [STORED_IN]. 3. Each PLANE_TYPE has a model number [Model], a capacity [Capacity], and a weight [Weight]. 4. Each HANGAR has a number [Number], a capacity [Capacity], and a location [Location]. 5. The database also keeps track of the OWNERs of each plane [OWNS] and the EMPLOYEEs who have maintained the plane [MAINTAIN]. 6. Each relationship instance in OWNS relates an AIRPLANE to an OWNER and includes the purchase date [Pdate]. 7. Each relationship instance in MAINTAIN relates an EMPLOYEE to a service record [SERVICE]. 8. Each plane undergoes service many times; hence, it is related by [PLANE_SERVICE] to a number of SERVICE records. 9. A SERVICE record includes as attributes the date of maintenance [Date], the number of hours spent on the work [Hours], and the type of work done [Work_code]. 10. We use a weak entity type [SERVICE] to represent airplane service, because the airplane registration number is used to identify a service record. 11. An OWNER is either a person or a corporation. Hence, we use a union type (category) [OWNER] that is a subset of the union of corporation [CORPORATION] and person [PERSON] entity types. 12. Both pilots [PILOT] and employees [EMPLOYEE] are subclasses of PERSON. 13. Each PILOT has specific attributes license number [Lic_num] and restrictions [Restr]; each EMPLOYEE has specific attributes salary [Salary] and shift worked [Shift]. 14. All PERSON entities in the database have data kept on their Social Security number [Ssn], name [Name], address [Address], and telephone number [Phone]. 15. For CORPORATION entities, the data kept includes name [Name], address [Address], and telephone number [Phone]. 16. The database also keeps track of the types of planes each pilot is authorized to fly [FLIES] and the types of planes each employee can do maintenance work on [WORKS_ON].",
        "output": "@startchen\nleft to right direction\n\n' Entities and their attributes\nentity \"AIRPLANE\" as AIRPLANE {\n    Reg <<key>>\n    OF_TYPE\n    STORED_IN\n}\n\nentity \"PLANE_TYPE\" as PLANE_TYPE {\n    Model <<key>>\n    Capacity\n    Weight\n}\n\nentity \"HANGAR\" as HANGAR {\n    Number <<key>>\n    Capacity\n    Location\n}\n\nentity \"OWNER\" as OWNER {\n}\n\nentity \"CORPORATION\" as CORPORATION {\n    Name <<key>>\n    Address\n    Phone\n}\n\nentity \"PERSON\" as PERSON {\n    Ssn <<key>>\n    Name\n    Address\n    Phone\n}\n\nentity \"EMPLOYEE\" as EMPLOYEE {\n    Salary\n    Shift\n}\n\nentity \"PILOT\" as PILOT {\n    Lic_num <<key>>\n    Restr\n}\n\nentity \"SERVICE\" as SERVICE {\n    Date\n    Hours\n    Work_code\n}\n\n' Relationships and their cardinalities\nrelationship \"OWNS\" as OWNS {\n    Pdate\n}\n\nrelationship \"MAINTAIN\" as MAINTAIN {\n}\n\nrelationship \"PLANE_SERVICE\" as PLANE_SERVICE {\n}\n\nrelationship \"FLIES\" as FLIES {\n}\n\nrelationship \"WORKS_ON\" as WORKS_ON {\n}\n\nrelationship STORED_IN {\n}\n\nrelationship OF_TYPE {\n}\n\n' Define relationships\nAIRPLANE -N- OWNS\nOWNS -1- OWNER\nOWNER ->- o { PERSON, CORPORATION }\nPERSON =>= d { EMPLOYEE, PILOT }\nEMPLOYEE -N- MAINTAIN\nMAINTAIN -1- SERVICE\nAIRPLANE -N- PLANE_SERVICE\nPLANE_SERVICE -1- SERVICE\n\nPILOT -N- FLIES\nFLIES -1- PLANE_TYPE\n\nEMPLOYEE -N- WORKS_ON\nWORKS_ON -1- PLANE_TYPE\n\nAIRPLANE -N- STORED_IN\nSTORED_IN -1- HANGAR\n\nAIRPLANE -1- OF_TYPE\nOF_TYPE -1- PLANE_TYPE\n\n@endchen"
    },
    {
        "input": "Provide ERD for this system. 1. The game of chess is played between two players. 2. The game is played on an 8 × 8 board. 3. The players are assigned a color of black or white at the start of the game. 4. Each player starts with the following pieces (traditionally called chessmen): a. king, b. queen, c. 2 rooks, d. 2 bishops, e. 2 knights, f. 8 pawns. 5. Every piece has its own initial position. 6. Every piece has its own set of legal moves based on the state of the game. You do not need to worry about which moves are or are not legal except for the following issues: a. A piece may move to an empty square or capture an opposing piece. b. If a piece is captured, it is removed from the board. c. If a pawn moves to the last row, it is “promoted” by converting it to another piece (queen, rook, bishop, or knight).",
        "output": "@startchen\nleft to right direction\n\n' Entities and their attributes\nentity \"GAME\" as GAME {\n    Id <<key>>\n    Status\n}\nentity \"PLAYER\" as PLAYER {\n    Id <<key>>\n    Color\n}\n\nentity \"BOARD\" as BOARD {\n    Dimensions\n}\n\nentity \"PIECE\" as PIECE {\n    Type\n    Initial_position\n}\n\nentity \"KING\" as KING {\n}\n\nentity \"QUEEN\" as QUEEN {\n}\n\nentity \"ROOK\" as ROOK {\n}\n\nentity \"BISHOP\" as BISHOP {\n}\n\nentity \"KNIGHT\" as KNIGHT {\n}\n\nentity \"PAWN\" as PAWN {\n}\n\n' Relationships and their cardinalities\nrelationship \"HAS\" as HAS {\n}\nrelationship \"PLAYS\" as PLAYS {\n}\nrelationship \"MOVES\" as MOVES {\n}\nrelationship \"CONTAINS\" as CONTAINS {\n}\n\n' Define relationships\nGAME -1- HAS\nHAS -2- PLAYER\nPLAYER -1- PLAYS\nPLAYS -N- PIECE\nPLAYER -N- MOVES\nMOVES -1- PIECE\nGAME -1- HAS\nHAS -N- PIECE\nPIECE ->- o { KING, QUEEN, ROOK, BISHOP, KNIGHT, PAWN }\n\nGAME -1- CONTAINS\nCONTAINS -1- BOARD\n\n@endchen"
    },
    {
        "input": "GIve ERD for the following system. Consider a GRADE_BOOK database in which instructors within an academic department record points earned by individual students in their classes, where each student is identified by a unique identifier, first and last name, and an e-mail address; each instructor teaches certain courses each term, identified by a course number, section number, and term; students are enrolled in each course; each course has grading components with maximum points and weights, totaling 100; instructors record the points earned by each student in each grading component.",
        "output": "@startchen\n\n' Entities and their attributes\nentity \"STUDENT\" as STUDENT {\n    StudentID <<key>>\n    FirstName\n    LastName\n    Email\n}\n\nentity \"INSTRUCTOR\" as INSTRUCTOR {\n    InstructorID <<key>>\n    FirstName\n    LastName\n}\n\nentity \"COURSE\" as COURSE {\n    CourseNumber <<key>>\n    SectionNumber <<key>>\n    Term\n}\n\nentity \"GRADING_COMPONENT\" as GRADING_COMPONENT {\n    ComponentName <<key>>\n    MaxPoints\n    Weight\n}\n\nentity \"GRADE\" as GRADE {\n    PointsEarned\n}\n\n' Relationships and their cardinalities\nrelationship \"ENROLLED_IN\" as ENROLLED_IN {\n}\n\nrelationship \"TEACHES\" as TEACHES {\n}\n\nrelationship \"HAS_COMPONENT\" as HAS_COMPONENT {\n}\n\nrelationship \"RECORDS\" as RECORDS {\n}\n\nrelationship Is_Assigned {\n}\n\nrelationship HAS {\n}\n\n' Define relationships\nSTUDENT -N- ENROLLED_IN\nENROLLED_IN -1- COURSE\nINSTRUCTOR -N- TEACHES\nTEACHES -1- COURSE\nCOURSE -N- HAS_COMPONENT\nHAS_COMPONENT -1- GRADING_COMPONENT\nINSTRUCTOR -N- RECORDS\nRECORDS -N- GRADE\nSTUDENT -1- Is_Assigned\nIs_Assigned -N- GRADE\nGRADE -1- HAS\nHAS -N- GRADING_COMPONENT\n\n@endchen"
    },
    {
        "input": "Provide an ERD for this system.\n1. The online auction database has members, each identified by a unique member number, e-mail address, name, password, home address, and phone number. 2. A member may be a buyer or a seller. A buyer has a shipping address, while a seller has a bank account number and routing number recorded in the database. 3. Items are placed by a seller for sale and are identified by a unique item number assigned by the system, along with item title, description, starting bid price, bidding increment, start date, and end date of the auction. 4. Items are categorized based on a fixed classification hierarchy (e.g., COMPUTER → HARDWARE → MODEM). 5. Buyers make bids for items they are interested in, recording bid price and time. 6. The highest bid at the end of the auction declares the bidder the winner, allowing the transaction between buyer and seller to proceed. 7. Buyers and sellers may record feedback on completed transactions, including a rating (1–10) and a comment.",
        "output": "@startchen\n\n' Entities and their attributes\nentity \"MEMBER\" as MEMBER {\n    MemberID <<key>>\n    Email\n    Name\n    Password\n    Address\n    Phone\n}\n\nentity \"BUYER\" as BUYER {\n    ShippingAddress\n}\n\nentity \"SELLER\" as SELLER {\n    BankAccountNumber\n    RoutingNumber\n}\n\nentity \"ITEM\" as ITEM {\n    ItemNumber <<key>>\n    Title\n    Description\n    StartingBid\n    BiddingIncrement\n    StartDate\n    EndDate\n}\n\nentity \"BID\" as BID {\n    BidPrice\n    BidTime\n}\n\nentity \"CATEGORY\" as CATEGORY {\n    Name <<key>>\n}\n\nentity \"FEEDBACK\" as FEEDBACK {\n    Rating\n    Comment\n}\n\n' Relationships and their cardinalities\nrelationship \"PLACED_BY\" as PLACED_BY {\n}\n\nrelationship \"MAKES\" as MAKES {\n}\n\nrelationship \"HAS\" as HAS {\n}\n\nrelationship \"RECEIVES\" as RECEIVES {\n}\n\n' Define relationships\nMEMBER ->- o { BUYER, SELLER }\nSELLER -1- PLACED_BY\nPLACED_BY -N- ITEM\nBUYER -N- MAKES\nMAKES -1- BID\nITEM -N- HAS\nHAS -1- CATEGORY\nBUYER -N- RECEIVES\nRECEIVES -1- FEEDBACK\nSELLER -N- RECEIVES\nRECEIVES -1- FEEDBACK\n\n@endchen"
    },
    {
        "input": "Draw an ERD for the following system.\nConsider a database system for a baseball organization such as the major leagues. The data requirements are summarized as follows: 1. The personnel involved in the league include players, coaches, managers, and umpires. Each is identified by a unique personnel id. They are also described by their first and last names along with the date and place of birth. 2. Players are further described by other attributes such as their batting orientation (left, right, or switch) and have a lifetime batting average (BA). 3. Within the players group is a subset of players called pitchers. Pitchers have a lifetime ERA (earned run average) associated with them. 4. Teams are uniquely identified by their names. Teams are also described by the city in which they are located and the division and league in which they play (such as Central division of the American League). 5. Teams have one manager, a number of coaches, and a number of players. 6. Games are played between two teams, with one designated as the home team and the other the visiting team on a particular date. The score (runs, hits, and errors) is recorded for each team. The team with the most runs is declared the winner of the game. 7. With each finished game, a winning pitcher and a losing pitcher are recorded. In case there is a save awarded, the save pitcher is also recorded. 8. With each finished game, the number of hits (singles, doubles, triples, and home runs) obtained by each player is also recorded.",
        "output": "@startchen\n\n' Entities and their attributes\nentity \"PERSONNEL\" as PERSONNEL {\n    PersonnelID <<key>>\n    FirstName\n    LastName\n    DateOfBirth\n    PlaceOfBirth\n}\n\nentity \"PLAYER\" as PLAYER {\n    BattingOrientation\n    LifetimeBA\n}\n\nentity \"PITCHER\" as PITCHER {\n    LifetimeERA\n}\n\nentity \"COACH\" as COACH {\n    Specialty\n}\n\nentity \"MANAGER\" as MANAGER {\n}\n\nentity \"UMPIRE\" as UMPIRE {\n    ExperienceLevel\n}\n\nentity \"TEAM\" as TEAM {\n    TeamName <<key>>\n    City\n    Division\n    League\n}\n\nentity \"GAME\" as GAME {\n    GameDate <<key>>\n    HomeScore\n    HomeHits\n    HomeErrors\n    VisitorScore\n    VisitorHits\n    VisitorErrors\n    WinningPitcherID\n    LosingPitcherID\n    SavePitcherID\n}\n\nentity \"STATS\" as STATS {\n    Singles\n    Doubles\n    Triples\n    HomeRuns\n}\n\n' Relationships and their cardinalities\nrelationship \"PLAYS_FOR\" as PLAYS_FOR {\n}\n\nrelationship \"HAS_MANAGER\" as HAS_MANAGER {\n}\n\nrelationship \"HAS_COACH\" as HAS_COACH {\n}\n\nrelationship \"PARTICIPATES_IN\" as PARTICIPATES_IN {\n}\n\nrelationship \"RECORDED_IN\" as RECORDED_IN {\n}\n\nrelationship \"OFFICIATES\" as OFFICIATES {\n}\n\n' Define relationships\nPERSONNEL ->- o { PLAYER, COACH, MANAGER, UMPIRE }\nPLAYER ->- o { PITCHER }\n\nPITCHER -N- PLAYS_FOR\nPLAYS_FOR -1- TEAM\n\nPLAYER -N- PLAYS_FOR\nPLAYS_FOR -1- TEAM\n\nTEAM -1- HAS_MANAGER\nHAS_MANAGER -1- MANAGER\n\nTEAM -1- HAS_COACH\nHAS_COACH -N- COACH\n\nPLAYER -N- RECORDED_IN\nRECORDED_IN -1- STATS\n\nTEAM -2- PARTICIPATES_IN\nPARTICIPATES_IN -1- GAME\n\nUMPIRE -N- OFFICIATES\nOFFICIATES -N- GAME\n\n@endchen"
    }
          

      
      
]