[
    {
        "input": "Create an entity relationship diagram for this system. Healthcare service has huge demand these days as it really helps in managing a hospital or a medical office. The scope of healthcare service systems is increasing each day and it is true for the entire world. Some of these solutions include improved awareness about healthcare services and health policies. The objective of this system is to provide medical assistance to people instantly with the help of technology. This system eradicates the cultural sensitivity that prevails in many hospitals and improves the quality of medical assistance. The captivating features of this system are online doctors, medicines at doorstep, and bulletin of awareness. The users can also navigate and choose among various insurance schemes that are displayed.\n\nThe primary objectives of Webmed healthcare system are to enable all citizens to receive healthcare services whenever needed, and to deliver health services that are cost-effective and meet pre-established standards of quality. The main functions of this system deal with finance, health A-Z, resources, drugs and supplements, news and experts, payment and feedback. Register function allows the patients or the caregivers to register on the website. Login function allows the patients to access the website. Financing focuses on the purchase of insurance. Health A-Z displays all the diseases along with their symptoms. Resources function consists of the sub-functions including symptoms checker, health calculator, find a doctor based on the geographical location of the patient, insurance guide, and ambulance providence. Drugs and supplements include online medicine delivery, where people could shop for medicines online. News and experts function is to provide health awareness and threats that are prevailing. This function also gives information regarding counselling programs and blood donation camps. The payment function is to reimburse providers for services delivered. The feedback function collects user reviews for the website.",
        "output": "@startchen\n\nentity USER {\n    user_id <<key>>\n    name\n    email\n    password\n    role\n}\n\nentity PATIENT {\n    address\n    phone\n    date_of_birth\n}\n\nentity DOCTOR {\n    specialization\n    phone\n}\n\nUSER ->- d { PATIENT, DOCTOR }\n\nentity INSURANCE {\n    insurance_id <<key>>\n    name\n    type\n    details\n}\n\nentity MEDICINE {\n    medicine_id <<key>>\n    name\n    description\n    price\n    availability\n}\n\nentity APPOINTMENT {\n    appointment_id <<key>>\n    date\n    time\n    location\n    status\n    patient_id <<FK>>\n    doctor_id <<FK>>\n}\n\nentity FEEDBACK {\n    feedback_id <<key>>\n    user_id <<FK>>\n    comments\n    rating\n}\n\nentity PAYMENT {\n    payment_id <<key>>\n    amount\n    date\n    method\n    status\n    user_id <<FK>>\n}\n\nentity RESOURCE {\n    resource_id <<key>>\n    type\n    description\n}\n\nentity COUNSELING_PROGRAM {\n    program_id <<key>>\n    name\n    details\n    date\n    location\n}\n\nrelationship books {\n}\n\nrelationship prescribes {\n}\n\nrelationship enrolls {\n}\n\nrelationship checks {\n}\n\nrelationship gives {\n}\n\nrelationship makes {\n}\n\nrelationship access {\n}\n\nrelationship accesses_program {\n}\n\nrelationship buys {\n}\n\n' Relationships\n\nPATIENT -1- gives\ngives -N- FEEDBACK\n\nPATIENT -1- makes\nmakes -N- PAYMENT\n\nPATIENT -1- books\nbooks -N- APPOINTMENT\n\nDOCTOR -1- prescribes\nprescribes -N- MEDICINE\n\nPATIENT -1- enrolls\nenrolls -N- INSURANCE\n\nUSER -1- access\naccess -N- RESOURCE\n\nPATIENT -1- access\naccess -N- COUNSELING_PROGRAM\n\nPATIENT -1- buys\nbuys -N- MEDICINE\n\n@endchen" 
    },
    {
        "input": "Create an ER diagram for this system. The Online Examination System is a web-based application that allows students to take exams online. The system consists of the following functions: User Registration, Exam Creation, Exam Taking, Result Generation, and Exam Analysis. User Registration – This function allows students to create an account on the online examination system. Exam Creation – This function allows teachers to create exams and set questions. Exam Taking – This function allows students to take exams online. Result Generation – This function generates results for the exams taken by students. Exam Analysis – This function provides analysis of the exams taken by students. The main goal of the system is to provide a platform for students to take exams online.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  username\n  password\n}\n\nentity Student {\n}\n\nentity Teacher {\n}\n\nUser =>= d { Student, Teacher }\n\nentity Exam {\n  exam_id <<key>>\n  title\n  created_date\n}\n\nentity Question {\n  question_id <<key>>\n  content\n  answer_options\n  correct_answer\n}\n\nentity ExamResult {\n  result_id <<key>>\n  score\n  completion_date\n}\n\nrelationship REGISTERS {\n  registration_date\n}\n\nrelationship CREATES {\n}\n\nrelationship CONTAINS {\n}\n\nrelationship TAKES {\n  start_time\n  end_time\n}\n\nrelationship GENERATES {\n}\n\nrelationship RESULTS_FOR {\n}\n\nREGISTERS -1- Student\nREGISTERS -N- Exam\n\nCREATES -1- Teacher\nCREATES -N- Exam\n\nCONTAINS -1- Exam\nCONTAINS -N- Question\n\nTAKES -1- Student\nTAKES -N- Exam\n\nGENERATES -1- Exam\nGENERATES -N- ExamResult\n\nRESULTS_FOR -1- Student\nRESULTS_FOR -1- Exam\nRESULTS_FOR -1- ExamResult\n\n@endchen"
    },
    {
        "input": "Create an ER diagram for this system. The Online Voting System is a web-based application that allows citizens to vote online. The system consists of the following functions: Voter Registration, Candidate Registration, Voting, Result Generation, and Voter Analysis. Voter Registration – This function allows citizens to register as voters in the online voting system. Candidate Registration – This function allows candidates to register for elections. Voting – This function allows voters to cast their votes online. Result Generation – This function generates results for the elections. Voter Analysis – This function provides analysis of the votes cast by voters. The main goal of the system is to provide a platform for citizens to vote online.",
        "output": "@startchen\n\nentity Voter {\n  voter_id <<key>>\n  name\n password\n  address\n  date_of_birth\n  registration_date\n}\n\nentity Candidate {\n  candidate_id <<key>>\n  name\n password\n  party\n  registration_date\n}\n\nentity Election {\n  election_id <<key>>\n  title\n  election_date\n}\n\nentity Vote {\n  vote_id <<key>>\n  timestamp\n}\n\nentity Result {\n  result_id <<key>>\n  total_votes\n  winner\n}\n\nrelationship REGISTERS_AS_VOTER {\n  registration_date\n}\n\nrelationship REGISTERS_AS_CANDIDATE {\n  registration_date\n}\n\nrelationship CASTS_VOTE {\n  vote_time\n}\n\nrelationship GENERATES {\n}\n\nREGISTERS_AS_VOTER -1- Voter\nREGISTERS_AS_VOTER -1- Election\n\nREGISTERS_AS_CANDIDATE -1- Candidate\nREGISTERS_AS_CANDIDATE -1- Election\n\nCASTS_VOTE -1- Voter\nCASTS_VOTE -1- Candidate\nCASTS_VOTE -1- Vote\n\nGENERATES -1- Election\nGENERATES -N- Result\n\n@endchen"
    },
    {
        "input": "Give me an ER diagram for this E-Ticketing System for Buses. In this case study, a software package to automate the manual procedures of reserving a bus ticket is made through Software Maintenance and Development Center (SMDC) Travels. Specifically, the objectives of this case study consist of providing a web-based bus ticket reservation function where a customer can buy a bus ticket through the online system without a need to queue up at the counter to purchase a bus ticket, enabling customers to check the availability and types of buses online. Customer can check the time departure for every Indian Tourist Centre (ITC) bus through the system, easing bus ticket payment by obtaining a bank pin after payments is made to the various designated banks, the ability of customers to cancel their reservation, admin user privileges in updating and cancelling payment, route and vehicle records.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n password\n  phone\n}\n\nentity Bus {\n  bus_id <<key>>\n  bus_type\n  capacity\n  operator\n}\n\nentity Route {\n  route_id <<key>>\n  origin\n  destination\n  distance\n}\n\nentity Schedule {\n  schedule_id <<key>>\n  departure_time\n  arrival_time\n  date\n}\n\nentity Reservation {\n  reservation_id <<key>>\n  status\n  reservation_date\n}\n\nentity Payment {\n  payment_id <<key>>\n  payment_date\n  amount\n  status\n  bank_pin\n}\n\nentity Admin {\n  admin_id <<key>>\n  username\n  password\n}\n\nrelationship CHECKS_AVAILABILITY {\n}\n\nrelationship RESERVES {\n  reservation_date\n}\n\nrelationship PAYS_FOR {\n  payment_date\n}\n\nrelationship CANCELS_RESERVATION {\n  cancellation_date\n}\n\nrelationship ASSIGNS {\n}\n\nrelationship FOLLOWS_ROUTE {\n}\n\nrelationship USES {\n}\n\nrelationship MANAGES {\n  manage_date\n}\n\nCHECKS_AVAILABILITY -1- Customer\nCHECKS_AVAILABILITY -N- Bus\n\nRESERVES -1- Customer\nRESERVES -1- Reservation\n\nPAYS_FOR -1- Customer\nPAYS_FOR -1- Payment\n\nCANCELS_RESERVATION -1- Customer\nCANCELS_RESERVATION -1- Reservation\n\nASSIGNS -1- Bus\nASSIGNS -N- Route\n\nFOLLOWS_ROUTE -1- Bus\nFOLLOWS_ROUTE -N- Schedule\n\nUSES -1- Reservation\nUSES -1- Bus\n\nMANAGES -1- Admin\nMANAGES -N- Reservation\n\n@endchen"          
    },
    {
        "input": "The Weather Monitoring System allows people to directly check the weather status online. The functionalities are Weather Status, Live Updating, Alert, Graphical Representation, Future Prediction and Weekly Analysis. Weather Status – With this function, temperature, humidity, rainfall, pressure and dew point are measured using sensors. Live Updating – Data are live updated to be viewed by the user. Alert – This functionality provides tips and alerts to the user on certain weather conditions. Graphical Representation – Plotting of graphs based on variations in temperature for easier analysis. Future Prediction – This functionality helps in predicting the weather for the next few days. WeeklyAnalysis – Displaying the average, the highest and lowest temperature of the week. The final goal is to provide detailed weather conditions for the user based on his/her location. Give me an ERD for this system.",
        "output": "@startchen\n\nentity Location {\n  location_id <<key>>\n  city\n  region\n  country\n}\n\nentity SensorData {\n  data_id <<key>>\n  timestamp\n  temperature\n  humidity\n  rainfall\n  pressure\n  dew_point\n}\n\nentity WeatherAlert {\n  alert_id <<key>>\n  alert_type\n  message\n  alert_time\n}\n\nentity Prediction {\n  prediction_id <<key>>\n  prediction_date\n  predicted_temperature\n  predicted_humidity\n  predicted_rainfall\n}\n\nrelationship MEASURES {\n}\n\nrelationship ALERTS {\n}\n\nrelationship PREDICTS {\n}\n\nMEASURES -1- Location\nMEASURES -N- SensorData\n\nALERTS -1- Location\nALERTS -N- WeatherAlert\n\nPREDICTS -1- Location\nPREDICTS -N- Prediction\n\n@endchen"          
    },
    {
        "input": "The Online Shopping System is a web-based application that allows customers to purchase products online. The system consists of the following functions: User Registration, Product Catalog, Shopping Cart, Payment Gateway, Order History, and Customer Support. User Registration – This function allows users to create an account on the website. Product Catalog – This function displays all the products available for purchase. Shopping Cart – This function allows users to add products to their cart. Payment Gateway – This function allows users to make payments for their purchases. Order History – This function displays the user's past orders. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient and user-friendly platform for customers to shop online. Create an ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  username\n  email\n  password\n  registration_date\n}\n\nentity Product {\n  product_id <<key>>\n  name\n  description\n  price\n  stock\n  category\n}\n\nentity ShoppingCart {\n  cart_id <<key>>\n  created_date\n}\n\nentity CartItem {\n  item_id <<key>>\n  quantity\n}\n\nentity Order {\n  order_id <<key>>\n  order_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  payment_date\n  amount\n  payment_method\n  payment_status\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship REGISTERS {\n  registration_date\n}\n\nrelationship ADDS_TO_CART {\n}\n\nrelationship CONTAINS {\n}\n\nrelationship PLACES_ORDER {\n  order_date\n}\n\nrelationship PAYS_FOR {\n  payment_date\n}\n\nrelationship SUPPORTS {\n}\n\nrelationship INCLUDES {\n}\n\nrelationship REPRESENTS {\n}\n\nREGISTERS -1- User\nREGISTERS -1- ShoppingCart\n\nADDS_TO_CART -1- User\nADDS_TO_CART -N- CartItem\n\nCONTAINS -1- ShoppingCart\nCONTAINS -N- CartItem\n\nREPRESENTS -1- CartItem\nREPRESENTS -1- Product\n\nPLACES_ORDER -1- User\nPLACES_ORDER -1- Order\n\nPAYS_FOR -1- Order\nPAYS_FOR -1- Payment\n\nSUPPORTS -1- User\nSUPPORTS -N- CustomerSupport\n\nINCLUDES -1- Order\nINCLUDES -N- CartItem\n\n@endchen"          
    },
    {
        "input": "The Library Management System is a software application that helps in maintaining a library. The system consists of the following functions: User Registration, Book Catalog, Borrowing Books, Returning Books, Renewing Books, and Late Fee Calculation. User Registration – This function allows users to create an account in the library system. Book Catalog – This function displays all the books available in the library. Borrowing Books – This function allows users to borrow books from the library. Returning Books – This function allows users to return books to the library. Renewing Books – This function allows users to renew the borrowed books. Late Fee Calculation – This function calculates the late fee for books returned after the due date. The main goal of the system is to provide an efficient and organized way of managing library operations. Create an ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n password\n  phone\n  registration_date\n}\n\nentity Book {\n  isbn <<key>>\n  title\n  author\n  publisher\n  genre\n  publication_year\n}\n\nentity BorrowRequest {\n  request_id <<key>>\n  borrow_date\n  due_date\n  return_date\n  status <<derived>>\n  late_fee\n}\n\nrelationship REGISTERS {\n  registration_date\n}\n\nrelationship BORROWS {\n  borrow_date\n  due_date\n}\n\nrelationship RETURNS {\n  return_date\n}\n\nrelationship RENEWS {\n  renewal_date\n}\n\nREGISTERS -1- User\nREGISTERS -1- BorrowRequest\n\nBORROWS -1- User\nBORROWS -1- Book\nBORROWS -N- BorrowRequest\n\nRETURNS -1- User\nRETURNS -N- BorrowRequest\n\nRENEWS -1- User\nRENEWS -N- BorrowRequest\n\n@endchen"              
    },
    {
        "input": "Citizens in every district face the difficulty with the issuing of government certificates like birth/death certificates, income and caste certificates, old age and widow pensions, etc. This can be done with e-Province. This case study demonstrates how to make the government services available to the citizens in a convenient, efficient, and transparent manner, by enabling it simply by reliable access over the Internet. The main objective is to bring the public services closer to the citizens. To fulfill the vision of providing an easy and convenient service to the citizens through remote access primarily through Common Service Centre (CSCs), the e-Province project is created. This case study aims to develop a State Portal (SP) to provide all the citizens of the respective province to access the services under a single interface mechanism in the form of the Portal. The various modules in the e-Province project are an Admin module that creates, updates, deactivates the users and performs various other tasks. A Login module that allows the users to login with their unique Application number with approved status. A User module that allows the approved users to register for the respective certificates. A User Profile module that creates the pre-requisite information of the user that needs to be stored in the database. The Certificate module contains the required forms that are to be filled with the information of the users. Give me an ER diagram for this system.",
        "output": "@startchen\n\nentity Citizen {\n  citizen_id <<key>>\n  name\n  address\n  date_of_birth\n  contact_number\n  email\n password\n}\n\nentity Admin {\n  admin_id <<key>>\n  username\n  password\n}\n\nentity Application {\n  application_id <<key>>\n  application_date\n  status\n}\n\nentity Certificate {\n  certificate_id <<key>>\n  certificate_type\n  issue_date\n  expiry_date\n}\n\nentity UserProfile {\n  profile_id <<key>>\n  citizen_id <<foreign>>\n  created_date\n  last_updated\n}\n\nentity CommonServiceCentre {\n  csc_id <<key>>\n  location\n  contact_info\n}\n\nrelationship MANAGES {\n}\n\nrelationship SUBMITS {\n  application_date\n}\n\nrelationship ISSUES {\n  issue_date\n}\n\nrelationship ACCESS_VIA_CSC {\n  access_date\n}\n\nrelationship APPROVES {\n  approval_date\n}\n\nrelationship MAINTAINS_PROFILE {\n  created_date\n  last_updated\n}\n\nMANAGES -1- Admin\nMANAGES -N- Citizen\n\nSUBMITS -1- Citizen\nSUBMITS -N- Application\n\nISSUES -1- Application\nISSUES -1- Certificate\n\nACCESS_VIA_CSC -1- CommonServiceCentre\nACCESS_VIA_CSC -N- Application\n\nAPPROVES -1- Admin\nAPPROVES -N- Application\n\nMAINTAINS_PROFILE -1- Citizen\nMAINTAINS_PROFILE -1- UserProfile\n\n@endchen"          
    },
    {
        "input": "The Online Banking System is a web-based application that allows customers to perform banking transactions online. The system consists of the following functions: User Registration, Account Management, Fund Transfer, Bill Payment, Transaction History, and Customer Support. User Registration – This function allows users to create an account on the online banking system. Account Management – This function allows users to view and manage their accounts. Fund Transfer – This function allows users to transfer funds between accounts. Bill Payment – This function allows users to pay bills online. Transaction History – This function displays the user's transaction history. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a secure and convenient platform for customers to perform banking transactions online. Create an er diagram for this system.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n password\n  phone\n  registration_date\n}\n\nentity Account {\n  account_id <<key>>\n  account_type\n  balance\n  status\n}\n\nentity Transaction {\n  transaction_id <<key>>\n  transaction_date\n  amount\n  transaction_type\n  description\n}\n\nentity BillPayment {\n  bill_id <<key>>\n  payee_name\n  bill_amount\n  due_date\n  payment_date\n}\n\nentity FundTransfer {\n  transfer_id <<key>>\n  from_account <<foreign>>\n  to_account <<foreign>>\n  transfer_date\n  transfer_amount\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship OWNS {\n}\n\nrelationship MAKES {\n  transaction_date\n}\n\nrelationship PAYS_BILL {\n  payment_date\n}\n\nrelationship TRANSFERS_FUNDS {\n  transfer_date\n}\n\nrelationship SUPPORTS {\n}\n\nOWNS -1- Customer\nOWNS -N- Account\n\nMAKES -1- Account\nMAKES -N- Transaction\n\nPAYS_BILL -1- Account\nPAYS_BILL -N- BillPayment\n\nTRANSFERS_FUNDS -1- Account\nTRANSFERS_FUNDS -N- FundTransfer\n\nSUPPORTS -1- Customer\nSUPPORTS -N- CustomerSupport\n\n@endchen"
    },
    {
        "input": "Give me ERD for this. Maintaining the authentic documents physically in a single location is considered to be a challenging task. Thus, digitizing documents enables centralized storage of all the physical documents, enabling easy retrieval from anywhere at any time. It also prevents the troubles caused by missing any of those physical certificates. This can be achieved through the DigiDocLocker which is a platform for issuance and verification of documents and certificates in a digital format, thereby eliminating the use of physical documents. DigiDocLocker aims at benefiting all the citizens of the country by providing access to authentic documents/certificates such as driving licence, vehicle registration, and academic mark sheets in digital format from the original issuers of these certificates. DigiDocLocker has the following functionalities:\ni. A Registration module allows the users to register and a Login module that allows the authorized users.\nii. An Upload Document module allows the users to upload documents such as driving licence, vehicle registration, academic mark sheet, and other relevant documents in various file formats.\niii. A Profile module displays the complete profile of the user as available in the database.\niv. An Issuer module displays the certificate issuers’ names and the number of documents issued to the user by the issuer. For example, the Income Tax Department, Government of India has provided PAN Verification Records to Indian citizens via DigiLocker.\nv. A Requester module displays the requesters’ names and the number of documents requested from the user by the requesters. For example, citizens applying through Union Public Service Commission (UPSC)'s Online Recruitment Application (ORA) can upload documents through DigiDocLocker as well.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n password\n  phone\n  registration_date\n}\n\nentity Document {\n  document_id <<key>>\n  document_type\n  upload_date\n  file_format\n  document_url\n}\n\nentity Profile {\n  profile_id <<key>>\n  user_id <<foreign>>\n password\n  full_name\n  address\n  date_of_birth\n}\n\nentity Issuer {\n  issuer_id <<key>>\n  issuer_name\n  issuer_type\n}\n\nentity Requester {\n  requester_id <<key>>\n  requester_name\n password\n  requester_type\n}\n\nrelationship REGISTERS {\n  registration_date\n}\n\nrelationship UPLOADS {\n  upload_date\n}\n\nrelationship ASSOCIATED_WITH {\n}\n\nrelationship ISSUED_BY {\n  issue_date\n}\n\nrelationship REQUESTED_BY {\n  request_date\n}\n\nREGISTERS -1- User\nREGISTERS -1- Profile\n\nUPLOADS -1- User\nUPLOADS -N- Document\n\nASSOCIATED_WITH -1- Profile\nASSOCIATED_WITH -N- Document\n\nISSUED_BY -1- Issuer\nISSUED_BY -N- Document\n\nREQUESTED_BY -1- Requester\nREQUESTED_BY -N- Document\n\n@endchen"
    },
    {
        "input": "Various new small scale and medium scale sellers face difficulties to reach out to the customers and sell their products along with other competing products in the market. This increases their overall cost, thus reducing their profit or even causing loss. E-Retail is an online marketplace application case study where small and medium scale sellers can list, showcase, advertise, and sell their products directly to the customers without any physical store. E-Retail aims in providing a dynamic platform for all small and medium scale sellers to reach out and sell their products directly to all range of customers at a competing price without the need of any physical store. This enables the sellers to eliminate the cost of rent or maintenance of a physical store and to minimize other related costs. It also aims in promoting direct communication between the seller and customer, hence providing a trusted relationship between them. New sellers can easily authenticate and sign up to the portal and sell their products in the portal. The application offers separate login for sellers and customers, where the sellers and customers can sign in and start using the application. Customers can view all the products available from various sellers and buy those products. It also facilitates online payments for purchasing the products. Customers can rate or give a review for the product and seller. Customers can also report a seller for any violations in delivery or if the product does not meet the specified requirement. Customers can also view the contact information and the rating of the seller before buying the product. Give a ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n password\n  phone\n  address\n  registration_date\n}\n\nentity Customer {\n}\n\nentity Seller {\n  seller_id <<key>>\n  rating\n}\n\nUser =>= d { Customer, Seller }\n\nentity Product {\n  product_id <<key>>\n  name\n  description\n  price\n  category\n  stock\n  rating\n  upload_date\n}\n\nentity Order {\n  order_id <<key>>\n  order_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity Review {\n  review_id <<key>>\n  rating\n  comment\n  review_date\n}\n\nentity Report {\n  report_id <<key>>\n  report_date\n  issue_type\n  description\n}\n\nrelationship LISTS_PRODUCT {\n  listing_date\n}\n\nrelationship PLACES_ORDER {\n  order_date\n}\n\nrelationship MAKES_PAYMENT {\n  payment_date\n}\n\nrelationship HAS_SELLERREVIEWS {\n  review_date\n}\n\nrelationship HAS_PRODUCTREVIEWS {\n  review_date\n}\n\nrelationship REPORTS_SELLER {\n  report_date\n}\n\nrelationship GIVES{\n}\n\nLISTS_PRODUCT -1- Seller\nLISTS_PRODUCT -N- Product\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nMAKES_PAYMENT -1- Order\nMAKES_PAYMENT -1- Payment\n\nGIVES -1- Customer\nGIVES -N- Review\n\nHAS_PRODUCTREVIEWS -N- Review\nHAS_PRODUCTREVIEWS -1- Product\n\nHAS_SELLERREVIEWS -N- Review\nHAS_SELLERREVIEWS -1- Seller\n\nREPORTS_SELLER -1- Customer\nREPORTS_SELLER -N- Report\n\n@endchen"          
    },
    {
        "input": "The Online Food Ordering System is a web-based application that allows customers to order food online. The system consists of the following functions: User Registration, Restaurant Selection, Menu Browsing, Order Placement, Payment Gateway, Order Tracking, and Customer Support. User Registration – This function allows users to create an account on the online food ordering system. Restaurant Selection – This function allows users to select a restaurant from which they want to order food. Menu Browsing – This function allows users to browse the menu of the selected restaurant. Order Placement – This function allows users to place an order for food. Payment Gateway – This function allows users to make payments for their orders. Order Tracking – This function allows users to track the status of their orders. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to order food online. Create an ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n password\n  phone\n  address\n  registration_date\n}\n\nentity Restaurant {\n  restaurant_id <<key>>\n  name\n  location\n  contact_info\n  rating\n}\n\nentity Menu {\n  menu_id <<key>>\n  restaurant_id <<foreign>>\n  menu_type\n}\n\nentity MenuItem {\n  item_id <<key>>\n  menu_id <<foreign>>\n  name\n  description\n  price\n  availability\n}\n\nentity Order {\n  order_id <<key>>\n  order_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity OrderTracking {\n  tracking_id <<key>>\n  order_id <<foreign>>\n  tracking_status\n  update_time\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship SELECTS {\n}\n\nrelationship BROWSES_MENU {\n}\n\nrelationship CONTAINS_ITEMS {\n}\n\nrelationship ASSOCIATED_WITH {\n}\n\nrelationship INCLUDES_ITEMS {\n}\n\nrelationship PLACES_ORDER {\n  order_date\n}\n\nrelationship MAKES_PAYMENT {\n  payment_date\n}\n\nrelationship TRACKS_ORDER {\n  update_time\n}\n\nrelationship CONTACTS_SUPPORT {\n}\n\nSELECTS -1- User\nSELECTS -N- Restaurant\n\nBROWSES_MENU -1- User\nBROWSES_MENU -1- Menu\n\nCONTAINS_ITEMS -1- Menu\nCONTAINS_ITEMS -N- MenuItem\n\nASSOCIATED_WITH -1- Menu\nASSOCIATED_WITH -1- Restaurant\n\nINCLUDES_ITEMS -1- Order\nINCLUDES_ITEMS -N- MenuItem\n\nPLACES_ORDER -1- User\nPLACES_ORDER -N- Order\n\nMAKES_PAYMENT -1- Order\nMAKES_PAYMENT -1- Payment\n\nTRACKS_ORDER -1- User\nTRACKS_ORDER -N- OrderTracking\n\nCONTACTS_SUPPORT -1- User\nCONTACTS_SUPPORT -N- CustomerSupport\n\n@endchen"          
    },
    {
        "input": "The Online Movie Ticket Booking System is a web-based application that allows customers to book movie tickets online. The system consists of the following functions: User Registration, Movie Selection, Seat Selection, Payment Gateway, Ticket Confirmation, Ticket Cancellation, and Customer Support. User Registration – This function allows users to create an account on the online movie ticket booking system. Movie Selection – This function allows users to select a movie for which they want to book tickets. Seat Selection – This function allows users to select seats for the selected movie. Payment Gateway – This function allows users to make payments for their ticket bookings. Ticket Confirmation – This function confirms the booking of tickets. Ticket Cancellation – This function allows users to cancel their ticket bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to book movie tickets online. Create an ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n password\n  phone\n  registration_date\n}\n\nentity Movie {\n  movie_id <<key>>\n  title\n  genre\n  duration\n  rating\n  release_date\n}\n\nentity Screening {\n  screening_id <<key>>\n  movie_id <<foreign>>\n  theater\n  screening_date\n  screening_time\n}\n\nentity Seat {\n  seat_id <<key>>\n  screening_id <<foreign>>\n  seat_number\n  seat_type\n  status\n}\n\nentity Booking {\n  booking_id <<key>>\n  user_id <<foreign>>\n  screening_id <<foreign>>\n  booking_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  booking_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  user_id <<foreign>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship SELECTS_MOVIE {\n}\n\nrelationship SELECTS_SEAT {\n}\n\nrelationship MAKES_BOOKING {\n}\n\nrelationship MAKES_PAYMENT {\n}\n\nrelationship ASSOCIATED_WITH {\n}\n\nrelationship CANCELS_BOOKING {\n  cancellation_date\n}\n\nrelationship CONTACTS_SUPPORT {\n}\n\nrelationship SHOWS {\n}\n\nrelationship HAS_SEATS {\n}\n\nSELECTS_MOVIE -1- User\nSELECTS_MOVIE -N- Movie\n\nSELECTS_SEAT -1- Booking\nSELECTS_SEAT -N- Seat\n\nMAKES_BOOKING -1- User\nMAKES_BOOKING -1- Booking\n\nMAKES_PAYMENT -1- Booking\nMAKES_PAYMENT -1- Payment\n\nASSOCIATED_WITH -1- Booking\nASSOCIATED_WITH -1- Screening\n\nCANCELS_BOOKING -1- User\nCANCELS_BOOKING -1- Booking\n\nCONTACTS_SUPPORT -1- User\nCONTACTS_SUPPORT -N- CustomerSupport\n\nSHOWS -1- Screening\nSHOWS -1- Movie\n\nHAS_SEATS -1- Screening\nHAS_SEATS -N- Seat\n\n@endchen"          
    },
    {
        "input": "The Online Hotel Booking System is a web-based application that allows customers to book hotel rooms online. The system consists of the following functions: User Registration, Hotel Selection, Room Selection, Payment Gateway, Booking Confirmation, Booking Cancellation, and Customer Support. User Registration – This function allows users to create an account on the online hotel booking system. Hotel Selection – This function allows users to select a hotel for which they want to book rooms. Room Selection – This function allows users to select rooms in the selected hotel. Payment Gateway – This function allows users to make payments for their room bookings. Booking Confirmation – This function confirms the booking of rooms. Booking Cancellation – This function allows users to cancel their room bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to book hotel rooms online. Create an ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n password\n  phone\n  registration_date\n}\n\nentity Hotel {\n  hotel_id <<key>>\n  name\n  location\n  rating\n  contact_info\n}\n\nentity Room {\n  room_id <<key>>\n  hotel_id <<foreign>>\n  room_type\n  price\n  availability_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  user_id <<foreign>>\n  hotel_id <<foreign>>\n  booking_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  booking_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  user_id <<foreign>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship REGISTERS {\n}\n\nrelationship SELECTS_HOTEL {\n}\n\nrelationship SELECTS_ROOM {\n}\n\nrelationship MAKES_BOOKING {\n}\n\nrelationship MAKES_PAYMENT {\n}\n\nrelationship CONFIRMS_BOOKING {\n}\n\nrelationship CANCELS_BOOKING {\n  cancellation_date\n}\n\nrelationship CONTACTS_SUPPORT {\n}\n\nrelationship HAS_ROOMS {\n}\n\nREGISTERS -1- User\n\nSELECTS_HOTEL -1- User\nSELECTS_HOTEL -N- Hotel\n\nSELECTS_ROOM -1- Booking\nSELECTS_ROOM -N- Room\n\nMAKES_BOOKING -1- User\nMAKES_BOOKING -1- Booking\n\nMAKES_PAYMENT -1- Booking\nMAKES_PAYMENT -1- Payment\n\nCONFIRMS_BOOKING -1- Booking\nCONFIRMS_BOOKING -1- Hotel\n\nCANCELS_BOOKING -1- User\nCANCELS_BOOKING -1- Booking\n\nCONTACTS_SUPPORT -1- User\nCONTACTS_SUPPORT -N- CustomerSupport\n\nHAS_ROOMS -1- Hotel\nHAS_ROOMS -N- Room\n\n@endchen"          
    },
    {
        "input": "The Online Flight Booking System is a web-based application that allows customers to book flight tickets online. The system consists of the following functions: User Registration, Flight Selection, Seat Selection, Payment Gateway, Ticket Confirmation, Ticket Cancellation, and Customer Support. User Registration – This function allows users to create an account on the online flight booking system. Flight Selection – This function allows users to select a flight for which they want to book tickets. Seat Selection – This function allows users to select seats for the selected flight. Payment Gateway – This function allows users to make payments for their ticket bookings. Ticket Confirmation – This function confirms the booking of tickets. Ticket Cancellation – This function allows users to cancel their ticket bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to book flight tickets online. Create an ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Flight {\n  flight_id <<key>>\n  airline\n  departure_city\n  arrival_city\n  departure_time\n  arrival_time\n}\n\nentity Seat {\n  seat_id <<key>>\n  flight_id <<foreign>>\n  seat_number\n  seat_type\n  status\n}\n\nentity Booking {\n  booking_id <<key>>\n  user_id <<foreign>>\n  flight_id <<foreign>>\n  booking_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  booking_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  user_id <<foreign>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship SELECTS_FLIGHT {\n}\n\nrelationship SELECTS_SEAT {\n}\n\nrelationship MAKES_BOOKING {\n}\n\nrelationship MAKES_PAYMENT {\n}\n\nrelationship CONFIRMS_BOOKING {\n}\n\nrelationship CANCELS_BOOKING {\n  cancellation_date\n}\n\nrelationship CONTACTS_SUPPORT {\n}\n\nSELECTS_FLIGHT -1- User\nSELECTS_FLIGHT -N- Flight\n\nSELECTS_SEAT -1- Booking\nSELECTS_SEAT -N- Seat\n\nMAKES_BOOKING -1- User\nMAKES_BOOKING -1- Booking\n\nMAKES_PAYMENT -1- Booking\nMAKES_PAYMENT -1- Payment\n\nCONFIRMS_BOOKING -1- Booking\nCONFIRMS_BOOKING -1- Flight\n\nCANCELS_BOOKING -1- User\nCANCELS_BOOKING -1- Booking\n\nCONTACTS_SUPPORT -1- User\nCONTACTS_SUPPORT -N- CustomerSupport\n\n@endchen"
    },
    {
        "input": "The Online Event Management System is a web-based application that allows users to manage events online. The system consists of the following functions: User Registration, Event Creation, Event Promotion, Ticket Booking, Payment Gateway, Event Tracking, and Customer Support. User Registration – This function allows users to create an account on the online event management system. Event Creation – This function allows users to create events and manage event details. Event Promotion – This function allows users to promote events to attract attendees. Ticket Booking – This function allows users to book tickets for events. Payment Gateway – This function allows users to make payments for ticket bookings. Event Tracking – This function allows users to track the status of events and ticket bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a platform for users to manage and promote events online. Create an ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Event {\n  event_id <<key>>\n  name\n  description\n  location\n  start_date\n  end_date\n}\n\nentity Ticket {\n  ticket_id <<key>>\n  event_id <<foreign>>\n  user_id <<foreign>>\n  booking_date\n  amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  ticket_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  user_id <<foreign>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship CREATES_EVENT {\n}\n\nrelationship PROMOTES_EVENT {\n}\n\nrelationship BOOKS_TICKET {\n}\n\nrelationship MAKES_PAYMENT {\n}\n\nrelationship TRACKS_EVENT {\n}\n\nrelationship CONTACTS_SUPPORT {\n}\n\nCREATES_EVENT -1- User\nCREATES_EVENT -N- Event\n\nPROMOTES_EVENT -1- User\nPROMOTES_EVENT -N- Event\n\nBOOKS_TICKET -1- User\nBOOKS_TICKET -1- Ticket\n\nMAKES_PAYMENT -1- Ticket\nMAKES_PAYMENT -1- Payment\n\nTRACKS_EVENT -1- User\nTRACKS_EVENT -N- Event\n\nCONTACTS_SUPPORT -1- User\nCONTACTS_SUPPORT -N- CustomerSupport\n\n@endchen"
    },
    {
        "input": "Give ER diagram for this. The need for law and enforcement in a country with a high population like India is salient. Lawyers play a major role in maintaining most of their data as hard copies. This project is mainly designed for lawyers to make their work more easy and efficient. It is a responsive web application that would provide lawyers with various services that would help them to maintain their documents. The services include a logbook that has details about the cases along with a calendar. The lawyers can also upload and save documents related to their case. It contains formats of model forms and links to online filing. It also provides quick references of common cases and detailed information about laws through e-books. Information about the judicial exams for lawyers is also made available. Furthermore, the web application contains news updates for lawyers, blogs and feedback. This case study will serve as a small hand tool for lawyers to maintain the soft copies of their data.",
        "output": "@startchen\n\nentity Lawyer {\n  lawyer_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Case {\n  case_id <<key>>\n  lawyer_id <<foreign>>\n  case_type\n  case_details\n  case_date\n}\n\nentity Document {\n  document_id <<key>>\n  case_id <<foreign>>\n  document_type\n  document_url\n}\n\nentity Calendar {\n  calendar_id <<key>>\n  lawyer_id <<foreign>>\n  event_date\n  event_details\n}\n\nentity Form {\n  form_id <<key>>\n  form_type\n  form_url\n}\n\nentity EBook {\n  ebook_id <<key>>\n  ebook_title\n  ebook_url\n}\n\nentity Exam {\n  exam_id <<key>>\n  exam_name\n  exam_date\n  exam_details\n}\n\nentity News {\n  news_id <<key>>\n  news_title\n  news_date\n  news_details\n}\n\nentity Blog {\n  blog_id <<key>>\n  blog_title\n  blog_date\n  blog_details\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  lawyer_id <<foreign>>\n  feedback_date\n  feedback_details\n}\n\nrelationship HANDLES_CASE {\n}\n\nrelationship UPLOADS_DOCUMENT {\n}\n\nrelationship MANAGES_SCHEDULE {\n}\n\nrelationship ACCESSES {\n}\n\nrelationship PROVIDES_FEEDBACK {\n}\n\nHANDLES_CASE -1- Lawyer\nHANDLES_CASE -N- Case\n\nUPLOADS_DOCUMENT -1- Case\nUPLOADS_DOCUMENT -N- Document\n\nMANAGES_SCHEDULE -1- Lawyer\nMANAGES_SCHEDULE -N- Calendar\n\nACCESSES -1- Lawyer\nACCESSES -N- Form\nACCESSES -N- EBook\nACCESSES -N- Exam\nACCESSES -N- News\nACCESSES -N- Blog\n\nPROVIDES_FEEDBACK -1- Lawyer\nPROVIDES_FEEDBACK -N- Feedback\n\n@endchen"          
    },
    {
        "input": "This case study is helpful to people who forget their mobile phones at home as a part of their busy daily routines. Keeping tick of essentials in this fast-paced life sometimes turns out to be quite demanding. People sometimes forget their phones at home. What if we need to make an important call and we don’t remember the contact number? Sometimes our phones just get disappeared and the scariest part is when the phone is put on silent mode. We sometimes want to lock our phones when they aren’t around us. Need to know the exact location of your phone? Therein comes the use of ‘My Helper’. The solutions to all the problems stated above can be solved easily and very quickly if you have the application ‘My Helper’ pre-installed on your phone and you have completed configuring the app. All you need to do is just send an SMS to your mobile number from any phone that you have access to…and there goes your problem solved. The scope of this system is increasing every day across the entire world where everything is happening at the speed of a Formula 1 Car on a race track. The objective of this system is to provide help to people facing these types of problems instantly with the help of advanced technology. The alluring features of this system are Remote Access without the Internet, Track your phone through an SMS, HassleFree as no OTP and ID PASSWORD is required and an SMS can help you change the sound profile of your phone (silent to normal) without Internet. The system is user friendly and the application will be available to even basic smartphones. Give me an ER diagram for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  phone_number\n  email\n  password\n  registration_date\n}\n\nentity Device {\n  device_id <<key>>\n  user_id <<foreign>>\n  device_name\n  device_type\n  device_status\n  last_known_location\n}\n\nentity SMSCommand {\n  command_id <<key>>\n  command_type\n  description\n  execution_result\n}\n\nentity LocationHistory {\n  location_id <<key>>\n  device_id <<foreign>>\n  location_date\n  latitude\n  longitude\n}\n\nentity ProfileChange {\n  profile_change_id <<key>>\n  device_id <<foreign>>\n  change_date\n  previous_profile\n  new_profile\n}\n\nrelationship OWNS_DEVICE {\n}\n\nrelationship SENDS_COMMAND {\n}\n\nrelationship TRACKS_LOCATION {\n}\n\nrelationship CHANGES_PROFILE {\n}\n\nOWNS_DEVICE -1- User\nOWNS_DEVICE -N- Device\n\nSENDS_COMMAND -1- Device\nSENDS_COMMAND -N- SMSCommand\n\nTRACKS_LOCATION -1- Device\nTRACKS_LOCATION -N- LocationHistory\n\nCHANGES_PROFILE -1- Device\nCHANGES_PROFILE -N- ProfileChange\n\n@endchen"          
    },
    {
        "input": "Create an entity relationship diagram for this system. The all in one COVID-19 management system simplifies the entire process of decreasing the virus load in the community by digitalization. It includes tracking and treating COVID-19 patients and monitoring the spread of the virus. It aims to assist healthcare organizations and governments to assess patient risk profiles and provide awareness to common people by connecting them with virtual care capabilities. With the current epidemiological situation of COVID-19, there is a high demand to reduce contact between persons and digitize the whole process. This will effectively reduce the infection rate, help the common people and empower medical professionals across the world to help more patients through telemedicine and virtual care.",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  age\n  gender\n  address\n  phone\n  email\n  password\n  registration_date\n}\n\nentity HealthcareProvider {\n  provider_id <<key>>\n  name\n  password\n  location\n  contact_info\n}\n\nentity TestResult {\n  result_id <<key>>\n  patient_id <<foreign>>\n  test_date\n  test_result\n}\n\nentity TreatmentPlan {\n  plan_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  treatment_date\n  treatment_details\n}\n\nentity AwarenessCampaign {\n  campaign_id <<key>>\n  campaign_name\n  campaign_date\n  campaign_details\n}\n\nentity VirtualCare {\n  care_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  care_date\n  care_details\n}\n\nrelationship HAS {\n}\n\nrelationship ASSIGNED_TREATMENT {\n}\n\nrelationship ASSIGNS_TREATMENT {\n}\n\nrelationship CONDUCTS_CAMPAIGN {\n}\n\nrelationship PROVIDES_VIRTUAL_CARE {\n}\n\nrelationship USES_VIRTUAL_CARE {\n}\n\nHAS -1- Patient\nHAS -N- TestResult\n\nASSIGNED_TREATMENT -1- Patient\nASSIGNED_TREATMENT -N- TreatmentPlan\n\nASSIGNS_TREATMENT -1- HealthcareProvider\nASSIGNS_TREATMENT -N- TreatmentPlan\n\nCONDUCTS_CAMPAIGN -1- HealthcareProvider\nCONDUCTS_CAMPAIGN -N- AwarenessCampaign\n\nUSES_VIRTUAL_CARE -1- Patient\nUSES_VIRTUAL_CARE -N- VirtualCare\n\nPROVIDES_VIRTUAL_CARE -1- HealthcareProvider\nPROVIDES_VIRTUAL_CARE -N- VirtualCare\n\n@endchen"          
    },
    {
        "input": "Give an ER diagram for this. Most of the car owners do not know whether their car is at risk and needs to be serviced. This considerably increases the risk of malfunctioning of major parts of a car such as the braking system and engine which lead to accidents. Car Care is a multi-brand car service and maintenance application that maintains the date at which the specific part of a car is installed and notifies the expiry date of the parts of the car for both the driver and authorized service centre, so that the car can be serviced. This application enables car owners and service centres to separately login and enter their cars information. After issuing the car, the service centre employee enters the estimated expiry dates of parts of the car in this app. This application notifies the car owners and service centres when the expiry date for parts of the car is reached. Then the service centre employee contacts the owner of a car about service, once the owner accepts service request, the service centre employee picks up the car from home, this saves the time for owner of car. And then service centre employee examines the entire car and prepares the list of the damaged parts of the car and send it to the owner of the car through this app, once the owner selects the damaged parts to be serviced, the employee services the owner selected parts and updates the information about changed parts in the app so that the car can be service again on the expiry date of changed parts. Thus, this application helps in exchanging information between car owners and service centres. This application also enables the online payment for the services.",
        "output": "@startchen\n\nentity CarOwner {\n  owner_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity ServiceCenter {\n  center_id <<key>>\n  name\n  location\n  contact_info\n}\n\nentity Car {\n  car_id <<key>>\n  owner_id <<foreign>>\n  make\n  model\n  year\n  registration_number\n}\n\nentity CarPart {\n  part_id <<key>>\n  car_id <<foreign>>\n  part_name\n  install_date\n  expiry_date\n  status\n}\n\nentity ServiceRequest {\n  request_id <<key>>\n  car_id <<foreign>>\n  center_id <<foreign>>\n  request_date\n  status\n}\n\nentity Service {\n  service_id <<key>>\n  request_id <<foreign>>\n  service_date\n  total_cost\n  payment_status\n}\n\nentity PartReplacement {\n  replacement_id <<key>>\n  service_id <<foreign>>\n  part_id <<foreign>>\n  replaced_date\n  cost\n}\n\nrelationship OWNS {\n}\n\nrelationship MONITORS {\n}\n\nrelationship SUBMITS_REQUEST {\n}\n\nrelationship HANDLES_SERVICE {\n}\n\nrelationship REPLACES_PART {\n}\n\nrelationship MAKES_PAYMENT {\n}\n\nOWNS -1- CarOwner\nOWNS -N- Car\n\nMONITORS -1- Car\nMONITORS -N- CarPart\n\nSUBMITS_REQUEST -1- CarOwner\nSUBMITS_REQUEST -N- ServiceRequest\n\nHANDLES_SERVICE -1- ServiceCenter\nHANDLES_SERVICE -N- ServiceRequest\n\nREPLACES_PART -1- Service\nREPLACES_PART -N- PartReplacement\n\nMAKES_PAYMENT -1- CarOwner\nMAKES_PAYMENT -N- Service\n\n@endchen"
    },
    {
        "input": "Public Distribution System (PDS) is an Indian food security system. It is established by the Government of India under the Ministry of Consumer Affairs, Food, and Public Distribution and managed jointly with state governments in India. The traditional PDS is used to distribute grocery items to India’s poor who are valid ration cardholders. The validity and the allocation of the ration cards are monitored by the state governments. A ration cardholder should be given 35 kg of food grain as per the norms of PDS. However, there are concerns about the efficiency of the distribution process. In order to make it efficient and improve the current system of PDS, we are implementing e-Ration Shop. Here, we are going to make a website for shopping purposes. Using this website ration cardholder can order his/her grocery items from the PDS online. The main reason for using this website is to make this process computerized and to remove the drawbacks of the present way of issuing products based on the ration card. The main drawback in the current system is that the PDS has been criticized for its urban bias and its failure to serve the poorer sections of the population effectively. Also, many retail shopkeepers have a large number of bogus cards to sell food grains in the open market. Many PDS dealers resort to malpractice since they acquire less Salary so, by this project we are solving this problem too. Most of the time, users do not get their rightful entitlement in terms of quantity. What’s meant for them or the farm produce procured by the PDS is diverted to the open market. So in order to avoid all these drawbacks, we are going to use the e-Ration Shop which will help us to avoid the corruption in PDS if not eradicate it. The various importance of the proposed case study is every shop’s geo-location will be located on the map, all the information regarding shop and shopkeeper respective to the ration card and region, shop opening and closing details will be available, stock provided based on category, retailers can add, edit, delete and update their shop’s other items also, retailers can advertise their shops, stock availability will be notified on regular basis, product delivery feature, complaint forum for complaints by users, easy payment system by PayTM, COD etc., admin and moderator features for government and shopkeepers and authentication system by Aadhaar number and One-Time Pin (OTP). Generate an ER diagram for this system.",
        "output": "@startchen\n\nentity RationCardHolder {\n  cardholder_id <<key>>\n  name\n  address\n  phone\n  email\n  registration_date\n}\n\nentity Shopkeeper {\n  shopkeeper_id <<key>>\n  name\n  shop_name\n  location\n  contact_info\n  opening_time\n  closing_time\n}\n\nentity Shop {\n  shop_id <<key>>\n  shopkeeper_id <<foreign>>\n  shop_name\n  location\n  geo_location\n  opening_time\n  closing_time\n}\n\nentity Product {\n  product_id <<key>>\n  product_name\n  category\n  price\n  stock\n}\n\nentity Order {\n  order_id <<key>>\n  cardholder_id <<foreign>>\n  shop_id <<foreign>>\n  product_id <<foreign>>\n  order_date\n  quantity\n  total_amount\n  status\n}\n\nentity Complaint {\n  complaint_id <<key>>\n  cardholder_id <<foreign>>\n  shop_id <<foreign>>\n  complaint_date\n  complaint_details\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  order_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nrelationship HAS_SHOP {\n}\n\nrelationship MANAGES {\n}\n\nrelationship SELLS_PRODUCT {\n}\n\nrelationship PLACES_ORDER {\n}\n\nrelationship RAISES_COMPLAINT {\n}\n\nrelationship PROCESSES_PAYMENT {\n}\n\nHAS_SHOP -1- Shopkeeper\nHAS_SHOP -N- Shop\n\nMANAGES -1- Shopkeeper\nMANAGES -N- RationCardHolder\n\nSELLS_PRODUCT -1- Shop\nSELLS_PRODUCT -N- Product\n\nPLACES_ORDER -1- RationCardHolder\nPLACES_ORDER -N- Order\n\nRAISES_COMPLAINT -1- RationCardHolder\nRAISES_COMPLAINT -N- Complaint\n\nPROCESSES_PAYMENT -1- Order\nPROCESSES_PAYMENT -1- Payment\n\n@endchen"
    },
    {
        "input": "The ‘Textile Management System’ case study is designed to monitor all the processes in a textile manufacturing industry. There are various processes such as order receiving, purchase of raw materials, classification of raw materials, production of goods and selling the products. The main aim of this system is to ensure the reliability of data and to ease the process of manufacturing and transportation of garments and raw materials. This system ensures that the hardships prevailing in the manual systems are overridden by reducing the errors in data handling. The major functionalities are customer registration, sampling, stock checking, purchasing and processing of raw materials, production of garments, product checking and clearance, shipment, billing and report generation. Generate an ER diagram for this.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity RawMaterial {\n  material_id <<key>>\n  material_name\n  supplier\n  quantity\n  price\n  purchase_date\n}\n\nentity Garment {\n  garment_id <<key>>\n  garment_name\n  size\n  color\n  quantity\n  production_date\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  delivery_date\n  status\n}\n\nentity Shipment {\n  shipment_id <<key>>\n  order_id <<foreign>>\n  shipment_date\n  delivery_status\n}\n\nentity Invoice {\n  invoice_id <<key>>\n  order_id <<foreign>>\n  total_amount\n  payment_status\n}\n\nentity Report {\n  report_id <<key>>\n  report_date\n  issue_type\n  description\n}\n\nrelationship PLACES_ORDER {\n}\n\nrelationship CONTAINS_MATERIAL {\n}\n\nrelationship PRODUCES_GARMENT {\n}\n\nrelationship SHIPS_ORDER {\n}\n\nrelationship GENERATES_INVOICE {\n}\n\nrelationship GENERATES_REPORT {\n}\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nCONTAINS_MATERIAL -1- Order\nCONTAINS_MATERIAL -N- RawMaterial\n\nPRODUCES_GARMENT -N- RawMaterial\nPRODUCES_GARMENT -N- Garment\n\nSHIPS_ORDER -1- Order\nSHIPS_ORDER -1- Shipment\n\nGENERATES_INVOICE -1- Order\nGENERATES_INVOICE -1- Invoice\n\nGENERATES_REPORT -1- Order\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Create an ER diagram for a hotel reservation system. The system allows customers to book rooms online, check room availability, and make payments. The hotel management can add or update room details, view reservations, and generate reports. The system also includes a customer support feature to assist users with their queries and issues.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Room {\n  room_id <<key>>\n  room_type\n  capacity\n  rate_per_night\n  availability_status\n}\n\nentity Reservation {\n  reservation_id <<key>>\n  customer_id <<foreign>>\n  room_id <<foreign>>\n  check_in_date\n  check_out_date\n  reservation_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  reservation_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  payment_status\n}\n\nentity SupportTicket {\n  ticket_id <<key>>\n  customer_id <<foreign>>\n  issue_type\n  description\n  status\n  created_date\n  resolved_date\n}\n\nentity Report {\n  report_id <<key>>\n  reservation_id <<foreign>>\n  generated_date\n  report_type\n  description\n}\n\nrelationship MAKES_RESERVATION {\n}\nrelationship ASSIGNS_ROOM {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship CREATES_TICKET {\n}\nrelationship GENERATED_FROM {\n}\n\nMAKES_RESERVATION -1- Customer\nMAKES_RESERVATION -N- Reservation\n\nASSIGNS_ROOM -1- Reservation\nASSIGNS_ROOM -1- Room\n\nMAKES_PAYMENT -1- Reservation\nMAKES_PAYMENT -1- Payment\n\nCREATES_TICKET -1- Customer\nCREATES_TICKET -N- SupportTicket\n\nGENERATED_FROM -N- Report\nGENERATED_FROM -1- Reservation\n\n@endchen"
    },
    {
        "input": "Create an ER diagram for a Learning Management System. The Learning Management System (LMS) is designed as a comprehensive platform that facilitates educational interactions between students and instructors. For students, it offers the ability to register, enroll in courses, submit assignments, and access their grades in a structured and accessible manner. On the other hand, instructors are provided with tools to design courses, manage student assignments, and grade submissions with efficiency.\n Additionally, the system fosters collaboration and communication through integrated discussion forums, allowing participants to engage in course-related discussions. A feedback mechanism also exists, enabling students to share their learning experiences, providing insights that instructors can use to improve their courses. The LMS aims to streamline the educational process, bringing convenience to both teaching and learning.",
       "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Instructor {\n  instructor_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Course {\n  course_id <<key>>\n  title\n  description\n  instructor_id <<foreign>>\n  start_date\n  end_date\n}\n\nentity Assignment {\n  assignment_id <<key>>\n  course_id <<foreign>>\n  student_id <<foreign>>\n  title\n  description\n  due_date\n  grade\n}\n\nentity DiscussionForum {\n  forum_id <<key>>\n  course_id <<foreign>>\n  topic\n  post_date\n  post_content\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  feedback_date\n  feedback_content\n}\n\nrelationship ENROLLS_IN {\n}\nrelationship TEACHES {\n}\nrelationship SUBMITS_ASSIGNMENT {\n}\nrelationship PARTICIPATES_IN_FORUM {\n}\nrelationship PROVIDES_FEEDBACK {\n}\n\nENROLLS_IN -1- Student\nENROLLS_IN -N- Course\n\nTEACHES -1- Instructor\nTEACHES -N- Course\n\nSUBMITS_ASSIGNMENT -1- Student\nSUBMITS_ASSIGNMENT -N- Assignment\n\nPARTICIPATES_IN_FORUM -N- Student\nPARTICIPATES_IN_FORUM -1- DiscussionForum\n\nPROVIDES_FEEDBACK -1- Student\nPROVIDES_FEEDBACK -N- Feedback\n\n@endchen"
    },
    {
        "input": "Create an ER diagram for an inventory management system. The system tracks inventory levels, orders, and deliveries. Store managers can view inventory levels, reorder products, and manage suppliers. The system also generates reports on product usage and reorder history.",
        "output": "@startchen\n\nentity StoreManager {\n  manager_id <<key>>\n  name\n  email\n  password\n  contact_number\n  store_location\n}\n\nentity Product {\n  product_id <<key>>\n  name\n  description\n  price\n  reorder_level\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  product_id <<foreign>>\n  location\n  quantity_in_stock\n  last_updated\n}\n\nentity Supplier {\n  supplier_id <<key>>\n  name\n  contact_info\n  address\n}\n\nentity Order {\n  order_id <<key>>\n  supplier_id <<foreign>>\n  manager_id <<foreign>>\n  order_date\n  total_amount\n  status\n}\n\nentity Delivery {\n  delivery_id <<key>>\n  order_id <<foreign>>\n  delivery_date\n  received_by\n  delivery_status\n}\n\nentity Report {\n  report_id <<key>>\n  report_date\n  report_type\n  description\n}\n\nrelationship MANAGES_INVENTORY {\n}\nrelationship PLACES_ORDER {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship SUPPLIES {\n}\nrelationship STORES_IN {\n}\n\nMANAGES_INVENTORY -1- StoreManager\nMANAGES_INVENTORY -N- Inventory\n\nSTORES_IN -N- Product\nSTORES_IN -1- Inventory\n\nPLACES_ORDER -1- StoreManager\nPLACES_ORDER -N- Order\n\nASSOCIATED_WITH -1- Order\nASSOCIATED_WITH -1- Delivery\n\nGENERATES_REPORT -1- StoreManager\nGENERATES_REPORT -N- Report\n\nSUPPLIES -1- Supplier\nSUPPLIES -N- Product\n\n@endchen"
    },


    {
        "input": "Create an ER diagram for an online examination system. The system allows students to register, take exams, and view their scores. Instructors can create exams, grade submissions, and view results. The system also provides a feedback mechanism for students to rate their exams.",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Instructor {\n  instructor_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Exam {\n  exam_id <<key>>\n  instructor_id <<foreign>>\n  title\n  description\n  start_date\n  end_date\n}\n\nentity Submission {\n  submission_id <<key>>\n  student_id <<foreign>>\n  exam_id <<foreign>>\n  submission_date\n  score\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  student_id <<foreign>>\n  exam_id <<foreign>>\n  feedback_date\n  rating\n  comment\n}\n\nrelationship TAKES_EXAM {\n}\nrelationship CREATES_EXAM {\n}\nrelationship GRADES_SUBMISSION {\n}\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship MAKES_SUBMISSION {\n}\nrelationship ASSOCIATED_WITH_EXAM {\n}\n\nTAKES_EXAM -1- Student\nTAKES_EXAM -N- Exam\n\nCREATES_EXAM -1- Instructor\nCREATES_EXAM -N- Exam\n\nGRADES_SUBMISSION -1- Instructor\nGRADES_SUBMISSION -N- Submission\n\nPROVIDES_FEEDBACK -1- Student\nPROVIDES_FEEDBACK -N- Feedback\n\nMAKES_SUBMISSION -1- Student\nMAKES_SUBMISSION -N- Submission\n\nASSOCIATED_WITH_EXAM -1- Exam\nASSOCIATED_WITH_EXAM -N- Submission\n\n@endchen"
    },
    {
        "input": "Create an ER diagram for an e-library system. The system allows users to browse e-books, borrow e-books, and return them. Librarians can manage the collection of e-books and issue reminders for overdue e-books. The system also allows users to leave reviews for the e-books.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Librarian {\n  librarian_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity EBook {\n  ebook_id <<key>>\n  title\n  author\n  genre\n  publication_date\n  availability_status\n  librarian_id <<foreign>>\n}\n\nentity Borrowing {\n  borrowing_id <<key>>\n  user_id <<foreign>>\n  ebook_id <<foreign>>\n  borrow_date\n  return_date\n  status\n}\n\nentity Review {\n  review_id <<key>>\n  user_id <<foreign>>\n  ebook_id <<foreign>>\n  review_date\n  rating\n  comment\n}\n\nentity Reminder {\n  reminder_id <<key>>\n  borrowing_id <<foreign>>\n  librarian_id <<foreign>>\n  reminder_date\n  reminder_type\n}\n\nrelationship BROWSES_EBOOKS {\n}\nrelationship BORROWS_EBOOK {\n}\nrelationship RETURNS_EBOOK {\n}\nrelationship MANAGES_COLLECTION {\n}\nrelationship ISSUES_REMINDER {\n}\nrelationship LEAVES_REVIEW {\n}\n\nBROWSES_EBOOKS -1- User\nBROWSES_EBOOKS -N- EBook\n\nBORROWS_EBOOK -1- User\nBORROWS_EBOOK -N- Borrowing\n\nRETURNS_EBOOK -1- Borrowing\nRETURNS_EBOOK -1- EBook\n\nMANAGES_COLLECTION -1- Librarian\nMANAGES_COLLECTION -N- EBook\n\nISSUES_REMINDER -1- Librarian\nISSUES_REMINDER -N- Reminder\n\nLEAVES_REVIEW -1- User\nLEAVES_REVIEW -N- Review\n\n@endchen"
    },



    {
        "input": "Design an ER diagram for a gym management system that caters to both users and trainers. Users will have the ability to sign up and become members of the gym, allowing them to book sessions with their preferred schedules and track their fitness journey over time. They can monitor their progress and track improvements through personalized dashboards. To maintain membership, users can manage their payments seamlessly through the integrated payment gateway, ensuring that all fees are handled efficiently. Trainers, on the other hand, can set up workout plans tailored to their clients’ needs, manage their schedules, and closely monitor the progress of each client. The system is built to facilitate smooth communication between users and trainers while managing the operational side of the gym effectively.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n  membership_status\n}\n\nentity Trainer {\n  trainer_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n  experience_years\n}\n\nentity Membership {\n  membership_id <<key>>\n  user_id <<foreign>>\n  start_date\n  end_date\n  status\n  membership_type\n}\n\nentity Session {\n  session_id <<key>>\n  trainer_id <<foreign>>\n  user_id <<foreign>>\n  session_date\n  session_time\n  status\n}\n\nentity WorkoutPlan {\n  workout_id <<key>>\n  trainer_id <<foreign>>\n  user_id <<foreign>>\n  plan_details\n  start_date\n  end_date\n}\n\nentity Progress {\n  progress_id <<key>>\n  user_id <<foreign>>\n  workout_id <<foreign>>\n  date\n  weight\n  body_fat\n  muscle_mass\n  notes\n}\n\nentity Payment {\n  payment_id <<key>>\n  user_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nrelationship SIGNS_UP {\n}\nrelationship TRAINS_SESSION {\n}\nrelationship BOOKS_SESSION {\n}\nrelationship TRACKS_PROGRESS {\n}\nrelationship MANAGES_PAYMENT {\n}\nrelationship CREATES_PLAN {\n}\n\nSIGNS_UP -1- User\nSIGNS_UP -1- Membership\n\nTRAINS_SESSION -1- Trainer\nTRAINS_SESSION -N- Session\n\nBOOKS_SESSION -1- User\nBOOKS_SESSION -N- Session\n\nTRACKS_PROGRESS -1- WorkoutPlan\nTRACKS_PROGRESS -N- Progress\n\nMANAGES_PAYMENT -1- User\nMANAGES_PAYMENT -N- Payment\n\nCREATES_PLAN -1- Trainer\nCREATES_PLAN -N- WorkoutPlan\n\n@endchen"
    },
    {
        "input": "Design an ER diagram for a warehouse management system that handles the complex operations of managing inventory, shipments, and employee schedules. The system monitors stock levels in real-time, tracking shipments and deliveries to ensure that stock data is always accurate. Warehouse managers are given the ability to manage the entire stock lifecycle — adding, removing, and updating items as needed through a consolidated 'Manage Stock' function. Additionally, managers can generate detailed operational reports and oversee employee scheduling to align resources with demand. The system's inventory optimization feature ensures that stock is dynamically adjusted based on real-time demand patterns, maintaining an efficient flow of goods through the warehouse.",
        "output": "@startchen\n\nentity WarehouseManager {\n  manager_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Employee {\n  employee_id <<key>>\n  name\n  email\n  password\n  phone\n  role\n  shift\n}\n\nentity StockItem {\n  item_id <<key>>\n  name\n  category\n  quantity\n  location\n  last_updated\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  item_id <<foreign>>\n  current_quantity\n  reorder_point\n  safety_stock\n  lead_time\n  last_checked\n}\n\nentity Shipment {\n  shipment_id <<key>>\n  item_id <<foreign>>\n  quantity\n  shipment_date\n  delivery_date\n  status\n}\n\nentity Report {\n  report_id <<key>>\n  manager_id <<foreign>>\n  report_date\n  report_type\n  description\n}\n\nentity Schedule {\n  schedule_id <<key>>\n  employee_id <<foreign>>\n  shift_date\n  shift_time\n  status\n}\n\nrelationship MANAGES {\n managed_by\n}\nrelationship MANAGES_STOCK {\n}\nrelationship TRACKS_ITEM {\n}\nrelationship HAS_SHIPMENT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship HAS_SCHEDULE {\n}\n\nMANAGES -1- WarehouseManager\nMANAGES -1- Inventory\n\nMANAGES_STOCK -1- Employee\nMANAGES_STOCK -N- StockItem\n\nTRACKS_ITEM -1- Inventory\nTRACKS_ITEM -N- StockItem\n\nHAS_SHIPMENT -1- StockItem\nHAS_SHIPMENT -N- Shipment\n\nGENERATES_REPORT -1- WarehouseManager\nGENERATES_REPORT -N- Report\n\nHAS_SCHEDULE -1- Employee\nHAS_SCHEDULE -N- Schedule\n\n@endchen"
    },
    {
        "input": "Design an ER diagram for a hospital management system that facilitates interactions between patients and healthcare providers. The system allows patients to manage their healthcare by offering features such as booking appointments with available doctors and viewing their medical records for ongoing treatments. When patients visit the hospital, they are able to pay for the services they have used through the system's billing module, which generates invoices for medical services. After consultations, doctors prescribe medications to patients, and these prescriptions are delivered electronically to ensure quick access. Doctors can also efficiently manage patient records, keeping them up-to-date with relevant information, and have the ability to schedule follow-up appointments with patients, ensuring continuity of care. Furthermore, the system enables healthcare providers to issue prescriptions electronically, minimizing paperwork and streamlining the patient’s treatment process.",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Doctor {\n  doctor_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n  experience_years\n}\n\nentity Appointment {\n  appointment_id <<key>>\n  patient_id <<foreign>>\n  doctor_id <<foreign>>\n  appointment_date\n  appointment_time\n  status\n}\n\nentity MedicalRecord {\n  record_id <<key>>\n  patient_id <<foreign>>\n  doctor_id <<foreign>>\n  record_date\n  diagnosis\n  treatment\n}\n\nentity Prescription {\n  prescription_id <<key>>\n  doctor_id <<foreign>>\n  patient_id <<foreign>>\n  prescription_date\n  medication\n  dosage\n}\n\nentity Invoice {\n  invoice_id <<key>>\n  patient_id <<foreign>>\n  doctor_id <<foreign>>\n  invoice_date\n  total_amount\n  payment_status\n}\n\nrelationship BOOKS_APPOINTMENT {\n}\nrelationship HAS_APPOINTMENT {\n}\nrelationship CREATES_RECORD {\n}\nrelationship HAS_RECORD {\n}\nrelationship GIVES_PRESCRIPTION {\n}\nrelationship HAS_PRESCRIPTION {\n}\nrelationship GENERATES_INVOICE {\n}\n\nBOOKS_APPOINTMENT -1- Patient\nBOOKS_APPOINTMENT -N- Appointment\n\nHAS_APPOINTMENT -1- Doctor\nHAS_APPOINTMENT -N- Appointment\n\nCREATES_RECORD -1- Doctor\nCREATES_RECORD -N- MedicalRecord\n\nHAS_RECORD -1- Patient\nHAS_RECORD -N- MedicalRecord\n\nGIVES_PRESCRIPTION -1- Doctor\nGIVES_PRESCRIPTION -N- Prescription\n\nHAS_PRESCRIPTION -1- Patient\nHAS_PRESCRIPTION -N- Prescription\n\nGENERATES_INVOICE -1- Doctor\nGENERATES_INVOICE -N- Invoice\n\n@endchen"
    },
    {
        "input": "Design an ER diagram for a banking system that caters to both customers and bank employees. Customers can perform various transactions such as depositing money, withdrawing money, transferring funds, and checking their account balance. They can also apply for loans and view their transaction history. Bank employees have access to additional features such as managing customer accounts, approving loan applications, and generating reports. The system is designed to provide a seamless banking experience for customers while enabling efficient operations for bank employees.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Employee {\n  employee_id <<key>>\n  name\n  email\n  password\n  phone\n  role\n  department\n}\n\nentity Account {\n  account_id <<key>>\n  customer_id <<foreign>>\n  account_type\n  balance\n  status\n}\n\nentity Transaction {\n  transaction_id <<key>>\n  account_id <<foreign>>\n  transaction_date\n  transaction_type\n  amount\n  description\n}\n\nentity Loan {\n  loan_id <<key>>\n  customer_id <<foreign>>\n  loan_type\n  amount\n  status\n}\n\nentity Report {\n  report_id <<key>>\n  employee_id <<foreign>>\n  customer_id <<foreign, optional>>\n  account_id <<foreign, optional>>\n  loan_id <<foreign, optional>>\n  report_date\n  report_type\n  description\n}\n\nrelationship OPENS_ACCOUNT {\n}\nrelationship HAS_TRANSACTION {\n}\nrelationship TAKES_LOAN {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship REPORTS_ON {\n}\n\nOPENS_ACCOUNT -1- Customer\nOPENS_ACCOUNT -N- Account\n\nHAS_TRANSACTION -1- Account\nHAS_TRANSACTION -N- Transaction\n\nTAKES_LOAN -1- Customer\nTAKES_LOAN -N- Loan\n\nGENERATES_REPORT -1- Employee\nGENERATES_REPORT -N- Report\n\nREPORTS_ON -1- Report\nREPORTS_ON -0..1- Customer\nREPORTS_ON -0..1- Account\nREPORTS_ON -0..1- Loan\n\n@endchen"
    },
    {
        "input": "Design an ER diagram for a car rental system that allows customers to rent cars and manage their bookings. Customers can search for available cars, select the desired car, and make a reservation. They can also view their booking history and cancel bookings if needed. The system provides a seamless experience for customers to rent cars for their travel needs. Additionally, the system allows car rental agencies to manage their fleet, track bookings, and generate reports on rental activity.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity CarRentalAgency {\n  agency_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n}\n\nentity Car {\n  car_id <<key>>\n  agency_id <<foreign>>\n  make\n  model\n  year\n  registration_number\n  availability_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  customer_id <<foreign>>\n  car_id <<foreign>>\n  booking_date\n  start_date\n  end_date\n  status\n}\n\nentity Report {\n  report_id <<key>>\n  agency_id <<foreign>>\n  report_date\n  report_type\n  description\n}\n\nrelationship MAKES_BOOKING {\n}\nrelationship MANAGES_CAR {\n}\nrelationship HAS {\n}\nrelationship GENERATES_REPORT {\n}\n\nMAKES_BOOKING -1- Customer\nMAKES_BOOKING -N- Booking\n\nMANAGES_CAR -1- CarRentalAgency\nMANAGES_CAR -N- Car\n\nHAS -1- Car\nHAS -N- Booking\n\nGENERATES_REPORT -1- CarRentalAgency\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design an ER diagram for a Final Year Project (FYP) management system that supports the complex workflow of managing final year projects. The system allows students (groups of 3) to submit their project proposal for approval and upload progress reports at various stages of the project. Throughout the process, they can track the evaluation status of their work to ensure timely feedback and meet deadlines. Supervisors play a crucial role by reviewing student submissions, providing detailed feedback, and setting important project deadlines, ensuring that students stay on track. Additionally, panel members are responsible for evaluating projects during key milestones, offering scores, and submitting comments to guide students towards successful project completion. The system also empowers the FYP committee to oversee the entire process by assigning panel members to each project, approving or rejecting proposals based on academic standards, and ensuring the overall quality of the projects being submitted. A built-in communication feature enables seamless interaction between students, supervisors, and panel members, fostering collaboration and guidance throughout the project lifecycle.",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Supervisor {\n  supervisor_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\n\nentity Group {\n  group_id <<key>>\n  supervisor_id <<foreign>>\n  student1_id <<foreign>>\n  student2_id <<foreign>>\n  student3_id <<foreign>>\n}\n\nentity PanelMember {\n  panel_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\n\nentity Project {\n  project_id <<key>>\n  group_id <<foreign>>\n  panel_id <<foreign>>\n  title\n  description\n  start_date\n  end_date\n  status\n}\n\nentity Proposal {\n  proposal_id <<key>>\n  project_id <<foreign>>\n  proposal_date\n  proposal_status\n  proposal_details\n}\n\nentity ProgressReport {\n  report_id <<key>>\n  project_id <<foreign>>\n  report_date\n  report_status\n  report_details\n}\n\nentity Evaluation {\n  evaluation_id <<key>>\n  project_id <<foreign>>\n  panel_id <<foreign>>\n  evaluation_date\n  score\n  comments\n}\n\nrelationship CONSISTS_OF {\n}\nrelationship SUPERVISES {\n}\nrelationship DOES_PROJECT {\n}\nrelationship SUBMITS_PROPOSAL {\n}\nrelationship UPLOADS_REPORT {\n}\nrelationship HAS {\n}\nrelationship EVALUATES_PROJECT {\n}\n\nCONSISTS_OF -1- Group\nCONSISTS_OF -3- Student\n\nSUPERVISES -1- Supervisor\nSUPERVISES -N- Group\n\nDOES_PROJECT -1- Group\nDOES_PROJECT -1- Project\n\nSUBMITS_PROPOSAL -1- Group\nSUBMITS_PROPOSAL -1- Proposal\n\nUPLOADS_REPORT -1- Group\nUPLOADS_REPORT -N- ProgressReport\n\nHAS -1- Project\nHAS -N- Evaluation\n\nEVALUATES_PROJECT -1- PanelMember\nEVALUATES_PROJECT -N- Evaluation\n\n@endchen"
    },
    {
        "input": "Create an ER diagram for a Volunteer Management System that facilitates the organization of non-profit activities, ensuring smooth coordination among all participants. Volunteers have the ability to express interest in events by signing up through the system, while also being able to track their involvement across different activities. They are required to update their availability to make sure their participation aligns with ongoing or future events. Additionally, tasks are assigned based on specific criteria, ensuring that responsibilities are distributed according to both the availability and expertise of individuals involved. This system also keeps a detailed record of the time each participant dedicates to the organization, which is useful for tracking overall engagement. Events are scheduled in advance, and once all necessary arrangements have been made, including the approval of volunteer rosters, key individuals monitor the success and effectiveness of the event. An integrated reporting mechanism allows for the evaluation of participation and impact, helping ensure that the organization can continually refine its volunteer efforts.",
        "output": "@startchen\n\nentity Volunteer {\n  volunteer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity EventCoordinator {\n  coordinator_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\n\nentity Task {\n  task_id <<key>>\n  volunteer_id <<foreign>>\n  event_id <<foreign>>\n  task_description\n  task_status\n}\n\nentity Event {\n  event_id <<key>>\n  coordinator_id <<foreign>>\n  event_date\n  event_time\n  location\n  status\n}\n\nentity ParticipationRecord {\n  record_id <<key>>\n  volunteer_id <<foreign>>\n  event_id <<foreign>>\n  participation_date\n  participation_hours\n}\n\nentity Report {\n  report_id <<key>>\n  coordinator_id <<foreign>>\n  event_id <<foreign>>\n  report_date\n  report_type\n  description\n}\n\nrelationship SIGNS_UP_FOR_EVENT {\n}\nrelationship MANAGES_TASK {\n}\nrelationship SCHEDULES_EVENT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship HAS_TASK {\n}\nrelationship RECORDS_PARTICIPATION {\n}\nrelationship DOCUMENTS_EVENT {\n}\n\nSIGNS_UP_FOR_EVENT -1- Volunteer\nSIGNS_UP_FOR_EVENT -N- Event\n\nMANAGES_TASK -1- Volunteer\nMANAGES_TASK -N- Task\n\nSCHEDULES_EVENT -1- EventCoordinator\nSCHEDULES_EVENT -N- Event\n\nGENERATES_REPORT -1- EventCoordinator\nGENERATES_REPORT -N- Report\n\nHAS_TASK -1- Event\nHAS_TASK -N- Task\n\nRECORDS_PARTICIPATION -1- Event\nRECORDS_PARTICIPATION -1- ParticipationRecord\n\nDOCUMENTS_EVENT -1- Event\nDOCUMENTS_EVENT -N- Report\n\n@endchen"
    },
    {
        "input": "Design an ER diagram for a company's hiring system, for a fictional company called TechHire Solutions, which streamlines the recruitment process from initial candidate interest to final hiring decisions. Candidates who wish to apply for positions at TechHire Solutions must first submit their applications, which include resumes and cover letters. Once submitted, the system scans the resumes for relevant skills, experience, and qualifications, automatically filtering out those who don't meet the basic criteria. The shortlisted candidates are then moved forward in the process, where they are scheduled for various interview rounds, including technical assessments and HR interviews. Throughout this process, interviewers are able to log their feedback and ratings after each round, which contributes to the final decision-making. Finally, the system assists in selecting the most qualified candidates based on the gathered feedback, and an offer letter is generated for the chosen candidates. The system also tracks the overall hiring status, ensuring transparency and consistency across all stages of the recruitment cycle.",
        "output": "@startchen\n\nentity Candidate {\n  candidate_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  application_date\n}\n\nentity Interviewer {\n  interviewer_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\n\nentity JobApplication {\n  application_id <<key>>\n  candidate_id <<foreign>>\n  position\n  resume\n  cover_letter\n  application_status\n}\n\nentity InterviewRound {\n  round_id <<key>>\n  application_id <<foreign>>\n  interviewer_id <<foreign>>\n  round_date\n  round_type\n  feedback\n  rating\n}\n\nentity HiringDecision {\n  decision_id <<key>>\n  application_id <<foreign>>\n  decision_date\n  decision_status\n  offer_letter\n}\n\nentity HiringStatus {\n  status_id <<key>>\n  application_id <<foreign>>\n  interview_status\n  hiring_status\n}\n\nrelationship SUBMITS_APPLICATION {\n}\nrelationship CONDUCTS_INTERVIEW {\n}\nrelationship LOGS_FEEDBACK {\n}\nrelationship HAS_DECISION {\n}\nrelationship TRACKS_STATUS {\n}\n\nSUBMITS_APPLICATION -1- Candidate\nSUBMITS_APPLICATION -N- JobApplication\n\nCONDUCTS_INTERVIEW -1- Interviewer\nCONDUCTS_INTERVIEW -N- InterviewRound\n\nLOGS_FEEDBACK -1- InterviewRound\nLOGS_FEEDBACK -N- JobApplication\n\nHAS_DECISION -1- JobApplication\nHAS_DECISION -1- HiringDecision\n\nTRACKS_STATUS -1- JobApplication\nTRACKS_STATUS -1- HiringStatus\n\n@endchen"
    },
    {
        "input": "Design an ER diagram for GitHub Universe 2023 Management System. The system is designed to manage the complex lifecycle of GitHub Universe, the annual flagship event, from sponsor engagement to event scheduling and participant interaction. The system allows sponsors to submit proposals and review their benefits, while the organizers handle sponsor onboarding, tracking branding throughout the event, and managing overall event schedules. Participants can register, sign up for keynotes and workshops, and give feedback about the sessions they attend. For speakers, the system enables them to schedule and present their technical talks. Real-time notifications keep all users updated about the latest event information. Organizers will also be able to monitor attendance and generate reports based on user feedback and overall event metrics.",
        "output": "@startchen\n\nentity Sponsor {\n  sponsor_id <<key>>\n  name\n  email\n  password\n  phone\n  company\n  proposal\n  benefits\n  registration_date\n}\n\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\n\nentity Participant {\n  participant_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n  registration_status\n}\n\nentity Speaker {\n  speaker_id <<key>>\n  name\n  email\n  phone\n  topic\n  session_date\n  session_time\n}\n\nentity Event {\n  event_id <<key>>\n  organizer_id <<foreign>>\n  event_date\n  event_time\n  location\n  status\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  participant_id <<foreign>>\n  event_id <<foreign>>\n  feedback_date\n  rating\n  comment\n}\n\nentity Notification {\n  notification_id <<key>>\n  event_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n}\n\nentity Report {\n  report_id <<key>>\n  organizer_id <<foreign>>\n  event_id <<foreign>>\n  report_date\n  report_type\n  description\n}\n\nrelationship SUBMITS_PROPOSAL {\n}\nrelationship MANAGES_SPONSOR {\n}\nrelationship REGISTERS_FOR {\n}\nrelationship SCHEDULES_SESSION {\n}\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship SENDS_NOTIFICATION {\n}\nrelationship GENERATES_REPORT {\n}\n\nSUBMITS_PROPOSAL -1- Sponsor\nSUBMITS_PROPOSAL -N- Event\n\nMANAGES_SPONSOR -1- Organizer\nMANAGES_SPONSOR -N- Sponsor\n\nREGISTERS_FOR -1- Participant\nREGISTERS_FOR -N- Event\n\nSCHEDULES_SESSION -1- Speaker\nSCHEDULES_SESSION -N- Event\n\nPROVIDES_FEEDBACK -1- Participant\nPROVIDES_FEEDBACK -N- Feedback\n\nSENDS_NOTIFICATION -1- Event\nSENDS_NOTIFICATION -N- Notification\n\nGENERATES_REPORT -1- Organizer\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design an ER diagram for a university course registration system that simplifies the process of enrolling in courses and managing academic schedules. Students can search for available courses, add them to their course list, and register for the upcoming semester. The system also allows students to drop courses if needed and view their academic history. Professors can view the list of enrolled students, assign grades, and provide feedback on assignments. The system ensures that students and professors can easily manage their academic responsibilities and stay informed about course-related activities.",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Professor {\n  professor_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\n\nentity Course {\n  course_id <<key>>\n  professor_id <<foreign>>\n  course_name\n  course_code\n  department\n  semester\n}\n\nentity Enrollment {\n  enrollment_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  enrollment_date\n  enrollment_status\n}\n\nentity Assignment {\n  assignment_id <<key>>\n  course_id <<foreign>>\n  student_id <<foreign>>\n  assignment_title\n  due_date\n  submission_date\n  grade\n  feedback\n}\n\nentity Grade {\n  grade_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  grade_date\n  grade\n  feedback\n}\n\nentity AcademicHistory {\n  history_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  action_date\n  action_type\n  notes\n}\n\nrelationship REGISTERS_COURSE {\n}\nrelationship GRADES_COURSE {\n}\nrelationship TRACKS_HISTORY {\n}\nrelationship ENROLLS_IN {\n}\nrelationship TEACHES_COURSE {\n}\nrelationship COMPLETES_ASSIGNMENT {\n}\nrelationship GIVE_FEEDBACK {\n}\n\nREGISTERS_COURSE -1- Student\nREGISTERS_COURSE -N- Enrollment\n\nGRADES_COURSE -1- Professor\nGRADES_COURSE -N- Grade\n\nTRACKS_HISTORY -1- Student\nTRACKS_HISTORY -N- AcademicHistory\n\nENROLLS_IN -1- Enrollment\nENROLLS_IN -1- Course\n\nTEACHES_COURSE -1- Professor\nTEACHES_COURSE -N- Course\n\nCOMPLETES_ASSIGNMENT -1- Student\nCOMPLETES_ASSIGNMENT -N- Assignment\n\nGIVE_FEEDBACK -1- Professor\nGIVE_FEEDBACK -N- Assignment\n\n@endchen"
    },
    {
        "input": "Design an ER diagram for a social media platform that connects users through shared interests and activities. Users can create profiles, post content, and interact with other users through comments and likes. The platform also offers group features, allowing users to join communities and participate in group discussions. Additionally, users can send private messages to each other and receive notifications about new activities on the platform. The system aims to foster a sense of community and engagement among its users.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Post {\n  post_id <<key>>\n  user_id <<foreign>>\n  post_date\n  content\n  likes\n  comments\n}\n\nentity Group {\n  group_id <<key>>\n  group_name\n  description\n  member_count\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  message_date\n  message_content\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n}\n\nrelationship CREATES_POST {\n}\nrelationship JOINS_GROUP {\n}\nrelationship SENDS_MESSAGE {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nCREATES_POST -1- User\nCREATES_POST -N- Post\n\nJOINS_GROUP -(1,N)- User\nJOINS_GROUP -(N,1)- Group\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "Design an ER diagram for a social networking platform like Facebook. The platform allows individuals to shape their online identity by creating personalized profiles, which serve as the foundation for user engagement. Users can build meaningful connections by sending and accepting friend requests, gradually expanding their network. Beyond mere connections, users are provided with tools to express themselves by sharing life moments, thoughts, and experiences through posts, which may include text, photos, or videos. These updates can then be engaged with by other users, creating a vibrant interaction space. Users are notified in real-time about interactions, such as reactions to their posts or new connections. Additionally, the platform enables private conversations through messaging, allowing users to stay in touch and share media directly. The platform also offers a space for business users, who can create pages for their ventures, post updates, and manage advertisements targeted at their audience. Moderators ensure a safe environment by monitoring content, while administrators manage platform-wide activities, including enforcing community guidelines.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity BusinessUser {\n  business_user_id <<key>>\n  business_name\n  business_type\n  registration_date\n}\n\nentity Moderator {\n  moderator_id <<key>>\n  name\n  email\n  assigned_area\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  role\n  permissions\n}\n\nUser ->- d { BusinessUser, Moderator, Administrator }\n\nentity Post {\n  post_id <<key>>\n  user_id <<foreign>>\n  post_date\n  content\n  likes\n  comments\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  message_date\n  message_content\n}\n\nentity Page {\n  page_id <<key>>\n  user_id <<foreign>>\n  page_name\n  description\n  followers\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n}\n\nentity Advertisement {\n  ad_id <<key>>\n  business_user_id <<foreign>>\n  page_id <<foreign>>\n  ad_content\n  target_audience\n  ad_date\n  status\n}\n\nrelationship CREATES_POST {\n}\nrelationship SENDS_MESSAGE {\n}\nrelationship CREATES_PAGE {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship MANAGES_ADVERTISEMENT {\n}\nrelationship BEFRIENDS {\n  friendship_date\n  status\n}\nrelationship MODERATE_POSTS {\n  moderation_date\n  action_taken\n  notes\n}\n\nCREATES_POST -1- User\nCREATES_POST -N- Post\n\nBEFRIENDS -1- User\nBEFRIENDS -N- User\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\nCREATES_PAGE -1- BusinessUser\nCREATES_PAGE -N- Page\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\nMANAGES_ADVERTISEMENT -1- BusinessUser\nMANAGES_ADVERTISEMENT -N- Advertisement\n\nMODERATE_POSTS -1- Moderator\nMODERATE_POSTS -N- Post\n\n@endchen"
    },
    {
        "input": "Design an ERD for a blood donation app that connects donors, recipients, and blood banks, helping people in emergencies or for regular donations. The app allows users to register as donors, find donors in urgent situations based on blood type and location, and post blood requests. Donors are notified of blood requests and can donate blood. Recipients can find nearby hospitals, while blood banks organize donation drives and track blood availability to ensure sufficient supply. The app aims to simplify the blood donation process and improve access to life-saving resources for those in need.",
        "output": "@startchen\n\nentity Donor {\n  donor_id <<key>>\n  name\n  email\n  password\n  phone\n  blood_type\n  location\n  registration_date\n}\n\nentity Recipient {\n  recipient_id <<key>>\n  name\n  email\n  password\n  phone\n  blood_type\n  location\n  request_date\n}\n\nentity BloodBank {\n  bank_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  registration_date\n}\n\nentity DonationDrive {\n  drive_id <<key>>\n  bank_id <<foreign>>\n  drive_date\n  drive_location\n  drive_status\n}\n\nentity BloodRequest {\n  request_id <<key>>\n  recipient_id <<foreign>>\n  donor_id <<foreign>>\n  request_date\n  request_status\n}\n\nentity BloodAvailability {\n  availability_id <<key>>\n  bank_id <<foreign>>\n  blood_type\n  quantity\n  last_updated\n}\n\nrelationship REGISTERS_AS_DONOR {\n}\nrelationship FINDS_DONOR {\n}\nrelationship POSTS_REQUEST {\n}\nrelationship ORGANIZES_DRIVE {\n}\nrelationship TRACKS_AVAILABILITY {\n}\n\nREGISTERS_AS_DONOR -1- Donor\nREGISTERS_AS_DONOR -N- BloodBank\n\nFINDS_DONOR -1- Recipient\nFINDS_DONOR -N- Donor\n\nPOSTS_REQUEST -1- Recipient\nPOSTS_REQUEST -N- BloodRequest\n\nORGANIZES_DRIVE -1- BloodBank\nORGANIZES_DRIVE -N- DonationDrive\n\nTRACKS_AVAILABILITY -1- BloodBank\nTRACKS_AVAILABILITY -N- BloodAvailability\n\n@endchen"
    },
    {
        "input": "Design an ERD for a ride-sharing platform like Uber. The platform connects drivers and passengers, enabling them to request rides, track their location, and pay for services. Passengers can view available drivers, request rides to specific destinations, and rate drivers based on their experience. Drivers, on the other hand, can accept ride requests, navigate to the passenger's location, and provide a safe and efficient ride. The platform also includes features for customer support, allowing users to report issues and receive assistance when needed.",
        "output": "@startchen\n\nentity Passenger {\n  passenger_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Driver {\n  driver_id <<key>>\n  name\n  email\n  password\n  phone\n  vehicle\n  license_plate\n}\n\nentity Ride {\n  ride_id <<key>>\n  passenger_id <<foreign>>\n  driver_id <<foreign>>\n  ride_date\n  pickup_location\n  dropoff_location\n  fare\n  rating\n}\n\nentity Payment {\n  payment_id <<key>>\n  passenger_id <<foreign>>\n  driver_id <<foreign>>\n  ride_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_status\n}\n\nentity SupportTicket {\n  ticket_id <<key>>\n  passenger_id <<foreign>>\n  driver_id <<foreign>>\n  ticket_date\n  issue\n  status\n}\n\nrelationship REQUESTS_RIDE {\n}\nrelationship ACCEPTS_RIDE {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship RAISES_TICKET {\n}\n\nREQUESTS_RIDE -1- Passenger\nREQUESTS_RIDE -N- Ride\n\nACCEPTS_RIDE -1- Driver\nACCEPTS_RIDE -N- Ride\n\nMAKES_PAYMENT -1- Passenger\nMAKES_PAYMENT -N- Payment\n\nRAISES_TICKET -1- Passenger\nRAISES_TICKET -N- SupportTicket\n\n@endchen"
    },
    {
        "input": "Design an ERD for a food delivery platform like DoorDash. The platform connects customers with restaurants, allowing them to order food for delivery or pickup. Customers can browse restaurant menus, place orders, and track the status of their deliveries. Restaurants can receive orders, prepare food, and notify customers when their orders are ready. Delivery drivers can accept delivery requests, pick up orders, and deliver them to customers. The platform also includes features for customer support, enabling users to report issues and receive assistance.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Restaurant {\n  restaurant_id <<key>>\n  name\n  email\n  password\n  phone\n  cuisine\n  location\n}\n\nentity DeliveryDriver {\n  driver_id <<key>>\n  name\n  email\n  password\n  phone\n  vehicle\n  license_plate\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  restaurant_id <<foreign>>\n  driver_id <<foreign>>\n  order_date\n  delivery_date\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  customer_id <<foreign>>\n  restaurant_id <<foreign>>\n  order_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_status\n}\n\nentity SupportTicket {\n  ticket_id <<key>>\n  customer_id <<foreign>>\n  restaurant_id <<foreign>>\n  ticket_date\n  issue\n  status\n}\n\nrelationship PLACES_ORDER {\n}\nrelationship RECEIVES_ORDER {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship HAS {\n}\nrelationship RAISES_TICKET {\n}\nrelationship DELIVERS_ORDER {\n}\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nRECEIVES_ORDER -1- Restaurant\nRECEIVES_ORDER -N- Order\n\nDELIVERS_ORDER -1- DeliveryDriver\nDELIVERS_ORDER -N- Order\n\nMAKES_PAYMENT -1- Customer\nMAKES_PAYMENT -N- Payment\n\nHAS -1- Order\nHAS -1- Payment\n\nRAISES_TICKET -1- Customer\nRAISES_TICKET -N- SupportTicket\n\n@endchen"
    },
    {
        "input": "Design an ERD for a job finder app specifically designed to support women's career aspirations, called **SheWorks**. The app focuses on helping women find jobs that align with their skills and needs, such as flexible working hours, remote work opportunities, and women-centric organizations. SheWorks allows users to create profiles and upload their resumes, where they can search and apply for job listings that cater to their preferences. The app not only supports job seekers but also empowers employers to list vacancies that are more inclusive, offering features like mentorship programs or leadership roles for women. The platform integrates resume scanning and recommendation algorithms to match users with relevant job opportunities. Employers can shortlist candidates based on their profiles, and users can schedule interviews directly through the app. Notifications are sent to keep users informed of job updates, interview calls, and feedback. Additionally, the app promotes career development by offering workshops, events, and networking opportunities to encourage women in their professional growth.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Employer {\n  employer_id <<key>>\n  name\n  email\n  password\n  phone\n  company\n  registration_date\n}\n\nentity JobListing {\n  job_id <<key>>\n  employer_id <<foreign>>\n  job_title\n  job_description\n  job_type\n  location\n  salary\n}\n\nentity Application {\n  application_id <<key>>\n  user_id <<foreign>>\n  job_id <<foreign>>\n  application_date\n  application_status\n}\n\nentity Interview {\n  interview_id <<key>>\n  application_id <<foreign>>\n  employer_id <<foreign>>\n  user_id <<foreign>>\n  interview_date\n  interview_status\n}\n\nentity Event {\n  event_id <<key>>\n  event_date\n  event_type\n  event_description\n}\n\nentity Notification {\n  notification_id <<key>>\n  recipient_id <<foreign>>\n  recipient_type\n  notification_date\n  notification_type\n  notification_content\n}\n\nrelationship POSTS_JOB {\n}\nrelationship APPLIES_FOR_JOB {\n}\nrelationship SCHEDULES_INTERVIEW {\n}\nrelationship ASSOCIATED_WITH_APPLICATION {\n}\nrelationship ATTENDS_EVENT {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nPOSTS_JOB -1- Employer\nPOSTS_JOB -N- JobListing\n\nAPPLIES_FOR_JOB -1- User\nAPPLIES_FOR_JOB -N- Application\n\nASSOCIATED_WITH_APPLICATION -(1,N)- Application\nASSOCIATED_WITH_APPLICATION -(1,1)- Interview\n\nSCHEDULES_INTERVIEW -1- Employer\nSCHEDULES_INTERVIEW -N- Interview\n\nATTENDS_EVENT -1- User\nATTENDS_EVENT -N- Event\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "Design an ERD for a web app developed to manage a large-scale hackathon event. The app streamlines the organization of the event, allowing participants to register, form teams, and submit their projects. It also facilitates communication between participants, mentors, and organizers by providing features like chat rooms, notifications, and announcements. For organizers, the app includes features to manage event schedules, monitor team progress, and coordinate judging rounds. Mentors can offer guidance through dedicated channels, review project progress, and provide feedback. Judges can evaluate projects, score submissions, and provide feedback directly through the app. Additionally, sponsors have the option to submit branding materials, contribute prizes, and track the visibility of their sponsorships throughout the event. The platform ensures a smooth flow of communication, event updates, and project tracking, making the hackathon experience efficient for all involved.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Participant {\n  team_id <<foreign>>\n}\n\nentity Mentor {\n  expertise\n  availability\n}\n\nentity Organizer {\n  department\n}\n\nentity Judge {\n  expertise\n  availability\n}\n\nentity Sponsor {\n  company\n  contribution\n}\n\nUser ->- d { Participant, Mentor, Organizer, Judge, Sponsor }\n\nentity Team {\n  team_id <<key>>\n  project_id <<foreign>>\n  team_name\n}\n\nentity Project {\n  project_id <<key>>\n  team_id <<foreign>>\n  project_name\n  project_description\n  project_status\n  submission_date\n}\n\nentity Schedule {\n  schedule_id <<key>>\n  event_name\n  event_date\n  event_type\n  event_description\n}\n\nentity ChatRoom {\n  chatroom_id <<key>>\n  room_name\n  created_date\n}\n\nentity Message {\n  message_id <<key>>\n  chatroom_id <<foreign>>\n  user_id <<foreign>>\n  message_date\n  message_content\n}\n\nentity Notification {\n  notification_id <<key>>\n  recipient_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n}\n\nrelationship REGISTERS_FOR_EVENT {\n}\nrelationship FORMS_TEAM {\n}\nrelationship SUBMITS_PROJECT {\n}\nrelationship OFFERS_GUIDANCE {\n}\nrelationship MANAGES_SCHEDULE {\n}\nrelationship EVALUATES_PROJECT {\n}\nrelationship SUBMITS_BRANDING {\n}\nrelationship PARTICIPATES_IN_CHAT {\n}\nrelationship SENDS_MESSAGE {\n}\nrelationship MESSAGE_IN_CHATROOM {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nREGISTERS_FOR_EVENT -1- Participant\nREGISTERS_FOR_EVENT -N- Schedule\n\nFORMS_TEAM -N- Participant\nFORMS_TEAM -1- Team\n\nSUBMITS_PROJECT -1- Team\nSUBMITS_PROJECT -1- Project\n\nOFFERS_GUIDANCE -1- Mentor\nOFFERS_GUIDANCE -N- Project\n\nMANAGES_SCHEDULE -1- Organizer\nMANAGES_SCHEDULE -N- Schedule\n\nEVALUATES_PROJECT -1- Judge\nEVALUATES_PROJECT -N- Project\n\nSUBMITS_BRANDING -1- Sponsor\nSUBMITS_BRANDING -N- Team\n\nPARTICIPATES_IN_CHAT -1- User\nPARTICIPATES_IN_CHAT -N- ChatRoom\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\nMESSAGE_IN_CHATROOM -1- ChatRoom\nMESSAGE_IN_CHATROOM -N- Message\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "Design an ERD for a seminar management system. The system aims to manage every aspect of a large seminar, from organizing the venue to managing guest speakers and attendees. The platform allows organizers to schedule events, allocate the auditorium for sessions, and track audience attendance. It also supports guest speaker management, where the system handles speaker invitations, biographies, and session assignments. Audience members can register for the seminar, book seats, and receive notifications about upcoming sessions. Real-time updates about speaker schedules and session changes are provided to both attendees and organizers. The platform also offers a feedback mechanism for audience members to evaluate sessions. Sponsors and partners can promote their brands through the platform, ensuring visibility during the event. Additionally, the system supports guest list management, session timings, and overall event coordination to ensure smooth operations.",
        "output": "@startchen\n\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Speaker {\n  speaker_id <<key>>\n  name\n  email\n  password\n  phone\n  expertise\n  session_date\n  session_time\n}\n\nentity AudienceMember {\n  member_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Sponsor {\n  sponsor_id <<key>>\n  name\n  email\n  password\n  phone\n  company\n  registration_date\n}\n\nentity Session {\n  session_id <<key>>\n  organizer_id <<foreign>>\n  speaker_id <<foreign>>\n  session_date\n  session_time\n  session_topic\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  member_id <<foreign>>\n  session_id <<foreign>>\n  feedback_date\n  rating\n  comment\n}\n\nentity Notification {\n  notification_id <<key>>\n  recipient_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n}\n\nrelationship SCHEDULES_EVENT {\n}\nrelationship SPEAKS_ON {\n}\nrelationship REGISTERS_FOR_SESSION {\n}\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship NOTIFIES {\n}\nrelationship SPONSORS {\n}\n\nSCHEDULES_EVENT -1- Organizer\nSCHEDULES_EVENT -N- Session\n\nSPEAKS_ON -1- Speaker\nSPEAKS_ON -N- Session\n\nREGISTERS_FOR_SESSION -1- AudienceMember\nREGISTERS_FOR_SESSION -N- Session\n\nSPONSORS -1- Sponsor\nSPONSORS -N- Session\n\nPROVIDES_FEEDBACK -1- AudienceMember\nPROVIDES_FEEDBACK -N- Feedback\n\nNOTIFIES -1- Organizer\nNOTIFIES -N- Notification\n\n@endchen"
    },
    {
        "input": "Design ERD for a project management system that supports the planning, execution, and monitoring of projects. The system allows project managers to create project plans, assign tasks to team members, and track progress. Team members can view their assigned tasks, update task statuses, and communicate with other team members. The system also includes features for generating reports, monitoring project timelines, and identifying potential risks. Stakeholders can access project information, review progress reports, and provide feedback on project deliverables. The platform aims to streamline project management processes and improve collaboration among team members.",
        "output": "@startchen\n\nentity ProjectManager {\n  manager_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity TeamMember {\n  member_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity ProjectPlan {\n  plan_id <<key>>\n  manager_id <<foreign>>\n  plan_name\n  plan_description\n  plan_status\n}\n\nentity Task {\n  task_id <<key>>\n  plan_id <<foreign>>\n  member_id <<foreign>>\n  task_name\n  task_description\n  task_status\n}\n\nentity Report {\n  report_id <<key>>\n  plan_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nentity Stakeholder {\n  stakeholder_id <<key>>\n  name\n  email\n  phone\n  department\n  registration_date\n}\n\nrelationship CREATES_PLAN {\n}\nrelationship ASSIGNS_TASK {\n}\nrelationship COMPLETES_TASK {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship REVIEWS_REPORT {\n}\n\nCREATES_PLAN -1- ProjectManager\nCREATES_PLAN -N- ProjectPlan\n\nASSIGNS_TASK -1- ProjectManager\nASSIGNS_TASK -N- Task\n\nCOMPLETES_TASK -1- TeamMember\nCOMPLETES_TASK -N- Task\n\nGENERATES_REPORT -1- ProjectPlan\nGENERATES_REPORT -N- Report\n\nREVIEWS_REPORT -1- Stakeholder\nREVIEWS_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design ERD for a customer relationship management (CRM) system that helps businesses manage interactions with customers and potential customers. The system allows sales teams to track leads, manage customer accounts, and analyze sales data. Marketing teams can create targeted campaigns, track customer engagement, and generate reports on campaign performance. Customer support teams can log customer inquiries, resolve issues, and provide feedback on customer satisfaction. The system aims to improve customer relationships, increase sales, and enhance overall customer experience.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity SalesTeam {\n  team_id <<key>>\n}\n\nentity MarketingTeam {\n  team_id <<key>>\n}\n\nentity SupportTeam {\n  team_id <<key>>\n}\n\nUser ->- d { SalesTeam, MarketingTeam, SupportTeam }\n\nentity Lead {\n  lead_id <<key>>\n  team_id <<foreign>>\n  lead_name\n  lead_source\n  lead_status\n}\n\nentity Campaign {\n  campaign_id <<key>>\n  team_id <<foreign>>\n  campaign_name\n  campaign_type\n  campaign_status\n}\n\nentity Inquiry {\n  inquiry_id <<key>>\n  customer_id <<foreign>>\n  inquiry_date\n  inquiry_type\n  inquiry_status\n}\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  phone\n  registration_date\n}\n\nrelationship TRACKS_LEAD {\n}\nrelationship CREATES_CAMPAIGN {\n}\nrelationship HANDLES_INQUIRY {\n}\nrelationship MAKES_INQUIRY {\n}\nrelationship MANAGES_ACCOUNT {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship GENERATES_REPORT {\n}\n\nTRACKS_LEAD -1- SalesTeam\nTRACKS_LEAD -N- Lead\n\nCREATES_CAMPAIGN -1- MarketingTeam\nCREATES_CAMPAIGN -N- Campaign\n\nMAKES_INQUIRY -1- Customer\nMAKES_INQUIRY -N- Inquiry\n\nHANDLES_INQUIRY -1- SupportTeam\nHANDLES_INQUIRY -N- Inquiry\n\nMANAGES_ACCOUNT -1- SalesTeam\nMANAGES_ACCOUNT -N- Customer\n\nASSOCIATED_WITH -1- Lead\nASSOCIATED_WITH -1- Customer\n\nGENERATES_REPORT -1- SalesTeam\nGENERATES_REPORT -N- Campaign\n\nGENERATES_REPORT -1- MarketingTeam\nGENERATES_REPORT -N- Campaign\n\n@endchen"
    },
    {
        "input": "Give ERD for a content management system (CMS) that allows users to create, manage, and publish digital content. The system supports content creation, editing, and collaboration among users. Users can upload media files, organize content into categories, and schedule content publication. The system also includes features for content approval, version control, and content analytics. Administrators can manage user permissions, monitor content performance, and ensure the security of the system. The platform aims to streamline content management processes and improve content delivery to users.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Administrator {\n  admin_id <<key>>\n  user_id <<foreign>>\n  role\n  permissions\n}\n\nentity Content {\n  content_id <<key>>\n  user_id <<foreign>>\n  content_title\n  content_type\n  approval_status\n  version_number\n  category\n  publication_date\n  schedule_date\n}\n\nentity MediaFile {\n  file_id <<key>>\n  content_id <<foreign>>\n  file_name\n  file_type\n  file_size\n  upload_date\n}\n\nentity Analytics {\n  analytics_id <<key>>\n  content_id <<foreign>>\n  analytics_date\n  analytics_type\n  analytics_data\n}\n\nrelationship CREATES_CONTENT {\n}\nrelationship CONTAINS_MEDIA {\n}\nrelationship TRACKS_ANALYTICS {\n}\nrelationship APPROVES_CONTENT {\n}\n\nCREATES_CONTENT -1- User\nCREATES_CONTENT -N- Content\n\nCONTAINS_MEDIA -(1,1)- Content\nCONTAINS_MEDIA -(0,N)- MediaFile\n\nTRACKS_ANALYTICS -1- Content\nTRACKS_ANALYTICS -N- Analytics\n\nAPPROVES_CONTENT -1- Administrator\nAPPROVES_CONTENT -N- Content\n\n@endchen"
    },
    {
        "input": "Design ERD for a learning management system (LMS) that supports online education and training. The system allows instructors to create courses, upload learning materials, and assess student performance. Students can enroll in courses, access course content, and submit assignments. The system includes features for quizzes, discussions, and grading. Administrators can manage user accounts, monitor course enrollment, and generate reports on student progress. The platform aims to provide a seamless learning experience for students and instructors.",
        "output": "@startchen\n\nentity Instructor {\n  instructor_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Course {\n  course_id <<key>>\n  instructor_id <<foreign>>\n  course_name\n  course_description\n  start_date\n  end_date\n}\n\nentity Enrollment {\n  enrollment_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  enrollment_date\n  enrollment_status\n}\n\nentity Assignment {\n  assignment_id <<key>>\n  course_id <<foreign>>\n  student_id <<foreign>>\n  assignment_title\n  due_date\n  submission_date\n  grade\n}\n\nentity Quiz {\n  quiz_id <<key>>\n  course_id <<foreign>>\n  quiz_title\n  quiz_date\n  quiz_status\n}\n\nentity Discussion {\n  discussion_id <<key>>\n  course_id <<foreign>>\n  student_id <<foreign>>\n  discussion_date\n  discussion_content\n}\n\nentity Grade {\n  grade_id <<key>>\n  assignment_id <<foreign>>\n  quiz_id <<foreign>>\n  student_id <<foreign>>\n  grade_value\n  feedback\n  grade_date\n}\n\nentity Report {\n  report_id <<key>>\n  student_id <<foreign>>\n  enrollment_id <<foreign>>\n  course_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship CREATES_COURSE {\n}\nrelationship HAS_ENROLLMENT {\n}\nrelationship SUBMITS_ASSIGNMENT {\n}\nrelationship TAKES_QUIZ {\n}\nrelationship PARTICIPATES_IN_DISCUSSION {\n}\nrelationship ASSIGNS_GRADE {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RELATES_TO_COURSE {\n}\n\nCREATES_COURSE -1- Instructor\nCREATES_COURSE -N- Course\n\nHAS_ENROLLMENT -1- Student\nHAS_ENROLLMENT -N- Enrollment\n\nRELATES_TO_COURSE -1- Course\nRELATES_TO_COURSE -N- Assignment\n\nRELATES_TO_COURSE -1- Course\nRELATES_TO_COURSE -N- Quiz\n\nRELATES_TO_COURSE -1- Course\nRELATES_TO_COURSE -N- Grade\n\nRELATES_TO_COURSE -1- Course\nRELATES_TO_COURSE -N- Report\n\nRELATES_TO_COURSE -1- Enrollment\nRELATES_TO_COURSE -N- Report\n\nSUBMITS_ASSIGNMENT -1- Student\nSUBMITS_ASSIGNMENT -N- Assignment\n\nTAKES_QUIZ -1- Student\nTAKES_QUIZ -N- Quiz\n\nPARTICIPATES_IN_DISCUSSION -1- Student\nPARTICIPATES_IN_DISCUSSION -N- Discussion\n\nASSIGNS_GRADE -1- Instructor\nASSIGNS_GRADE -N- Grade\n\nGENERATES_REPORT -1- Administrator\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design ERD for a project tracking system that helps teams manage tasks, deadlines, and progress on projects. The system allows team members to create tasks, assign tasks to team members, and set deadlines for completion. Team members can update task statuses, track progress, and communicate with other team members. The system includes features for generating reports, monitoring project timelines, and identifying bottlenecks. Project managers can oversee project progress, allocate resources, and ensure project milestones are met. The platform aims to improve project efficiency, collaboration, and communication among team members.",
        "output": "@startchen\n\nentity TeamMember {\n  member_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity ProjectManager {\n  manager_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Task {\n  task_id <<key>>\n  manager_id <<foreign>>\n  member_id <<foreign>>\n  task_name\n  task_description\n  task_status\n  deadline\n}\n\nentity Report {\n  report_id <<key>>\n  manager_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship ASSIGNS_TASK {\n}\nrelationship UPDATES_TASK {\n}\nrelationship GENERATES_REPORT {\n}\n\nASSIGNS_TASK -1- ProjectManager\nASSIGNS_TASK -N- Task\n\nUPDATES_TASK -1- TeamMember\nUPDATES_TASK -N- Task\n\nGENERATES_REPORT -1- ProjectManager\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design a entity relationship diagram for a task management system that helps individuals organize and track their tasks. The system allows users to create tasks, set priorities, and deadlines for completion. Users can update task statuses, track progress, and categorize tasks based on different criteria. The system includes features for generating task lists, setting reminders, and organizing tasks into projects. Users can also share tasks with collaborators, assign tasks to team members, and receive notifications about task updates. The platform aims to improve task management efficiency and help users stay organized.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Team {\n  team_id <<key>>\n  team_name\n  creation_date\n}\n\nentity Task {\n  task_id <<key>>\n  assigned_to_id <<foreign>>\n  assigned_to_type\n  task_name\n  description\n  priority\n  status\n  deadline\n  category\n}\n\nentity Reminder {\n  reminder_id <<key>>\n  task_id <<foreign>>\n  reminder_date\n  reminder_time\n  reminder_message\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  task_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n}\n\nrelationship MANAGES_TASK {\n}\nrelationship SETS_REMINDER {\n}\nrelationship SENDS_NOTIFICATION {\n}\nrelationship BELONGS_TO {\n}\nrelationship COLLABORATES_WITH {\n}\n\nBELONGS_TO -(1,N)- User\nBELONGS_TO -(N,1)- Team\n\nMANAGES_TASK -1- Team\nMANAGES_TASK -N- Task\n\nSETS_REMINDER -1- User\nSETS_REMINDER -N- Reminder\n\nSENDS_NOTIFICATION -1- Task\nSENDS_NOTIFICATION -N- Notification\n\nCOLLABORATES_WITH -1- User\nCOLLABORATES_WITH -N- User\n\n@endchen"          
    },
    {
        "input": "Design a entity relationship diagram for a bug tracking system that helps software development teams manage and resolve software defects. The system allows developers to log bugs, assign bugs to team members, and track bug fixes. Team members can update bug statuses, prioritize bugs, and communicate with other team members about bug resolutions. The system includes features for generating bug reports, monitoring bug resolution timelines, and identifying recurring bugs. Project managers can oversee bug resolution progress, allocate resources to fix bugs, and ensure software quality standards are met. The platform aims to improve software quality, collaboration, and communication among team members.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Developer {\n}\n\nentity TeamMember {\n}\n\nentity ProjectManager {\n}\n\nUser ->- o { Developer, TeamMember, ProjectManager }\n\nentity Team {\n  team_id <<key>>\n  team_name\n  created_date\n}\n\nentity Bug {\n  bug_id <<key>>\n  assigned_to_id <<foreign>>\n  reported_by_id <<foreign>>\n  team_id <<foreign>>\n  bug_name\n  bug_description\n  bug_status\n  priority\n  reported_date\n  resolution_date\n}\n\nentity Report {\n  report_id <<key>>\n  manager_id <<foreign>>\n  bug_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  recipient_id <<foreign>>\n  bug_id <<foreign>>\n  message_content\n  message_date\n}\n\nrelationship BELONGS_TO_TEAM {\n}\nrelationship LOGS_BUG {\n}\nrelationship ASSIGNS_BUG {\n}\nrelationship UPDATES_BUG {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship SENDS_MESSAGE {\n}\n\nBELONGS_TO_TEAM -N- TeamMember\nBELONGS_TO_TEAM -1- Team\n\nLOGS_BUG -1- Developer\nLOGS_BUG -N- Bug\n\nASSIGNS_BUG -1- ProjectManager\nASSIGNS_BUG -N- Bug\n\nUPDATES_BUG -1- TeamMember\nUPDATES_BUG -N- Bug\n\nGENERATES_REPORT -1- ProjectManager\nGENERATES_REPORT -N- Report\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\n@endchen"          
    },
    {
        "input": "Design a entity relationship diagram for a customer support system that helps businesses manage customer inquiries, issues, and feedback. The system allows customer support agents to log customer inquiries, assign tickets to agents, and track ticket resolutions. Agents can update ticket statuses, prioritize tickets, and communicate with customers about issue resolutions. The system includes features for generating support reports, monitoring ticket resolution timelines, and identifying recurring issues. Managers can oversee ticket resolution progress, allocate resources to resolve issues, and ensure customer satisfaction standards are met. The platform aims to improve customer support efficiency, collaboration, and communication among support agents.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Customer {\n}\n\nentity SupportAgent {\n}\n\nentity Manager {\n}\n\nUser ->- d { Customer, SupportAgent, Manager }\n\nentity Ticket {\n  ticket_id <<key>>\n  customer_id <<foreign>>\n  assigned_to_id <<foreign>>\n  issue_title\n  issue_description\n  priority\n  status\n  creation_date\n  resolution_date\n}\n\nentity Message {\n  message_id <<key>>\n  ticket_id <<foreign>>\n  sender_id <<foreign>>\n  recipient_id <<foreign>>\n  message_content\n  message_date\n}\n\nentity Report {\n  report_id <<key>>\n  manager_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship CREATES_TICKET {\n}\nrelationship ASSIGNS_TICKET {\n}\nrelationship UPDATES_TICKET {\n}\nrelationship COMMUNICATES_ON_TICKET {\n}\nrelationship GENERATES_REPORT {\n}\n\nCREATES_TICKET -1- Customer\nCREATES_TICKET -N- Ticket\n\nASSIGNS_TICKET -1- Manager\nASSIGNS_TICKET -N- Ticket\n\nUPDATES_TICKET -1- SupportAgent\nUPDATES_TICKET -N- Ticket\n\nCOMMUNICATES_ON_TICKET -1- User\nCOMMUNICATES_ON_TICKET -N- Message\n\nGENERATES_REPORT -1- Manager\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design a entity relationship diagram for a help desk system that assists users in resolving technical issues and inquiries. The system allows users to log help desk tickets, assign tickets to support agents, and track ticket resolutions. Support agents can update ticket statuses, prioritize tickets, and communicate with users about issue resolutions. The system includes features for generating help desk reports, monitoring ticket resolution timelines, and identifying recurring issues. Managers can oversee ticket resolution progress, allocate resources to resolve issues, and ensure service level agreements are met. The platform aims to improve help desk efficiency, collaboration, and communication between users and support agents.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Customer {\n}\n\nentity SupportAgent {\n}\n\nentity Manager {\n}\n\nUser ->- d { Customer, SupportAgent, Manager }\n\nentity Ticket {\n  ticket_id <<key>>\n  customer_id <<foreign>>\n  assigned_to_id <<foreign>>\n  issue_title\n  issue_description\n  priority\n  status\n  creation_date\n  resolution_date\n}\n\nentity Message {\n  message_id <<key>>\n  ticket_id <<foreign>>\n  sender_id <<foreign>>\n  recipient_id <<foreign>>\n  message_content\n  message_date\n}\n\nentity Report {\n  report_id <<key>>\n  manager_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship LOGS_TICKET {\n}\nrelationship ASSIGNS_TICKET {\n}\nrelationship UPDATES_TICKET {\n}\nrelationship COMMUNICATES_ON_TICKET {\n}\nrelationship GENERATES_REPORT {\n}\n\nLOGS_TICKET -1- Customer\nLOGS_TICKET -N- Ticket\n\nASSIGNS_TICKET -1- Manager\nASSIGNS_TICKET -N- Ticket\n\nUPDATES_TICKET -1- SupportAgent\nUPDATES_TICKET -N- Ticket\n\nCOMMUNICATES_ON_TICKET -1- User\nCOMMUNICATES_ON_TICKET -N- Message\n\nGENERATES_REPORT -1- Manager\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design a entity relationship diagram for a library management system that helps librarians manage library resources, patrons, and circulation activities. The system allows librarians to catalog books, manage patron accounts, and track book loans. Patrons can search for books, check out books, and renew book loans. The system includes features for generating library reports, monitoring book circulation, and identifying overdue books. Administrators can oversee library operations, allocate resources, and ensure library policies are enforced. The platform aims to improve library efficiency, patron services, and resource management.",
        "output": "@startchen\n\nentity Librarian {\n  librarian_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Patron {\n  patron_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Book {\n  book_id <<key>>\n  librarian_id <<foreign>>\n  book_title\n  author\n  genre\n  publication_date\n  availability\n}\n\nentity Loan {\n  loan_id <<key>>\n  patron_id <<foreign>>\n  book_id <<foreign>>\n  loan_date\n  due_date\n  return_date\n  status\n}\n\nentity Report {\n  report_id <<key>>\n  admin_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship CATALOGS_BOOK {\n}\nrelationship CHECKS_OUT_BOOK {\n}\nrelationship RENEWS_LOAN {\n}\nrelationship MANAGES_ACCOUNT {\n}\nrelationship TRACKS_LOAN {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship REPORTS_ON {\n}\n\nCATALOGS_BOOK -1- Librarian\nCATALOGS_BOOK -N- Book\n\nCHECKS_OUT_BOOK -1- Patron\nCHECKS_OUT_BOOK -N- Book\n\nRENEWS_LOAN -1- Patron\nRENEWS_LOAN -N- Loan\n\nMANAGES_ACCOUNT -1- Librarian\nMANAGES_ACCOUNT -N- Patron\n\nTRACKS_LOAN -1- Librarian\nTRACKS_LOAN -N- Loan\n\nGENERATES_REPORT -1- Administrator\nGENERATES_REPORT -N- Report\n\nREPORTS_ON -1- Report\nREPORTS_ON -N- Book\n\n@endchen"          
    },
    {
        "input": "Design a entity relationship diagram for a hotel management system that helps hotel staff manage guest reservations, room assignments, and hotel services. The system allows hotel staff to create guest reservations, assign rooms, and track guest check-ins and check-outs. Guests can book rooms, request services, and provide feedback on their stay. The system includes features for generating hotel reports, monitoring room availability, and identifying guest preferences. Managers can oversee hotel operations, allocate resources, and ensure guest satisfaction. The platform aims to improve hotel efficiency, guest services, and room management.",
        "output": "@startchen\n\nentity Guest {\n  guest_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  guest_status\n}\n\nentity Room {\n  room_id <<key>>\n  room_number\n  room_type\n  room_rate\n  availability_status\n  room_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  guest_id <<foreign>>\n  room_id <<foreign>>\n  check_in_date\n  check_out_date\n  booking_status\n}\n\nentity RoomService {\n  service_id <<key>>\n  booking_id <<foreign>>\n  service_date\n  service_description\n  service_charge\n  service_status\n}\n\nentity Invoice {\n  invoice_id <<key>>\n  booking_id <<foreign>>\n  issue_date\n  total_amount\n  payment_status\n  invoice_status\n}\n\nentity Staff {\n  staff_id <<key>>\n  name\n  role\n  email\n  password\n  phone\n  staff_status\n}\n\nrelationship ALLOCATES_ROOM {\n}\nrelationship RESERVES_ROOM {\n}\nrelationship REQUESTS_SERVICE {\n}\nrelationship GENERATES_INVOICE {\n}\nrelationship MANAGES_BOOKING {\n}\nrelationship MAINTAINS_ROOM {\n}\n\nRESERVES_ROOM -1- Guest\nRESERVES_ROOM -N- Booking\n\nALLOCATES_ROOM -1- Booking\nALLOCATES_ROOM -N- Room\n\nREQUESTS_SERVICE -1- Booking\nREQUESTS_SERVICE -N- RoomService\n\nGENERATES_INVOICE -1- Booking\nGENERATES_INVOICE -1- Invoice\n\nMANAGES_BOOKING -1- Staff\nMANAGES_BOOKING -N- Booking\n\nMAINTAINS_ROOM -1- Staff\nMAINTAINS_ROOM -N- Room\n\n@endchen"
    },
    {
        "input": "Draw a entity relationship diagram for this system. The Prime Minister of India has announced a new scheme of National Health ID on August 15, 2020. According to this proposal, every Indian will get a unique Health ID based on their mobile number or Aadhaar number. The National Health ID will be a repository of all health-related information of a person. According to the National Health Authority (NHA), every patient who wishes to have their health records available digitally must start by creating a Health ID. Each Health ID will be linked to a health data consent manager – such as the National Digital Health Mission (NDHM) which will be used to seek the patient’s consent and allow for seamless flow of health information from the Personal Health Records module. This Health ID prevents various insurance frauds committed by several health agencies, hospitals including both doctors and patients. This will reduce the paper works and help patients easily maintain their health records. It can be used for further diagnosis. Children who are born after the implementation of the National Health ID will have all their medications recorded including the vaccines, etc.",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  mobile_number\n  password\n  aadhaar_number\n  health_id\n}\n\nentity HealthDataConsentManager {\n  manager_id <<key>>\n  password\n  manager_name\n  manager_type\n}\n\nentity HealthRecord {\n  record_id <<key>>\n  health_id <<foreign>>\n  patient_id <<foreign>>\n  record_date\n  record_type\n  record_content\n}\n\nentity HealthID {\n  health_id <<key>>\n  patient_id <<foreign>>\n  creation_date\n}\n\nrelationship HAS_HEALTH_ID {\n}\n\nrelationship LINKED_TO {\n}\n\nrelationship LINKS_TO_RECORDS {\n}\n\nHAS_HEALTH_ID -1- Patient\nHAS_HEALTH_ID -1- HealthID\n\nLINKED_TO -1- HealthID\nLINKED_TO -N- HealthDataConsentManager\n\nLINKS_TO_RECORDS -1- HealthID\nLINKS_TO_RECORDS -N- HealthRecord\n\n@endchen"          
    },
    {
        "input": "Design a entity relationship diagram. Amidst this pandemic period, students are being educated through online education platforms on smartphones and other similar devices. Many underprivileged children are unable to get access to such devices. Also, the people who are willing to help aren’t able to reach the needy due to lockdown. The ultimate aim of this system is to help such children by giving the collected devices from the people who were willing to help them. This system requests the donors to enter the details regarding the device they are willing to donate. It also requests the address details of the donor in order to reach them. On successful entry of such details, the user has to wait for the approval of the device. The admin has to verify the details of the device and assign it to a pickup executive for collection. This system also allows the volunteers to join the team. So that they could be helped by picking up the devices in their locality.",
        "output": "@startchen\n\nentity Donor {\n  donor_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  device_details\n  donation_status\n}\n\nentity Admin {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity PickupExecutive {\n  executive_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  pickup_status\n}\n\nentity Volunteer {\n  volunteer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Device {\n  device_id <<key>>\n  donor_id <<foreign>>\n  device_name\n  device_type\n  device_condition\n  approval_status\n}\n\nrelationship DONATES_DEVICE {\n}\nrelationship VERIFIES_DEVICE {\n}\nrelationship ASSIGNS_PICKUP {\n}\nrelationship PICKS_UP_DEVICE {\n}\nrelationship JOINS_TEAM {\n}\n\nDONATES_DEVICE -1- Donor\nDONATES_DEVICE -N- Device\n\nVERIFIES_DEVICE -1- Admin\nVERIFIES_DEVICE -N- Device\n\nASSIGNS_PICKUP -1- Admin\nASSIGNS_PICKUP -N- PickupExecutive\n\nPICKS_UP_DEVICE -1- PickupExecutive\nPICKS_UP_DEVICE -N- Device\n\nJOINS_TEAM -1- Volunteer\nJOINS_TEAM -N- PickupExecutive\n\n@endchen"
    },
    {
        "input": "Design a entity relationship diagram for a car rental system that allows users to rent cars for short periods of time. The system allows users to search for available cars, select a car for rental, and make a reservation. Users can specify the rental duration, pick-up location, and drop-off location. The system includes features for generating rental agreements, tracking rental durations, and processing payments. Administrators can manage car listings, monitor reservations, and ensure the availability of cars for rental. The platform aims to provide a convenient and efficient car rental experience for users.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Car {\n  car_id <<key>>\n  admin_id <<foreign>>\n  car_make\n  car_model\n  car_year\n  car_type\n  availability\n}\n\nentity Reservation {\n  reservation_id <<key>>\n  user_id <<foreign>>\n  car_id <<foreign>>\n  reservation_date\n  pick_up_date\n  drop_off_date\n  status\n}\n\nentity Agreement {\n  agreement_id <<key>>\n  reservation_id <<foreign>>\n  agreement_date\n  agreement_content\n}\n\nentity Payment {\n  payment_id <<key>>\n  user_id <<foreign>>\n  reservation_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_status\n}\n\nrelationship MAKES_RESERVATION {\n}\nrelationship MANAGES_CARS {\n}\nrelationship GENERATES_AGREEMENT {\n}\nrelationship PROCESSES_PAYMENT {\n}\nrelationship USES_RESERVATION {\n}\n\nMAKES_RESERVATION -1- User\nMAKES_RESERVATION -N- Reservation\n\nMANAGES_CARS -1- Administrator\nMANAGES_CARS -N- Car\n\nGENERATES_AGREEMENT -1- Reservation\nGENERATES_AGREEMENT -N- Agreement\n\nPROCESSES_PAYMENT -1- User\nPROCESSES_PAYMENT -N- Payment\n\nUSES_RESERVATION -N- Reservation\nUSES_RESERVATION -1- Car\n\n@endchen"          
    },
    {
        "input": "Draw a entity relationship diagram for this. College magazines provide an authoritative, recognizable and artistic platform of expression to the student body. However, paperback college magazines narrow the scope for a more extensive audience and are lavish of important resources like paper, especially when the magazines are printed seasonally on campus year after year. Consequently, many students may not be able to make it to the print media of the college. To subdue these shortcomings, an online college magazine system can be developed. This system will enable students of the college to liberally generate content for and about the college. Anyone in any part of the world can read and rate articles being published in the online magazine. Resource usage is much more minimal, but the experience is as efficient as in paperback magazines. With the help of this software, they will be able to read, write, draft, edit and publish all forms of content like articles, essays, op-eds, photography, poetry, etc. Selected students and faculty can regularly write and post articles for the magazine. Contributors (like alumni) can write for the magazine occasionally. Guests or readers can read, comment on and rate articles. Guests can also act as contributors if interested. Moderators will review articles before publishing to decide the pertinence of content. Articles will be organized based on categories appropriate to the workflow of the college. Thus, the implementation of this system will benefit all members of the college by providing consistent campus-related news and also by improving the literary and technical insight of faculty and students who write for the magazine.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Student {\n  department\n}\n\nentity Faculty {\n  department\n}\n\nentity Alumni {\n  department\n}\n\nentity Guest {\n}\n\nentity Moderator {\n  department\n}\n\nentity Article {\n  article_id <<key>>\n  author_id <<foreign>>\n  article_title\n  article_content\n  article_type\n  publication_date\n  status\n}\n\nentity Comment {\n  comment_id <<key>>\n  article_id <<foreign>>\n  commenter_id <<foreign>>\n  comment_content\n  comment_date\n}\n\nentity Rating {\n  rating_id <<key>>\n  article_id <<foreign>>\n  rater_id <<foreign>>\n  rating_value\n  rating_date\n}\n\nUser ->- d { Student, Faculty, Alumni, Guest, Moderator }\n\nrelationship WRITES_ARTICLE {\n}\nrelationship REVIEWS_ARTICLE {\n}\nrelationship COMMENTS_ON_ARTICLE {\n}\nrelationship RATES_ARTICLE {\n}\nrelationship HAS_RATING {\n}\n\nWRITES_ARTICLE -1- User\nWRITES_ARTICLE -N- Article\n\nREVIEWS_ARTICLE -1- Moderator\nREVIEWS_ARTICLE -N- Article\n\nCOMMENTS_ON_ARTICLE -1- Guest\nCOMMENTS_ON_ARTICLE -N- Comment\n\nRATES_ARTICLE -1- Guest\nRATES_ARTICLE -N- Rating\n\nHAS_RATING -1- Article\nHAS_RATING -N- Rating\n\n@endchen"          
    },
    {
        "input": "Give entity relationship diagram for this case study. Rules and regulations are paramount to all aspects of life. Certain proponents have asserted that crime which is a violation against laws of the society, is integral to the human nature and hence the society can never be completely free from it. In the existing system, all work is done on papers, so it is very difficult to secure crime reports data. This system needs more manpower to track the records of crimes and it lacks security. Modern society is characterized by increasing levels of risk posed by internal and external security threats. This poses the importance to develop an automated crime management system to keep a record of the crime and the criminals involved. The proposed crime bureau is a database system in which the police keeps the record of criminals who have been arrested, to be arrested, or escaped and the complaints. This will help the police department in enhanced management of information. The main entities in the whole process include; the petitioner (the person who files a First Incident Report (FIR)), victim, accused or criminal, case and investigating officer. The proposed crime record management system can overcome all the limitations of the existing system. This system provides proper security and reduces the manual work. This project helps to maintain a database through which the entire crime activities in the state can be monitored.",
        "output": "@startchen\n\nentity Petitioner {\n  petitioner_id <<key>>\n  name\n  address\n  phone\n  email\n  password\n  registration_date\n}\n\nentity Victim {\n  victim_id <<key>>\n  name\n  address\n  phone\n  email\n  password\n  registration_date\n}\n\nentity Accused {\n  accused_id <<key>>\n  name\n  address\n  phone\n  email\n  password\n  registration_date\n}\n\nentity Case {\n  case_id <<key>>\n  petitioner_id <<foreign>>\n  victim_id <<foreign>>\n  accused_id <<foreign>>\n  officer_id <<foreign>>\n  case_type\n  case_status\n  case_date\n}\n\nentity InvestigatingOfficer {\n  officer_id <<key>>\n  name\n  address\n  phone\n  email\n  registration_date\n}\n\nentity Complaint {\n  complaint_id <<key>>\n  petitioner_id <<foreign>>\n  victim_id <<foreign>>\n  accused_id <<foreign>>\n  complaint_date\n  complaint_content\n}\n\nrelationship FILES_FIR {\n}\nrelationship INVESTIGATES_CASE {\n}\nrelationship FILES_COMPLAINT {\n}\nrelationship IS_VICTIM_OF {\n}\nrelationship IS_ACCUSED_IN {\n}\n\nFILES_FIR -1- Petitioner\nFILES_FIR -N- Case\n\nINVESTIGATES_CASE -1- InvestigatingOfficer\nINVESTIGATES_CASE -N- Case\n\nFILES_COMPLAINT -1- Petitioner\nFILES_COMPLAINT -N- Complaint\n\nIS_VICTIM_OF -1- Victim\nIS_VICTIM_OF -N- Case\n\nIS_ACCUSED_IN -1- Accused\nIS_ACCUSED_IN -N- Case\n\n@endchen"          
    },
    {
        "input": "Design entity relationship diagram for this system. In our modern metropolitan city, people don’t follow the traffic rules. The outcome of it is unfortunate. In India, 64.4% of the total deaths are accounted by road accidents. As the automobiles get revolutionized the number of vehicles keep increasing. Conventional traffic signals are not efficient and strict. Smart traffic system aims in minimizing the risks of accidents by precautionary taking actions on people who violate the traffic rules. Cameras to monitor the roads with high traffic levels in order to facilitate the traffic signal. Helmet and seat belt detection using image processing to warn the drivers. Details of the driver are submitted to the traffic police, when he/she violates the law more than two times via the number plate which is captured by cameras. Street lights are operated based on the population density on road at night, thereby saving electricity. License will be cancelled as penalty, if the law is violated. Details of the driver will be passed on to successive signals on account of speeding. Automated traffic lights regulate the traffic flow in order to avoid congestions.",
        "output": "@startchen\n\nentity Driver {\n  driver_id <<key>>\n  name\n  license_number\n  violation_count\n  penalty\n  license_status\n}\n\nentity TrafficPolice {\n  police_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Camera {\n  camera_id <<key>>\n  location\n  camera_type\n  camera_status\n}\n\nentity Signal {\n  signal_id <<key>>\n  signal_type\n  signal_status\n}\n\nentity StreetLight {\n  light_id <<key>>\n  location\n  light_type\n  light_status\n}\n\nentity Violation {\n  violation_id <<key>>\n  driver_id <<foreign>>\n  camera_id <<foreign>>\n  violation_date\n  violation_type\n  violation_status\n}\n\nrelationship DETECTS_VIOLATION {\n}\nrelationship SUBMITS_TO_POLICE {\n}\nrelationship MONITORS_DRIVER {\n}\nrelationship OPERATES_SIGNAL {\n}\nrelationship OPERATES_LIGHT {\n}\nrelationship CANCELS_LICENSE {\n}\nrelationship ASSOCIATE_WITH {\n}\n\nDETECTS_VIOLATION -1- Camera\nDETECTS_VIOLATION -N- Violation\n\nSUBMITS_TO_POLICE -1- Violation\nSUBMITS_TO_POLICE -N- TrafficPolice\n\nMONITORS_DRIVER -1- Camera\nMONITORS_DRIVER -N- Driver\n\nOPERATES_SIGNAL -1- Signal\nOPERATES_SIGNAL -N- Camera\n\nOPERATES_LIGHT -1- StreetLight\nOPERATES_LIGHT -N- Camera\n\nCANCELS_LICENSE -1- TrafficPolice\nCANCELS_LICENSE -N- Driver\n\nASSOCIATE_WITH -1- Violation\nASSOCIATE_WITH -N- Driver\n\n@endchen"          
    },
    {
        "input": "Job seekers work hard to gain the right skills and knowledge to give them an edge over others in the role they seek. However, at times, despite their best efforts, one may find it difficult to move a step closer to this sought-after job. Hence a platform for listing out the availability of jobs irrespective of the field is required. Furthermore, a job site serves a dual purpose. On one hand, it lists out the availability of jobs to candidates, and on the other, it serves as a database of registered candidate’s profiles for companies to shortlist. The objective is to develop a software solution to predict the availability of jobs based on location, sectors, package, platform, interest and eligibility. As it is important to keep the candidates engaged during their job search, it is important to provide facets on the above-mentioned criteria so that they can narrow down to the jobs of their choice.",
        "output": "@startchen\n\nentity Candidate {\n  candidate_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  sector\n  interest\n  eligibility\n}\n\nentity Company {\n  company_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  sector\n}\n\nentity Job {\n  job_id <<key>>\n  company_id <<foreign>>\n  job_title\n  job_description\n  job_location\n  job_sector\n  job_package\n  job_platform\n  job_interest\n  job_eligibility\n}\n\nentity Application {\n  application_id <<key>>\n  candidate_id <<foreign>>\n  job_id <<foreign>>\n  application_date\n  application_status\n}\n\nrelationship SUBMITS_APPLICATION {\n}\nrelationship RECEIVES_APPLICATION {\n}\nrelationship POSTS_JOB {\n}\nrelationship SHORTLISTS_APPLICATION {\n}\nrelationship SELECTS_APPLICATION {\n}\n\nSUBMITS_APPLICATION -1- Candidate\nSUBMITS_APPLICATION -N- Application\n\nRECEIVES_APPLICATION -1- Job\nRECEIVES_APPLICATION -N- Application\n\nPOSTS_JOB -1- Company\nPOSTS_JOB -N- Job\n\nSHORTLISTS_APPLICATION -1- Company\nSHORTLISTS_APPLICATION -N- Application\n\nSELECTS_APPLICATION -1- Company\nSELECTS_APPLICATION -N- Application\n\n@endchen"          
    },
    {
        "input": "Coronavirus pandemic is spreading in large numbers. Experts suggest that social distancing has been used for a long time as one of the methods to reduce the spike in diseases and infectious illnesses. In India alone, the cases have sharply spiked up in the past two weeks, which has led to imposing even tougher measures. By identifying ‘hotspots’, necessary mapping can help deal with the problem of community transmission, i.e., when cases start spreading within the population in such a way that people don’t know how they were exposed to the contagion. This is known as ‘Stage 3’ of an outbreak. The Aarogya Setu app, which is a coronavirus tracker of sorts works on the basis of contact tracing and can help a user identify possible coronavirus ‘hotspot’ around his or her area. It can help people stay safe and adopt necessary precautions in some areas where there are cases and accordingly, help stop or prevent community transmission to an extent. On the basis of geotagging, it can also alert a specific user about their proximity to a nearby infection case or hotspot. The app also helps users self-identify their risk and monitor their health assessment, considering the times when it can get difficult (and most of all, is not particularly safe to step out and visit health clinics). Aarogya Setu app also helps people identify the symptoms, alert them about the best safety precautions and other relevant information concerning the spread of COVID-19. While this is a noble initiative, the app also lists down basic quarantine measures for those who are considered to be in the ‘high-risk’ category. It can also help people, who have had a travel history self-quarantine and prevent any risk of transmission. I want a entity relationship diagram for this.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  health_status\n  risk_level\n  reported_symptoms\n}\n\nentity Hotspot {\n  hotspot_id <<key>>\n  location\n  hotspot_type\n  hotspot_status\n}\n\nentity Quarantine {\n  quarantine_id <<key>>\n  user_id <<foreign>>\n  quarantine_start_date\n  quarantine_end_date\n  quarantine_status\n  quarantine_location\n}\n\nentity Alert {\n  alert_id <<key>>\n  user_id <<foreign>>\n  alert_date\n  alert_type\n  alert_content\n}\n\nrelationship UNDER_QUARANTINE {\n}\nrelationship RECIEVES_ALERT {\n}\nrelationship NEAR_HOTSPOT {\n}\n\nUNDER_QUARANTINE -1- User\nUNDER_QUARANTINE -1- Quarantine\n\nRECIEVES_ALERT -1- User\nRECIEVES_ALERT -N- Alert\n\nNEAR_HOTSPOT -N- User\nNEAR_HOTSPOT -1- Hotspot\n\n@endchen"          
    },
    {
        "input": "Create a entity relationship diagram for a wedding planner system that helps couples plan and organize their wedding events. The system allows couples to create wedding budgets, select venues, and hire vendors for services like catering, photography, and entertainment. Couples can manage guest lists, send invitations, and track RSVPs. The system includes features for creating wedding timelines, managing seating arrangements, and coordinating event logistics. Wedding planners can oversee the planning process, communicate with vendors, and ensure that all aspects of the wedding are executed smoothly. The platform aims to streamline wedding planning processes and create memorable experiences for couples and their guests.",
        "output": "@startchen\n\nentity Couple {\n  couple_id <<key>>\n  name\n  email\n  password\n  phone\n  wedding_date\n  budget\n}\n\nentity Vendor {\n  vendor_id <<key>>\n  name\n  email\n  password\n  phone\n  service_type\n  availability\n}\n\nentity Guest {\n  guest_id <<key>>\n  name\n  email\n  password\n  phone\n  rsvp_status\n}\n\nentity Wedding {\n  wedding_id <<key>>\n  couple_id <<foreign>>\n  venue\n  date\n  budget\n  status\n}\n\nentity Planner {\n  planner_id <<key>>\n  name\n  email\n  phone\n  department\n  registration_date\n}\n\nentity EventTimeline {\n  timeline_id <<key>>\n  wedding_id <<foreign>>\n  event_date\n  event_description\n  event_location\n  event_status\n}\n\nrelationship HIRES_PLANNER {\n}\nrelationship HIRES_VENDOR {\n}\nrelationship INVITES_GUEST {\n}\nrelationship MANAGES_WEDDING {\n}\nrelationship HAS_TIMELINE {\n}\n\nHIRES_PLANNER -1- Couple\nHIRES_PLANNER -1- Planner\n\nHIRES_VENDOR -1- Planner\nHIRES_VENDOR -N- Vendor\n\nINVITES_GUEST -1- Wedding\nINVITES_GUEST -N- Guest\n\nMANAGES_WEDDING -1- Planner\nMANAGES_WEDDING -N- Wedding\n\nHAS_TIMELINE -1- Wedding\nHAS_TIMELINE -N- EventTimeline\n\n@endchen"          
    },
    {
        "input": "Create a entity relationship diagram for an arcade management system that helps arcade owners manage games, tickets, and customer interactions. The system allows arcade owners to add new games, set game prices, and track game usage. Customers can purchase tickets, play games, and redeem tickets for prizes. The system includes features for managing customer accounts, tracking ticket balances, and generating reports on game popularity. Arcade owners can oversee arcade operations, allocate resources, and ensure customer satisfaction. The platform aims to provide a fun and engaging experience for arcade customers.",
        "output": "@startchen\n\nentity Owner {\n  owner_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Game {\n  game_id <<key>>\n  owner_id <<foreign>>\n  game_title\n  game_type\n  ticket_cost\n  game_status\n  game_usage\n}\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n}\n\nentity Ticket {\n  ticket_id <<key>>\n  game_id <<foreign>>\n  customer_id <<foreign>>\n  purchase_date\n  tickets_purchased\n  tickets_used\n  ticket_balance\n}\n\nentity Prize {\n  prize_id <<key>>\n  game_id <<foreign>>\n  customer_id <<foreign>>\n  prize_name\n  prize_cost\n  prize_availability\n  redemption_date\n}\n\nentity Report {\n  report_id <<key>>\n  owner_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship PURCHASES_TICKET {\n}\nrelationship USES_TICKET {\n}\nrelationship REDEEMS_PRIZE {\n}\nrelationship HAS_PRIZE {\n}\nrelationship OWNS_GAME {\n}\nrelationship GENERATES_REPORT {\n}\n\nOWNS_GAME -1- Owner\nOWNS_GAME -N- Game\n\nUSES_TICKET -1- Ticket\nUSES_TICKET -1- Game\n\nPURCHASES_TICKET -1- Customer\nPURCHASES_TICKET -N- Ticket\n\nHAS_PRIZE -1- Game\nHAS_PRIZE -N- Prize\n\nREDEEMS_PRIZE -1- Customer\nREDEEMS_PRIZE -N- Prize\n\nGENERATES_REPORT -1- Owner\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Create a entity relationship diagram for a mobile application that helps blind people navigate and explore their surroundings. The application uses GPS technology to provide audio directions, location information, and points of interest to users. Blind users can search for nearby places, plan routes, and receive real-time updates on their location. The application includes features for setting preferences, saving favorite locations, and accessing emergency services. The platform aims to improve the independence and mobility of blind individuals in urban environments.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  preferences\n}\n\nentity Location {\n  location_id <<key>>\n  location_name\n  location_type\n  location_address\n  location_status\n}\n\nentity Route {\n  route_id <<key>>\n  user_id <<foreign>>\n  start_location\n  end_location\n  route_distance\n  route_duration\n  route_status\n}\n\nentity PointOfInterest {\n  poi_id <<key>>\n  location_id <<foreign>>\n  poi_name\n  poi_type\n  poi_description\n  poi_status\n}\n\nentity EmergencyService {\n  service_id <<key>>\n  service_name\n  service_type\n  service_phone\n  service_address\n  service_status\n}\n\nentity Update {\n  update_id <<key>>\n  user_id <<foreign>>\n  update_date\n  update_content\n}\n\nrelationship PLANS_ROUTE {\n}\nrelationship SAVES_LOCATION {\n}\nrelationship ACCESS_SERVICE {\n}\nrelationship RECEIVES_UPDATE {\n}\nrelationship ASSOCIATES_POI {\n}\n\nPLANS_ROUTE -1- User\nPLANS_ROUTE -N- Route\n\nSAVES_LOCATION -1- User\nSAVES_LOCATION -N- Location\n\nACCESS_SERVICE -1- User\nACCESS_SERVICE -N- EmergencyService\n\nRECEIVES_UPDATE -1- User\nRECEIVES_UPDATE -N- Update\n\nASSOCIATES_POI -1- Location\nASSOCIATES_POI -N- PointOfInterest\n\n@endchen"          
    },
    {
        "input": "Create a entity relationship diagram for a mobile application that translates sign language gestures into text and speech. The application uses image recognition technology to interpret hand movements and gestures made by users. Deaf users can communicate with hearing individuals by signing words and phrases, which are then converted into text or spoken words. The application includes features for customizing sign language dictionaries, saving common phrases, and adjusting translation settings. The platform aims to bridge the communication gap between deaf and hearing individuals.",
        "output": "@startchen\n\nentity DeafUser {\n  user_id <<key>>\n  name {\n    Fname\n    Lname\n  }\n  email\n  password\n  phone\n}\n\nentity SignGesture {\n  gesture_id <<key>>\n  gesture_type\n  gesture_translation\n  accuracy_score\n}\n\nentity Display {\n  display_id <<key>>\n  content <<multi>>\n  output_type <<derived>>\n}\n\nrelationship INPUTS_SIGN {\n}\nrelationship CONVERTS_TO_TEXT {\ntranslation_setting\n}\nrelationship CONVERTS_TO_AUDIO {\ntranslation_setting\n}\n\nINPUTS_SIGN -1- DeafUser\nINPUTS_SIGN -N- SignGesture\n\nCONVERTS_TO_TEXT -1- SignGesture\nCONVERTS_TO_TEXT -1- Display\n\nCONVERTS_TO_AUDIO -1- SignGesture\nCONVERTS_TO_AUDIO -1- Display\n\n@endchen"          
    },
    {
        "input": "Give me ERD for this. The mobile application enables users to communicate by translating sign language gestures, text, and audio into different formats such as text, speech, or gestures. The application leverages image recognition technology to interpret hand gestures, converting them into text or speech. Users can also provide text or audio inputs, which are translated into sign gestures or speech, ensuring seamless communication between deaf and hearing individuals.\n\nThe platform allows users to provide feedback on translations, which helps improve system accuracy and user satisfaction. Key features include managing text and audio inputs, interpreting sign gestures with accuracy scores, and displaying outputs in multiple formats. This application aims to bridge the communication gap by facilitating real-time, multi-modal translation across different communication methods.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name {\n    Fname\n    Lname\n  }\n  email\n  password\n  phone\n}\n\nentity TextInput {\n  text_input_id <<key>>\n  input\n  source\n  comments\n}\n\nentity AudioInput {\n  audio_input_id <<key>>\n  audio_to_text\n}\n\nentity SignGesture {\n  gesture_id <<key>>\n  gesture_type\n  accuracy_score\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  comments\n  conversion_type\n  user_rating\n}\n\nentity Display {\n  display_id <<key>>\n  content <<multi>>\n  output_type <<derived>>\n}\n\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship INPUTS_TEXT {\n}\nrelationship INPUTS_SIGN {\n}\nrelationship INPUTS_AUDIO {\n}\nrelationship CONVERTS_TO_TEXT {\n  conversion_time\n}\nrelationship CONVERTS_TO_SIGN {\n  conversion_time\n}\n\nPROVIDES_FEEDBACK -1- User\nPROVIDES_FEEDBACK -N- Feedback\n\nINPUTS_TEXT -1- User\nINPUTS_TEXT -N- TextInput\n\nINPUTS_SIGN -1- User\nINPUTS_SIGN -N- SignGesture\n\nINPUTS_AUDIO -1- User\nINPUTS_AUDIO -N- AudioInput\n\nCONVERTS_TO_SIGN -1- AudioInput\nCONVERTS_TO_SIGN -1- Display\n\nCONVERTS_TO_SIGN -1- TextInput\nCONVERTS_TO_SIGN -1- Display\n\nCONVERTS_TO_TEXT -1- SignGesture\nCONVERTS_TO_TEXT -1- Display\n\n@endchen"          
    },    
    {
        "input": "Create a entity relationship diagram for a glacier melting prediction system that helps scientists monitor and analyze the melting of glaciers due to climate change. The system uses satellite imagery, weather data, and historical records to predict the rate of glacier melting and its impact on sea levels. Scientists can input data, run simulations, and visualize the results of glacier melting predictions. The system includes features for generating reports, sharing data with other researchers, and identifying trends in glacier melting patterns. The platform aims to provide valuable insights into the effects of climate change on glaciers and the environment.",
        "output": "@startchen\n\nentity Scientist {\n  scientist_id <<key>>\n  name {\n    Fname\n    Lname \n  }\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Glacier {\n  glacier_id <<key>>\n  glacier_name\n  glacier_location\n  glacier_type\n  glacier_status\n}\n\nentity Data {\n  data_id <<key>>\n  scientist_id <<foreign>>\n  data_content <<multi>>\n  data_type <<derived>>\n  data_source\n  data_date\n}\n\nentity Simulation {\n  simulation_id <<key>>\n  scientist_id <<foreign>>\n  simulation_date\n  simulation_results\n}\n\nentity Report {\n  report_id <<key>>\n  scientist_id <<foreign>>\n  report_date\n  report_content\n}\n\nrelationship INPUTS_DATA {\n}\nrelationship RUNS_SIMULATION {\n}\nrelationship ASSOCIATED_WITH_DATA {\n}\nrelationship ASSOCIATED_WITH_SIMULATION {\n}\nrelationship GENERATES_REPORT {\n}\n\nINPUTS_DATA -1- Scientist\nINPUTS_DATA -N- Data\n\nRUNS_SIMULATION -1- Scientist\nRUNS_SIMULATION -N- Simulation\n\nASSOCIATED_WITH_DATA -1- Glacier\nASSOCIATED_WITH_DATA -N- Data\n\nASSOCIATED_WITH_SIMULATION -1- Glacier\nASSOCIATED_WITH_SIMULATION -N- Simulation\n\nGENERATES_REPORT -1- Scientist\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Create a entity relationship diagram for an air quality monitoring system that helps environmental agencies track and analyze air pollution levels in urban areas. The system uses sensors, weather data, and pollution sources to measure air quality parameters such as particulate matter, ozone, and nitrogen dioxide. Environmental agencies can monitor real-time air quality data, set pollution thresholds, and issue alerts for high pollution levels. The system includes features for generating air quality reports, mapping pollution sources, and identifying trends in air pollution patterns. The platform aims to improve air quality monitoring and management in urban environments.",
        "output": "@startchen\n\nentity Agency {\n  agency_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity PollutionSource {\n  source_id <<key>>\n  source_name\n  source_location\n  source_type\n  source_status\n}\n\nentity WeatherData {\n  weather_id <<key>>\n  temperature\n  humidity\n  wind_speed\n  wind_direction\n  weather_date\n  weather_location\n}\n\nentity AirQualityData {\n  data_id <<key>>\n  source_id <<foreign>>\n  weather_id <<foreign>>\n  particulate_matter_level\n  ozone_level\n  nitrogen_dioxide_level\n}\n\nentity Threshold {\n  threshold_id <<key>>\n  parameter\n  max_value\n  min_value\n  alert_level\n}\n\nentity Alert {\n  alert_id <<key>>\n  agency_id <<foreign>>\n  alert_date\n  parameter\n  alert_message\n}\n\nentity Report {\n  report_id <<key>>\n  agency_id <<foreign>>\n  report_date\n  report_content\n}\n\nrelationship COLLECTED_FROM {\n}\nrelationship SETS_THRESHOLD {\n}\nrelationship HAS_THRESHOLD {\n}\nrelationship ISSUES_ALERT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship INFLUENCED_BY {\n}\n\nCOLLECTED_FROM -N- AirQualityData\nCOLLECTED_FROM -1- PollutionSource\n\nINFLUENCED_BY -N- AirQualityData\nINFLUENCED_BY -1- WeatherData\n\nSETS_THRESHOLD -1- Agency\nSETS_THRESHOLD -N- Threshold\n\nHAS_THRESHOLD -1- AirQualityData\nHAS_THRESHOLD -1- Threshold\n\nISSUES_ALERT -1- Agency\nISSUES_ALERT -N- Alert\n\nGENERATES_REPORT -1- Agency\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Create a entity relationship diagram for a diagramming tool that helps software engineers create UML diagrams, flowcharts, and other visual representations of software systems. The tool provides a user-friendly interface for designing diagrams, adding shapes and connectors, and customizing visual elements. Software engineers can collaborate on diagrams, share diagrams with team members, and export diagrams in various formats. The tool includes features for version control, diagram templates, and integration with other software development tools. The platform aims to streamline the diagramming process and enhance communication among software development teams.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  role\n}\n\nentity Diagram {\n  diagram_id <<key>>\n  user_id <<foreign>>\n  title\n  diagram_type\n  creation_date\n  last_modified_date\n  status\n}\n\nentity Shape {\n  shape_id <<key>>\n  diagram_id <<foreign>>\n  shape_type\n  position_x\n  position_y\n  customization\n}\n\nentity Connector {\n  connector_id <<key>>\n  diagram_id <<foreign>>\n  start_shape_id <<foreign>>\n  end_shape_id <<foreign>>\n  connector_type\n  connector_style\n}\n\nentity Version {\n  version_id <<key>>\n  diagram_id <<foreign>>\n  version_number\n  save_date\n  changes_summary\n}\n\nentity Template {\n  template_id <<key>>\n  name\n  description\n  diagram_type\n}\n\nrelationship CREATES_DIAGRAM {\n}\nrelationship CONTAINS_SHAPE {\n}\nrelationship LINKS_SHAPES {\n}\nrelationship HAS_VERSION {\n}\nrelationship USES_TEMPLATE {\n}\nrelationship COLLABORATES_WITH {\n diagram_id <<foreign>>\n}\n\nCREATES_DIAGRAM -1- User\nCREATES_DIAGRAM -N- Diagram\n\nCONTAINS_SHAPE -1- Diagram\nCONTAINS_SHAPE -N- Shape\n\nLINKS_SHAPES -1- Connector\nLINKS_SHAPES -2- Shape\n\nHAS_VERSION -1- Diagram\nHAS_VERSION -N- Version\n\nUSES_TEMPLATE -1- Diagram\nUSES_TEMPLATE -1- Template\n\nCOLLABORATES_WITH -1- User\nCOLLABORATES_WITH -N- User\n\n@endchen"          
    },
    {
        "input": "Create a entity relationship diagram for a fitness application that helps users track their workouts, set fitness goals, and monitor their progress. The application allows users to log exercises, track calories burned, and create personalized workout plans. Users can set fitness goals, view workout summaries, and receive notifications for workout reminders. The application includes features for tracking nutrition, logging meals, and calculating daily calorie intake. Users can monitor their nutrition intake, view meal summaries, and receive alerts for meal planning. The platform aims to promote healthy lifestyles, improve fitness habits, and enhance user well-being.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  age\n  weight\n  height\n  fitness_goal\n}\n\nentity Workout {\n  workout_id <<key>>\n  user_id <<foreign>>\n  workout_date\n  workout_type\n  duration\n  calories_burned\n}\n\nentity Exercise {\n  exercise_id <<key>>\n  workout_id <<foreign>>\n  exercise_name\n  sets\n  reps\n  weight\n  duration\n  calories_burned\n}\n\nentity Nutrition {\n  nutrition_id <<key>>\n  user_id <<foreign>>\n  meal_date\n  meal_type\n  meal_content\n  calories_intake\n}\n\nentity Goal {\n  goal_id <<key>>\n  user_id <<foreign>>\n  goal_type\n  target\n  progress\n}\n\nentity Reminder {\n  reminder_id <<key>>\n  user_id <<foreign>>\n  reminder_date\n  reminder_type\n  reminder_content\n}\n\nrelationship LOGS_WORKOUT {\n}\nrelationship LOGS_EXERCISE {\n}\nrelationship LOGS_NUTRITION {\n}\nrelationship SETS_GOAL {\n}\nrelationship SETS_REMINDER {\n}\n\nLOGS_WORKOUT -1- User\nLOGS_WORKOUT -N- Workout\n\nLOGS_EXERCISE -1- Workout\nLOGS_EXERCISE -N- Exercise\n\nLOGS_NUTRITION -1- User\nLOGS_NUTRITION -N- Nutrition\n\nSETS_GOAL -1- User\nSETS_GOAL -N- Goal\n\nSETS_REMINDER -1- User\nSETS_REMINDER -N- Reminder\n\n@endchen"
    },
    {
        "input": "Create a entity relationship diagram for a hostel finding application that helps students search for and book hostel accommodations near their educational institutions. The application allows students to search for hostels based on location, price, and amenities. Students can view hostel details, check availability, and book rooms online. The application includes features for filtering search results, viewing hostel reviews, and comparing hostel options. Students can manage bookings, receive booking confirmations, and access directions to hostels. The platform aims to simplify the process of finding and booking hostel accommodations for students.",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  institution\n}\n\nentity Hostel {\n  hostel_id <<key>>\n  hostel_name\n  hostel_location\n  hostel_price\n  hostel_amenities\n  hostel_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  student_id <<foreign>>\n  hostel_id <<foreign>>\n  booking_date\n  check_in_date\n  check_out_date\n  booking_status <<derived>>\n}\n\nentity Review {\n  review_id <<key>>\n  student_id <<foreign>>\n  hostel_id <<foreign>>\n  review_date\n  review_content\n  review_rating\n}\n\nrelationship BOOKS_HOSTEL {\n}\nrelationship WRITES_REVIEW {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship HAS_REVIEWS {\n}\n\nBOOKS_HOSTEL -1- Student\nBOOKS_HOSTEL -N- Booking\n\nASSOCIATED_WITH -1- Booking\nASSOCIATED_WITH -1- Hostel\n\nWRITES_REVIEW -1- Student\nWRITES_REVIEW -N- Review\n\nHAS_REVIEWS -1- Hostel\nHAS_REVIEWS -N- Review\n\n@endchen"          
    },
    {
        "input": "Create a entity relationship diagram for a messaging application that allows users to send text messages, photos, videos, and voice messages to their contacts. The application supports group chats, message encryption, and multimedia sharing. Users can create chat groups, add or remove participants, and customize chat settings. The application includes features for sending notifications, archiving messages, and blocking contacts. Users can manage message storage, view message histories, and receive message alerts. The platform aims to facilitate communication and collaboration among users.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  status\n}\n\nentity Contact {\n  contact_id <<key>>\n  user_id <<foreign>>\n  contact_name\n  contact_email\n  contact_phone\n  contact_status\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  message_content\n  message_type\n  message_date\n  message_status\n}\n\nentity Group {\n  group_id <<key>>\n  group_name\n  group_admin_id <<foreign>>\n  group_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship SENDS_MESSAGE {\n}\nrelationship ADDS_CONTACT {\n}\nrelationship CREATES_GROUP {\n}\nrelationship GETS_NOTIFICATION {\n}\nrelationship JOINS_GROUP {\n  membership_date\n  membership_status\n}\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\nADDS_CONTACT -1- User\nADDS_CONTACT -N- Contact\n\nCREATES_GROUP -1- User\nCREATES_GROUP -N- Group\n\nGETS_NOTIFICATION -1- User\nGETS_NOTIFICATION -N- Notification\n\nJOINS_GROUP -1- User\nJOINS_GROUP -N- Group\n\n@endchen"          
    },
    {
        "input": "Create a entity relationship diagram for a social media application that allows users to share photos, videos, and messages with their friends. The application supports multimedia sharing, chat messaging, and story posting. Users can create posts, view stories, and send direct messages to contacts. The application includes features for adding friends, following users, and commenting on posts. Users can manage privacy settings, view activity feeds, and receive notifications for new content. The platform aims to connect users and facilitate social interactions.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name {\n    Fname\n    Lname\n  }\n  email\n  password\n  phone\n  location\n  status\n}\n\nentity Post {\n  post_id <<key>>\n  user_id <<foreign>>\n  post_content <<multi>>\n  post_type <<derived>>\n  post_date\n  post_status\n}\n\nentity Story {\n  story_id <<key>>\n  user_id <<foreign>>\n  story_content <<multi>>\n  story_type <<derived>>\n  story_date\n  story_status\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  message_content <<multi>>\n  message_date\n  message_status\n}\n\nrelationship CREATES_POST {\n}\nrelationship CREATES_STORY {\n}\nrelationship SENDS_MESSAGE {\n}\nrelationship ADDS_FRIEND {\n  friendship_date\n  friendship_status\n}\nrelationship FOLLOWS_USER {\n  follow_date\n  follow_status\n}\n\nCREATES_POST -1- User\nCREATES_POST -N- Post\n\nCREATES_STORY -1- User\nCREATES_STORY -N- Story\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\nADDS_FRIEND -1- User\nADDS_FRIEND -N- User\n\nFOLLOWS_USER -1- User\nFOLLOWS_USER -N- User\n\n@endchen"          
    },
    {
        "input": "I need a entity relationship diagram for a logo design application that helps users create custom logos for their businesses, websites, and products. The application provides a user-friendly interface for designing logos, selecting colors, and adding text and graphics. Users can customize logo templates, save logo designs, and download logos in various formats. The application includes features for sharing logos on social media, collaborating on logo projects, and accessing design tools. Users can manage logo projects, view design histories, and receive design suggestions. The platform aims to empower users to create professional and visually appealing logos.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  business_name\n}\n\nentity Logo {\n  logo_id <<key>>\n  logo_name\n  logo_design\n  logo_colors <<multi>>\n  logo_status\n  logo_image\n}\n\nentity Template {\n  template_id <<key>>\n  template_name\n  template_type\n  template_design\n  template_colors <<multi>>\n}\n\nentity Project {\n  project_id <<key>>\n  project_name\n  project_status\n}\n\nrelationship CREATES_LOGO {\n creation_date\n}\nrelationship USES_TEMPLATE {\n}\nrelationship MANAGES_PROJECT {\n}\nrelationship COLLABORATES_ON {\n  collaborator_id <<multi>>\n  collaboration_date\n}\nrelationship HAS_LOGO {\n}\n\nCREATES_LOGO -1- User\nCREATES_LOGO -N- Logo\n\nUSES_TEMPLATE -1- Logo\nUSES_TEMPLATE -1- Template\n\nMANAGES_PROJECT -1- User\nMANAGES_PROJECT -N- Project\n\nHAS_LOGO -1- Project\nHAS_LOGO -N- Logo\n\nCOLLABORATES_ON -1- User\nCOLLABORATES_ON -N- Project\n\n@endchen"          
    },
    {
        "input": "Create a entity relationship diagram for an e-commerce named Daraz platform that allows users to browse products, add items to their cart, and make purchases online. The platform supports product categories, search filters, and product recommendations. Users can create accounts, view order histories, and track order shipments. The platform includes features for processing payments, managing inventory, and generating sales reports. Administrators can add new products, update product listings, and monitor user activity. The platform aims to provide a seamless and secure online shopping experience for users.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location{\n  address\n  city\n  zip code\n}\n  account_status\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  role\n}\n\nentity Product {\n  product_id <<key>>\n  name\n  category\n  price\n  quantity\n  status\n  added_by <<foreign>>\n  updated_by <<foreign>>\n}\n\nentity Order {\n  order_id <<key>>\n  user_id <<foreign>>\n  order_date\n  status\n  total_amount\n}\n\nentity Cart {\n  cart_id <<key>>\n  user_id <<foreign>>\n}\n\nentity Payment {\n  payment_id <<key>>\n  order_id <<foreign>>\n  payment_date\n  method\n  amount\n  status\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  product_id <<foreign>>\n  stock_quantity\n  stock_status\n}\n\nentity Report {\n  report_id <<key>>\n  admin_id <<foreign>>\n  report_date\n  report_type\n  content\n}\n\nrelationship ADDED_TO {\n}\nrelationship PLACES_ORDER {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship MANAGES_INVENTORY {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship CONSISTS_OF{\n}\nrelationship CONTAINS {\n}\n\nPLACES_ORDER -1- User\nPLACES_ORDER -N- Order\n\nCONTAINS -1- Order\nCONTAINS -N- Product\n\nADDED_TO -N- Product\nADDED_TO -N- Cart\n\nMAKES_PAYMENT -1- User\nMAKES_PAYMENT -N- Payment\n\nCONSISTS_OF -1- Inventory\nCONSISTS_OF -N- Product\n\nMANAGES_INVENTORY -1- Administrator\nMANAGES_INVENTORY -N- Inventory\n\nGENERATES_REPORT -1- Administrator\nGENERATES_REPORT -N- Report\n\n@endchen"            
    },
    {
        "input": "Create a entity relationship diagram for a bidding application that allows users to participate in online auctions, place bids on items, and win auctions. The application supports auction categories, bid notifications, and auction countdowns. Users can create accounts, view auction listings, and place bids on items. The application includes features for tracking bid histories, managing auction wins, and receiving auction alerts. Users can manage auction activities, view auction results, and receive payment instructions. The platform aims to provide an engaging and competitive bidding experience for users.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Auctioneer {\n  auctioneer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Item {\n  item_id <<key>>\n  item_name\n  item_category\n  item_description\n  item_status\n  auctioneer_id <<foreign>>\n}\n\nentity Bid {\n  bid_id <<key>>\n  user_id <<foreign>>\n  item_id <<foreign>>\n  bid_amount\n  bid_date\n  bid_status\n}\n\nentity Auction {\n  auction_id <<key>>\n  item_id <<foreign>>\n  auctioneer_id <<foreign>>\n  auction_start_date\n  auction_end_date\n  auction_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship PLACES_BID {\n}\nrelationship HOSTS_AUCTION {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship WINS_AUCTION {\n}\nrelationship LISTS_ITEM {\n}\nrelationship PARTICIPATES_IN {\n}\n\nPLACES_BID -1- User\nPLACES_BID -N- Bid\n\nHOSTS_AUCTION -1- Auctioneer\nHOSTS_AUCTION -N- Auction\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\nWINS_AUCTION -1- User\nWINS_AUCTION -N- Auction\n\nLISTS_ITEM -1- Auctioneer\nLISTS_ITEM -N- Item\n\nPARTICIPATES_IN -1- Item\nPARTICIPATES_IN -N- Bid\n\n@endchen"            
    },
    {
        "input": "Create a entity relationship diagram for a house-helper/maid finding application that helps users find and hire domestic helpers for household chores. The application allows users to search for helpers based on services, availability, and ratings. Users can view helper profiles, request services, and schedule appointments. The application includes features for managing bookings, tracking service histories, and providing feedback on helpers. Users can manage helper preferences, view service summaries, and receive notifications for service reminders. The platform aims to simplify the process of finding and hiring domestic helpers for users.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Helper {\n  helper_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  availability\n  rating\n  status\n}\n\nentity Service {\n  service_id <<key>>\n  user_id <<foreign>>\n  helper_id <<foreign>>\n  service_date\n  service_type\n  service_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  user_id <<foreign>>\n  helper_id <<foreign>>\n  booking_date\n  booking_status\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  user_id <<foreign>>\n  helper_id <<foreign>>\n  feedback_date\n  feedback_content\n  feedback_rating\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship REQUESTS_SERVICE {\n}\nrelationship PROVIDES_SERVICE {\n}\nrelationship BOOKS_HELPER {\n}\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nREQUESTS_SERVICE -1- User\nREQUESTS_SERVICE -N- Service\n\nPROVIDES_SERVICE -1- Helper\nPROVIDES_SERVICE -N- Service\n\nBOOKS_HELPER -1- User\nBOOKS_HELPER -N- Booking\n\nPROVIDES_FEEDBACK -1- User\nPROVIDES_FEEDBACK -N- Feedback\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"            
    },
    {
        "input": "I want a entity relationship diagram for a pharmaceutical supply chain management system that helps pharmaceutical companies manage the production, distribution, and sales of pharmaceutical products. The system allows companies to track inventory, manage orders, and monitor shipments. Companies can input production data, generate purchase orders, and track product deliveries. The system includes features for managing suppliers, tracking sales data, and generating reports on product performance. Administrators can oversee supply chain operations, allocate resources, and ensure product quality. The platform aims to streamline pharmaceutical supply chain processes and improve product distribution.",
        "output": "@startchen\n\nentity Company {\n  company_id <<key>>\n  company_name\n  company_location{\n    address\n    city\n    country\n    zip code\n  }\n  company_type\n  company_status\n}\n\nentity Product {\n  product_id <<key>>\n  product_name\n  product_category\n  product_price\n  product_quantity\n  product_status\n}\n\nentity Order {\n  order_id <<key>>\n  company_id <<foreign>>\n  order_date\n  order_status\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  product_id <<foreign>>\n  stock_quantity\n  stock_status <<derived>>\n}\n\nentity Supplier {\n  supplier_id <<key>>\n  supplier_name\n  supplier_location{\n    address\n    city\n    country\n    zip code\n  }\n  supplier_type\n  supplier_status\n}\n\nentity Report {\n  report_id <<key>>\n  company_id <<foreign>>\n  report_date\n  report_content <<multi>>\n  report_status\n}\n\nrelationship MANAGES_INVENTORY {\n}\nrelationship PLACES_ORDER {\n}\nrelationship CONTAINS_PRODUCT {\n}\nrelationship SUPPLIES_PRODUCT {\n}\nrelationship GENERATES_REPORT {\n}\n\nMANAGES_INVENTORY -1- Company\nMANAGES_INVENTORY -N- Inventory\n\nPLACES_ORDER -1- Company\nPLACES_ORDER -N- Order\n\nCONTAINS_PRODUCT -1- Order\nCONTAINS_PRODUCT -N- Product\n\nSUPPLIES_PRODUCT -1- Supplier\nSUPPLIES_PRODUCT -N- Product\n\nGENERATES_REPORT -1- Company\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "I want an entity relationship diagram for a learn how to code application that helps users learn programming languages, practice coding exercises, and build software projects. The application provides interactive coding tutorials, code editors, and project templates. Users can create accounts, view coding lessons, and complete coding challenges. The application includes features for tracking coding progress, managing code repositories, and sharing code snippets. Users can manage coding preferences, view project histories, and receive coding tips and suggestions. The platform aims to empower users to develop coding skills and build software projects.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n  coding_experience_level\n}\n\nentity Lesson {\n  lesson_id <<key>>\n  lesson_title\n  lesson_content\n  programming_language <<multi>>\n  lesson_type\n  lesson_difficulty\n  lesson_status\n}\n\nentity Challenge {\n  challenge_id <<key>>\n  user_id <<foreign>>\n  challenge_title\n  challenge_description\n  programming_language <<multi>>\n  challenge_difficulty\n  challenge_status\n}\n\nentity Project {\n  project_id <<key>>\n  user_id <<foreign>>\n  project_title\n  project_description\n  programming_language <<multi>>\n  project_status\n}\n\nentity Template {\n  template_id <<key>>\n  template_name\n  template_description\n  programming_language <<multi>>\n  template_status\n}\n\nrelationship TAKES_LESSON {\n progress_percentage\n}\nrelationship COMPLETES_CHALLENGE {\n completion_date\n}\nrelationship CREATES_PROJECT {\n creation_date\n}\nrelationship USES_TEMPLATE {\n}\n\nTAKES_LESSON -1- User\nTAKES_LESSON -N- Lesson\n\nCOMPLETES_CHALLENGE -1- User\nCOMPLETES_CHALLENGE -N- Challenge\n\nCREATES_PROJECT -1- User\nCREATES_PROJECT -N- Project\n\nUSES_TEMPLATE -1- Project\nUSES_TEMPLATE -N- Template\n\n@endchen"          
    },
    {
        "input": "I want an entity relationship diagram for a data visualization application that helps users create visual representations of data, analyze trends, and present insights. The application provides data import tools, chart templates, and customization options. Users can import data sets, create charts, and customize chart styles. The application includes features for saving visualizations, sharing data insights, and exporting charts in various formats. Users can manage data sources, view visualization histories, and receive data analysis suggestions. The platform aims to simplify the process of data visualization and enhance data-driven decision-making.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Data {\n  data_id <<key>>\n  user_id <<foreign>>\n  data_source\n  data_content <<multi>>\n  data_type <<derived>>\n  data_status\n}\n\nentity Chart {\n  chart_id <<key>>\n  user_id <<foreign>>\n  data_id <<foreign>>\n  chart_type\n  chart_style\n  chart_data <<multi>>\n  chart_status\n}\n\nentity Visualization {\n  visualization_id <<key>>\n  user_id <<foreign>>\n  visualization_title\n  visualization_description\n  visualization_type\n  visualization_status\n}\n\nentity Template {\n  template_id <<key>>\n  template_name\n  template_description\n  template_type\n  template_status\n}\n\nrelationship IMPORTS_DATA {\n  date_imported\n}\n\nrelationship CREATES_CHART {\n  creation_date\n}\n\nrelationship CONTAINS_CHART {\n}\n\nrelationship SAVES_VISUALIZATION {\n  saved_date\n}\n\nrelationship USES_TEMPLATE {\n}\n\nIMPORTS_DATA -1- User\nIMPORTS_DATA -N- Data\n\nCREATES_CHART -1- User\nCREATES_CHART -N- Chart\n\nCONTAINS_CHART -1- Visualization\nCONTAINS_CHART -N- Chart\n\nSAVES_VISUALIZATION -1- User\nSAVES_VISUALIZATION -N- Visualization\n\nUSES_TEMPLATE -1- Visualization\nUSES_TEMPLATE -1- Template\n\n@endchen"          
    },
    {
        "input": "I want an entity relationship diagram for a matchmaking application named 'Dil ka Rishta', that helps users find compatible partners, build relationships, and connect with like-minded individuals. The application provides user profiles, matching algorithms, and chat messaging features. Users can create profiles, view partner suggestions, and send messages to potential matches. The application includes features for tracking relationship statuses, managing connections, and receiving relationship advice. Users can manage privacy settings, view relationship histories, and receive notifications for new matches. The platform aims to facilitate meaningful connections and foster healthy relationships among users.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  gender\n  age\n  relationship_status\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  message_content\n  message_date\n  message_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship SENDS_MESSAGE {\n}\nrelationship ESTABLISHES_CONNECTION {\n  connection_date\n  connection_status\n  compatibility_score\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\nESTABLISHES_CONNECTION -1- User\nESTABLISHES_CONNECTION -N- User\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "I want an entity relationship diagram for a food delivery application named 'Kha Ley, Pe Ley, Jee Ley' that allows users to order food from restaurants, track deliveries, and provide feedback on food quality. The application supports restaurant listings, menu browsing, and order customization. Users can create accounts, browse menus, and place orders for delivery. The application includes features for tracking order statuses, managing delivery addresses, and rating food items. Users can manage payment methods, view order histories, and receive notifications for order updates. The platform aims to provide a convenient and reliable food delivery service for users.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location{\n    address\n    city\n    country\n    zip code\n  }\n  account_status\n}\n\nentity Restaurant {\n  restaurant_id <<key>>\n  name\n  password\n  location\n  cuisine_type\n  status\n}\n\nentity Rider {\n  rider_id <<key>>\n  name\n  phone\n  password\n  vehicle_details\n  location\n  availability_status\n}\n\nentity Order {\n  order_id <<key>>\n  user_id <<foreign>>\n  restaurant_id <<foreign>>\n  rider_id <<foreign>>\n  order_date\n  order_status\n  total_amount\n}\n\nentity Menu {\n  menu_id <<key>>\n  restaurant_id <<foreign>>\n  menu_item\n  menu_price\n  menu_category\n  menu_status\n}\n\nentity Rating {\n  rating_id <<key>>\n  restaurant_id <<foreign>>\n  rating_content\n  rating_score\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship PLACES_ORDER {\n}\nrelationship DELIVERS_ORDER {\n delivery_date\n delivery_status\n}\nrelationship DISPLAYS_MENU {\n}\nrelationship RATES_RESTAURANT {\n rating_date\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship ASSIGNS_ORDER {\n assign_date\n}\n\nPLACES_ORDER -1- User\nPLACES_ORDER -N- Order\n\nASSIGNS_ORDER -1- Restaurant\nASSIGNS_ORDER -N- Rider\n\nDELIVERS_ORDER -1- Rider\nDELIVERS_ORDER -N- Order\n\nDISPLAYS_MENU -1- Restaurant\nDISPLAYS_MENU -N- Menu\n\nRATES_RESTAURANT -1- User\nRATES_RESTAURANT -N- Rating\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "I want an entity relationship diagram for a web vulnerability scanner that helps hackers identify security vulnerabilities in web applications and websites. The scanner uses automated tools, manual testing, and security checks to detect common vulnerabilities such as SQL injection, cross-site scripting, and insecure configurations. Hackers can input target URLs, run scans, and analyze scan results for potential vulnerabilities. The scanner includes features for generating vulnerability reports, exploiting security flaws, and providing recommendations for remediation. Hackers can manage scan settings, view scan histories, and receive alerts for critical vulnerabilities. The platform aims to assist hackers in identifying and exploiting security weaknesses in web applications.",
        "output": "@startchen\n\nentity Hacker {\n  hacker_id <<key>>\n  name\n  email\n  password\n  location\n  hacking_experience\n  hacking_status\n}\n\nentity Scan {\n  scan_id <<key>>\n  hacker_id <<foreign>>\n  target_url\n  scan_date\n  scan_status\n}\n\nentity Vulnerability {\n  vulnerability_id <<key>>\n  scan_id <<foreign>>\n  vulnerability_type\n  vulnerability_description\n  vulnerability_status\n}\n\nentity Report {\n  report_id <<key>>\n  hacker_id <<foreign>>\n  report_date\n  report_content <<multi>>\n  report_status\n}\n\nrelationship RUNS_SCAN {\n}\nrelationship IDENTIFIES_VULNERABILITY {\n}\nrelationship GENERATES_REPORT {\n}\n\nRUNS_SCAN -1- Hacker\nRUNS_SCAN -N- Scan\n\nIDENTIFIES_VULNERABILITY -1- Scan\nIDENTIFIES_VULNERABILITY -N- Vulnerability\n\nGENERATES_REPORT -1- Hacker\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "I want an ERD for a student management system that helps students enroll in courses, view course materials, and submit assignments. The system allows instructors to create courses, upload course materials, and grade assignments. Students can search for courses, enroll in courses, and access course materials online. The system includes features for tracking student progress, managing course schedules, and generating course reports. Instructors can monitor student performance, provide feedback on assignments, and communicate with students. The platform aims to facilitate online learning and improve course management processes.",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  status\n}\n\nentity Instructor {\n  instructor_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  status\n}\n\nentity Department {\n  department_id <<key>>\n  department_name\n  hod\n  number_of_students\n  number_of_instructors\n}\n\nentity Course {\n  course_id <<key>>\n  course_name\n  course_description\n  course_status\n  credits\n  instructor_id <<foreign>>\n  department_id <<foreign>>\n}\n\nentity Enrollment {\n  enrollment_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  enrollment_date\n  enrollment_status\n  grade\n}\n\nentity Assignment {\n  assignment_id <<key>>\n  course_id <<foreign>>\n  student_id <<foreign>>\n  assignment_title\n  assignment_description\n  assignment_grade\n}\n\nentity Grade {\n  grade_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  grade_value\n  grade_date\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  student_id <<foreign>>\n  instructor_id <<foreign>>\n  feedback_content\n  feedback_date\n}\n\nentity CourseSchedule {\n  schedule_id <<key>>\n  course_id <<foreign>>\n  schedule_date\n  schedule_time\n  schedule_topic\n}\n\nentity CourseMaterial {\n  material_id <<key>>\n  course_id <<foreign>>\n  material_title\n  material_type\n  material_link\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  message_content\n  message_date\n  message_status\n}\n\nrelationship HAS_STUDENT {\n}\nrelationship HAS_INSTRUCTOR {\n}\nrelationship OFFERS_COURSE {\n}\nrelationship ENROLLS_IN {\n}\nrelationship SUBMITS_ASSIGNMENT {\n}\nrelationship GIVES_GRADE {\n}\nrelationship HAS_GRADE {\n}\nrelationship RECEIVES_FEEDBACK {\n}\nrelationship SCHEDULES_CLASS {\n}\nrelationship PROVIDES_MATERIAL {\n}\nrelationship SENDS_MESSAGE {\n}\nrelationship TEACHES {\n}\nrelationship HAS_ENROLLMENT {\n}\n\nHAS_STUDENT -1- Department\nHAS_STUDENT -N- Student\n\nHAS_INSTRUCTOR -1- Department\nHAS_INSTRUCTOR -N- Instructor\n\nOFFERS_COURSE -1- Department\nOFFERS_COURSE -N- Course\n\nENROLLS_IN -1- Student\nENROLLS_IN -N- Enrollment\n\nSUBMITS_ASSIGNMENT -1- Student\nSUBMITS_ASSIGNMENT -N- Assignment\n\nGIVES_GRADE -1- Instructor\nGIVES_GRADE -N- Assignment\n\nHAS_GRADE -1- Student\nHAS_GRADE -N- Grade\n\nRECEIVES_FEEDBACK -1- Instructor\nRECEIVES_FEEDBACK -N- Feedback\n\nSCHEDULES_CLASS -1- Course\nSCHEDULES_CLASS -N- CourseSchedule\n\nPROVIDES_MATERIAL -1- Course\nPROVIDES_MATERIAL -N- CourseMaterial\n\nSENDS_MESSAGE -1- Instructor\nSENDS_MESSAGE -N- Message\n\nHAS_ENROLLMENT -1- Course\nHAS_ENROLLMENT -N- Enrollment\n\nTEACHES -1- Instructor\nTEACHES -N- Course\n\n@endchen"          
    },
    {
        "input": "I want an ERD for a video streaming application that allows users to watch videos, create playlists, and share content with friends. The application supports video categories, search filters, and video recommendations. Users can create accounts, watch videos, and like or dislike videos. The application includes features for creating playlists, sharing videos on social media, and commenting on videos. Users can manage video preferences, view video histories, and receive notifications for new content. The platform aims to provide an engaging and personalized video streaming experience for users.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Video {\n  video_id <<key>>\n  video_title\n  video_url\n  category_id <<foreign>>\n  video_duration\n  video_status\n}\n\nentity VideoCategory {\n  category_id <<key>>\n  category_name\n  category_description\n}\n\nentity Playlist {\n  playlist_id <<key>>\n  user_id <<foreign>>\n  playlist_name\n  playlist_description\n  playlist_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship WATCHES_VIDEO {\n  watch_date\n  watch_duration\n}\nrelationship CREATES_PLAYLIST {\n  create_date\n}\nrelationship CONTAINS_VIDEO {\n}\nrelationship HAS_VIDEO {\n}\nrelationship LIKES_VIDEO {\n like_date\n}\nrelationship COMMENTS_ON {\n  comment_content\n  comment_date\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nWATCHES_VIDEO -1- User\nWATCHES_VIDEO -N- Video\n\nCREATES_PLAYLIST -1- User\nCREATES_PLAYLIST -N- Playlist\n\nCONTAINS_VIDEO -1- Playlist\nCONTAINS_VIDEO -N- Video\n\nLIKES_VIDEO -1- User\nLIKES_VIDEO -N- Video\n\nCOMMENTS_ON -1- User\nCOMMENTS_ON -N- Video\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\nHAS_VIDEO -1- VideoCategory\nHAS_VIDEO -N- Video\n\n@endchen"          
    },
    {
        "input": "I want an ERD for a zoo management system that helps zookeepers manage animals, exhibits, and visitor information. The system allows zookeepers to input animal data, track feeding schedules, and monitor animal health. Visitors can view exhibit information, purchase tickets, and attend animal shows. The system includes features for managing exhibit maintenance, tracking visitor attendance, and generating reports on animal populations. Administrators can oversee zoo operations, allocate resources, and ensure visitor safety. The platform aims to streamline zoo management processes and enhance visitor experiences.",
        "output": "@startchen\n\nentity Zookeeper {\n  zookeeper_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  zookeeper_status\n}\n\nentity Animal {\n  animal_id <<key>>\n  animal_name\n  animal_species\n  animal_dob\n  animal_health_status\n  animal_status\n  exhibit_id <<foreign>>\n}\n\nentity Exhibit {\n  exhibit_id <<key>>\n  exhibit_name\n  exhibit_description\n  exhibit_status\n}\n\nentity Visitor {\n  visitor_id <<key>>\n  name\n  email\n  phone\n  location\n  visitor_status\n}\n\nentity Ticket {\n  ticket_id <<key>>\n  visitor_id <<foreign>>\n  ticket_date\n  ticket_price\n  ticket_status\n}\n\nentity Show {\n  show_id <<key>>\n  show_name\n  show_time\n  show_location\n  show_status\n}\n\nentity Report {\n  report_id <<key>>\n  zookeeper_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship MANAGES_ANIMAL {\n}\nrelationship MAINTAINS_EXHIBIT {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship PURCHASES_TICKET {\n}\nrelationship ATTENDS_SHOW {\n attendance_date\n}\nrelationship GENERATES_REPORT {\n}\nrelationship FEATURES_ANIMAL {\n}\n\nMANAGES_ANIMAL -1- Zookeeper\nMANAGES_ANIMAL -N- Animal\n\nMAINTAINS_EXHIBIT -1- Zookeeper\nMAINTAINS_EXHIBIT -N- Exhibit\n\nPURCHASES_TICKET -1- Visitor\nPURCHASES_TICKET -N- Ticket\n\nATTENDS_SHOW -1- Visitor\nATTENDS_SHOW -N- Show\n\nGENERATES_REPORT -1- Zookeeper\nGENERATES_REPORT -N- Report\n\nFEATURES_ANIMAL -1- Show\nFEATURES_ANIMAL -N- Animal\n\nASSOCIATED_WITH -1- Exhibit\nASSOCIATED_WITH -N- Ticket\n\n@endchen"          
    },
    {
        "input": "I want an ERD for a welcome party planner application that helps event organizers plan and manage welcome parties for new employees. The application allows organizers to create party schedules, invite guests, and coordinate party activities. New employees can view party details, RSVP to events, and participate in party games. The application includes features for managing party budgets, tracking guest attendance, and providing event feedback. Organizers can manage party themes, view party histories, and receive notifications for party updates. The platform aims to create a welcoming and engaging experience for new employees.",
        "output": "@startchen\n\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  organizer_status\n}\n\nentity Employee {\n  employee_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  employee_status\n}\n\nentity Party {\n  party_id <<key>>\n  organizer_id <<foreign>>\n  party_date\n  party_location\n  party_theme\n  party_status\n}\n\nentity Activity {\n  activity_id <<key>>\n  party_id <<foreign>>\n  activity_name\n  activity_description\n  activity_status\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  employee_id <<foreign>>\n  party_id <<foreign>>\n  feedback_content\n  feedback_date\n}\n\nentity Notification {\n  notification_id <<key>>\n  organizer_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship PLANS_PARTY {\n}\nrelationship ATTENDS_PARTY {\n rsvp_status\n}\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship HAS_ACTIVITY {\n}\n\nPLANS_PARTY -1- Organizer\nPLANS_PARTY -N- Party\n\nATTENDS_PARTY -1- Employee\nATTENDS_PARTY -N- Party\n\nHAS_ACTIVITY -1- Party\nHAS_ACTIVITY -N- Activity\n\nPROVIDES_FEEDBACK -1- Employee\nPROVIDES_FEEDBACK -N- Feedback\n\nRECEIVES_NOTIFICATION -1- Organizer\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "I want an ERD for a trip planner application that helps users plan and organize trips, create itineraries, and share travel experiences. The application allows users to search for destinations, book accommodations, and arrange transportation. Users can create trip plans, view trip details, and add activities to their itineraries. The application includes features for managing trip budgets, tracking travel expenses, and sharing trip photos. Users can manage travel preferences, view trip histories, and receive notifications for trip updates. The platform aims to simplify the trip planning process and enhance travel experiences for users.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Destination {\n  destination_id <<key>>\n  destination_name\n  destination_location\n  destination_description\n  destination_status\n}\n\nentity Trip {\n  trip_id <<key>>\n  user_id <<foreign>>\n  destination_id <<foreign>>\n  trip_date\n  trip_duration\n  trip_status\n}\n\nentity Itinerary {\n  itinerary_id <<key>>\n  trip_id <<foreign>>\n  itinerary_date\n  itinerary_activity\n  itinerary_status\n}\n\nentity Expense {\n  expense_id <<key>>\n  user_id <<foreign>>\n  trip_id <<foreign>>\n  expense_date\n  expense_amount\n  expense_category\n  expense_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship PLANS_TRIP {\n}\nrelationship CREATES_ITINERARY {\n}\nrelationship ADDS_ACTIVITY {\n}\nrelationship TRACKS_EXPENSE {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nPLANS_TRIP -1- User\nPLANS_TRIP -N- Trip\n\nCREATES_ITINERARY -1- Trip\nCREATES_ITINERARY -N- Itinerary\n\nADDS_ACTIVITY -1- Itinerary\nADDS_ACTIVITY -N- Destination\n\nTRACKS_EXPENSE -1- User\nTRACKS_EXPENSE -N- Expense\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "I want an ERD for a cafe management system that helps cafe owners manage orders, track inventory, and analyze sales data. The system allows cafe owners to input menu items, process orders, and manage customer payments. Customers can view menu options, place orders, and pay for purchases. The system includes features for tracking inventory levels, managing supplier relationships, and generating reports on sales performance. Administrators can oversee cafe operations, allocate resources, and ensure customer satisfaction. The platform aims to streamline cafe management processes and improve customer service.",
        "output": "@startchen\n\nentity Owner {\n  owner_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  owner_status\n}\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  customer_status\n}\n\nentity MenuItem {\n  menu_item_id <<key>>\n  menu_price\n  menu_category\n  menu_status\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  order_status\n  total_amount\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  menu_item_id <<foreign>>\n  stock_quantity\n  stock_status\n}\n\nentity Supplier {\n  supplier_id <<key>>\n  supplier_name\n  supplier_location\n  supplier_status\n}\n\nentity Report {\n  report_id <<key>>\n  owner_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship HAS_ITEM {\n}\nrelationship TRACKS_INVENTORY {\n}\nrelationship SUPPLIES {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship PLACES_ORDER {\n}\nrelationship CONTAINS_MENU_ITEM {\n   quantity\n}\n\nHAS_ITEM -1- Inventory\nHAS_ITEM -N- MenuItem\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nCONTAINS_MENU_ITEM -1- Order\nCONTAINS_MENU_ITEM -N- MenuItem\n\nTRACKS_INVENTORY -1- Owner\nTRACKS_INVENTORY -N- Inventory\n\nSUPPLIES -1- Supplier\nSUPPLIES -N- MenuItem\n\nGENERATES_REPORT -1- Owner\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "I want an ERD for a crime management system that helps law enforcement agencies manage criminal cases, track suspects, and analyze crime data. The system allows investigators to input case details, gather evidence, and identify suspects. Officers can search for criminal records, issue warrants, and make arrests. The system includes features for tracking case progress, managing evidence storage, and generating reports on crime trends. Administrators can oversee law enforcement operations, allocate resources, and ensure public safety. The platform aims to streamline crime management processes and improve crime prevention efforts.",
        "output": "@startchen\n\nentity Investigator {\n  investigator_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  investigator_status\n}\n\nentity Officer {\n  officer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  officer_status\n}\n\nentity Suspect {\n  suspect_id <<key>> \n  name\n  age\n  gender\n  location\n  suspect_status\n}\n\nentity Case {\n  case_id <<key>>\n  investigator_id <<foreign>>\n  case_date\n  case_status\n  case_description\n}\n\nentity Evidence {\n  evidence_id <<key>>\n  case_id <<foreign>>\n  evidence_type\n  evidence_details\n  evidence_status\n}\n\nentity Report {\n  report_id <<key>>\n  investigator_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Warrant {\n  warrant_id <<key>>\n  officer_id <<foreign>>\n  suspect_id <<foreign>>\n  issue_date\n  warrant_status\n}\n\nrelationship MANAGES_CASE {\n}\nrelationship TRACKS_SUSPECT {\n}\nrelationship ISSUES_WARRANT {\n}\nrelationship GATHERS_EVIDENCE {\n}\nrelationship GENERATES_REPORT {\n}\n\nMANAGES_CASE -1- Investigator\nMANAGES_CASE -N- Case\n\nTRACKS_SUSPECT -1- Case\nTRACKS_SUSPECT -N- Suspect\n\nISSUES_WARRANT -1- Officer\nISSUES_WARRANT -N- Warrant\n\nGATHERS_EVIDENCE -1- Investigator\nGATHERS_EVIDENCE -N- Evidence\n\nGENERATES_REPORT -1- Investigator\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Give me an ERD for a country's intelligence agency that helps intelligence officers manage national security threats, track suspects, and analyze intelligence data. The system allows officers to input threat details, gather intelligence, and identify suspects. Officers can search for criminal records, issue warrants, and make arrests. The system includes features for tracking threat levels, managing intelligence storage, and generating reports on security trends. Administrators can oversee intelligence operations, allocate resources, and ensure national security. The platform aims to streamline intelligence management processes and improve security efforts.",
        "output": "@startchen\n\nentity Officer {\n  officer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  officer_status\n}\n\nentity Suspect {\n  suspect_id <<key>> \n  name\n  age\n  gender\n  location\n  suspect_status\n}\n\nentity Threat {\n  threat_id <<key>>\n  officer_id <<foreign>>\n  threat_date\n  threat_status\n  threat_description\n}\n\nentity Intelligence {\n  intelligence_id <<key>>\n  threat_id <<foreign>>\n  intelligence_type\n  intelligence_details\n  intelligence_status\n}\n\nentity Report {\n  report_id <<key>>\n  officer_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Warrant {\n  warrant_id <<key>>\n  officer_id <<foreign>>\n  suspect_id <<foreign>>\n  issue_date\n  warrant_status\n}\n\nrelationship MANAGES_THREAT {\n}\nrelationship TRACKS_SUSPECT {\n}\nrelationship ISSUES_WARRANT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RELATES_TO {\n}\n\nMANAGES_THREAT -1- Officer\nMANAGES_THREAT -N- Threat\n\nTRACKS_SUSPECT -1- Threat\nTRACKS_SUSPECT -N- Suspect\n\nRELATES_TO -1- Threat\nRELATES_TO -N- Intelligence\n\nISSUES_WARRANT -1- Officer\nISSUES_WARRANT -N- Warrant\n\nGENERATES_REPORT -1- Officer\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Give me an ERD for a protest management system that helps protest organizers manage demonstrations, track participants, and analyze protest data. The system allows organizers to input protest details, gather information, and identify participants. Officers can monitor protest activities, issue permits, and ensure public safety. The system includes features for tracking protest progress, managing protest locations, and generating reports on protest trends. Administrators can oversee protest operations, allocate resources, and ensure peaceful demonstrations. The platform aims to streamline protest management processes and improve protest coordination efforts.",
        "output": "@startchen\n\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  organizer_status\n}\n\nentity Officer {\n  officer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  officer_status\n}\n\nentity Participant {\n  participant_id <<key>>\n  name\n  age\n  gender\n  location\n  participant_status\n}\n\nentity Protest {\n  protest_id <<key>>\n  organizer_id <<foreign>>\n  protest_date\n  protest_location\n  protest_status\n  protest_description\n}\n\nentity Report {\n  report_id <<key>>\n  organizer_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Permit {\n  permit_id <<key>>\n  officer_id <<foreign>>\n  protest_id <<foreign>>\n  issue_date\n  permit_status\n}\n\nrelationship MANAGES_PROTEST {\n}\nrelationship TRACKS_PARTICIPANT {\n}\nrelationship ISSUES_PERMIT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RELATES_TO {\n}\n\nMANAGES_PROTEST -1- Organizer\nMANAGES_PROTEST -N- Protest\n\nTRACKS_PARTICIPANT -1- Protest\nTRACKS_PARTICIPANT -N- Participant\n\nISSUES_PERMIT -1- Officer\nISSUES_PERMIT -N- Permit\n\nRELATES_TO -1- Protest\nRELATES_TO -N- Permit\n\nGENERATES_REPORT -1- Organizer\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Give me an ERD for a boycott management system that helps activists organize boycotts, track supporters, and analyze boycott data. The system allows activists to input boycott details, gather information, and identify supporters. Officers can monitor boycott activities, issue statements, and ensure public safety. The system includes features for tracking boycott progress, managing boycott locations, and generating reports on boycott trends. Administrators can oversee boycott operations, allocate resources, and ensure peaceful demonstrations. The platform aims to streamline boycott management processes and improve boycott coordination efforts.",
        "output": "@startchen\n\nentity Activist {\n  activist_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  activist_status\n}\n\nentity Officer {\n  officer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  officer_status\n}\n\nentity Supporter {\n  supporter_id <<key>>\n  name\n  age\n  gender\n  location\n  supporter_status\n}\n\nentity Boycott {\n  boycott_id <<key>>\n  activist_id <<foreign>>\n  boycott_date\n  boycott_location\n  boycott_status\n  boycott_description\n}\n\nentity Report {\n  report_id <<key>>\n  activist_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Statement {\n  statement_id <<key>>\n  officer_id <<foreign>>\n  boycott_id <<foreign>>\n  issue_date\n  statement_status\n  statement_content\n  statement_type\n  related_incidents\n}\n\nrelationship ORGANIZES_BOYCOTT {\n}\nrelationship TRACKS_SUPPORTER {\n}\nrelationship ISSUES_STATEMENT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RELATES_TO {\n}\n\nORGANIZES_BOYCOTT -1- Activist\nORGANIZES_BOYCOTT -N- Boycott\n\nTRACKS_SUPPORTER -1- Boycott\nTRACKS_SUPPORTER -N- Supporter\n\nRELATES_TO -1- Boycott\nRELATES_TO -N- Statement\n\nISSUES_STATEMENT -1- Officer\nISSUES_STATEMENT -N- Statement\n\nGENERATES_REPORT -1- Activist\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Give me an ERD for a disaster management system that helps emergency responders manage disasters, track victims, and analyze disaster data. The system allows responders to input disaster details, gather information, and identify victims. Officers can monitor disaster activities, issue alerts, and ensure public safety. The system includes features for tracking disaster progress, managing disaster locations, and generating reports on disaster trends. Administrators can oversee disaster operations, allocate resources, and ensure timely responses. The platform aims to streamline disaster management processes and improve disaster response efforts.",
        "output": "@startchen\n\nentity Responder {\n  responder_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  responder_status\n}\n\nentity Officer {\n  officer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  officer_status\n}\n\nentity Victim {\n  victim_id <<key>>\n name\n  age\n  gender\n  location\n  victim_status\n}\n\nentity Disaster {\n  disaster_id <<key>>\n  responder_id <<foreign>>\n  disaster_date\n  disaster_location\n  disaster_status\n  disaster_description\n}\n\nentity Report {\n  report_id <<key>>\n  responder_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Alert {\n  alert_id <<key>>\n  officer_id <<foreign>>\n  disaster_id <<foreign>>\n  issue_date\n  alert_status\n  alert_content\n  alert_type\n  related_incidents\n}\n\nrelationship MANAGES_DISASTER {\n}\nrelationship TRACKS_VICTIM {\n}\nrelationship ISSUES_ALERT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RELATES_TO {\n}\n\nMANAGES_DISASTER -1- Responder\nMANAGES_DISASTER -N- Disaster\n\nTRACKS_VICTIM -1- Disaster\nTRACKS_VICTIM -N- Victim\n\nRELATES_TO -1- Disaster\nRELATES_TO -N- Alert\n\nISSUES_ALERT -1- Officer\nISSUES_ALERT -N- Alert\n\nGENERATES_REPORT -1- Responder\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Give me an ERD for a disaster recovery system that helps organizations recover from disasters, restore operations, and minimize downtime. The system allows organizations to input disaster recovery plans, activate recovery procedures, and restore critical systems. IT staff can monitor recovery progress, test backup systems, and ensure data integrity. The system includes features for tracking recovery timelines, managing recovery resources, and generating reports on recovery performance. Administrators can oversee recovery operations, allocate resources, and ensure business continuity. The platform aims to streamline disaster recovery processes and improve organizational resilience.",
        "output": "@startchen\n\nentity Organization {\n  organization_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  organization_status\n}\n\nentity ITStaff {\n  itstaff_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  itstaff_status\n}\n\nentity RecoveryPlan {\n  recoveryplan_id <<key>>\n  organization_id <<foreign>>\n  recoveryplan_description <<multi>>\n  recoveryplan_date\n  recoveryplan_status\n}\n\nentity Report {\n  report_id <<key>>\n  itstaff_id <<foreign>>\n  recoveryplan_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Backup {\n  backup_id <<key>>\n  recoveryplan_id <<foreign>>\n  backup_date\n  backup_status\n  backup_type\n  backup_details <<multi>>\n}\n\nentity DisasterEvent {\n  disaster_event_id <<key>>\n  organization_id <<foreign>>\n  event_date\n  event_type\n  event_description\n  event_status\n}\n\nrelationship HAS_PLAN {\n}\nrelationship MONITORS_RECOVERY {\n progress_percentage\n}\nrelationship CREATES_BACKUP {\n}\nrelationship TRACKS_EVENT {\n}\nrelationship GENERATES_REPORT {\n}\n\nHAS_PLAN -1- Organization\nHAS_PLAN -N- RecoveryPlan\n\nMONITORS_RECOVERY -1- ITStaff\nMONITORS_RECOVERY -N- RecoveryPlan\n\nCREATES_BACKUP -1- RecoveryPlan\nCREATES_BACKUP -N- Backup\n\nTRACKS_EVENT -1- Organization\nTRACKS_EVENT -N- DisasterEvent\n\nGENERATES_REPORT -1- ITStaff\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Give me an ERD for a calculator application that helps users perform basic arithmetic operations such as addition, subtraction, multiplication, and division. The application provides a user-friendly interface with buttons for numbers and operators. Users can input numerical values, select operators, and view calculation results. The application includes features for clearing input, performing multiple operations, and saving calculation history. Users can customize calculator settings, view calculation logs, and receive notifications for calculation errors. The platform aims to provide a convenient and efficient calculator tool for users.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Calculation {\n  calculation_id <<key>>\n  user_id <<foreign>>\n  calculation_date\n  calculation_type\n  calculation_input\n  calculation_result\n  calculation_status\n}\n\nentity Log {\n  log_id <<key>>\n  user_id <<foreign>>\n  log_date\n  log_content\n  log_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship PERFORMS_CALCULATION {\n}\nrelationship SAVES_LOG {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nPERFORMS_CALCULATION -1- User\nPERFORMS_CALCULATION -N- Calculation\n\nSAVES_LOG -1- User\nSAVES_LOG -N- Log\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "Give me an ERD for a code repository platform that helps developers manage source code, collaborate on projects, and track code changes. The platform provides version control tools, code review features, and project management capabilities. Developers can create repositories, commit code changes, and merge code branches. The platform includes features for tracking code histories, managing project issues, and automating code testing. Developers can manage code access permissions, view project wikis, and receive notifications for code updates. The platform aims to streamline code collaboration and improve software development processes.",
        "output": "@startchen\n\nentity Developer {\n  developer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  developer_status\n}\n\nentity Repository {\n  repository_id <<key>>\n  repository_name\n  repository_description\n  repository_status\n  repository_type\n  programming_language <<multi>>\n  owner_id <<foreign>>\n}\n\nentity Commit {\n  commit_id <<key>>\n  repository_id <<foreign>>\n  developer_id <<foreign>>\n  commit_changes <<multi>>\n  commit_lines\n  commit_date\n  commit_message\n  commit_status\n}\n\nentity Issue {\n  issue_id <<key>>\n  repository_id <<foreign>>\n  developer_id <<foreign>>\n  issue_open_date\n  issue_close_date\n  issue_description <<multi>>\n  issue_status <<derived>>\n  issue_type\n}\n\nentity Notification {\n  notification_id <<key>>\n  developer_id <<foreign>>\n  repository_id <<foreign>>\n  notification_date\n  notification_content <<ulti>>\n  notification_status\n}\n\nrelationship COLLABORATES_ON {\n  access_level\n  role\n  join_date\n}\nrelationship HAS_OWNERSHIP {\n}\nrelationship COMMITS_CODE {\n}\nrelationship CREATES_ISSUE {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship BELONGS_TO {\n}\n\nCOLLABORATES_ON -N- Developer\nCOLLABORATES_ON -N- Repository\n\nHAS_OWNERSHIP -N- Developer\nHAS_OWNERSHIP -N- Repository\n\nCOMMITS_CODE -1- Developer\nCOMMITS_CODE -N- Commit\n\nCREATES_ISSUE -1- Developer\nCREATES_ISSUE -N- Issue\n\nBELONGS_TO -N- Commit\nBELONGS_TO -1- Repository\n\nBELONGS_TO -N- Issue\nBELONGS_TO -1- Repository\n\nRECEIVES_NOTIFICATION -1- Developer\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "Give me an ERD for a meeting scheduler application that helps users schedule meetings, invite participants, and manage meeting details. The application provides calendar integration, availability checks, and reminder notifications. Users can create meeting requests, send invitations, and set meeting agendas. The application includes features for tracking meeting schedules, managing participant responses, and generating meeting reports. Users can customize meeting settings, view meeting histories, and receive notifications for upcoming meetings. The platform aims to streamline meeting scheduling processes and improve communication among participants.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Meeting {\n  meeting_id <<key>>\n  organizer_id <<foreign>>\n  meeting_title\n  meeting_date\n  meeting_time\n  meeting_duration\n  meeting_location\n  meeting_status\n  meeting_agenda <<multi>>\n}\n\nentity Calendar {\n  calendar_id <<key>>\n  user_id <<foreign>>\n  calendar_name\n  calendar_description\n}\n\nentity MeetingRequest {\n  request_id <<key>>\n  organizer_id <<foreign>>\n  request_date\n  request_status\n  proposed_date <<multi>>\n  proposed_time <<multi>>\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  meeting_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n  notification_status\n}\n\nentity MeetingReport {\n  report_id <<key>>\n  meeting_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship CREATES_MEETING {\n}\nrelationship ATTENDS_MEETING {\n join_time\n response_status\n}\nrelationship INTEGRATES_CALENDAR {\n}\nrelationship GENERATES_MEETING_REQUEST {\n}\nrelationship SENDS_NOTIFICATION {\n}\nrelationship GENERATES_REPORT {\n}\n\nCREATES_MEETING -1- User\nCREATES_MEETING -N- Meeting\n\nATTENDS_MEETING -N- User\nATTENDS_MEETING -1- Meeting\n\nINTEGRATES_CALENDAR -N- Meeting\nINTEGRATES_CALENDAR -1- Calendar\n\nGENERATES_MEETING_REQUEST -1- User\nGENERATES_MEETING_REQUEST -N- MeetingRequest\n\nSENDS_NOTIFICATION -1- MeetingRequest\nSENDS_NOTIFICATION -1- Notification\n\nGENERATES_REPORT -1- Meeting\nGENERATES_REPORT -N- MeetingReport\n\n@endchen"          
    },
    {
        "input": "I need an ERD for a webinar platform that helps users host webinars, engage with attendees, and analyze webinar data. The platform provides webinar creation tools, interactive features, and audience engagement options. Hosts can schedule webinars, invite participants, and present webinar content. The platform includes features for tracking attendee interactions, managing webinar recordings, and generating analytics reports. Hosts can customize webinar settings, view webinar histories, and receive notifications for upcoming webinars. The platform aims to facilitate online events and enhance audience engagement.",
        "output": "@startchen\n\nentity Host {\n  host_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  host_status\n}\n\nentity Attendee {\n  attendee_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  attendee_status\n}\n\nentity Webinar {\n  webinar_id <<key>>\n  host_id <<foreign>>\n  webinar_title\n  webinar_date\n  webinar_time\n  webinar_duration\n  webinar_status\n  webinar_topic\n  webinar_content <<multi>>\n}\n\nentity Engagement {\n  engagement_id <<key>>\n  attendee_id <<foreign>>\n  webinar_id <<foreign>>\n  engagement_date\n  engagement_type\n  engagement_content\n  engagement_status\n}\n\nentity Report {\n  report_id <<key>>\n  host_id <<foreign>>\n  webinar_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  webinar_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship HOSTS_WEBINAR {\n}\nrelationship ATTENDS_WEBINAR {\n join_time\n response_status\n}\nrelationship HAS_ENGAGEMENT {\n engagement_role\n engagement_duration\n}\nrelationship PARTICIPATES_IN {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship GENERATES_REPORT {\n}\n\nHOSTS_WEBINAR -1- Host\nHOSTS_WEBINAR -N- Webinar\n\nATTENDS_WEBINAR -N- Attendee\nATTENDS_WEBINAR -1- Webinar\n\nPARTICIPATES_IN -1- Attendee\nPARTICIPATES_IN -N- Engagement\n\nHAS_ENGAGEMENT -1- Webinar\nHAS_ENGAGEMENT -N- Engagement\n\nRECEIVES_NOTIFICATION -1- Attendee\nRECEIVES_NOTIFICATION -N- Notification\n\nGENERATES_REPORT -1- Host\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "I need an ERD for a video conferencing application named 'Zoom' that helps users host virtual meetings, collaborate with team members, and communicate with clients. The application provides video and audio conferencing tools, screen sharing features, and chat messaging options. Users can schedule meetings, invite participants, and join virtual rooms. The application includes features for recording meetings, managing meeting settings, and generating meeting reports. Users can customize meeting backgrounds, view meeting histories, and receive notifications for upcoming meetings. The platform aims to facilitate remote communication and improve virtual collaboration.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Meeting {\n  meeting_id <<key>>\n  host_id <<foreign>>\n  meeting_title\n  meeting_date\n  meeting_time\n  meeting_duration\n  meeting_status\n  meeting_topic\n  meeting_content <<multi>>\n}\n\nentity Participant {\n  participant_id <<key>>\n  name\n  email\n  phone\n  location\n  participant_status\n}\n\nentity Recording {\n  recording_id <<key>>\n  meeting_id <<foreign>>\n  recording_date\n  recording_duration\n  recording_status\n  recording_content\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  meeting_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nentity Report {\n  report_id <<key>>\n  user_id <<foreign>>\n  meeting_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship HOSTS_MEETING {\n}\nrelationship ATTENDS_MEETING {\n join_time\n response_status\n}\nrelationship RECORDS_MEETING {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship GENERATES_REPORT {\n}\n\nHOSTS_MEETING -1- User\nHOSTS_MEETING -N- Meeting\n\nATTENDS_MEETING -N- Participant\nATTENDS_MEETING -1- Meeting\n\nRECORDS_MEETING -1- Meeting\nRECORDS_MEETING -N- Recording\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\nGENERATES_REPORT -1- User\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Give me an ERD for a team collaboration platform named 'Slack' that helps users communicate, share files, and collaborate on projects. The platform provides messaging channels, file sharing options, and project management tools. Users can create channels, send messages, and share documents with team members. The platform includes features for tracking project progress, managing team tasks, and generating productivity reports. Users can customize notification settings, view message histories, and receive alerts for important updates. The platform aims to streamline team communication and enhance collaboration among users.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  user_status\n  notification_preferences <<multi>>\n}\n\nentity Channel {\n  channel_id <<key>>\n  name\n  description\n  channel_type\n  created_date\n  status\n}\n\nentity Message {\n  message_id <<key>>\n  user_id <<foreign>>\n  channel_id <<foreign>>\n  sent_date\n  message_content\n  message_status\n}\n\nentity File {\n  file_id <<key>>\n  uploaded_by <<foreign>>\n  channel_id <<foreign>>\n  file_name\n  file_type\n  file_size\n  uploaded_date\n  file_status\n}\n\nentity Task {\n  task_id <<key>>\n  assigned_to <<foreign>>\n  created_by <<foreign>>\n  channel_id <<foreign>>\n  task_title\n  task_description\n  task_status\n  due_date\n}\n\nentity Project {\n  project_id <<key>>\n  project_name\n  project_description\n  created_by <<foreign>>\n  start_date\n  end_date\n  status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  generated_by <<foreign>>\n  notification_type\n  notification_date\n  notification_content\n  notification_status\n}\n\nentity Report {\n  report_id <<key>>\n  generated_by <<foreign>>\n  project_id <<foreign>>\n  report_date\n  report_type\n  report_content\n  report_status\n}\n\nrelationship PARTICIPATES_IN {\n  role\n  join_date\n}\nrelationship POSTS_MESSAGE {\n}\nrelationship UPLOADS_FILE {\n}\nrelationship ASSIGNED_TO_TASK {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship HAS_MESSAGE {\n}\nrelationship GIVES_NOTIFICATION {\n}\nrelationship GENERATES_REPORT {\n}\n\nPARTICIPATES_IN -N- User\nPARTICIPATES_IN -N- Channel\n\nPOSTS_MESSAGE -1- User\nPOSTS_MESSAGE -N- Message\n\nUPLOADS_FILE -1- User\nUPLOADS_FILE -N- File\n\nASSIGNED_TO_TASK -1- User\nASSIGNED_TO_TASK -N- Task\n\nASSOCIATED_WITH -N- Task\nASSOCIATED_WITH -1- Project\n\nHAS_MESSAGE -1- Channel\nHAS_MESSAGE -N- Message\n\nGIVES_NOTIFICATION -1- Message\nGIVES_NOTIFICATION -1- Notification\n\nGENERATES_REPORT -1- Project\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Create an ERD for a project management tool named 'Trello' that helps users organize tasks, track project progress, and collaborate with team members. The platform provides task boards, task cards, and project timelines. Users can create task boards, add task cards, and assign tasks to team members. The platform includes features for tracking task statuses, managing project deadlines, and generating progress reports on projects. Users can customize task labels, view task histories, and receive notifications for task updates. The platform aims to streamline task management and improve project coordination among users.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  user_status\n  notification_preferences <<multi>>\n}\n\nentity Board {\n  board_id <<key>>\n  name\n  description\n  created_by <<foreign>>\n  created_date\n  status\n}\n\nentity Card {\n  card_id <<key>>\n  board_id <<foreign>>\n  created_by <<foreign>>\n  assigned_to <<foreign>>\n  card_title\n  card_description\n  card_status\n  due_date\n}\n\nentity Label {\n  label_id <<key>>\n  board_id <<foreign>>\n  label_name\n  label_color\n  label_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  generated_by <<foreign>>\n  notification_type\n  notification_date\n  notification_content\n  notification_status\n}\n\nentity Report {\n  report_id <<key>>\n  generated_by <<foreign>>\n  board_id <<foreign>>\n  report_date\n  report_type\n  report_content\n  report_status\n}\n\nrelationship HAS {\n}\nrelationship CREATES_BOARD {\n}\nrelationship ADDS_CARD {\n}\nrelationship HAS_LABEL {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship GENERATES_REPORT {\n}\n\nCREATES_BOARD -1- User\nCREATES_BOARD -N- Board\n\nADDS_CARD -1- User\nADDS_CARD -N- Card\n\nHAS -1- Board\nHAS -N- Card\n\nHAS_LABEL -1- Card\nHAS_LABEL -N- Label\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\nGENERATES_REPORT -1- Board\nGENERATES_REPORT -N- Report\n\n@endchen"      
    },
    {
        "input": "I want an ERD for a celebrity news and events platform that helps users stay updated on celebrity news, events, and entertainment industry trends. The platform provides news articles, event listings, and celebrity profiles. Users can read news articles, view event schedules, and explore celebrity profiles. The platform includes features for tracking trending topics, managing event registrations, and generating reports on celebrity engagements. Users can customize news preferences, view event histories, and receive notifications for upcoming events. The platform aims to provide a comprehensive and engaging platform for celebrity enthusiasts.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  user_status\n  notification_preferences <<multi>>\n}\n\nentity Article {\n  article_id <<key>>\n  title\n  author\n  publication_date\n  content\n  status\n}\n\nentity Event {\n  event_id <<key>>\n  title\n  organizer\n  event_date\n  event_location\n  event_description\n  status\n}\n\nentity Celebrity {\n  celebrity_id <<key>>\n  name\n  profession\n  birth_date\n  biography\n  status\n}\n\nentity Report {\n  report_id <<key>>\n  celebrity_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  event_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship READS_ARTICLE {\n}\nrelationship FOLLOWS_CELEBRITY {\n}\nrelationship REGISTERS_FOR_EVENT {\n  registration_date\n  registration_status\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship GENERATES_REPORT {\n}\n\nREADS_ARTICLE -1- User\nREADS_ARTICLE -N- Article\n\nREGISTERS_FOR_EVENT -1- User\nREGISTERS_FOR_EVENT -N- Event\n\nFOLLOWS_CELEBRITY -N- User\nFOLLOWS_CELEBRITY -1- Celebrity\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\nGENERATES_REPORT -1- Event\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "I want an ERD for a tech-talk platform that helps users engage in tech discussions, share knowledge, and collaborate on tech projects. The platform provides discussion forums, knowledge sharing tools, and project management features. Users can participate in tech discussions, share tech resources, and collaborate on tech projects. The platform includes features for tracking tech trends, managing project tasks, and generating reports on tech innovations. Users can customize discussion preferences, view project histories, and receive notifications for tech updates. The platform aims to create a vibrant tech community and foster collaboration among tech enthusiasts.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  user_status\n  notification_preferences <<multi>>\n}\n\nentity Forum {\n  forum_id <<key>>\n  name\n  description\n  created_by <<foreign>>\n  created_date\n  status\n}\n\nentity Discussion {\n  discussion_id <<key>>\n  forum_id <<foreign>>\n  created_by <<foreign>>\n  discussion_title\n  discussion_content\n  discussion_status\n  discussion_date\n}\n\nentity Resource {\n  resource_id <<key>>\n  user_id <<foreign>>\n  resource_title\n  resource_link\n  resource_description\n  resource_status\n}\n\nentity Project {\n  project_id <<key>>\n  project_name\n  project_description\n  created_by <<foreign>>\n  start_date\n  end_date\n  project_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  generated_by <<foreign>>\n  notification_type\n  notification_date\n  notification_content\n  notification_status\n}\n\nentity Report {\n  report_id <<key>>\n  generated_by <<foreign>>\n  project_id <<foreign>>\n  report_date\n  report_type\n  report_content\n  report_status\n}\n\nrelationship PARTICIPATES_IN_DISCUSSION {\n}\nrelationship SHARES_RESOURCE {\n}\nrelationship COLLABORATES_ON_PROJECT {\n}\nrelationship GENERATES_NOTIFICATION {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship BELONGS_TO_FORUM {\n}\n\nPARTICIPATES_IN_DISCUSSION -N- User\nPARTICIPATES_IN_DISCUSSION -N- Discussion\n\nSHARES_RESOURCE -1- User\nSHARES_RESOURCE -N- Resource\n\nCOLLABORATES_ON_PROJECT -N- User\nCOLLABORATES_ON_PROJECT -1- Project\n\nGENERATES_NOTIFICATION -1- Forum\nGENERATES_NOTIFICATION -N- Notification\n\nGENERATES_REPORT -1- Project\nGENERATES_REPORT -N- Report\n\nBELONGS_TO_FORUM -N- Discussion\nBELONGS_TO_FORUM -1- Forum\n\n@endchen"          
    },
    {
        "input": "I want an ERD for a babysitter management system that helps parents find babysitters, schedule babysitting sessions, and track babysitter activities. The system allows parents to search for available babysitters, book babysitting appointments, and communicate with babysitters. Babysitters can view babysitting requests, accept appointments, and provide care for children. The system includes features for tracking babysitting schedules, managing payment transactions, and generating reports on babysitter performance. Parents can customize babysitting preferences, view babysitter histories, and receive notifications for babysitting updates. The platform aims to provide a reliable and convenient solution for parents to manage babysitting needs.",
        "output": "@startchen\n\nentity Parent {\n  parent_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  parent_status\n}\n\nentity Babysitter {\n  babysitter_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  babysitter_status\n}\n\nentity Child <<weak>> {\n  name <<key>>\n  age\n  gender\n  child_status\n}\n\nentity BabysittingSession {\n  session_id <<key>>\n  parent_id <<foreign>>\n  babysitter_id <<foreign>>\n  child_id <<foreign>>\n  session_date\n  session_time\n  session_duration\n  session_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  parent_id <<foreign>>\n  babysitter_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_status\n}\n\nentity Report {\n  report_id <<key>>\n  parent_id <<foreign>>\n  babysitter_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship HAS_BABYSITTER {\n}\nrelationship SCHEDULES_SESSION {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship GETS_PAYMENT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship PARENT_OF <<identifying>> {\n}\n\nHAS_BABYSITTER -1- BabysittingSession\nHAS_BABYSITTER -1- Babysitter\n\nSCHEDULES_SESSION -1- Parent\nSCHEDULES_SESSION -N- BabysittingSession\n\nMAKES_PAYMENT -1- Parent\nMAKES_PAYMENT -N- Payment\n\nGETS_PAYMENT -1- BabysittingSession\nGETS_PAYMENT -1- Payment\n\nGENERATES_REPORT -1- Parent\nGENERATES_REPORT -N- Report\n\nPARENT_OF -1- Parent\nPARENT_OF -N- Child\n\n@endchen"          
    },
    {
        "input": "I want an ERD for a WhatsApp sticker maker application that helps users create custom stickers, share stickers with friends, and manage sticker collections. The application allows users to design stickers, import images, and add text to stickers. Users can save stickers to collections, share stickers in chats, and download sticker packs. The application includes features for editing sticker designs, managing sticker categories. Users can customize sticker settings, view sticker histories, and receive notifications for sticker updates. The platform aims to provide a fun and creative tool for users to express themselves through stickers.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Sticker {\n  sticker_id <<key>>\n  user_id <<foreign>>\n  sticker_name\n  sticker_image\n  sticker_category\n  sticker_status\n}\n\nentity Collection {\n  collection_id <<key>>\n  user_id <<foreign>>\n  collection_name\n  collection_description\n  collection_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  generated_by <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship CREATES_STICKER {\n}\nrelationship ADDED_TO_COLLECTION {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nCREATES_STICKER -1- User\nCREATES_STICKER -N- Sticker\n\nADDED_TO_COLLECTION -N- Sticker\nADDED_TO_COLLECTION -1- Collection\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "I want an ERD for an AI-based slides/presentation maker that helps users create professional presentations, design slides, and analyze presentation data. The platform provides templates, design tools, and data visualization options. Users can create slides, add content, and customize slide layouts. The platform includes features for tracking presentation progress, managing slide transitions. Users can customize presentation settings, view presentation histories, and receive notifications for presentation updates. The platform aims to streamline presentation creation and enhance visual communication.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Presentation {\n  presentation_id <<key>>\n  user_id <<foreign>>\n  presentation_title\n  presentation_date\n  presentation_time\n  presentation_duration\n  presentation_status\n  presentation_topic\n  presentation_content <<multi>>\n}\n\nentity Slide {\n  slide_id <<key>>\n  presentation_id <<foreign>>\n  slide_number\n  slide_content\n  slide_layout\n  slide_status\n}\n\nentity Transition {\n  transition_id <<key>>\n  presentation_id <<foreign>>\n  transition_type\n  transition_duration\n  transition_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  presentation_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship CREATES_PRESENTATION {\n}\nrelationship ADDS_SLIDE {\n}\nrelationship INCLUDES_TRANSITION {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nCREATES_PRESENTATION -1- User\nCREATES_PRESENTATION -N- Presentation\n\nADDS_SLIDE -1- Presentation\nADDS_SLIDE -N- Slide\n\nINCLUDES_TRANSITION -1- Slide\nINCLUDES_TRANSITION -N- Transition\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "I want an ERD for an AI-based resume builder that helps users create professional resumes, design resume templates, and analyze resume data. The platform provides resume templates, design tools, and data visualization options. Users can create resumes, add content, and customize resume layouts. The platform includes features for tracking resume progress, managing resume sections, and generating reports on resume engagement. Users can customize resume settings, view resume histories, and receive notifications for resume updates. The platform aims to streamline resume creation and enhance job application processes.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Resume {\n  resume_id <<key>>\n  user_id <<foreign>>\n  resume_title\n  resume_date\n  resume_content <<multi>>\n  resume_status\n}\n\nentity Section {\n  section_id <<key>>\n  resume_id <<foreign>>\n  section_title\n  section_content\n  section_status\n}\n\nentity Report {\n  report_id <<key>>\n  user_id <<foreign>>\n  resume_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  resume_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship CREATES_RESUME {\n}\nrelationship ADDS_SECTION {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nCREATES_RESUME -1- User\nCREATES_RESUME -N- Resume\n\nADDS_SECTION -1- Resume\nADDS_SECTION -N- Section\n\nGENERATES_REPORT -1- User\nGENERATES_REPORT -N- Report\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "I want an ERD for an AI-based chatbot that helps users interact with automated responses, provide information, and analyze user queries. The platform provides chatbot templates, design tools, and data visualization options. Users can chat with the chatbot, ask questions, and receive answers. The platform includes features for tracking chatbot interactions, managing user queries, and generating reports on chatbot performance. Users can customize chatbot settings, view chatbot histories, and receive notifications for chatbot updates. The platform aims to streamline user interactions and enhance customer support processes.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Interaction {\n  interaction_id <<key>>\n  user_id <<foreign>>\n  chatbot_id <<foreign>>\n  interaction_date\n  interaction_content\n  interaction_status\n}\n\nentity Query {\n  query_id <<key>>\n  user_id <<foreign>>\n  query_content\n  query_date\n  query_status\n}\n\nentity Report {\n  report_id <<key>>\n  user_id <<foreign>>\n  chatbot_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship INTERACTS_WITH_CHATBOT {\n}\nrelationship ASKS_QUERY {\n}\nrelationship GENERATES_REPORT {\n}\n\nINTERACTS_WITH_CHATBOT -1- User\nINTERACTS_WITH_CHATBOT -N- Interaction\n\nASKS_QUERY -1- User\nASKS_QUERY -N- Query\n\nGENERATES_REPORT -1- User\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Give an ERD for a VR-based training platform that helps users engage in virtual training sessions, learn new skills, and analyze training data. The platform provides VR training modules, interactive simulations, and progress tracking tools. Users can participate in VR training sessions, complete skill challenges, and receive feedback on performance. The platform includes features for tracking training progress, managing skill assessments, and generating reports on training outcomes. Users can customize training settings, view training histories, and receive notifications for training updates. The platform aims to provide an immersive and effective training experience for users.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity TrainingSession {\n  session_id <<key>>\n  user_id <<foreign>>\n  session_date\n  session_time\n  session_duration\n  session_status\n  session_topic\n  session_content <<multi>>\n}\n\nentity SkillChallenge {\n  challenge_id <<key>>\n  session_id <<foreign>>\n  challenge_title\n  challenge_description\n  challenge_status\n}\n\nentity Progress {\n  progress_id <<key>>\n  user_id <<foreign>>\n  session_id <<foreign>>\n  progress_date\n  progress_content\n  progress_status\n}\n\nentity Report {\n  report_id <<key>>\n  session_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship PARTICIPATES_IN {\n}\nrelationship HAS_CHALLENGE {\n}\nrelationship TRACKS_PROGRESS {\n}\nrelationship GENERATES_REPORT {\n}\n\nPARTICIPATES_IN -1- User\nPARTICIPATES_IN -N- TrainingSession\n\nHAS_CHALLENGE -1- TrainingSession\nHAS_CHALLENGE -N- SkillChallenge\n\nTRACKS_PROGRESS -1- User\nTRACKS_PROGRESS -N- Progress\n\nGENERATES_REPORT -1- TrainingSession\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Give an ERD for a VR-based social platform named 'Connexus' that helps introverts connect with like-minded individuals, engage in virtual social activities, and analyze social interactions. The platform provides VR social spaces, interactive games, and privacy settings. Users can create virtual avatars, join social events, and interact with other users. The platform includes features for tracking social connections, managing privacy preferences, and generating reports on social engagements. Users can customize social settings, view social histories, and receive notifications for social updates. The platform aims to provide a safe and inclusive space for introverts to socialize and build connections.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n  privacy preferences <<multi>>\n}\n\nentity Avatar {\n  avatar_id <<key>>\n  user_id <<foreign>>\n  avatar_name\n  avatar_image\n  avatar_status\n}\n\nentity SocialEvent {\n  event_id <<key>>\n  user_id <<foreign>>\n  event_date\n  event_time\n  event_duration\n  event_status\n  event_topic\n  event_content <<multi>>\n}\n\nentity Report {\n  report_id <<key>>\n  user_id <<foreign>>\n  event_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship CREATES_AVATAR {\n}\nrelationship JOINS_EVENT {\n}\nrelationship CONNECTS_WITH {\n  connection_date\n  connection_status\n}\nrelationship GENERATES_REPORT {\n}\n\nCREATES_AVATAR -1- User\nCREATES_AVATAR -N- Avatar\n\nJOINS_EVENT -1- Avatar\nJOINS_EVENT -N- SocialEvent\n\nCONNECTS_WITH -1- User\nCONNECTS_WITH -N- User\n\nGENERATES_REPORT -1- User\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Give an ERD for a VR-based public speaking app that helps users overcome stage fright, practice public speaking, and analyze speaking performance. The platform provides VR speaking environments, speech coaching tools, and audience feedback options. Users can practice speeches, receive coaching tips, and improve speaking skills. The platform includes features for tracking speaking progress, managing speech evaluations, and generating reports on speaking performance. Users can customize speaking settings, view speaking histories, and receive notifications for speaking updates. The platform aims to provide a supportive and effective tool for users to enhance their public speaking abilities.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity SpeechSession {\n  session_id <<key>>\n  user_id <<foreign>>\n  session_date\n  session_time\n  session_duration\n  session_status\n  session_topic\n  session_content <<multi>>\n}\n\nentity CoachingTip {\n  tip_id <<key>>\n  session_id <<foreign>>\n  tip_content\n  tip_date\n  tip_status\n}\n\nentity Evaluation {\n  evaluation_id <<key>>\n  user_id <<foreign>>\n  session_id <<foreign>>\n  evaluator_type\n  evaluation_date\n  evaluation_score\n  evaluation_criteria <<multi>>\n  evaluation_content\n  evaluation_status\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  session_id <<foreign>>\n  feedback_source\n  feedback_date\n  feedback_content\n  feedback_sentiment\n  feedback_status\n}\n\nentity Report {\n  report_id <<key>>\n  session_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship PARTICIPATES_IN {\n}\nrelationship RECEIVES_TIP {\n}\nrelationship HAS_EVALUATION {\n}\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship GENERATES_REPORT {\n}\n\nPARTICIPATES_IN -1- User\nPARTICIPATES_IN -N- SpeechSession\n\nRECEIVES_TIP -1- User\nRECEIVES_TIP -N- CoachingTip\n\nHAS_EVALUATION -1- SpeechSession\nHAS_EVALUATION -N- Evaluation\n\nPROVIDES_FEEDBACK -1- SpeechSession\nPROVIDES_FEEDBACK -N- Feedback\n\nGENERATES_REPORT -1- SpeechSession\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Give an ERD for a VR-based physiotherapy app that helps users perform physical therapy exercises, track progress, and analyze rehabilitation data. The platform provides VR exercise routines, motion tracking tools, and progress monitoring features. Users can follow guided exercises, monitor movements, and improve physical mobility. The platform includes features for tracking exercise progress, managing rehabilitation goals, and generating reports on rehabilitation outcomes. Users can customize exercise settings, view exercise histories, and receive notifications for exercise updates. The platform aims to provide an interactive and effective tool for users to recover from injuries and improve physical well-being.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity ExerciseSession {\n  session_id <<key>>\n  user_id <<foreign>>\n  session_date\n  session_time\n  session_duration\n  session_status\n  session_topic\n  session_content <<multi>>\n}\n\nentity Goal {\n  goal_id <<key>>\n  user_id <<foreign>>\n  session_id <<foreign>>\n  goal_date\n  goal_content\n  goal_status\n}\n\nentity Progress {\n  progress_id <<key>>\n  user_id <<foreign>>\n  session_id <<foreign>>\n  progress_date\n  range_of_motion\n  accuracy_percentage\n  repetition_count\n  progress_status\n}\n\nentity Report {\n  report_id <<key>>\n  session_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship PARTICIPATES_IN {\n}\nrelationship TRACKS_PROGRESS {\n}\nrelationship SETS_GOAL {\n}\nrelationship GENERATES_REPORT {\n}\n\nPARTICIPATES_IN -1- User\nPARTICIPATES_IN -N- ExerciseSession\n\nTRACKS_PROGRESS -1- ExerciseSession\nTRACKS_PROGRESS -N- Progress\n\nSETS_GOAL -1- User\nSETS_GOAL -N- Goal\n\nGENERATES_REPORT -1- ExerciseSession\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Give an ERD for a Salah Tracker app that helps users track their daily prayers, set prayer reminders, and analyze prayer habits. The app provides prayer tracking tools, reminder notifications, and prayer statistics. Users can log their daily prayers, receive reminders for prayer times, and view prayer history. The app includes features for tracking prayer progress, managing prayer goals, and generating reports on prayer habits. Users can customize prayer settings, view prayer histories, and receive notifications for prayer updates. The app aims to help users maintain consistent prayer habits and improve their spiritual well-being.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Prayer {\n  prayer_id <<key>>\n  user_id <<foreign>>\n  prayer_name\n  prayer_date\n  prayer_time\n  prayer_duration\n  day_status\n}\n\nentity PrayerLog {\n  log_id <<key>>\n  user_id <<foreign>>\n  prayer_id <<foreign>>\n  log_date\n  log_time\n  prayer_status\n  prayer_notes\n}\n\nentity Reminder {\n  reminder_id <<key>>\n  user_id <<foreign>>\n  prayer_id <<foreign>>\n  reminder_time\n  reminder_content\n  reminder_status\n}\n\nentity Goal {\n  goal_id <<key>>\n  user_id <<foreign>>\n  goal_start_date\n  goal_end_date\n  goal_content\n  goal_progress\n  goal_status\n}\n\nentity Report {\n  report_id <<key>>\n  user_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship LOGS_PRAYER {\n}\nrelationship HAS_PRAYER {\n}\nrelationship SETS_REMINDER {\n}\nrelationship SETS_GOAL {\n}\nrelationship GENERATES_REPORT {\n}\n\nLOGS_PRAYER -1- User\nLOGS_PRAYER -N- PrayerLog\n\nHAS_PRAYER -1- PrayerLog\nHAS_PRAYER -N- Prayer\n\nSETS_REMINDER -1- User\nSETS_REMINDER -N- Reminder\n\nSETS_GOAL -1- User\nSETS_GOAL -N- Goal\n\nGENERATES_REPORT -1- PrayerLog\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {    
        "input": "Design an ERD for an online pharmacy system. The traditional method of going to a physical store, selecting medicines, and making purchases often consumes a lot of time and energy. In case of exchanges or returns, the customer needs to revisit the store, adding to the inconvenience. The Online Pharmacy platform offers a streamlined solution where customers can easily select required medicines and place orders with a single click. To use the system, the customer first creates an account, providing essential details like name, address, and identification number. Once logged in, the customer can track the status of their order in real-time. The primary goal of this platform is to ensure access to medicines for all users while allowing the admin to manage supplier information and updates efficiently.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  address\n  identification_number\n  user_status\n}\n\nentity Admin {\n  admin_id <<key>>\n  name\n  email\n  password\n  contact_number\n  admin_status\n}\n\nentity Medicine {\n  medicine_id <<key>>\n  medicine_name\n  medicine_price\n  medicine_quantity\n  medicine_status\n}\n\nentity Supplier {\n  supplier_id <<key>>\n  supplier_name\n  supplier_address\n  supplier_contact\n  supplier_status\n}\n\nentity Order {\n  order_id <<key>>\n  user_id <<foreign>>\n  order_date\n  order_status\n  medicine_id <<foreign>>\n  quantity\n  total_price\n}\n\nrelationship PLACES_ORDER {\n}\nrelationship MANAGES_SUPPLIER {\n}\nrelationship CONTAINS_MEDICINE {\n}\nrelationship SUPPLIES_MEDICINE {\n}\n\nPLACES_ORDER -1- User\nPLACES_ORDER -N- Order\n\nMANAGES_SUPPLIER -1- Admin\nMANAGES_SUPPLIER -N- Supplier\n\nCONTAINS_MEDICINE -1- Order\nCONTAINS_MEDICINE -N- Medicine\n\nSUPPLIES_MEDICINE -1- Supplier\nSUPPLIES_MEDICINE -N- Medicine\n\n@endchen"          
    },
    {
        "input": "Design an ERD for a health equity management system that aims to address healthcare disparities and ensure equitable medical interventions for all patients. The system targets a wide range of users including patients, caretakers, healthcare providers, medical professionals, and government officials. One of the core functionalities of the system is patient classification based on social determinants such as economic status, health insurance, demographics, and hereditary health conditions. The system ensures that each patient receives appropriate and equitable treatment based on their classification. Patients can input their health information into the system, which is cross-verified with their public health records and data from healthcare providers. Another key feature is the notification system that alerts patients to relevant medical events and health schemes. Personal health tracking is available for patients to monitor their medical history. Healthcare providers use the system to plan health worker activity according to the needs of their patients, while the government can access the data to implement intervention schemes and improve public health outcomes. Overall, the system facilitates the registration of patients, classification of social and medical data, and collaboration between healthcare providers and government for equitable healthcare distribution.",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  classification_id <<foreign>>\n  name {\n    Fname\n    Lname\n  }\n  address {\n    street\n    city\n    zip\n  }\n  phone\n  email\n  health_status\n}\n\nentity Classification {\n  classification_id <<key>>\n  economic_status\n  health_insurance\n  demographics\n  hereditary_conditions\n  classification_date\n  classification_status\n}\n\nentity Caretaker {\n  caretaker_id <<key>>\n  name\n  address\n  phone\n  email\n  caretaker_status\n}\n\nentity HealthcareProvider {\n  provider_id <<key>>\n  name\n  address\n  phone\n  email\n  provider_status\n}\n\nentity MedicalProfessional {\n  professional_id <<key>>\n  name\n  address\n  phone\n  email\n  professional_status\n}\n\nentity GovernmentOfficial {\n  official_id <<key>>\n  name\n  address\n  phone\n  email\n  official_status\n}\n\nentity HealthRecord {\n  record_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  record_date\n  record_content\n  record_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  patient_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nentity HealthScheme {\n  scheme_id <<key>>\n  patient_id <<foreign>>\n  scheme_name\n  scheme_details\n  scheme_status\n}\n\nrelationship TRACKS_HEALTH {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship IMPLEMENTS_SCHEME {\n}\nrelationship ASSISTS_PATIENT {\n}\nrelationship ASSIGNS_CARETAKER {\n}\nrelationship PROVIDES_HEALTHCARE {\n}\nrelationship CLASSIFIES_PATIENT {\n}\n\nTRACKS_HEALTH -N- HealthRecord\nTRACKS_HEALTH -1- Patient\n\nRECEIVES_NOTIFICATION -1- Patient\nRECEIVES_NOTIFICATION -N- Notification\n\nIMPLEMENTS_SCHEME -1- GovernmentOfficial\nIMPLEMENTS_SCHEME -N- HealthScheme\n\nASSISTS_PATIENT -1- Caretaker\nASSISTS_PATIENT -N- Patient\n\nASSIGNS_CARETAKER -1- HealthcareProvider\nASSIGNS_CARETAKER -N- Caretaker\n\nPROVIDES_HEALTHCARE -1- HealthcareProvider\nPROVIDES_HEALTHCARE -N- Patient\n\nCLASSIFIES_PATIENT -1- Classification\nCLASSIFIES_PATIENT -N- Patient\n\n@endchen"
    },
    
    
    {
        "input": "This case study primarily focuses on developing a health equity management application aimed at addressing healthcare disparities across different classes of patients. The application targets various users, including patients, caretakers, healthcare providers, medical professionals, and government officials. A critical feature of the system is classifying patients based on social determinants such as economic status, health insurance, medical allowances, age, disability type, and hereditary conditions. The goal is to ensure that every patient receives appropriate medical intervention and equitable treatment. Patients can input health data, which is corroborated with public health records and data from healthcare providers. The system also notifies patients of relevant medical events, health schemes, and provides personal health-tracking functionalities. Additionally, healthcare providers can plan and schedule health worker activities based on patient needs. The data is analyzed by the government to implement intervention schemes and eliminate health discrepancies. The application ensures seamless collaboration between patients, healthcare providers, and government authorities to extend healthcare services without disparities. Design an ERD for this case study.",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  classification_id <<foreign>>\n  name {\n    Fname\n    Lname\n  }\n  address {\n    street\n    city\n    zip\n  }\n  phone\n  email\n  health_status\n}\n\nentity Classification {\n  classification_id <<key>>\n  economic_status\n  health_insurance\n  demographics\n  hereditary_conditions\n  classification_date\n  classification_status\n}\n\nentity Caretaker {\n  caretaker_id <<key>>\n  name\n  address\n  phone\n  email\n  caretaker_status\n}\n\nentity HealthcareProvider {\n  provider_id <<key>>\n  name\n  address\n  phone\n  email\n  provider_status\n}\n\nentity MedicalProfessional {\n  professional_id <<key>>\n  name\n  address\n  phone\n  email\n  professional_status\n}\n\nentity GovernmentOfficial {\n  official_id <<key>>\n  name\n  address\n  phone\n  email\n  official_status\n}\n\nentity HealthRecord {\n  record_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  record_date\n  record_content\n  record_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  patient_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nentity HealthScheme {\n  scheme_id <<key>>\n  patient_id <<foreign>>\n  scheme_name\n  scheme_details\n  scheme_status\n}\n\nrelationship TRACKS_HEALTH {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship IMPLEMENTS_SCHEME {\n}\nrelationship ASSISTS_PATIENT {\n}\nrelationship ASSIGNS_CARETAKER {\n}\nrelationship PROVIDES_HEALTHCARE {\n}\nrelationship CLASSIFIES_PATIENT {\n}\n\nTRACKS_HEALTH -N- HealthRecord\nTRACKS_HEALTH -1- Patient\n\nRECEIVES_NOTIFICATION -1- Patient\nRECEIVES_NOTIFICATION -N- Notification\n\nIMPLEMENTS_SCHEME -1- GovernmentOfficial\nIMPLEMENTS_SCHEME -N- HealthScheme\n\nASSISTS_PATIENT -1- Caretaker\nASSISTS_PATIENT -N- Patient\n\nASSIGNS_CARETAKER -1- HealthcareProvider\nASSIGNS_CARETAKER -N- Caretaker\n\nPROVIDES_HEALTHCARE -1- HealthcareProvider\nPROVIDES_HEALTHCARE -N- Patient\n\nCLASSIFIES_PATIENT -1- Classification\nCLASSIFIES_PATIENT -N- Patient\n\n@endchen"
    },


    {
        "input": "e-Med is a comprehensive personal medical assistant designed to help individuals manage their healthcare routines. It assists users in maintaining their medicine intake schedules by sending reminders for timely consumption and notifies users when they need to restock their medications. In addition to this, e-Med facilitates the scheduling of regular appointments with family doctors, either monthly or yearly, to ensure consistent medical follow-up. One of the standout features of the tool is the emergency button, which can immediately contact individuals listed in the user's emergency contact list during critical situations. The tool also enables users to keep a record of their medical history, such as blood sugar levels and blood pressure, through the Medical Notes feature. This makes e-Med an essential tool for individuals of all ages, particularly those managing ongoing health conditions, helping them maintain a healthy lifestyle with ease and reliability. Design an ERD for the e-Med system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Medicine {\n  medicine_id <<key>>\n  medicine_name\n  medicine_price\n  medicine_quantity\n  medicine_expiry_date\n  medicine_status\n}\n\nentity Appointment {\n  appointment_id <<key>>\n  user_id <<foreign>>\n  doctor_name\n  doctor_specialization\n  appointment_date\n  appointment_time\n  appointment_location\n  appointment_status\n}\n\nentity EmergencyContact <<weak>> {\n  contact_name <<key>>\n  user_id <<foreign>>\n  contact_relationship\n  contact_phone\n  contact_email\n  contact_status\n}\n\nentity MedicalNote {\n  note_id <<key>>\n  user_id <<foreign>>\n  note_date\n  blood_pressure\n  blood_sugar_level\n  cholesterol_level\n  other_notes\n  note_status\n}\n\nentity Reminder {\n  reminder_id <<key>>\n  user_id <<foreign>>\n  medicine_id <<foreign>>\n  reminder_date\n  reminder_time\n  reminder_type\n  reminder_content\n  reminder_status\n}\n\nrelationship SCHEDULES_APPOINTMENT {\n}\nrelationship CONTACTS_EMERGENCY <<identifying>> {\n}\nrelationship KEEPS_MEDICAL_NOTE {\n}\nrelationship RECEIVES_REMINDER {\n}\nrelationship TAKES_MEDICINE {\n}\n\nSCHEDULES_APPOINTMENT -1- User\nSCHEDULES_APPOINTMENT -N- Appointment\n\nCONTACTS_EMERGENCY -1- User\nCONTACTS_EMERGENCY -N- EmergencyContact\n\nKEEPS_MEDICAL_NOTE -1- User\nKEEPS_MEDICAL_NOTE -N- MedicalNote\n\nRECEIVES_REMINDER -1- User\nRECEIVES_REMINDER -N- Reminder\n\nTAKES_MEDICINE -1- User\nTAKES_MEDICINE -N- Medicine\n\n@endchen"          
    },
    {
        "input": "Design an ERD for this application. Health is wealth. Health plays a major role in everyone’s life. People consume unhealthy food and ruin their diet. Some medication results in side effects. This application benefits people with rich nutrients to improve their health. The application provides recommendations of nutrients they need. Users can provide their daily diet cycle and get good recommendations to improve it. They can also provide their medical reports to get nutrients according to their medical state. The user also gets the privilege to enter the disease name and get the nutrient benefit for fighting that disease. Users can ping professional nutritionists for more clarification. Users are authenticated and recommendation is provided by a trained machine learning model.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Nutrient {\n  nutrient_id <<key>>\n  nutrient_name\n  nutrient_description\n  nutrient_benefit\n  nutrient_status\n}\n\nentity DietCycle {\n  cycle_id <<key>>\n  user_id <<foreign>>\n  cycle_date\n  meal_details\n  calorie_intake\n  cycle_status\n}\n\nentity MedicalReport {\n  report_id <<key>>\n  user_id <<foreign>>\n  report_date\n  report_content\n  report_type\n  report_status\n}\n\nentity Disease {\n  disease_id <<key>>\n  disease_name\n  disease_description\n  disease_symptoms\n  disease_prevention\n  disease_status\n}\n\nentity Recommendation {\n  recommendation_id <<key>>\n  user_id <<foreign>>\n  nutrient_id <<foreign>>\n  disease_id <<foreign>>\n  recommendation_date\n  recommendation_content\n  recommendation_source\n  recommendation_status\n}\n\nentity Nutritionist {\n  nutritionist_id <<key>>\n  name\n  email\n  phone\n  specialization\n  nutritionist_status\n}\n\nrelationship RECOMMENDS_NUTRIENT {\n}\nrelationship BASED_ON_REPORT {\n}\nrelationship BASED_ON_DIET {\n}\nrelationship RECORDS_DIET {\n}\nrelationship PROVIDES_REPORT {\n}\nrelationship HELPS_FIGHT_DISEASE {\n}\nrelationship CONSULTS_WITH {\n}\n\nRECOMMENDS_NUTRIENT -1- Recommendation\nRECOMMENDS_NUTRIENT -N- Nutrient\n\nBASED_ON_DIET -1- DietCycle\nBASED_ON_DIET -N- Recommendation\n\nBASED_ON_REPORT -1- MedicalReport\nBASED_ON_REPORT -N- Recommendation\n\nRECORDS_DIET -1- User\nRECORDS_DIET -N- DietCycle\n\nPROVIDES_REPORT -1- User\nPROVIDES_REPORT -N- MedicalReport\n\nHELPS_FIGHT_DISEASE -1- Nutrient\nHELPS_FIGHT_DISEASE -N- Disease\n\nCONSULTS_WITH -1- User\nCONSULTS_WITH -N- Nutritionist\n\n@endchen"          
    },
    {
        "input": "The Health Tracker application is designed to help users monitor their health and fitness goals. Users can input their daily food intake, exercise routines, and water consumption to track their progress. The app provides personalized recommendations based on the user's health data and goals. Users can set reminders for meals, workouts, and hydration to stay on track. The app also offers a social feature where users can connect with friends and share their achievements. The Health Tracker aims to promote a healthy lifestyle and provide users with the tools they need to reach their fitness goals. Design an ERD for the Health Tracker application.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity FoodLog {\n  food_log_id <<key>>\n  log_date\n  meal_type\n  food_items\n  calorie_intake\n  log_status\n}\n\nentity ExerciseLog {\n  exercise_log_id <<key>>\n  log_date\n  exercise_type\n  duration\n  calories_burned\n  log_status\n}\n\nentity WaterLog {\n  water_log_id <<key>>\n  log_date\n  water_amount\n  log_status\n}\n\nentity Goal {\n  goal_id <<key>>\n  goal_type\n  goal_description\n  target_value\n  current_progress\n  goal_status\n}\n\nentity Recommendation {\n  recommendation_id <<key>>\n  goal_id <<foreign>>\n  recommendation_date\n  recommendation_content\n  recommendation_source\n  recommendation_status\n}\n\nrelationship LOGS_FOOD {\n}\nrelationship LOGS_EXERCISE {\n}\nrelationship LOGS_WATER {\n}\nrelationship SETS_GOAL {\n}\nrelationship CONNECTS_WITH {\n connection_date\n connection_status\n}\nrelationship BASED_ON {\n}\n\nLOGS_FOOD -1- User\nLOGS_FOOD -N- FoodLog\n\nLOGS_EXERCISE -1- User\nLOGS_EXERCISE -N- ExerciseLog\n\nLOGS_WATER -1- User\nLOGS_WATER -N- WaterLog\n\nSETS_GOAL -1- User\nSETS_GOAL -N- Goal\n\nBASED_ON -N- Recommendation\nBASED_ON -1- Goal\n\nCONNECTS_WITH -1- User\nCONNECTS_WITH -N- User\n\n@endchen"          
    },
    {
        "input": "The FitnessPal application is designed to help users achieve their fitness goals by providing personalized workout plans and nutrition recommendations. Users can input their fitness preferences, dietary restrictions, and health goals to receive tailored suggestions. The app tracks users' progress, sets reminders for workouts and meals, and offers a variety of exercise routines and recipes. Users can connect with fitness trainers and nutritionists for additional guidance and support. The FitnessPal app aims to empower users to lead a healthy and active lifestyle. Design an ERD for the FitnessPal application.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  fitness_preferences\n  dietary_restrictions\n  health_goals\n  user_status\n}\n\nentity ExerciseLog {\n  log_id <<key>>\n  user_id <<foreign>>\n  log_date\n  exercise_type\n  duration\n  calories_burned\n  intensity\n  log_status\n}\n\nentity WorkoutPlan {\n  plan_id <<key>>\n  user_id <<foreign>>\n  plan_date\n  plan_type\n  plan_duration\n  exercises\n  plan_status\n}\n\nentity NutritionPlan {\n  plan_id <<key>>\n  user_id <<foreign>>\n  plan_date\n  plan_type\n  meals\n  plan_status\n}\n\nentity Reminder {\n  reminder_id <<key>>\n  user_id <<foreign>>\n  reminder_date\n  reminder_time\n  reminder_type\n  reminder_content\n  reminder_status\n}\n\nentity Recipe {\n  recipe_id <<key>>\n  recipe_name\n  recipe_ingredients\n  recipe_instructions\n  recipe_status\n}\n\nentity FitnessTrainer {\n  trainer_id <<key>>\n  name\n  email\n  phone\n  specialization\n  trainer_status\n}\n\nentity Nutritionist {\n  nutritionist_id <<key>>\n  name\n  email\n  phone\n  specialization\n  nutritionist_status\n}\n\nrelationship LOGS_EXERCISE {\n}\nrelationship ASSIGNS_WORKOUT_PLAN {\n}\nrelationship ASSIGNS_NUTRITION_PLAN {\n}\nrelationship SETS_REMINDER {\n}\nrelationship INCLUDES_RECIPE {\n}\nrelationship CONSULTS_TRAINER {\n}\nrelationship CONSULTS_NUTRITIONIST {\n}\n\nLOGS_EXERCISE -1- User\nLOGS_EXERCISE -N- ExerciseLog\n\nASSIGNS_WORKOUT_PLAN -1- FitnessTrainer\nASSIGNS_WORKOUT_PLAN -N- WorkoutPlan\n\nASSIGNS_NUTRITION_PLAN -1- Nutritionist\nASSIGNS_NUTRITION_PLAN -N- NutritionPlan\n\nSETS_REMINDER -1- User\nSETS_REMINDER -N- Reminder\n\nINCLUDES_RECIPE -1- NutritionPlan\nINCLUDES_RECIPE -N- Recipe\n\nCONSULTS_TRAINER -1- User\nCONSULTS_TRAINER -N- FitnessTrainer\n\nCONSULTS_NUTRITIONIST -1- User\nCONSULTS_NUTRITIONIST -N- Nutritionist\n\n@endchen"          
    },
    {
        "input": "The first phase of a person’s life is confined mainly by education and training. Hence, counselling is an important aspect for the students of the current technological generation as an individual counsellor may remain in contact with all individual students as well as parents. Student Counselling Management System will simplify the process and reduce the manual paperwork. It is used to smoothen the work of each counsellor who is facing problems currently, and making complete atomization of manual process to computerized system. The main objective of the Student Counselling Management System is to design a system to rationalize the admission to particular courses in a university/institution. Through this system, the student will be able to register for counselling if he is eligible. If the student is qualifying the criteria then he will get the information regarding the colleges and the universities in which he can apply. The main features are online admission, report generation based on student’s merit list and keeping track of counselling procedures and finally publishing results. A student can also get the information regarding how many seats have been booked and vacant seats available in the institution. Design an ERD for the Student Counselling Management System.",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  qualification\n  merit_score\n  student_status\n}\n\nentity Counsellor {\n  counsellor_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  specialization\n  counsellor_status\n}\n\nentity University {\n  university_id <<key>>\n  university_name\n  university_location\n  available_seats\n  booked_seats\n  university_status\n}\n\nentity Course {\n  course_id <<key>>\n  university_id <<foreign>>\n  course_name\n  course_duration\n  course_fee\n  total_seats\n  booked_seats\n  course_status\n}\n\nentity CounsellingSession {\n  session_id <<key>>\n  counsellor_id <<foreign>>\n  student_id <<foreign>>\n  session_date\n  session_notes\n  session_status\n}\n\nentity Report {\n  report_id <<key>>\n  student_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship REGISTERS_FOR {\n}\nrelationship TAKES_SESSION {\n}\nrelationship APPLIES_FOR_ADMISSION {\n  admission_date\n  admission_status\n}\nrelationship OFFERS_COURSE {\n}\nrelationship ASSIGNS_UNIVERSITY {\n}\nrelationship GENERATES_REPORT {\n}\n\nREGISTERS_FOR -1- Student\nREGISTERS_FOR -N- CounsellingSession\n\nTAKES_SESSION -1- Counsellor\nTAKES_SESSION -N- CounsellingSession\n\nAPPLIES_FOR_ADMISSION -1- Student\nAPPLIES_FOR_ADMISSION -N- University\n\nOFFERS_COURSE -1- University\nOFFERS_COURSE -N- Course\n\nASSIGNS_UNIVERSITY -1- Counsellor\nASSIGNS_UNIVERSITY -N- University\n\nGENERATES_REPORT -1- Student\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "A visa is a document issued by a country giving a certain individual permission to enter a country for a given period of time for certain purposes. It is received after several verifications through offline mode. It requires the applicant to go to the Passport Verification Centre for the verification of documents. Sometimes even the cost of getting the visa will be high as there may be middlemen involved in it. It takes anywhere from two weeks to two months to receive the visa if applied in offline mode. With the use of an online visa processing system, the middlemen entry in getting the visa gets reduced and the process of application of visa becomes easier. The overall aim of the system is that the applicant can apply for the visa from anywhere and at any time. The applicant can apply for the visa and submit it online. It provides more flexibility to the applicant compared to the existing system. There are certain types of visas that the applicant can apply for such as employment visa, study visa, resident visa, H1 visa, business visa, etc. People who apply for the visa for work, education, etc will be benefitted a lot from this system. The applicant should register by providing a valid email and a password. The applicant has to log in to apply for the visa. The credentials are checked for correctness and the applicant is allowed to log in. Once the applicant logs in, he/she will be shown the application form which asks the applicant to provide the necessary details and asks him/her to attach the necessary documents. It also provides a list of visas to choose from. He/she can also view the details of fair to visa for each country. The applicant can view, modify and delete the details applied. The system will have a provision for the administrator to view the details of what types of visas are required by the applicant. The administrator will also be able to update and delete the details of the applicants. The administrator will have a facility to interact with the Visa Consultant Officer. The Visa Consultant Officer can be able to view and check the document proofs (valid passport, Demand Draft Visa Fee I-20 form, letter of admission, aid letter, etc.) submitted by the applicant and can be able to view the purpose of application of visa. He/She has the authority to accept/reject the visa application applied by the applicant. Design an ERD for the Online Visa Processing System.",
        "output": "@startchen\n\nentity Applicant {\n  applicant_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  applicant_status\n}\n\nentity VisaType {\n  visa_type_id <<key>>\n  visa_name\n  visa_description\n  visa_fee\n  visa_status\n}\n\nentity VisaApplication {\n  application_id <<key>>\n  applicant_id <<foreign>>\n  visa_type_id <<foreign>>\n  application_date\n  purpose_of_application\n  application_status\n}\n\nentity DocumentProof {\n  proof_id <<key>>\n  application_id <<foreign>>\n  proof_type\n  proof_content <<multi>>\n  proof_status\n}\n\nentity VisaConsultant {\n  consultant_id <<key>>\n  name\n  email\n  phone\n  specialization\n  consultant_status\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  admin_status\n}\n\nrelationship HAS_TYPE {\n}\nrelationship APPLIES_FOR_VISA {\n}\nrelationship SUBMITS_DOCUMENTS {\n}\nrelationship APPROVES_VISA {\n  approval_date\n  approval_status\n}\nrelationship MANAGES_APPLICATION {\n}\nrelationship INTERACTS_WITH {\n interaction_date\n message\n}\n\nHAS_TYPE -N- VisaApplication\nHAS_TYPE -1- VisaType\n\nAPPLIES_FOR_VISA -1- Applicant\nAPPLIES_FOR_VISA -N- VisaApplication\n\nSUBMITS_DOCUMENTS -1- VisaApplication\nSUBMITS_DOCUMENTS -N- DocumentProof\n\nAPPROVES_VISA -1- VisaConsultant\nAPPROVES_VISA -N- VisaApplication\n\nMANAGES_APPLICATION -1- Administrator\nMANAGES_APPLICATION -N- VisaApplication\n\nINTERACTS_WITH -1- Administrator\nINTERACTS_WITH -N- VisaConsultant\n\n@endchen"          
    },
    {
        "input": "Placement provides the opportunity for the students to gain specific subject skills as well as real work employability skills. Placement Offices play a crucial role in providing students the necessary training and various opportunities where the students can effectively evidence their various skills and abilities on their resume. Hence, the Automation of Placement office provides a more smooth placement process for both the companies and the students. This system mainly focuses on flows between the company’s activity, Registration, Resumes, Users, Skills, and Their Training. Hence, the system comprises five modules, namely, User module, Company module, Admin module, Registration module, and Training module. Design an ERD for the Automation of Placement Office.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  skills <<multi>>\n  user_status\n}\n\nentity Company {\n  company_id <<key>>\n  company_name\n  company_location\n  job_roles <<multi>>\n  hiring_status\n  company_status\n}\n\nentity Admin {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  admin_status\n}\n\nentity Resume {\n  resume_id <<key>>\n  user_id <<foreign>>\n  resume_content\n  last_updated\n  resume_status\n}\n\nentity Training {\n  training_id <<key>>\n  user_id <<foreign>>\n  training_name\n  training_date\n  skills_set <<multi>>\n  training_provider\n  training_status\n}\n\nentity Placement {\n  placement_id <<key>>\n  company_id <<foreign>>\n  job_role\n  placement_date\n  placement_status\n}\n\nrelationship REGISTERS_FOR {\n registration_date\n registration_status\n}\nrelationship PLACED_AT {\n}\nrelationship MANAGES_PLACEMENT {\n}\nrelationship SUBMITS_RESUME {\n}\nrelationship PROVIDES_TRAINING {\n}\nrelationship COMPLETES_TRAINING {\n}\n\nREGISTERS_FOR -1- User\nREGISTERS_FOR -N- Placement\n\nPLACED_AT -1- Placement\nPLACED_AT -1- Company\n\nMANAGES_PLACEMENT -1- Admin\nMANAGES_PLACEMENT -N- Placement\n\nSUBMITS_RESUME -1- User\nSUBMITS_RESUME -N- Resume\n\nCOMPLETES_TRAINING -1- User\nCOMPLETES_TRAINING -N- Training\n\nPROVIDES_TRAINING -1- Company\nPROVIDES_TRAINING -N- Training\n\n@endchen"          
    },
    {
        "input": "In India, 1 out of 4 farmers own a smartphone. But they don’t use it optimally for insights on farming based on real-time data – such as weather, soil conditions, market conditions, labour availability etcetera, which can allow them to make data-driven decisions to get the best possible results. Current technologies that solve such issues are either paid services or inaccurate. They also tend to be more complex making it really hard for anyone to understand and interpret. An application if developed should primarily aim at reducing the risks, reducing the costs, improving yield, and most importantly, easy for anyone to interpret. Design an ERD for the Farming Insights Application.",
        "output": "@startchen\n\nentity Farmer {\n  farmer_id <<key>>\n  name\n  phone\n  address\n  phone_model\n  farmer_status\n}\n\nentity WeatherData {\n  weather_id <<key>>\n  farmer_id <<foreign>>\n  weather_date\n  location\n  weather_conditions\n  temperature\n  humidity\n  weather_status\n}\n\nentity SoilData {\n  soil_id <<key>>\n  farmer_id <<foreign>>\n  soil_date\n  location\n  soil_conditions\n  soil_moisture\n  soil_ph\n  soil_status\n}\n\nentity MarketData {\n  market_id <<key>>\n  farmer_id <<foreign>>\n  market_date\n  location\n  market_conditions\n  crop_prices\n  market_status\n}\n\nentity LabourData {\n  labour_id <<key>>\n  farmer_id <<foreign>>\n  labour_date\n  location\n  labour_availability\n  labour_cost\n  labour_status\n}\n\nrelationship FETCHES_WEATHER {\n}\nrelationship FETCHES_SOIL {\n}\nrelationship FETCHES_MARKET {\n}\nrelationship FETCHES_LABOUR {\n}\n\nFETCHES_WEATHER -1- Farmer\nFETCHES_WEATHER -N- WeatherData\n\nFETCHES_SOIL -1- Farmer\nFETCHES_SOIL -N- SoilData\n\nFETCHES_MARKET -1- Farmer\nFETCHES_MARKET -N- MarketData\n\nFETCHES_LABOUR -1- Farmer\nFETCHES_LABOUR -N- LabourData\n\n@endchen"          
    },
    {
        "input": "This system is useful in the road transport and highways field (Ministry of Road Transport and Highways). Green rides is a technical solution for the general public to guide them to a less polluted path while travelling, to know about the traffic jam, identification of accident-prone spots, meals-on-wheel, the establishment of drive-mode applications. This app consists of a Google map view on the main screen. A user can select the source to destination path which then will be processed to give a number of routes to reach the destination from source with amount of traffic at various locations in that path along with current pollution status in that route (which updates overtime). If there exists a traffic jam, a user can blow a horn to all users within a specific radius. According to his current location in the form of a small notification which the persons in the specified radius will receive. The accidents that occurred at specific spots will be reported by the user to the concerned authority who will do the rescue operations and hence the accident-prone areas will be categorized based on the number of accidents taking place and a notification appears for the user to drive slow and safe when they are in that particular location. The road authority admin checks the system often. Meals-on-wheel provides information about hotels and restaurants which are available in the chosen route so that the user can place the order as per the available menu at a particular eating place including time of service so that one need not wait at the restaurant for placing the order. Drive-mode helps to minimize the risks of accidents while attending mobile phones during driving. This module would send an SMS to the caller that the particular person is driving when the geo-coordinates show the mobile shifting of the driver is beyond some specified speed limit (say, 20 kmph). Before start of the journey, this module can be turned on. The feedback feature allows the user to give feedbacks about the accuracy in the traffic and pollution levels in a given area. Design a entity relationship diagram for the Green Rides Application.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  user_status\n}\n\nentity Route {\n  route_id <<key>>\n  user_id <<foreign>>\n  source\n  destination\n  route_status\n  total_distance\n  estimated_time\n}\n\nentity TrafficData {\n  traffic_id <<key>>\n  route_id <<foreign>>\n  traffic_location\n  traffic_status\n  traffic_intensity\n  timestamp\n}\n\nentity PollutionData {\n  pollution_id <<key>>\n  route_id <<foreign>>\n  pollution_location\n  pollution_status\n  pollution_level\n  timestamp\n}\n\nentity AccidentData {\n  accident_id <<key>>\n  route_id <<foreign>>\n  accident_location\n  accident_status\n  accident_severity\n  report_time\n}\n\nentity Restaurant {\n  restaurant_id <<key>>\n  restaurant_name\n  restaurant_location\n  menu\n  service_time\n  contact\n  restaurant_status\n  ratings\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  user_id <<foreign>>\n  feedback_content\n  feedback_date\n  feedback_status\n  feedback_rating\n}\n\nentity DriveMode {\n  drive_mode_id <<key>>\n  user_id <<foreign>>\n  status\n  geo_coordinates\n  speed_limit\n  activation_time\n}\n\nrelationship SELECTS_ROUTE {\n}\nrelationship PROVIDES_TRAFFIC {\n}\nrelationship PROVIDES_POLLUTION {\n}\nrelationship REPORTS_ACCIDENT {\n}\nrelationship OFFERS_MEALS {\n}\nrelationship MONITORS_DRIVE_MODE {\n}\nrelationship GIVES_FEEDBACK {\n}\n\nSELECTS_ROUTE -1- User\nSELECTS_ROUTE -N- Route\n\nPROVIDES_TRAFFIC -1- Route\nPROVIDES_TRAFFIC -N- TrafficData\n\nPROVIDES_POLLUTION -1- Route\nPROVIDES_POLLUTION -N- PollutionData\n\nREPORTS_ACCIDENT -1- Route\nREPORTS_ACCIDENT -N- AccidentData\n\nOFFERS_MEALS -1- Route\nOFFERS_MEALS -N- Restaurant\n\nMONITORS_DRIVE_MODE -1- User\nMONITORS_DRIVE_MODE -N- DriveMode\n\nGIVES_FEEDBACK -1- User\nGIVES_FEEDBACK -N- Feedback\n\n@endchen"          
    },
    {
        "input": "To provide an online platform to manage the buying, selling and storage of artistic creations provided by creators/other platforms or auctions and to organize events to exhibit these products. The system is a gallery having art pieces with its description, price and other information and the order activity, payment activity, order update activity and so on. The objective is to provide an online platform through which museums and art galleries can make use of to exhibit their collections in times of unavailable street galleries. Like in times of pandemic also people need not bother not going to a museum or art gallery instead they can have online art shopping and art exhibits. The system should be immune to any chances of misuse and unauthorized reproduction of works of arts and designs. There will be two types of users accessing the system: Admin (Creators/authority of the art displayed) and Customer (One who looks to buy the art). The main features provided for the admin are that they will be able to update, add, delete, input price, description and information about an art (stock availability), generate report of gallery and that for the customers are that they will be able to order (Payment), delete order, view end-user projected art particulars. Design a entity relationship diagram for the Art Gallery Management System.",
        "output": "@startchen\n\nentity Admin {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  admin_status\n}\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  customer_status\n}\n\nentity ArtPiece {\n  art_id <<key>>\n  admin_id <<foreign>>\n  art_name\n  art_description\n  art_price\n  stock_availability\n  reproduction_protection\n  art_status <<derived>>\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  total_amount <<derived>>\n  order_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  order_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_method\n  payment_status\n}\n\nentity Report {\n  report_id <<key>>\n  admin_id <<foreign>>\n  report_date\n  report_type\n  report_content\n  report_status\n}\n\nentity Event {\n  event_id <<key>>\n  admin_id <<foreign>>\n  event_name\n  event_date\n  event_description\n  event_status\n}\n\nrelationship MANAGES_ART {\n}\nrelationship PLACES_ORDER {\n}\nrelationship CONTAINS_ART_PIECE {\n  quantity\n  item_price\n}\nrelationship HAS_PAYMENT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship ORGANIZES_EVENT {\n}\n\nMANAGES_ART -1- Admin\nMANAGES_ART -N- ArtPiece\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nCONTAINS_ART_PIECE -1- Order\nCONTAINS_ART_PIECE -N- ArtPiece\n\nHAS_PAYMENT -1- Order\nHAS_PAYMENT -1- Payment\n\nGENERATES_REPORT -1- Admin\nGENERATES_REPORT -N- Report\n\nORGANIZES_EVENT -1- Admin\nORGANIZES_EVENT -N- Event\n\n@endchen"          
    },
    {
        "input": "The students in our college have a lot of unnecessary goods lying around, whereas many other people might be benefitted from those things. So I would like to put forward a website that can be used to sell or trade the goods with someone who needs them. It proves to be extremely useful in cases like buying and trading second-hand books or study materials among students and faculties. Initially, the website can exclusively only be accessed by the students within the PSG Tech College campus. Later on, if expected demands are met, it shall be expanded to other colleges. The sellers are given special accounts in which they are rated based on their previous records with which the buyers can choose their seller. Design an entity relationship diagram for the College Trade Platform.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  user_type\n  overall_rating <<derived>>\n  user_status\n}\n\nentity Item {\n  item_id <<key>>\n  user_id <<foreign>>\n  item_name\n  item_description\n  item_category\n  item_price\n  item_condition\n  item_status <<derived>>\n  listed_date\n  trade_preference\n}\n\nrelationship SELLS_ITEM {\n  transaction_date\n  transaction_type\n  transaction_status\n}\nrelationship BUYS_ITEM {\n  transaction_date\n  transaction_type\n  transaction_status\n}\nrelationship RATES_USER {\n  rating_value\n  rating_comment\n  rating_date\n}\n\nSELLS_ITEM -1- User\nSELLS_ITEM -N- Item\n\nBUYS_ITEM -1- User\nBUYS_ITEM -N- Item\n\nRATES_USER -1- User\nRATES_USER -N- User\n\n@endchen"          
    },
    {
        "input": "Online learning is a part of many institution’s course offerings around the world. The scope of online quiz systems increased in this pandemic situation. The objective of the system is to maintain and improve the education rate by conducting quizzes (exams). The system acts as a bridge between student and teacher to gain knowledge and monitor it by the institution (admin). This system provides teachers to know about the students in remote education. The delightful features of the system are online teachers, remote tests, auto evaluation and feedback from students. Admin is responsible for the registration of both teachers and students. Teachers define the number of questions, time of the quiz, schedule for the quiz and they can edit it. At the end of a quiz, students can see the correct answers and their performance. Design a entity relationship diagram for the Online Quiz System.",
        "output": "@startchen\n\nentity Institution {\n  institution_id <<key>>\n  institution_name\n  institution_location\n  institution_status\n}\n\nentity Admin {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  admin_status\n}\n\nentity Teacher {\n  teacher_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  teacher_status\n}\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  student_status\n}\n\nentity Quiz {\n  quiz_id <<key>>\n  teacher_id <<foreign>>\n  quiz_name\n  quiz_date\n  quiz_duration\n  max_score\n  total_questions\n  quiz_schedule\n  quiz_status\n}\n\nentity Question {\n  question_id <<key>>\n  quiz_id <<foreign>>\n  question_text\n  question_type <<multi>>\n  options <<multi>>\n  correct_answer\n  question_status\n}\n\nentity Answer {\n  answer_id <<key>>\n  question_id <<foreign>>\n  student_id <<foreign>>\n  answer_text\n  is_correct <<derived>>\n  answer_status\n}\n\nentity Result {\n  result_id <<key>>\n  student_id <<foreign>>\n  quiz_id <<foreign>>\n  score\n  result_status\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  teacher_id <<foreign>>\n  student_id <<foreign>>\n  quiz_id <<foreign>>\n  feedback_content\n  feedback_date\n  feedback_status\n}\n\nrelationship ASSOCIATES_WITH_ADMIN {\n}\nrelationship REGISTERS_TEACHER {\n}\nrelationship REGISTERS_STUDENT {\n}\nrelationship CREATES_QUIZ {\n}\nrelationship DEFINES_QUESTION {\n}\nrelationship ATTEMPTS_QUIZ {\n  start_time\n  end_time\n  attempt_status\n}\nrelationship HAS_ANSWER {\n}\nrelationship GENERATES_RESULT {\n}\nrelationship PROVIDES_FEEDBACK {\n}\n\nASSOCIATES_WITH_ADMIN -1- Institution\nASSOCIATES_WITH_ADMIN -N- Admin\n\nREGISTERS_TEACHER -1- Admin\nREGISTERS_TEACHER -N- Teacher\n\nREGISTERS_STUDENT -1- Admin\nREGISTERS_STUDENT -N- Student\n\nCREATES_QUIZ -1- Teacher\nCREATES_QUIZ -N- Quiz\n\nDEFINES_QUESTION -1- Quiz\nDEFINES_QUESTION -N- Question\n\nATTEMPTS_QUIZ -1- Student\nATTEMPTS_QUIZ -N- Quiz\n\nHAS_ANSWER -1- Question\nHAS_ANSWER -1- Answer\n\nGENERATES_RESULT -1- Quiz\nGENERATES_RESULT -N- Result\n\nPROVIDES_FEEDBACK -1- Teacher\nPROVIDES_FEEDBACK -N- Feedback\n\n@endchen"          
    },
    {
        "input": "The book bank management is a software in which a member can register themselves and then he can borrow books from the book bank or the members can buy the books from the book bank. A Book Bank lends books and magazines to members, who are registered in the system. It mainly concentrates on providing the book for authorized members only. A member can reserve a book or magazine that is not currently available in the book bank, so that when it is returned or purchased by the book bank, that person is notified. The book bank can easily create, replace and delete information about the titles, members and reservations from the system. The main issue of the system is that only registered members can lend the book from the book bank. In the case of lending, we should maintain the database for the status and issue of the book and also we have to calculate the fine amount with respect to the due date. We should maintain the book according to the department, genres, and year of study. Another main issue of the system is that if the user takes the book and misplaces it on another shelf, then we have the chip of bar scanner to scan the books and indicate to the admin that the book has been replaced. All the above issues will be satisfied by developing the software as a user-friendly system. The main functionality of the system is that User Authentication, Book storing, Book retrieval, Book for buying, Stock Updating, Due fine, E-books, Payment, Book maintenance, Sales report, User records and Sorting. The software is developed to satisfy the needs according to the members. The software will be very useful in the area of institutions, libraries and for general citizens. The software is developed to act as a useful interface for the users to easily access books. Design a entity relationship diagram for the Book Bank Management System.",
        "output": "@startchen\n\nentity Member {\n  member_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  member_status\n}\n\nentity Book {\n  book_id <<key>>\n  book_name\n  book_author\n  book_genre\n  book_department\n  book_year\n  stock_availability\n  book_status\n}\n\nentity EBook {\n  ebook_id <<key>>\n  book_id <<foreign>>\n  ebook_link\n  ebook_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  member_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_method\n  payment_status\n}\n\nentity SalesReport {\n  report_id <<key>>\n  member_id <<foreign>>\n  book_id <<foreign>>\n  report_date\n  report_type\n  report_content\n  report_status\n}\n\nrelationship RESERVES_BOOK {\n  reservation_date\n  reservation_status\n}\nrelationship ISSUES_BOOK {\n  issue_date\n  due_date\n  return_date\n  fine_amount\n}\nrelationship HAS_EBOOK {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship GENERATES_REPORT {\n}\n\nRESERVES_BOOK -1- Member\nRESERVES_BOOK -N- Book\n\nISSUES_BOOK -1- Member\nISSUES_BOOK -N- Book\n\nHAS_EBOOK -1- Book\nHAS_EBOOK -N- EBook\n\nMAKES_PAYMENT -1- Member\nMAKES_PAYMENT -N- Payment\n\nGENERATES_REPORT -N- Book\nGENERATES_REPORT -1- SalesReport\n\n@endchen"          
    },
    {
        "input": "Design a entity relationship diagram for Mega Associates website. Mega Associates is an evolving architectural firm that is facing fierce competition. The competitors have a modern, well-built website that is pulling some of the firm’s clients towards themselves. In order to avoid a situation like this and to retain all the firm’s clients and attract new ones, a refreshing website is needed. The website of the firm should include the major projects of the firm, a brief on all the available departments and collaborations, recent news with respect to the firm, the firm’s insights, the history of the firm, mail or chat feature, and career opportunities with regard to the firm.",
        "output": "@startchen\n\nentity Firm {\n  firm_id <<key>>\n  firm_name\n  firm_location\n  firm_description\n  established_year\n  contact_info\n  firm_status\n}\n\nentity Department {\n  department_id <<key>>\n  firm_id <<foreign>>\n  department_name\n  department_head\n  department_description\n  department_status\n}\n\nentity Project {\n  project_id <<key>>\n  department_id <<foreign>>\n  project_name\n  project_description\n  start_date\n  end_date\n  project_status\n}\n\nentity News {\n  news_id <<key>>\n  firm_id <<foreign>>\n  news_date\n  news_title\n  news_content\n  news_status\n}\n\nentity Insight {\n  insight_id <<key>>\n  firm_id <<foreign>>\n  insight_title\n  insight_content\n  insight_date\n  insight_status\n}\n\nentity History {\n  history_id <<key>>\n  firm_id <<foreign>>\n  history_date\n  history_event\n  history_description\n  history_status\n}\n\nentity Career {\n  career_id <<key>>\n  firm_id <<foreign>>\n  career_position\n  department_id <<foreign>>\n  career_description\n  qualifications_required\n  career_status\n}\n\nrelationship HAS_DEPARTMENT {\n}\nrelationship HAS_PROJECT {\n}\nrelationship PROVIDES_NEWS {\n}\nrelationship PROVIDES_INSIGHT {\n}\nrelationship HAS_HISTORY {\n}\nrelationship OFFERS_CAREER {\n}\n\nHAS_DEPARTMENT -1- Firm\nHAS_DEPARTMENT -N- Department\n\nHAS_PROJECT -1- Department\nHAS_PROJECT -N- Project\n\nPROVIDES_NEWS -1- Department\nPROVIDES_NEWS -N- News\n\nPROVIDES_INSIGHT -1- Department\nPROVIDES_INSIGHT -N- Insight\n\nHAS_HISTORY -1- Firm\nHAS_HISTORY -1- History\n\nOFFERS_CAREER -1- Firm\nOFFERS_CAREER -N- Career\n\n@endchen"          
    },
    {
        "input": "The policies and guidelines for startups vary from state to state. Also, startups related to a particular domain are emphasized in particular areas. The people with startup ideas at different levels of implementation have to approach different firms or individuals for investment who are in their nearest business circles, if not in the same state. All of these factors will adversely impact the opportunities for startups. Startup Meet is a platform for people to privately approach firms or angel investors with their ideas implemented at different levels for funding and mentorship. Additionally, government policies and loan schemes of different states can be known and applied through the platform. If investors or mentors are interested in the idea, a virtual presentation can be given. Profiles for investors and entrepreneurs will showcase what each party is looking for. Entrepreneurs can request investors or mentors from different states for submitting their ideas. Once accepted, an abstract can be sent. If the investors like it, they can call for a presentation. The mentors also provide guidance. The government loans and policies can be viewed and applied for through the portal. Startup Meet is a comprehensive platform for people involved in startups. Design a entity relationship diagram for the Startup Meet System.",
        "output": "@startchen\n\nentity Startup {\n  startup_id <<key>>\n  startup_name\n  startup_description\n  startup_domain\n  startup_status\n}\n\nentity Entrepreneur {\n  entrepreneur_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  entrepreneur_status\n}\n\nentity Investor {\n  investor_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  investor_status\n}\n\nentity Mentor {\n  mentor_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  mentor_status\n}\n\nentity Policy {\n  policy_id <<key>>\n  policy_name\n  policy_description\n  eligibility_criteria\n  applicable_industries <<multi>>\n  application_deadline\n  policy_provider\n  policy_status\n}\n\nentity Loan {\n  loan_id <<key>>\n  loan_name\n  loan_description\n  loan_amount\n  interest_rate\n  repayment_terms\n  eligibility_criteria\n  funding_agency\n  loan_status\n}\n\nrelationship CREATED_BY {\n}\nrelationship REQUESTS_INVESTOR {\n  request_date\n  request_status\n}\nrelationship REQUESTS_MENTOR {\n  request_date\n  request_status\n}\nrelationship APPLY_FOR_POLICY {\n}\nrelationship APPLY_FOR_LOAN {\n}\n\nCREATED_BY -N- Startup\nCREATED_BY -1- Entrepreneur\n\nREQUESTS_INVESTOR -1- Startup\nREQUESTS_INVESTOR -N- Investor\n\nREQUESTS_MENTOR -1- Startup\nREQUESTS_MENTOR -N- Mentor\n\nAPPLY_FOR_POLICY -N- Policy\nAPPLY_FOR_POLICY -N- Startup\n\nAPPLY_FOR_LOAN -N- Startup\nAPPLY_FOR_LOAN -1- Loan\n\n@endchen"          
    },
    {
        "input": "The Video Suggestion System is used in social networking platforms such as YouTube and Facebook. The ultimate aim of this system is to suggest videos to the users based on factors such as trending topics, user preferences, similar viewing patterns, and search results. The Video Suggestion System helps users by offering relevant content without the need for manual searching. It plays a crucial role in the entertainment sector by enhancing user engagement. The system operates by collecting user activity data, processing it, generating a dataset based on these interactions, and finally suggesting videos when users refresh their page or request recommendations. Design a entity relationship diagram for the Video Suggestion System.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  preferences <<multi>>\n  user_status\n}\n\nentity Video {\n  video_id <<key>>\n  video_title\n  video_description\n  video_category\n  video_tags <<multi>>\n  video_duration\n  video_trending_score\n  video_status\n}\n\nentity Like {\n  like_id <<key>>\n  user_id <<foreign>>\n  video_id <<foreign>>\n  like_date\n  like_status\n}\n\nentity Dislike {\n  dislike_id <<key>>\n  user_id <<foreign>>\n  video_id <<foreign>>\n  dislike_date\n  dislike_status\n}\n\nrelationship WATCHES_VIDEO {\n  watch_date\n  watch_duration\n  watch_status\n}\n\nrelationship HAS_LIKES {\n}\nrelationship GIVES_LIKES {\n}\n\nrelationship HAS_DISLIKES {\n}\nrelationship GIVES_DISLIKES {\n}\n\nrelationship RECOMMENDED_TO {\n  recommendation_reason <<multi>>\n  recommendation_date\n  recommendation_status\n}\n\nWATCHES_VIDEO -1- User\nWATCHES_VIDEO -N- Video\n\nHAS_LIKES -1- Video\nHAS_LIKES -N- Like\n\nGIVES_LIKES -1- User\nGIVES_LIKES -N- Like\n\nHAS_DISLIKES -1- Video\nHAS_DISLIKES -N- Dislike\n\nGIVES_DISLIKES -1- User\nGIVES_DISLIKES -N- Dislike\n\nRECOMMENDED_TO -N- Video\nRECOMMENDED_TO -N- User\n\n@endchen"          
    },
    {
        "input": "Design a entity relationship diagram for a library management system. Following are the functional requirements of the library management system:\n1. Any library member should be able to search books by their title, author, subject category as well by the publication date.\n2. Each book will have a unique identification number and other details including a rack number which will help to physically locate the book.\n3. There could be more than one copy of a book, and library members should be able to check-out and reserve any copy. We will call each copy of a book, a book item.\n4. The library management system should be able to retrieve information like who took a particular book or what are the books checked-out by a specific library member.\n5. There should be a maximum limit (5) on how many books a member can check-out.\n6. There should be a maximum limit (10) on how many days a member can keep a book.\n7. The system should be able to collect fines for books returned after the due date.\n8. Members should be able to reserve books that are not currently available.\n9. The system should be able to send notifications whenever the reserved books become available, as well as when the book is not returned within the due date.\n10. Each book and member card will have a unique barcode.\n11. The system will be able to read barcodes from books and members’ library cards.",
        "output": "@startchen\n\nentity LibraryMember {\n  member_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  membership_status\n  max_checkout_limit <<derived>>\n}\n\nentity Book {\n  book_id <<key>>\n  title\n  author\n  subject_category\n  publication_date\n  rack_number\n  unique_barcode\n  book_status\n}\n\nentity BookItem {\n  book_item_id <<key>>\n  book_id <<foreign>>\n  unique_barcode\n  availability_status\n  checkout_status\n}\n\nentity Checkout {\n  checkout_id <<key>>\n  member_id <<foreign>>\n  checkout_date\n  due_date\n  return_date\n  fine_amount <<derived>>\n  checkout_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  member_id <<foreign>>\n  book_item_id <<foreign>>\n  notification_type\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship RESERVES_BOOK {\n  reservation_date\n  reservation_status\n}\nrelationship PERFORMS_CHECKOUT {\n}\nrelationship ASSOCIATES_BOOK {\n}\nrelationship SENDS_NOTIFICATION {\n}\nrelationship TRACKS_BOOK_ITEMS {\n}\n\nRESERVES_BOOK -1- LibraryMember\nRESERVES_BOOK -N- BookItem\n\nPERFORMS_CHECKOUT -1- LibraryMember\nPERFORMS_CHECKOUT -N- Checkout\n\nASSOCIATES_BOOK -1- Checkout\nASSOCIATES_BOOK -1- BookItem\n\nSENDS_NOTIFICATION -1- Book\nSENDS_NOTIFICATION -N- Notification\n\nTRACKS_BOOK_ITEMS -1- Book\nTRACKS_BOOK_ITEMS -N- BookItem\n\n@endchen"
    },
    {
        "input": "Design a entity relationship diagram based on the following requirements:\n1. During a semester, a lecturer reads one or more lectures.\n2. Sometimes the lecturer is on leave to focus on doing research; in this case, (s)he does not give a lecture.\n3. A student usually attends one or more lectures, unless (s)he has something better to do.\n4. During the semester, there will be several exercises which are meant to be solved by small study groups.\n5. Each student is assigned to one particular study group for the whole semester in the course management system.\n6. A study group consists of two to three students.\n7. After submission of a solution by a study group, it is graded by a tutor.",
        "output": "@startchen\n\nentity Lecturer {\n  lecturer_id <<key>>\n  name\n  email\n  password\n  research_status\n  lecturer_status\n}\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  group_id <<foreign>>\n  student_status\n}\n\nentity StudyGroup {\n  group_id <<key>>\n  group_name\n  semester\n  group_status\n}\n\nentity Lecture {\n  lecture_id <<key>>\n  lecturer_id <<foreign>>\n  lecture_title\n  lecture_date\n  lecture_status\n}\n\nentity Exercise {\n  exercise_id <<key>>\n  lecture_id <<foreign>>\n  exercise_title\n  exercise_description\n  submission_deadline\n  exercise_status\n}\n\nentity Submission {\n  submission_id <<key>>\n  exercise_id <<foreign>>\n  group_id <<foreign>>\n  submission_date\n  submission_content\n  submission_status\n}\n\nentity Tutor {\n  tutor_id <<key>>\n  name\n  email\n  password\n  tutor_status\n}\n\nrelationship TEACHES_LECTURE {\n}\nrelationship ATTENDS_LECTURE {\n}\nrelationship ASSIGNED_TO_GROUP {\n}\nrelationship RELATED_TO_SUBMISSION {\n}\nrelationship SOLVES_EXERCISE {\n}\nrelationship SUBMITS_SOLUTION {\n}\nrelationship GRADES_SOLUTION {\n  grade_value\n  grade_comments\n  grade_status\n}\n\nTEACHES_LECTURE -1- Lecturer\nTEACHES_LECTURE -N- Lecture\n\nATTENDS_LECTURE -1- Student\nATTENDS_LECTURE -N- Lecture\n\nASSIGNED_TO_GROUP -(2,3)- Student\nASSIGNED_TO_GROUP -1- StudyGroup\n\nRELATED_TO_SUBMISSION -1- Exercise\nRELATED_TO_SUBMISSION -N- Submission\n\nSOLVES_EXERCISE -1- StudyGroup\nSOLVES_EXERCISE -N- Exercise\n\nSUBMITS_SOLUTION -1- StudyGroup\nSUBMITS_SOLUTION -N- Submission\n\nGRADES_SOLUTION -1- Tutor\nGRADES_SOLUTION -N- Submission\n\n@endchen"
    },
    {
        "input": "The content management system shall allow an administrator to create a new blog account, provided the personal details of the new blogger are verified using the author credentials database. The content management system shall allow an administrator to create a new personal Wiki, provided the personal details of the applying author are verified using the Author Credentials service. Design a entity relationship diagram for the content management system.",
        "output": "@startchen\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  admin_status\n}\n\nentity Blogger {\n  blogger_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  blogger_status\n}\n\nentity Wiki {\n  wiki_id <<key>>\n  author_id <<foreign>>\n  wiki_title\n  wiki_content\n  wiki_status\n}\n\nrelationship CREATES_BLOG_ACCOUNT {\n}\nrelationship CREATES_PERSONAL_WIKI {\n}\n\nCREATES_BLOG_ACCOUNT -1- Administrator\nCREATES_BLOG_ACCOUNT -N- Blogger\n\nCREATES_PERSONAL_WIKI -1- Administrator\nCREATES_PERSONAL_WIKI -N- Wiki\n\n@endchen"
    },
    {
        "input": "Design a entity relationship diagram for the eDoc system. The eDoc Health Record Management System must support the creation and management of patient profiles, allowing comprehensive organization of personal information. The eDoc Health Record Management System must enable comprehensive medical history input and organization for each patient. The eDoc Health Record Management System must provide advanced appointment scheduling, including reminders for both patients and healthcare providers. The eDoc Health Record Management System must ensure secure data storage that complies with healthcare regulations, including HIPAA. The eDoc Health Record Management System must integrate telemedicine practices, allowing remote consultations and interactions with patients. The eDoc Health Record Management System must allow patient access via secure portals, ensuring privacy and data protection. The eDoc Health Record Management System must offer data analysis, collaboration, and reporting functionalities for healthcare teams to improve decision-making and patient care. The eDoc Health Record Management System must support import/export capabilities for easy data accessibility and transfer between systems. The eDoc Health Record Management System must perform regular backups and include data recovery options to ensure data integrity and availability. The eDoc Health Record Management System must manage patient medication records, including medication reminders for patients. The eDoc Health Record Management System must store and manage records for lab results, imaging, and diagnostic reports to support healthcare providers in making informed decisions.",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  date_of_birth\n  email\n  phone\n  address\n  emergency_contact\n  patient_status\n}\n\nentity MedicalHistory {\n  history_id <<key>>\n  patient_id <<foreign>>\n  history_date\n  diagnosis\n  treatments\n  allergies\n  medical_history_status\n}\n\nentity Appointment {\n  appointment_id <<key>>\n  patient_id <<foreign>>\n  healthcare_provider_id <<foreign>>\n  appointment_date\n  appointment_time\n  appointment_status\n  reminder_status\n}\n\nentity HealthcareProvider {\n  provider_id <<key>>\n  name\n  specialization\n  email\n  phone\n  provider_status\n}\n\nentity TelemedicineSession {\n  session_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  session_date\n  session_time\n  session_notes\n  session_status\n}\n\nentity Medication {\n  medication_id <<key>>\n  patient_id <<foreign>>\n  medication_name\n  dosage\n  frequency\n  start_date\n  end_date\n  reminder_status\n  medication_status\n}\n\nentity LabResult {\n  result_id <<key>>\n  patient_id <<foreign>>\n  test_name\n  result_date\n  result_details\n  result_status\n}\n\nentity DiagnosticReport {\n  report_id <<key>>\n  patient_id <<foreign>>\n  report_date\n  report_type\n  findings\n  report_status\n}\n\nentity Report {\n  report_id <<key>>\n  provider_id <<foreign>>\n  report_date\n  report_type\n  report_content\n  report_status\n}\n\nrelationship HAS_MEDICAL_HISTORY {\n}\nrelationship SCHEDULES_APPOINTMENT {\n}\nrelationship HOSTS_APPOINTMENT {\n}\nrelationship CONDUCTS_SESSION {\n}\nrelationship PRESCRIBES_MEDICATION {\n}\nrelationship HAS_LAB_RESULTS {\n}\nrelationship HAS_DIAGNOSTIC_REPORT {\n}\nrelationship CREATES_REPORT {\n}\n\nHAS_MEDICAL_HISTORY -1- Patient\nHAS_MEDICAL_HISTORY -N- MedicalHistory\n\nSCHEDULES_APPOINTMENT -1- Patient\nSCHEDULES_APPOINTMENT -N- Appointment\n\nHOSTS_APPOINTMENT -1- HealthcareProvider\nHOSTS_APPOINTMENT -N- Appointment\n\nCONDUCTS_SESSION -1- HealthcareProvider\nCONDUCTS_SESSION -N- TelemedicineSession\n\nPRESCRIBES_MEDICATION -1- HealthcareProvider\nPRESCRIBES_MEDICATION -N- Medication\n\nHAS_LAB_RESULTS -1- MedicalHistory\nHAS_LAB_RESULTS -N- LabResult\n\nHAS_DIAGNOSTIC_REPORT -1- MedicalHistory\nHAS_DIAGNOSTIC_REPORT -N- DiagnosticReport\n\nCREATES_REPORT -1- HealthcareProvider\nCREATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "The HealthCare Management System has these functions: The Creation and Management of Patient Profiles. Comprehensive Medical History Input and Organization. Advanced Appointment Scheduling with Reminders. Secure Data Storage Compliant with Healthcare Regulations. Integration of Telemedicine Practices. Patient Access via Secure Portals. Data Analysis, Collaboration, and Reporting for Healthcare Teams. Import/Export Capabilities for Data Accessibility. Regular Backups and Data Recovery Options. Medication Management with Reminders. Record Storage for Lab Results, Imaging, and Diagnostic Reports. Design a entity relationship diagram for the HealthCare Management System.",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  date_of_birth\n  email\n  phone\n  address\n  emergency_contact\n  patient_status\n}\n\nentity MedicalHistory {\n  history_id <<key>>\n  patient_id <<foreign>>\n  history_date\n  diagnosis\n  treatments\n  allergies\n  medical_history_status\n}\n\nentity Appointment {\n  appointment_id <<key>>\n  patient_id <<foreign>>\n  healthcare_provider_id <<foreign>>\n  appointment_date\n  appointment_time\n  appointment_status\n  reminder_status\n}\n\nentity HealthcareProvider {\n  provider_id <<key>>\n  name\n  specialization\n  email\n  phone\n  provider_status\n}\n\nentity TelemedicineSession {\n  session_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  session_date\n  session_time\n  session_notes\n  session_status\n}\n\nentity Medication {\n  medication_id <<key>>\n  patient_id <<foreign>>\n  medication_name\n  dosage\n  frequency\n  start_date\n  end_date\n  reminder_status\n  medication_status\n}\n\nentity LabResult {\n  result_id <<key>>\n  patient_id <<foreign>>\n  test_name\n  result_date\n  result_details\n  result_status\n}\n\nentity DiagnosticReport {\n  report_id <<key>>\n  patient_id <<foreign>>\n  report_date\n  report_type\n  findings\n  report_status\n}\n\nentity Report {\n  report_id <<key>>\n  provider_id <<foreign>>\n  report_date\n  report_type\n  report_content\n  report_status\n}\n\nrelationship HAS_MEDICAL_HISTORY {\n}\nrelationship SCHEDULES_APPOINTMENT {\n}\nrelationship HOSTS_APPOINTMENT {\n}\nrelationship CONDUCTS_SESSION {\n}\nrelationship PRESCRIBES_MEDICATION {\n}\nrelationship HAS_LAB_RESULTS {\n}\nrelationship HAS_DIAGNOSTIC_REPORT {\n}\nrelationship CREATES_REPORT {\n}\n\nHAS_MEDICAL_HISTORY -1- Patient\nHAS_MEDICAL_HISTORY -N- MedicalHistory\n\nSCHEDULES_APPOINTMENT -1- Patient\nSCHEDULES_APPOINTMENT -N- Appointment\n\nHOSTS_APPOINTMENT -1- HealthcareProvider\nHOSTS_APPOINTMENT -N- Appointment\n\nCONDUCTS_SESSION -1- HealthcareProvider\nCONDUCTS_SESSION -N- TelemedicineSession\n\nPRESCRIBES_MEDICATION -1- HealthcareProvider\nPRESCRIBES_MEDICATION -N- Medication\n\nHAS_LAB_RESULTS -1- MedicalHistory\nHAS_LAB_RESULTS -N- LabResult\n\nHAS_DIAGNOSTIC_REPORT -1- MedicalHistory\nHAS_DIAGNOSTIC_REPORT -N- DiagnosticReport\n\nCREATES_REPORT -1- HealthcareProvider\nCREATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Parcel Delivery Management System shall allow:\n- Advanced parcel tracking.\n- Efficient management of returns.\n- Real-time parcel inventory control.\n- Seamless customer support interactions.\n- Secure and user-friendly payment processing.\nDesign a entity relationship diagram for the Parcel Delivery Management System.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  customer_status\n}\n\nentity Parcel {\n  parcel_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  weight\n  dimensions\n  status\n  tracking_number\n  shipment_date\n  delivery_date\n  parcel_status\n}\n\nentity Tracking {\n  tracking_id <<key>>\n  parcel_id <<foreign>>\n  location\n  status\n  timestamp\n}\n\nentity ReturnRequest {\n  return_id <<key>>\n  parcel_id <<foreign>>\n  request_date\n  reason\n  return_status\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  location\n  available_space\n  inventory_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  customer_id <<foreign>>\n  amount\n  payment_method\n  payment_date\n  payment_status\n}\n\nentity SupportTicket {\n  ticket_id <<key>>\n  customer_id <<foreign>>\n  parcel_id <<foreign>>\n  issue_description\n  ticket_status\n  resolution_date\n}\n\nrelationship MANAGES_PARCEL {\n}\nrelationship HAS_TRACKING {\n}\nrelationship INITIATES_RETURN {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship SUBMITS_PAYMENT {\n}\nrelationship HAS_PAYMENT {\n}\nrelationship RAISES_SUPPORT_TICKET {\n}\n\nMANAGES_PARCEL -1- Customer\nMANAGES_PARCEL -N- Parcel\n\nHAS_TRACKING -1- Parcel\nHAS_TRACKING -1- Tracking\n\nINITIATES_RETURN -1- Customer\nINITIATES_RETURN -N- ReturnRequest\n\nASSOCIATED_WITH -1- Inventory\nASSOCIATED_WITH -N- Parcel\n\nSUBMITS_PAYMENT -1- Customer\nSUBMITS_PAYMENT -N- Payment\n\nHAS_PAYMENT -1- Parcel\nHAS_PAYMENT -1- Payment\n\nRAISES_SUPPORT_TICKET -1- Customer\nRAISES_SUPPORT_TICKET -N- SupportTicket\n\n@endchen"
    },
    {
        "input": "The Crime Information System includes the following key product functions:\n• User Management\n• Receive Crime Related Notifications\n• Update FIR\n• Create FIR\n• Access Police Station Information\n• Access Crime Database\n• Community Safety Forums\n• Manage Criminal Records\n• Search Criminal Records.\nDesign a entity relationship diagram for the Crime Information System.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  user_type\n  user_status\n}\n\nentity FIR {\n  fir_id <<key>>\n  user_id <<foreign>>\n  police_station_id <<foreign>>\n  crime_date\n  crime_location\n  crime_type\n  fir_status\n  fir_details\n}\n\nentity PoliceStation {\n  station_id <<key>>\n  station_name\n  station_location\n  contact_number\n  station_status\n}\n\nentity Crime {\n  crime_id <<key>>\n  fir_id <<foreign>>\n  crime_description\n  crime_date\n  crime_type\n  crime_status\n}\n\nentity Criminal {\n  criminal_id <<key>>\n  name\n  alias\n  date_of_birth\n  crime_history <<multi>>\n  criminal_status\n}\n\nentity CommunityForum {\n  forum_id <<key>>\n  topic\n  forum_description\n  created_date\n  forum_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_content\n  notification_type\n  notification_date\n  notification_status\n}\n\nrelationship CREATES_FIR {\n}\nrelationship ASSIGNED_TO {\n}\nrelationship DOCUMENTS_CRIME {\n}\nrelationship MANAGES_CRIMINAL_RECORD {\n}\nrelationship SUBSCRIBES_TO_FORUM {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nCREATES_FIR -1- User\nCREATES_FIR -N- FIR\n\nASSIGNED_TO -1- PoliceStation\nASSIGNED_TO -N- FIR\n\nDOCUMENTS_CRIME -1- FIR\nDOCUMENTS_CRIME -N- Crime\n\nMANAGES_CRIMINAL_RECORD -1- PoliceStation\nMANAGES_CRIMINAL_RECORD -N- Criminal\n\nSUBSCRIBES_TO_FORUM -N- User\nSUBSCRIBES_TO_FORUM -N- CommunityForum\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "The Timetable Management System has the following functional requirements:\nUser Registration and Login: The system must allow users to register and log in securely.\nEnroll Student: The system must enable administrators to enroll students and manage their information.\nAllocate Courses to Students: The system must allow administrators to assign courses to students.\nAllocate Courses to Faculty: The system must provide functionality to assign courses to faculty members.\nAdd Faculty Time Preference: The system must allow faculty members to input their preferred time slots for lectures.\nGenerate Timetable: The system must generate timetables based on student courses, faculty preferences, and available resources.\nAllocate Lecture Halls: The system must allocate available lecture halls based on the generated timetable.\nGenerate Course Report: The system must generate reports detailing course allocations and schedules.\nStudent Course Report: The system must provide students with reports showing their enrolled courses and schedules.\nFaculty Course Report: The system must provide faculty with reports detailing their course assignments and schedules.\nDesign a entity relationship diagram for the Timetable Management System.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  user_role\n  user_status\n}\n\nentity Student {\n  student_id <<key>>\n  user_id <<foreign>>\n  enrollment_date\n  student_status\n}\n\nentity Faculty {\n  faculty_id <<key>>\n  user_id <<foreign>>\n  department\n  faculty_status\n}\n\nentity Course {\n  course_id <<key>>\n  course_name\n  course_description\n  department\n  credits\n  course_status\n}\n\nentity FacultyPreference {\n  preference_id <<key>>\n  faculty_id <<foreign>>\n  preferred_time_slots <<multi>>\n  preference_status\n}\n\nentity LectureHall {\n  hall_id <<key>>\n  hall_name\n  capacity\n  resources_available\n  hall_status\n}\n\nentity Timetable {\n  timetable_id <<key>>\n  generated_date\n  semester\n  timetable_status\n}\n\nentity Lecture {\n  lecture_id <<key>>\n  timetable_id <<foreign>>\n  course_id <<foreign>>\n  faculty_id <<foreign>>\n  hall_id <<foreign>>\n  lecture_date\n  lecture_time\n  duration\n  lecture_status\n}\n\nentity Report {\n  report_id <<key>>\n  user_id <<foreign>>\n  report_type\n  report_content\n  generated_date\n  report_status\n}\n\nrelationship REGISTERS_USER {\n}\nrelationship ENROLLS_IN {\n}\nrelationship TEACHES_COURSE {\n}\nrelationship HAS_PREFERENCE {\n}\nrelationship ALLOCATES_HALL {\n}\nrelationship INCLUDES_LECTURE {\n}\nrelationship HAS_LECTURE {\n}\nrelationship CREATES_REPORT {\n}\n\nREGISTERS_USER -1- User\nREGISTERS_USER -N- Student\n\nREGISTERS_USER -1- User\nREGISTERS_USER -N- Faculty\n\nENROLLS_IN -1- Student\nENROLLS_IN -N- Course\n\nTEACHES_COURSE -1- Faculty\nTEACHES_COURSE -N- Course\n\nHAS_LECTURE -1- Course\nHAS_LECTURE -N- Lecture\n\nHAS_PREFERENCE -1- Faculty\nHAS_PREFERENCE -N- FacultyPreference\n\nALLOCATES_HALL -1- LectureHall\nALLOCATES_HALL -N- Lecture\n\nINCLUDES_LECTURE -1- Timetable\nINCLUDES_LECTURE -N- Lecture\n\nCREATES_REPORT -1- User\nCREATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Cricket Stadium Management System:\n1. The system allows fans to access comprehensive information about upcoming events in the stadium, including match schedules, team line-ups, and other relevant details.\n2. Fans can explore different pricing plans for tickets, view seat availability, and securely purchase tickets for their desired events through the system.\n3. The system provides a platform for sponsors to explore available sponsorship options within the stadium, enabling them to contribute to the operations and engage with the cricket community.\n4. Sponsors can track the return on investment (ROI) for their sponsorships through the system, allowing them to evaluate the effectiveness and impact of their contributions.\n Draw a entity relationship diagram for the Cricket Stadium Management System.",
        "output": "@startchen\n\nentity Fan {\n  fan_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  fan_status\n}\n\nentity Event {\n  event_id <<key>>\n  event_name\n  event_date\n  match_schedule\n  team_lineups <<multi>>\n  event_status\n}\n\nentity Ticket {\n  ticket_id <<key>>\n  event_id <<foreign>>\n  seat_number\n  price\n  availability_status\n  purchase_status\n}\n\nentity Sponsor {\n  sponsor_id <<key>>\n  name\n  email\n  phone\n  sponsorship_details\n  sponsor_status\n}\n\nentity Sponsorship {\n  sponsorship_id <<key>>\n  sponsor_id <<foreign>>\n  event_id <<foreign>>\n  sponsorship_amount\n  ROI_metrics\n  sponsorship_status\n}\n\nrelationship BOOKS_TICKET {\n  booking_date\n  payment_status\n}\nrelationship HAS_TICKET {\n}\nrelationship PROVIDES_SPONSORSHIP {\n}\nrelationship SPONSORS_EVENT {\n}\nrelationship TRACKS_ROI {\n}\n\nBOOKS_TICKET -1- Fan\nBOOKS_TICKET -N- Ticket\n\nHAS_TICKET -1- Event\nHAS_TICKET -N- Ticket\n\nPROVIDES_SPONSORSHIP -1- Sponsor\nPROVIDES_SPONSORSHIP -N- Sponsorship\n\nSPONSORS_EVENT -1- Sponsorship\nSPONSORS_EVENT -1- Event\n\nTRACKS_ROI -1- Sponsor\nTRACKS_ROI -N- Sponsorship\n\n@endchen"
    },
    {
        "input": "The Tech E-Commerce system allows customers to browse the catalog of tech goods and repair services offered by Tempest Electronics. Customers can add items to a shopping cart and proceed with the checkout process to purchase products or services. Additionally, customers can review their past orders and cancel any ongoing repair orders if needed. The system provides functionality for managing account details, such as updating personal information and billing details. Customers also have the ability to provide feedback on purchased goods and services. Lastly, the system includes a helpline feature, allowing customers to contact support for inquiries and assistance.\n Design a entity relationship diagram for the Tech E-Commerce System.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  billing_details\n  account_status\n}\n\nentity Product {\n  product_id <<key>>\n  product_name\n  product_description\n  product_price\n  stock_quantity\n  product_status\n}\n\nentity Service {\n  service_id <<key>>\n  service_name\n  service_description\n  service_price\n  service_status\n}\n\nentity ShoppingCart {\n  cart_id <<key>>\n  customer_id <<foreign>>\n  cart_status <<derived>>\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  total_amount\n  order_status\n}\n\nentity RepairOrder {\n  repair_id <<key>>\n  customer_id <<foreign>>\n  service_id <<foreign>>\n  request_date\n  repair_status\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  customer_id <<foreign>>\n  product_id <<foreign>>\n  service_id <<foreign>>\n  feedback_content\n  feedback_date\n  feedback_status\n}\n\nentity SupportTicket {\n  ticket_id <<key>>\n  customer_id <<foreign>>\n  issue_description\n  ticket_status\n  resolution_date\n}\n\nrelationship ADDS_TO_CART {\n}\nrelationship CONTAINS {\n}\nrelationship PLACES_ORDER {\n}\nrelationship INCLUDES_PRODUCT {\n  quantity\n  item_price\n  item_status\n}\nrelationship INCLUDES_SERVICE{\n}\nrelationship REQUESTS_REPAIR {\n}\nrelationship GIVES_FEEDBACK {\n}\nrelationship CREATES_SUPPORT_TICKET {\n}\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nINCLUDES_PRODUCT -1- Order\nINCLUDES_PRODUCT -N- Product\n\nADDS_TO_CART -1- Customer\nADDS_TO_CART -1- ShoppingCart\n\nCONTAINS -1- ShoppingCart\nCONTAINS -N- Product\n\nREQUESTS_REPAIR -1- Customer\nREQUESTS_REPAIR -N- RepairOrder\n\nINCLUDES_SERVICE -1- RepairOrder\nINCLUDES_SERVICE -N- Service\n\nGIVES_FEEDBACK -1- Customer\nGIVES_FEEDBACK -N- Feedback\n\nCREATES_SUPPORT_TICKET -1- Customer\nCREATES_SUPPORT_TICKET -N- SupportTicket\n\n@endchen"
    },
    {
        "input": "Give entity relationship diagram for Clinic Management System:\n\n1. The system must allow for patient registration and management of patient information, including personal details, medical history, and contact information.\n\n2. The system must support appointment scheduling, allowing patients to book appointments, and must send reminders to both patients and staff.\n\n3. The system must facilitate billing and invoicing, generating accurate bills based on services provided and tracking payment statuses.\n\n4. The system must enable staff collaboration and communication, allowing healthcare professionals to share information and communicate seamlessly within the system.\n\n5. The system must generate reports and analytics based on patient data, appointments, and billing information, providing insights for operational improvement.",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  date_of_birth\n  email\n  password\n  phone\n  address\n  medical_history\n  contact_information\n  patient_status\n}\n\nentity Appointment {\n  appointment_id <<key>>\n  patient_id <<foreign>>\n  staff_id <<foreign>>\n  appointment_date\n  appointment_time\n  appointment_status\n  reminder_status\n}\n\nentity Billing {\n  bill_id <<key>>\n  patient_id <<foreign>>\n  appointment_id <<foreign>>\n  services_provided\n  total_amount\n  payment_status\n  bill_status\n}\n\nentity Staff {\n  staff_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  staff_status\n}\n\nentity Report {\n  report_id <<key>>\n  report_type\n  report_content\n  generated_date\n  report_status <<derived>>\n}\n\nrelationship REGISTERS_PATIENT {\n}\nrelationship SCHEDULES_APPOINTMENT {\n}\nrelationship GENERATES_BILL {\n}\nrelationship COMMUNICATES_WITH {\n  message_content\n  message_date\n  message_status\n}\nrelationship GENERATES_REPORT {\n}\n\nREGISTERS_PATIENT -1- Staff\nREGISTERS_PATIENT -N- Patient\n\nSCHEDULES_APPOINTMENT -1- Patient\nSCHEDULES_APPOINTMENT -N- Appointment\n\nGENERATES_BILL -1- Appointment\nGENERATES_BILL -1- Billing\n\nCOMMUNICATES_WITH -1- Staff\nCOMMUNICATES_WITH -N- Staff\n\nGENERATES_REPORT -1- Billing\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Give and ERD for this system. Law Keeper - Law Firm Management System:\nThe system allows lawyers to create, update, and manage case files, ensuring easy access to case-related documents and information. Users can create and assign tasks related to cases, ensuring all relevant deadlines and responsibilities are tracked and completed. LawKeeper provides a repository for research documents and legal references, allowing users to search and manage these materials to assist with case preparation.\nThe system facilitates seamless communication between lawyers and clients, offering a centralized platform to provide updates, share documents, and answer queries. LawKeeper also helps users monitor and manage critical case deadlines by providing alerts and reminders to ensure tasks are completed on time.\nAdditionally, the system tracks billable hours for each client and enables both clients and lawyers to review billing details, ensuring transparency in transactions and payments.\nClients can also file new cases and share relevant case documents through the platform.",
        "output": "@startchen\n\nentity Lawyer {\n  lawyer_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n  lawyer_status\n}\n\nentity Client {\n  client_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  client_status\n}\n\nentity Case {\n  case_id <<key>>\n  client_id <<foreign>>\n  lawyer_id <<foreign>>\n  case_title\n  case_description\n  case_status\n  case_deadline\n  start_date\n  end_date\n}\n\nentity Task {\n  task_id <<key>>\n  case_id <<foreign>>\n  task_name\n  task_description\n  due_date\n  assigned_to\n  task_status\n}\n\nentity ResearchMaterial {\n  material_id <<key>>\n  title\n  description\n  upload_date\n  material_type\n  associated_cases <<multi>>\n  material_status\n}\n\nentity Billing {\n  bill_id <<key>>\n  client_id <<foreign>>\n  case_id <<foreign>>\n  hours_billed\n  billing_amount\n  payment_status\n  bill_status\n}\n\nrelationship MANAGES_CASE {\n}\nrelationship HAS_TASK {\n}\nrelationship SHARES_MATERIAL {\n}\nrelationship COMMUNICATES_WITH {\n  communication_date\n  message_content\n  communication_status\n}\nrelationship TRACKS_BILLABLE_HOURS {\n}\nrelationship FILES_CASE {\n}\n\nMANAGES_CASE -1- Lawyer\nMANAGES_CASE -N- Case\n\nFILES_CASE -1- Client\nFILES_CASE -N- Case\n\nHAS_TASK -1- Case\nHAS_TASK -N- Task\n\nSHARES_MATERIAL -1- Lawyer\nSHARES_MATERIAL -N- ResearchMaterial\n\nCOMMUNICATES_WITH -1- Lawyer\nCOMMUNICATES_WITH -N- Client\n\nTRACKS_BILLABLE_HOURS -1- Billing\nTRACKS_BILLABLE_HOURS -N- Case\n\n@endchen"
    },
    {
        "input": "Design a entity relationship diagram for the Online Shopping System. The system must allow customers to browse products, add items to their shopping cart, and proceed with the checkout process. Customers should be able to create an account, manage their profile, and view order history. The system must support secure payment processing and provide order tracking functionality. Additionally, the system should allow administrators to manage product listings, view sales reports, and process customer inquiries.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  account_status\n}\n\nentity Product {\n  product_id <<key>>\n  product_name\n  product_description\n  product_price\n  stock_quantity\n  product_status\n}\n\nentity ShoppingCart {\n  cart_id <<key>>\n  customer_id <<foreign>>\n  cart_status <<derived>>\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  total_amount\n  order_status\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  admin_status\n}\n\nentity Inquiry {\n  inquiry_id <<key>>\n  customer_id <<foreign>>\n  inquiry_date\n  inquiry_content\n  inquiry_status\n}\n\nrelationship ADDS_TO_CART {\n}\nrelationship CONTAINS {\n}\nrelationship PLACES_ORDER {\n}\nrelationship INCLUDES_PRODUCT {\n}\nrelationship MANAGES_PRODUCTS {\n}\nrelationship HANDLES_INQUIRY {\n}\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nINCLUDES_PRODUCT -1- Order\nINCLUDES_PRODUCT -N- Product\n\nADDS_TO_CART -1- Customer\nADDS_TO_CART -1- ShoppingCart\n\nCONTAINS -1- ShoppingCart\nCONTAINS -N- Product\n\nMANAGES_PRODUCTS -1- Administrator\nMANAGES_PRODUCTS -N- Product\n\nHANDLES_INQUIRY -1- Administrator\nHANDLES_INQUIRY -N- Inquiry\n\n@endchen"
    },
    {
        "input": "Design a ER diagram for an automatic teller machine (ATM) with the following requirements:\n1. The ATM system must check the validity of the inserted ATM card.\n2. The ATM system must validate the PIN number entered by the customer.\n3. The ATM system must ensure that no more than $250 is dispensed against any ATM card within a 24-hour period.\n4. The ATM system must be written in C++.\n5. The ATM system must communicate with the bank using 256-bit encryption.\n6. The ATM system must validate an ATM card in three seconds or less.\n7. The ATM system must validate a PIN in three seconds or less.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  phone\n  address\n  customer_status\n}\n\nentity ATMCard {\n  card_id <<key>>\n  customer_id <<foreign>>\n  card_number\n  expiry_date\n  pin <<encrypted>>\n  daily_limit <<derived>>\n  card_status\n}\n\nentity Transaction {\n  transaction_id <<key>>\n  card_id <<foreign>>\n  transaction_date\n  transaction_time\n  transaction_amount\n  transaction_type\n  transaction_status\n}\n\nentity Account {\n  account_id <<key>>\n  customer_id <<foreign>>\n  account_number\n  account_type\n  account_balance\n  account_status\n}\n\nentity ATM {\n  atm_id <<key>>\n  location\n  encryption_method\n  atm_status\n}\n\nrelationship OWNS_CARD {\n}\nrelationship USES_CARD {\n}\nrelationship PERFORMS_TRANSACTION {\n}\nrelationship LINKED_TO {\n}\n\nOWNS_CARD -1- Customer\nOWNS_CARD -N- ATMCard\n\nUSES_CARD -N- Transaction\nUSES_CARD -1- ATMCard\n\nPERFORMS_TRANSACTION -1- ATM\nPERFORMS_TRANSACTION -N- Transaction\n\nLINKED_TO -1- Customer\nLINKED_TO -N- Account\n\n@endchen"
    },
    {
        "input": "Design a ER diagram for a hotel management system with the following requirements:\n1. The system must allow guests to check-in and check-out of the hotel.\n2. The system must provide room booking functionality, allowing guests to reserve rooms for their stay.\n3. The system must support room service requests, enabling guests to order food and other services to their rooms.\n4. The system must generate invoices for guests, detailing their stay and any additional charges.\n5. The system must allow hotel staff to manage room availability, view guest information, and process payments.",
        "output": "@startchen\n\nentity Guest {\n  guest_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  guest_status\n}\n\nentity Room {\n  room_id <<key>>\n  room_number\n  room_type\n  room_rate\n  availability_status\n  room_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  guest_id <<foreign>>\n  room_id <<foreign>>\n  check_in_date\n  check_out_date\n  booking_status\n}\n\nentity RoomService {\n  service_id <<key>>\n  booking_id <<foreign>>\n  service_date\n  service_description\n  service_charge\n  service_status\n}\n\nentity Invoice {\n  invoice_id <<key>>\n  booking_id <<foreign>>\n  issue_date\n  total_amount\n  payment_status\n  invoice_status\n}\n\nentity Staff {\n  staff_id <<key>>\n  name\n  role\n  email\n  password\n  phone\n  staff_status\n}\n\nrelationship ALLOCATES_ROOM {\n}\nrelationship RESERVES_ROOM {\n}\nrelationship REQUESTS_SERVICE {\n}\nrelationship GENERATES_INVOICE {\n}\nrelationship MANAGES_BOOKING {\n}\nrelationship MAINTAINS_ROOM {\n}\n\nRESERVES_ROOM -1- Guest\nRESERVES_ROOM -N- Booking\n\nALLOCATES_ROOM -1- Booking\nALLOCATES_ROOM -N- Room\n\nREQUESTS_SERVICE -1- Booking\nREQUESTS_SERVICE -N- RoomService\n\nGENERATES_INVOICE -1- Booking\nGENERATES_INVOICE -1- Invoice\n\nMANAGES_BOOKING -1- Staff\nMANAGES_BOOKING -N- Booking\n\nMAINTAINS_ROOM -1- Staff\nMAINTAINS_ROOM -N- Room\n\n@endchen"
    },
    {
        "input": "Design a ER diagram for the Altered State University (ASU) Registration System with the following requirements:\n1. Professors indicate which courses they will teach online.\n2. A course catalog can be printed.\n3. Allow students to select online four courses for the upcoming semester.\n4. No course may have more than 10 students or less than 3 students.\n5. When the registration is completed, the system sends information to the billing system.\n6. Professors can obtain course rosters online.\n7. Students can add or drop classes online.",
        "output": "@startchen\n\nentity Professor {\n  professor_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  professor_status\n}\n\nentity Student {\n  student_id <<key>>\n  name{\n  Fname\n  Lname\n}\n  email\n  password\n  phone\n  address\n  semester\n  credits_attended\n  credits_remaining\n  gpa\n  student_status\n}\n\nentity Course {\n  course_id <<key>>\n  course_name\n  credit_hours\n  course_description\n  max_students <<derived>>\n  min_students <<derived>>\n  course_status\n}\n\nentity Registration {\n  registration_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  registration_date\n  registration_status\n}\n\nentity Billing {\n  billing_id <<key>>\n  student_id <<foreign>>\n  total_amount\n  billing_date\n  payment_status\n  billing_status\n}\n\nrelationship TEACHES_COURSE {\n}\nrelationship REGISTERS_FOR_COURSE {\n}\nrelationship GENERATES_BILLING {\n}\nrelationship RELATES_TO_COURSE {\n}\n\nTEACHES_COURSE -1- Professor\nTEACHES_COURSE -N- Course\n\nREGISTERS_FOR_COURSE -1- Student\nREGISTERS_FOR_COURSE -N- Registration\n\nGENERATES_BILLING -1- Registration\nGENERATES_BILLING -1- Billing\n\nRELATES_TO_COURSE -1- Registration\nRELATES_TO_COURSE -1- Course\n\n@endchen"          
    },



    {
        "input": "Design a ER diagram for the Cafe Management System with the following requirements:\n1. The system must allow staff to log in with existing credentials or create a new account for access.\n2. The system must provide a centralized dashboard where staff can view key metrics, notifications, and navigate to other functionalities.\n3. The system must enable staff to add, update, and delete items in the inventory, track stock levels, set reorder points, and automate restocking processes.\n4. The system must facilitate the creation, modification, and deletion of menu items, allowing customization of menu categories and pricing. Menu images should also be available.\n5. The system must streamline the order placement process for customers, providing order confirmation and status updates to both customers and staff.\n6. The system must maintain a database of customer profiles, capturing and storing customer preferences and order history.\n7. The system must generate comprehensive graphs (such as Area Chart and Bar Chart) on sales and customer trends. Jasper reports must be used to produce receipts for customers.",
        "output": "@startchen\n\nentity Staff {\n  staff_id <<key>>\n  name\n  email\n  password\n  role\n  staff_status\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  item_name\n  stock_level\n  reorder_point\n  restock_status\n  inventory_status <<derived>>\n}\n\nentity MenuItem {\n  menu_item_id <<key>>\n  inventory_id <<foreign>>\n  menu_item_name\n  category\n  price\n  image_url\n  menu_item_status <<derived>>\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  total_amount\n  order_status\n}\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  preferences <<multi>>\n  order_history <<multi>>\n  customer_status\n}\n\nentity Report {\n  report_id <<key>>\n  report_type\n  report_date\n  report_content\n  graph_type\n  report_status\n}\n\nrelationship MANAGES_INVENTORY {\n}\nrelationship MANAGES_MENU_ITEM {\n}\nrelationship PLACES_ORDER {\n  quantity\n  detail_status\n}\nrelationship CONTAINS_MENU_ITEM {\n}\nrelationship GENERATES_REPORT {\n}\n\nMANAGES_INVENTORY -1- Staff\nMANAGES_INVENTORY -N- Inventory\n\nMANAGES_MENU_ITEM -1- Staff\nMANAGES_MENU_ITEM -N- MenuItem\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nCONTAINS_MENU_ITEM -1- Order\nCONTAINS_MENU_ITEM -N- MenuItem\n\nGENERATES_REPORT -1- Staff\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design a ER diagram for a Business Process Outsourcing (BPO) Management System with the following requirements:\n1. The system must provide a personalized profile for each user, ensuring security for individual accounts.\n2. The system must allow users to personalize their account and change their password as needed.\n3. The system must enable clients to post project requests with specific requirements for Business Process Outsourcing (BPO) organizations to choose from.\n4. The system must allow BPO organizations to search for and respond to project requests posted by clients.\n5. The system must facilitate the transfer of documents required by the BPO organization, allowing the receiver to download them.\n6. The system must provide clients with constant updates on the progress of their project or work.\n7. The system must enable clients to check the quality of their product or service and request any necessary modifications.\n8. The system must allow BPO organizations to upload the final product or service for further procedures such as payment or shipment.\n9. The system must facilitate payments from clients to BPO organizations at the end of their agreement.\n10. The system must ensure that the product or service is delivered to the client after completion.\n11. The system must allow clients to rate the services provided by the BPO organization.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  user_role\n  user_status\n}\n\nentity Client {\n  organization_name\n  client_status\n}\n\nentity BPOOrganization {\n  specialization\n  bpo_status\n}\n\nUser ->- d { Client, BPOOrganization }\n\nentity ProjectRequest {\n  project_id <<key>>\n  client_id <<foreign>>\n  project_title\n  project_description\n  requirements\n  deadline\n  project_status\n}\n\nentity Document {\n  document_id <<key>>\n  project_id <<foreign>>\n  document_name\n  upload_date\n  download_date\n  document_status\n}\n\nentity ProgressUpdate {\n  update_id <<key>>\n  project_id <<foreign>>\n  update_content\n  update_date\n  update_status\n}\n\nentity FinalProduct {\n  product_id <<key>>\n  project_id <<foreign>>\n  upload_date\n  product_description\n  product_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  project_id <<foreign>>\n  amount\n  payment_date\n  payment_status\n}\n\nentity Rating {\n  rating_id <<key>>\n  client_id <<foreign>>\n  bpo_id <<foreign>>\n  rating_value\n  feedback\n  rating_date\n  rating_status\n}\n\nrelationship POSTS_PROJECT {\n}\nrelationship RESPONDS_TO_PROJECT{\n}\nrelationship TRANSFERS_DOCUMENT {\n}\nrelationship PROVIDES_UPDATE {\n}\nrelationship RELATES_TO {\n}\nrelationship HAS_PAYMENT {\n}\nrelationship RATES_SERVICE {\n}\n\nPOSTS_PROJECT -1- Client\nPOSTS_PROJECT -N- ProjectRequest\n\nRESPONDS_TO_PROJECT -1- BPOOrganization\nRESPONDS_TO_PROJECT -N- ProjectRequest\n\nTRANSFERS_DOCUMENT -1- ProjectRequest\nTRANSFERS_DOCUMENT -N- Document\n\nPROVIDES_UPDATE -1- ProjectRequest\nPROVIDES_UPDATE -N- ProgressUpdate\n\nRELATES_TO -1- ProjectRequest\nRELATES_TO -N- FinalProduct\n\nHAS_PAYMENT -1- ProjectRequest\nHAS_PAYMENT -1- Payment\n\nRATES_SERVICE -1- Client\nRATES_SERVICE -N- Rating\n\n@endchen"
    },
    {
        "input": "Design a ER diagram for the information system of the student office of a university. The system should support the following activities:\n• Many important administrative activities of a university are processed by the student office. Students can register for studies (matriculation), enroll, and withdraw from studies here. Matriculation involves enrolling, that is, registering for studies.\n• Students receive their certificates from the student office. The certificates are printed out by an employee. Lecturers send grading information to the student office. The notification system then informs the students automatically that a certificate has been issued.\n• There is a differentiation between two types of employees in the student office: a) those that are exclusively occupied with the administration of student data (service employee, or ServEmp), and b) those that fulfill the remaining tasks (administration employee, or AdminEmp), whereas all employees (ServEmp and AdminEmp) can issue information.\n• Administration employees issue certificates when the students come to collect them. Administration employees also create courses. When creating courses, they can reserve lecture halls.",
        "output": "@startchen\n\nentity Employee {\n  employee_id <<key>>\n  name\n  email\n  password\n  phone\n  employee_status\n}\n\nentity ServEmp {\n  service_role_description\n}\n\nentity AdminEmp {\n  admin_role_description\n}\n\nEmployee ->- o { ServEmp, AdminEmp }\n\nentity Student {\n  student_id <<key>>\n  name\n  date_of_birth\n  email\n  password\n  phone\n  address\n  matriculation_status\n  enrollment_status\n}\n\nentity Course {\n  course_id <<key>>\n  course_name\n  course_description\n  credits\n  semester\n  course_status\n}\n\nentity LectureHall {\n  hall_id <<key>>\n  hall_name\n  capacity\n  resources_available\n  hall_status\n}\n\nentity Certificate {\n  certificate_id <<key>>\n  student_id <<foreign>>\n  issued_by <<foreign>>\n  issue_date\n  certificate_type\n  certificate_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  student_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship MANAGES_DATA {\n}\nrelationship ENROLLS_IN {\n  enrollment_date\n  enrollment_status\n}\nrelationship ISSUES_CERTIFICATE {\n}\nrelationship CREATES_COURSE {\n}\nrelationship RESERVES_HALL {\n}\nrelationship SENDS_NOTIFICATION {\n}\n\nMANAGES_DATA -1- ServEmp\nMANAGES_DATA -N- Student\n\nENROLLS_IN -1- Student\nENROLLS_IN -N- Course\n\nISSUES_CERTIFICATE -1- Employee\nISSUES_CERTIFICATE -N- Certificate\n\nCREATES_COURSE -1- AdminEmp\nCREATES_COURSE -N- Course\n\nRESERVES_HALL -1- Course\nRESERVES_HALL -1- LectureHall\n\nSENDS_NOTIFICATION -1- Certificate\nSENDS_NOTIFICATION -1- Notification\n\n@endchen"
    },



    {
        "input": "Design a ER diagram for the Information System of a University. The system should support the following activities:\n• A university consists of multiple faculties which are composed of various institutes. Each faculty and each institute has a name. An address is known for each institute.\n• Each faculty is led by a dean, who is an employee of the university.\n• The total number of employees is known. Employees have a social security number, a name, and an e-mail address. There is a distinction between research and administrative personnel.\n• Research associates are assigned to at least one institute. The field of study of each research associate is known. Furthermore, research associates can be involved in projects for a certain number of hours, and the name, starting date, and end date of the projects are known. Some research associates teach courses. They are called lecturers.\n• Courses have a unique number (ID), a name, and a weekly duration in hours.",
        "output": "@startchen\n\nentity University {\n  university_id <<key>>\n  university_name\n  university_address\n  university_status\n}\n\nentity Faculty {\n  faculty_id <<key>>\n  university_id <<foreign>>\n  faculty_name\n  faculty_status\n}\n\nentity Institute {\n  institute_id <<key>>\n  faculty_id <<foreign>>\n  institute_name\n  institute_address\n  institute_status\n}\n\nentity Employee {\n  employee_id <<key>>\n  ssn\n  name\n  password\n  email\n  employee_status\n}\n\nentity ResearchAssociate {\n  field_of_study\n}\n\nentity AdministrativeStaff {\n  role\n}\n\nentity Dean {\n  term_start\n  term_end\n  dean_status\n}\n\nEmployee ->- Dean\nEmployee ->- o { ResearchAssociate, AdministrativeStaff }\n\nentity Project {\n  project_id <<key>>\n  project_name\n  start_date\n  end_date\n  project_status\n}\n\nentity Course {\n  course_id <<key>>\n  course_name\n  weekly_hours\n  course_status\n}\n\nrelationship PART_OF_UNIVERSITY {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship LED_BY {\n}\nrelationship ASSIGNED_TO {\n  assignment_hours\n}\nrelationship TEACHES_COURSE {\n}\nrelationship WORKS_ON_PROJECT {\n  project_hours\n}\n\nPART_OF_UNIVERSITY -N- Faculty\nPART_OF_UNIVERSITY -1- University\n\nASSOCIATED_WITH -1- Faculty\nASSOCIATED_WITH -N- Institute\n\nLED_BY -1- Faculty\nLED_BY -1- Dean\n\nASSIGNED_TO -1- ResearchAssociate\nASSIGNED_TO -N- Institute\n\nTEACHES_COURSE -1- ResearchAssociate\nTEACHES_COURSE -N- Course\n\nWORKS_ON_PROJECT -1- ResearchAssociate\nWORKS_ON_PROJECT -N- Project\n\n@endchen"
    },
    {
        "input": "The purpose of the Legal Eagle Case Management System is to provide a comprehensive and efficient platform for legal professionals, case managers, and clients to manage legal cases seamlessly. The system aims to streamline various aspects of case management, including case creation, status tracking, updates, client communication, reports and analytics generation, legal research, and document management. By offering these functionalities, the system enhances collaboration, communication, and decision-making within legal organizations, contributing to improved case outcomes. Design a ER diagram for the Legal Eagle Case Management System.",
        "output": "@startchen\n\nentity LegalProfessional {\n  professional_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n  role\n  professional_status\n}\n\nentity Client {\n  client_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  client_status\n}\n\nentity Case {\n  case_id <<key>>\n  client_id <<foreign>>\n  assigned_to <<foreign>>\n  case_title\n  case_description\n  case_status\n  creation_date\n  last_update\n}\n\nentity Document {\n  document_id <<key>>\n  case_id <<foreign>>\n  document_title\n  document_type\n  upload_date\n  document_status\n}\n\nentity Update {\n  update_id <<key>>\n  case_id <<foreign>>\n  update_date\n  update_content\n  update_status\n}\n\nentity Report {\n  report_id <<key>>\n  case_id <<foreign>>\n  report_date\n  report_type\n  report_content\n  report_status\n}\n\nentity LegalResearch {\n  research_id <<key>>\n  case_id <<foreign>>\n  research_topic\n  findings\n  research_date\n  research_status\n}\n\nrelationship MANAGES_CASE {\n}\nrelationship FILES_CASE {\n}\nrelationship HAS_UPDATES {\n}\nrelationship COMMUNICATES_WITH {\n  communication_date\n  communication_type\n  message_content\n  communication_status\n}\nrelationship GENERATES_REPORT {\n}\nrelationship REFERENCES_DOCUMENT {\n}\nrelationship PERFORMS_RESEARCH {\n}\n\nMANAGES_CASE -1- LegalProfessional\nMANAGES_CASE -N- Case\n\nFILES_CASE -1- Client\nFILES_CASE -N- Case\n\nHAS_UPDATES -1- Case\nHAS_UPDATES -N- Update\n\nCOMMUNICATES_WITH -1- LegalProfessional\nCOMMUNICATES_WITH -N- Client\n\nGENERATES_REPORT -N- Case\nGENERATES_REPORT -N- Report\n\nREFERENCES_DOCUMENT -N- Case\nREFERENCES_DOCUMENT -N- Document\n\nPERFORMS_RESEARCH -1- LegalProfessional\nPERFORMS_RESEARCH -N- LegalResearch\n\n@endchen"
    },
    {
        "input": "TimeCraft is designed to revolutionize the parcel delivery experience, targeting major delivery companies such as FedEx and DHL. By leveraging technology, it aims to simplify parcel handling for senders, receivers, and delivery companies. The primary objectives of TimeCraft include improving parcel tracking accuracy, reducing rough handling issues, and empowering customers and delivery companies with more control and real-time information. Give ER diagram for the TimeCraft Parcel Management System.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  customer_status\n}\n\nentity Parcel {\n  parcel_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  weight\n  dimensions\n  status\n  tracking_number\n  dispatch_date\n  delivery_date\n  parcel_status <<derived>>\n}\n\nentity DeliveryCompany {\n  company_id <<key>>\n  company_name\n  contact_number\n  company_status\n}\n\nentity DeliveryAgent {\n  agent_id <<key>>\n  company_id <<foreign>>\n  name\n  email\n  password\n  phone\n  agent_status\n}\n\nentity HandlingIssue {\n  issue_id <<key>>\n  parcel_id <<foreign>>\n  reported_by\n  issue_description\n  issue_date\n  resolution_status\n}\n\nentity ControlCenter {\n  center_id <<key>>\n  location\n  capacity <<derived>>\n  resources_available\n  center_status\n}\n\nrelationship SENDS_PARCEL {\n  location\n  status\n  timestamp\n}\nrelationship RECEIVES_PARCEL {\n  location\n  status\n  timestamp\n}\nrelationship MANAGES_PARCEL {\n}\nrelationship HAS_AGENT {\n}\nrelationship ASSIGNED_TO {\n}\nrelationship REPORTS_ISSUE {\n}\nrelationship LOCATED_AT {\n}\n\nSENDS_PARCEL -1- Customer\nSENDS_PARCEL -N- Parcel\n\nRECEIVES_PARCEL -1- Customer\nRECEIVES_PARCEL -N- Parcel\n\nMANAGES_PARCEL -1- DeliveryCompany\nMANAGES_PARCEL -N- Parcel\n\nHAS_AGENT -1- DeliveryCompany\nHAS_AGENT -N- DeliveryAgent\n\nASSIGNED_TO -1- DeliveryAgent\nASSIGNED_TO -N- Parcel\n\nREPORTS_ISSUE -1- Customer\nREPORTS_ISSUE -N- HandlingIssue\n\nLOCATED_AT -N- Parcel\nLOCATED_AT -1- ControlCenter\n\n@endchen"
    },
    {
        "input": "The Employee Management System (EMS) is an innovative platform designed to streamline the management of employee information. EMS offers features like real-time tracking of attendance, salary management, and automated reporting tools to empower HR teams with seamless data management and decision-making. Design a ER diagram for the Employee Management System.",
        "output": "@startchen\n\nentity Employee {\n  employee_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  department_id <<foreign>>\n  designation\n  join_date\n  employee_status\n}\n\nentity Department {\n  department_id <<key>>\n  department_name\n  manager_id <<foreign>>\n  department_status\n}\n\nentity Attendance {\n  attendance_id <<key>>\n  employee_id <<foreign>>\n  attendance_date\n  check_in_time\n  check_out_time\n  attendance_status\n}\n\nentity Salary {\n  salary_id <<key>>\n  employee_id <<foreign>>\n  basic_pay\n  bonuses\n  deductions\n  net_pay <<derived>>\n  payment_date\n  salary_status\n}\n\nentity Report {\n  report_id <<key>>\n  generated_by <<foreign>>\n  report_type\n  report_date\n  report_content\n  report_status\n}\n\nrelationship BELONGS_TO {\n}\nrelationship RECORDS_ATTENDANCE {\n}\nrelationship HAS_SALARY {\n}\nrelationship CREATES_REPORT {\n}\n\nBELONGS_TO -N- Employee\nBELONGS_TO -1- Department\n\nRECORDS_ATTENDANCE -1- Employee\nRECORDS_ATTENDANCE -N- Attendance\n\nHAS_SALARY -1- Employee\nHAS_SALARY -1- Salary\n\nCREATES_REPORT -1- Department\nCREATES_REPORT -N- Report\n\n@endchen" 
    },
    {
        "input": "RoboCop Crime Information System aims to enhance public safety and facilitate law enforcement by providing a centralized platform for accessing and managing crime-related information. The system offers up-to-date crime statistics, user management, crime-related notifications, FIR (First Information Report) handling, access to nearest police station information, a comprehensive crime database, community safety forums, and tools for law enforcement to manage and search criminal records. Design a ER diagram for the RoboCop Crime Information System.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  role\n  user_status\n}\n\nentity FIR {\n  fir_id <<key>>\n  user_id <<foreign>>\n  police_station_id <<foreign>>\n  crime_date\n  crime_location\n  crime_type\n  fir_description\n  fir_status\n  submission_date\n}\n\nentity PoliceStation {\n  station_id <<key>>\n  station_name\n  station_location\n  contact_number\n  jurisdiction_area\n  station_status\n}\n\nentity Crime {\n  crime_id <<key>>\n  fir_id <<foreign>>\n  crime_date\n  crime_location\n  crime_type\n  crime_description\n  crime_status\n}\n\nentity Criminal {\n  criminal_id <<key>>\n  name\n  alias\n  date_of_birth\n  crime_history <<multi>>\n  criminal_status\n}\n\nentity CommunityForum {\n  forum_id <<key>>\n  topic\n  forum_description\n  created_date\n  forum_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_content\n  notification_type\n  notification_date\n  notification_status\n}\n\nrelationship CREATES_FIR {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship RECORDS_CRIME {\n}\nrelationship MANAGES_CRIMINAL_RECORD {\n}\nrelationship SUBSCRIBES_TO_FORUM {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nCREATES_FIR -1- User\nCREATES_FIR -N- FIR\n\nASSOCIATED_WITH -1- PoliceStation\nASSOCIATED_WITH -N- FIR\n\nRECORDS_CRIME -1- FIR\nRECORDS_CRIME -N- Crime\n\nMANAGES_CRIMINAL_RECORD -1- PoliceStation\nMANAGES_CRIMINAL_RECORD -N- Criminal\n\nSUBSCRIBES_TO_FORUM -N- User\nSUBSCRIBES_TO_FORUM -N- CommunityForum\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "The Anywhere Grocery Store Management System is an automated solution designed to streamline key operations in grocery stores, addressing challenges like inventory control, sales processing, and customer service inefficiencies. The system integrates inventory management, point of sale operations, supplier management, customer relationship management, and online shopping with delivery into a cohesive platform. By automating these processes, it improves accuracy, speeds up transactions, and enhances decision-making, ultimately boosting operational efficiency and customer satisfaction. Design a ER diagram for the Anywhere Grocery Store Management System.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  customer_status\n}\n\nentity StoreManager {\n  manager_id <<key>>\n  name\n  email\n  password\n  phone\n  role\n  manager_status\n}\n\nentity Product {\n  product_id <<key>>\n  product_name\n  product_description\n  category\n  price\n  stock_quantity\n  reorder_level\n  product_status\n}\n\nentity Supplier {\n  supplier_id <<key>>\n  name\n  contact_info\n  address\n  supply_status\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  total_amount\n  order_status\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  product_id <<foreign>>\n  stock_level\n  last_updated\n  inventory_status <<derived>>\n}\n\nentity Sale {\n  sale_id <<key>>\n  customer_id <<foreign>>\n  sale_date\n  total_amount\n  sale_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  order_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_method\n  payment_status\n}\n\nrelationship PLACES_ORDER {\n  delivery_address\n  delivery_date\n  delivery_status\n}\nrelationship INCLUDES_PRODUCT {\n}\nrelationship SUPPLIES_PRODUCT {\n}\nrelationship MANAGES_INVENTORY {\n}\nrelationship HAS_PAYMENT {\n}\nrelationship RECORDS_SALE {\n}\nrelationship MANAGES_PRODUCT {\n}\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nINCLUDES_PRODUCT -1- Order\nINCLUDES_PRODUCT -N- Product\n\nSUPPLIES_PRODUCT -1- Supplier\nSUPPLIES_PRODUCT -N- Product\n\nMANAGES_INVENTORY -1- StoreManager\nMANAGES_INVENTORY -N- Inventory\n\nHAS_PAYMENT -1- Order\nHAS_PAYMENT -1- Payment\n\nRECORDS_SALE -1- Payment\nRECORDS_SALE -1- Sale\n\nMANAGES_PRODUCT -1- Inventory\nMANAGES_PRODUCT -N- Product\n\n@endchen"
    },
    {
        "input": "The Gym Management System is a centralized software solution designed to streamline gym operations by integrating member management, class scheduling, attendance tracking, payments. It allows gym administrators to manage member registrations, class schedules, and payments, while enabling trainers to access class assignments and track attendance. The system also facilitates communication between members and staff, supports automated payment processing, and ensures real-time updates on inventory. Biometric or card-based attendance tracking and seamless communication tools enhance overall operational efficiency. Design a ER diagram for the Gym Management System.",
        "output": "@startchen\n\nentity Member {\n  member_id <<key>>\n  name\n  email\n  phone\n  address\n  membership_type\n  membership_status\n  join_date\n}\n\nentity Trainer {\n  trainer_id <<key>>\n  name\n  email\n  phone\n  specialization\n  trainer_status\n}\n\nentity Class {\n  class_id <<key>>\n  class_name\n  schedule\n  duration\n  capacity\n  class_status\n}\n\nentity Attendance {\n  attendance_id <<key>>\n  member_id <<foreign>>\n  class_id <<foreign>>\n  attendance_date\n  check_in_time\n  attendance_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  member_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  payment_status\n}\n\nrelationship REGISTERS_FOR_CLASS {\n}\nrelationship ASSIGNED_TO_CLASS {\n}\nrelationship TRACKS_ATTENDANCE {\n}\nrelationship PROCESSES_PAYMENT {\n}\nrelationship COMMUNICATES_WITH {\n  message_content\n  message_date\n  communication_status\n}\n\nREGISTERS_FOR_CLASS -1- Member\nREGISTERS_FOR_CLASS -N- Class\n\nASSIGNED_TO_CLASS -1- Trainer\nASSIGNED_TO_CLASS -N- Class\n\nTRACKS_ATTENDANCE -1- Member\nTRACKS_ATTENDANCE -N- Attendance\n\nPROCESSES_PAYMENT -1- Member\nPROCESSES_PAYMENT -N- Payment\n\nCOMMUNICATES_WITH -N- Member\nCOMMUNICATES_WITH -N- Trainer\n\n@endchen"
    },
    {
        "input": "The Time Table Generating Management System is a comprehensive software solution designed to automate the creation and management of timetables in educational institutions. By utilizing intelligent algorithms, the system optimizes resource allocation, minimizes scheduling conflicts, and enhances productivity. The System allows administrators to enroll students, allocate courses to both students and faculty, and generate optimized timetables. Faculty members can input time preferences, while students can view their course schedules. The system also automatically allocates lecture halls and generates reports for both students and faculty, detailing their assigned courses and schedules. Design a ER diagram for the Time Table Generating Management System.",
        "output": "@startchen\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  role\n  admin_status\n}\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  enrollment_date\n  student_status\n}\n\nentity Faculty {\n  faculty_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n  faculty_status\n}\n\nentity Course {\n  course_id <<key>>\n  course_name\n  course_description\n  credit_hours\n  department\n  course_status\n}\n\nentity FacultyPreference {\n  preference_id <<key>>\n  faculty_id <<foreign>>\n  preferred_time_slots <<multi>>\n  preference_status\n}\n\nentity LectureHall {\n  hall_id <<key>>\n  hall_name\n  capacity\n  resources_available\n  hall_status\n}\n\nentity Timetable {\n  timetable_id <<key>>\n  generated_date\n  semester\n  timetable_status\n}\n\nentity Lecture {\n  lecture_id <<key>>\n  timetable_id <<foreign>>\n  course_id <<foreign>>\n  faculty_id <<foreign>>\n  hall_id <<foreign>>\n  lecture_date\n  lecture_time\n  duration\n  lecture_status\n}\n\nentity Report {\n  report_id <<key>>\n  generated_for <<foreign>>\n  report_type\n  generated_date\n  report_content\n  report_status\n}\n\nrelationship MANAGES_TIMETABLE {\n}\nrelationship ALLOCATES_COURSE {\n}\nrelationship REGISTERS_FOR_COURSE {\n}\nrelationship TEACHES_COURSE {\n}\nrelationship HAS_LECTURE {\n}\nrelationship INCLUDES_LECTURE {\n}\nrelationship ASSIGNED_TO_HALL {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship INPUTS_PREFERENCE {\n}\n\nMANAGES_TIMETABLE -1- Administrator\nMANAGES_TIMETABLE -N- Timetable\n\nALLOCATES_COURSE -1- Administrator\nALLOCATES_COURSE -N- Course\n\nREGISTERS_FOR_COURSE -1- Student\nREGISTERS_FOR_COURSE -N- Course\n\nTEACHES_COURSE -1- Faculty\nTEACHES_COURSE -N- Course\n\nHAS_LECTURE -1- Course\nHAS_LECTURE -N- Lecture\n\nINPUTS_PREFERENCE -1- Faculty\nINPUTS_PREFERENCE -N- FacultyPreference\n\nASSIGNED_TO_HALL -1- Lecture\nASSIGNED_TO_HALL -1- LectureHall\n\nINCLUDES_LECTURE -1- Timetable\nINCLUDES_LECTURE -N- Lecture\n\nGENERATES_REPORT -1- Timetable\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Cricket stadium management system provides a user-friendly platform for fans to buy tickets, access event information, and stay updated on all the happenings within the stadium. Additionally, the system facilitates seamless sponsorship opportunities for businesses to contribute to the stadium's operations and engage with the cricket community. Draw a ER diagram for the Cricket Stadium Management System.",
        "output": "@startchen\n\nentity Fan {\n  fan_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  fan_status\n}\n\nentity Event {\n  event_id <<key>>\n  event_name\n  event_date\n  match_schedule\n  team_lineups <<multi>>\n  event_status\n}\n\nentity Ticket {\n  ticket_id <<key>>\n  event_id <<foreign>>\n  seat_number\n  price\n  availability_status\n  purchase_status\n}\n\nentity Sponsor {\n  sponsor_id <<key>>\n  name\n  email\n  phone\n  sponsorship_details\n  sponsor_status\n}\n\nentity Sponsorship {\n  sponsorship_id <<key>>\n  sponsor_id <<foreign>>\n  event_id <<foreign>>\n  sponsorship_amount\n  ROI_metrics\n  sponsorship_status\n}\n\nrelationship BOOKS_TICKET {\n  booking_date\n  payment_status\n}\nrelationship HAS_TICKET {\n}\nrelationship PROVIDES_SPONSORSHIP {\n}\nrelationship SPONSORS_EVENT {\n}\nrelationship TRACKS_ROI {\n}\n\nBOOKS_TICKET -1- Fan\nBOOKS_TICKET -N- Ticket\n\nHAS_TICKET -1- Event\nHAS_TICKET -N- Ticket\n\nPROVIDES_SPONSORSHIP -1- Sponsor\nPROVIDES_SPONSORSHIP -N- Sponsorship\n\nSPONSORS_EVENT -1- Sponsorship\nSPONSORS_EVENT -1- Event\n\nTRACKS_ROI -1- Sponsor\nTRACKS_ROI -N- Sponsorship\n\n@endchen"
    },
    {
        "input": "The e-commerce system allows customers to log in and purchase tech goods and tech-related services at an affordable price. The system allows for managing orders, providing feedback, a customer helpline, and a wide catalog of products for meeting customer tech needs. The system also provides support for customers through a dedicated support team. Design a ER diagram for the e-commerce system.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  billing_details\n  account_status\n}\n\nentity Product {\n  product_id <<key>>\n  product_name\n  product_description\n  product_price\n  stock_quantity\n  product_status\n}\n\nentity Service {\n  service_id <<key>>\n  service_name\n  service_description\n  service_price\n  service_status\n}\n\nentity ShoppingCart {\n  cart_id <<key>>\n  customer_id <<foreign>>\n  cart_status <<derived>>\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  total_amount\n  order_status\n}\n\nentity RepairOrder {\n  repair_id <<key>>\n  customer_id <<foreign>>\n  service_id <<foreign>>\n  request_date\n  repair_status\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  customer_id <<foreign>>\n  product_id <<foreign>>\n  service_id <<foreign>>\n  feedback_content\n  feedback_date\n  feedback_status\n}\n\nentity SupportTicket {\n  ticket_id <<key>>\n  customer_id <<foreign>>\n  issue_description\n  ticket_status\n  resolution_date\n}\n\nrelationship ADDS_TO_CART {\n}\nrelationship CONTAINS {\n}\nrelationship PLACES_ORDER {\n}\nrelationship INCLUDES_PRODUCT {\n  quantity\n  item_price\n  item_status\n}\nrelationship INCLUDES_SERVICE{\n}\nrelationship REQUESTS_REPAIR {\n}\nrelationship GIVES_FEEDBACK {\n}\nrelationship CREATES_SUPPORT_TICKET {\n}\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nINCLUDES_PRODUCT -1- Order\nINCLUDES_PRODUCT -N- Product\n\nADDS_TO_CART -1- Customer\nADDS_TO_CART -1- ShoppingCart\n\nCONTAINS -1- ShoppingCart\nCONTAINS -N- Product\n\nREQUESTS_REPAIR -1- Customer\nREQUESTS_REPAIR -N- RepairOrder\n\nINCLUDES_SERVICE -1- RepairOrder\nINCLUDES_SERVICE -N- Service\n\nGIVES_FEEDBACK -1- Customer\nGIVES_FEEDBACK -N- Feedback\n\nCREATES_SUPPORT_TICKET -1- Customer\nCREATES_SUPPORT_TICKET -N- SupportTicket\n\n@endchen"
    },
    {
        "input": "Clinisync automates core clinic operations by providing a platform for managing patient information, scheduling appointments, handling billing, and supporting administrative tasks. The system enables efficient collaboration between staff members and allows for streamlined processes such as patient registration, appointment management, invoicing, and reporting. By facilitating these interactions, Clinisync improves clinic workflows and ensures that both administrative and clinical tasks are efficiently managed. Design a ER diagram for the Clinisync System.",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  date_of_birth\n  email\n  password\n  phone\n  address\n  medical_history\n  contact_information\n  patient_status\n}\n\nentity Appointment {\n  appointment_id <<key>>\n  patient_id <<foreign>>\n  staff_id <<foreign>>\n  appointment_date\n  appointment_time\n  appointment_status\n  reminder_status\n}\n\nentity Billing {\n  bill_id <<key>>\n  patient_id <<foreign>>\n  appointment_id <<foreign>>\n  services_provided\n  total_amount\n  payment_status\n  bill_status\n}\n\nentity Staff {\n  staff_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  staff_status\n}\n\nentity Report {\n  report_id <<key>>\n  report_type\n  report_content\n  generated_date\n  report_status <<derived>>\n}\n\nrelationship REGISTERS_PATIENT {\n}\nrelationship SCHEDULES_APPOINTMENT {\n}\nrelationship GENERATES_BILL {\n}\nrelationship COMMUNICATES_WITH {\n  message_content\n  message_date\n  message_status\n}\nrelationship GENERATES_REPORT {\n}\n\nREGISTERS_PATIENT -1- Staff\nREGISTERS_PATIENT -N- Patient\n\nSCHEDULES_APPOINTMENT -1- Patient\nSCHEDULES_APPOINTMENT -N- Appointment\n\nGENERATES_BILL -1- Appointment\nGENERATES_BILL -1- Billing\n\nCOMMUNICATES_WITH -1- Staff\nCOMMUNICATES_WITH -N- Staff\n\nGENERATES_REPORT -1- Billing\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Lawfully is a comprehensive law firm management information system designed to streamline and automate key operational tasks for law firms. The application allows lawyers to easily access and manage clientele files, track billable hours, organize case files, and manage appointments. The system is also designed to enhance client satisfaction by providing timely updates on case progress, access to essential documents, and visibility into billable hours and lawyer expertise. Additionally, clients can conduct transactions and track their cases through the platform, improving overall communication and transparency. Design a ER diagram for the Lawfully System.",
        "output": "@startchen\n\nentity Lawyer {\n  lawyer_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n  lawyer_status\n}\n\nentity Client {\n  client_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  client_status\n}\n\nentity Case {\n  case_id <<key>>\n  client_id <<foreign>>\n  lawyer_id <<foreign>>\n  case_title\n  case_description\n  case_status\n  case_deadline\n  start_date\n  end_date\n}\n\nentity Task {\n  task_id <<key>>\n  case_id <<foreign>>\n  task_name\n  task_description\n  due_date\n  assigned_to\n  task_status\n}\n\nentity ResearchMaterial {\n  material_id <<key>>\n  title\n  description\n  upload_date\n  material_type\n  associated_cases <<multi>>\n  material_status\n}\n\nentity Billing {\n  bill_id <<key>>\n  client_id <<foreign>>\n  case_id <<foreign>>\n  hours_billed\n  billing_amount\n  payment_status\n  bill_status\n}\n\nrelationship MANAGES_CASE {\n}\nrelationship HAS_TASK {\n}\nrelationship SHARES_MATERIAL {\n}\nrelationship COMMUNICATES_WITH {\n  communication_date\n  message_content\n  communication_status\n}\nrelationship TRACKS_BILLABLE_HOURS {\n}\nrelationship FILES_CASE {\n}\n\nMANAGES_CASE -1- Lawyer\nMANAGES_CASE -N- Case\n\nFILES_CASE -1- Client\nFILES_CASE -N- Case\n\nHAS_TASK -1- Case\nHAS_TASK -N- Task\n\nSHARES_MATERIAL -1- Lawyer\nSHARES_MATERIAL -N- ResearchMaterial\n\nCOMMUNICATES_WITH -1- Lawyer\nCOMMUNICATES_WITH -N- Client\n\nTRACKS_BILLABLE_HOURS -1- Billing\nTRACKS_BILLABLE_HOURS -N- Case\n\n@endchen"
    },
    {
        "input": "Real Estate Management System (REMS) is designed to simplify and automate property management, focusing on improving operational efficiency, transaction automation, and client engagement. It provides a centralized platform to streamline property listings, tracking, and financial management for various types of real estate properties. By minimizing manual processes and enhancing key interactions between property managers and clients, the system ensures seamless handling of sales, rentals, and leasing, while also offering robust financial tools for better decision-making. Additionally, REMS includes compliance reporting, data analytics for market insights, and is scalable to meet the needs of both small and large firms. Design a ER diagram for the Real Estate Management System.",
        "output": "@startchen\n\nentity Property {\n  property_id <<key>>\n  property_name\n  property_type\n  location\n  size\n  price\n  availability_status\n  property_status\n}\n\nentity Client {\n  client_id <<key>>\n  name\n  email\n  phone\n  address\n  preferences <<multi>>\n  client_status\n}\n\nentity Transaction {\n  transaction_id <<key>>\n  property_id <<foreign>>\n  client_id <<foreign>>\n  transaction_date\n  transaction_type\n  amount\n  payment_method\n  transaction_status\n}\n\nentity LeaseAgreement {\n  lease_id <<key>>\n  property_id <<foreign>>\n  client_id <<foreign>>\n  lease_start_date\n  lease_end_date\n  terms_and_conditions\n  lease_status\n}\n\nentity PropertyManager {\n  manager_id <<key>>\n  name\n  email\n  phone\n  role\n  manager_status\n}\n\nentity Report {\n  report_id <<key>>\n  generated_by <<foreign>>\n  report_type\n  report_date\n  report_content\n  report_status\n}\n\nrelationship LISTS_PROPERTY {\n}\nrelationship BUYS_PROPERTY {\n}\nrelationship HAS_TRANSACTION {\n}\nrelationship LEASES_PROPERTY {\n}\nrelationship GENERATES_REPORT {\n}\n\nLISTS_PROPERTY -1- PropertyManager\nLISTS_PROPERTY -N- Property\n\nBUYS_PROPERTY -1- Client\nBUYS_PROPERTY -N- Property\n\nHAS_TRANSACTION -1- Property\nHAS_TRANSACTION -N- Transaction\n\nLEASES_PROPERTY -1- Client\nLEASES_PROPERTY -N- LeaseAgreement\n\nGENERATES_REPORT -1- PropertyManager\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design a ER diagram for a Real Estate Management System (REMS) that simplifies property management. The system allows property managers to handle property listings, track properties, and manage sales, rentals, and leasing. It includes compliance report generation and market data analysis for making informed decisions. Clients can view property details and perform transactions, while the system integrates with an external financial system for seamless payment processing.",
        "output": "@startchen\n\nentity Property {\n  property_id <<key>>\n  property_name\n  property_type\n  location\n  size\n  price\n  availability_status\n  property_status\n}\n\nentity Client {\n  client_id <<key>>\n  name\n  email\n  phone\n  address\n  preferences <<multi>>\n  client_status\n}\n\nentity Transaction {\n  transaction_id <<key>>\n  property_id <<foreign>>\n  client_id <<foreign>>\n  transaction_date\n  transaction_type\n  amount\n  payment_method\n  transaction_status\n}\n\nentity LeaseAgreement {\n  lease_id <<key>>\n  property_id <<foreign>>\n  client_id <<foreign>>\n  lease_start_date\n  lease_end_date\n  terms_and_conditions\n  lease_status\n}\n\nentity PropertyManager {\n  manager_id <<key>>\n  name\n  email\n  phone\n  role\n  manager_status\n}\n\nentity Report {\n  report_id <<key>>\n  generated_by <<foreign>>\n  report_type\n  report_date\n  report_content\n  report_status\n}\n\nrelationship LISTS_PROPERTY {\n}\nrelationship BUYS_PROPERTY {\n}\nrelationship HAS_TRANSACTION {\n}\nrelationship LEASES_PROPERTY {\n}\nrelationship HAS_LEASE {\n}\nrelationship GENERATES_REPORT {\n}\n\nLISTS_PROPERTY -1- PropertyManager\nLISTS_PROPERTY -N- Property\n\nBUYS_PROPERTY -1- Client\nBUYS_PROPERTY -N- Property\n\nHAS_TRANSACTION -1- Property\nHAS_TRANSACTION -N- Transaction\n\nLEASES_PROPERTY -1- Client\nLEASES_PROPERTY -N- LeaseAgreement\n\nHAS_LEASE -1- Property\nHAS_LEASE -N- LeaseAgreement\n\nGENERATES_REPORT -N- Property\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "An all-inclusive event management tool called EventEase is made to make every part of planning and executing an event easier. EventEase makes it simple for organizers to establish, modify, and oversee events by allowing them to enter vital information like names, descriptions, dates, venues, and different kinds and prices of tickets. Easy registration, safe online ticket purchases, and prompt updates via email or the EventEase mobile app are all advantages for attendees. The platform delivers strong statistics for evaluating the success of an event based on ticket sales, attendance demographics, and revenue. It also combines reliable payment processing technologies to ensure seamless transactions. Additionally, EventEase maintains the highest standards of security to protect customer data and privacy while ensuring effective communication through newsletters, social network integrations, and real-time notifications. For thorough monitoring, administrators can access a single dashboard that allows for effective management of speakers, venues, attendees, and financial details. EventEase offers an all-in-one solution for effective event planning and management, with a focus on accessibility, scalability, and user-friendliness. Give a ER diagram for EventEase.",
        "output": "@startchen\n\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  organization_name\n  organizer_status\n}\n\nentity Event {\n  event_id <<key>>\n  organizer_id <<foreign>>\n  event_name\n  event_description\n  event_date\n  venue_id <<foreign>>\n  event_status\n}\n\nentity Venue {\n  venue_id <<key>>\n  venue_name\n  location\n  capacity\n  venue_status\n}\n\nentity Ticket {\n  ticket_id <<key>>\n  event_id <<foreign>>\n  ticket_type\n  price\n  availability_status\n  ticket_status\n}\n\nentity Attendee {\n  attendee_id <<key>>\n  name\n  email\n  phone\n  attendee_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  ticket_id <<foreign>>\n  attendee_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_method\n  payment_status\n}\n\nentity Statistics {\n  statistics_id <<key>>\n  event_id <<foreign>>\n  total_tickets_sold\n  total_revenue\n  demographics_data <<multi>>\n  statistics_status\n}\n\nentity Speaker {\n  speaker_id <<key>>\n  name\n  email\n  phone\n  topic\n  speaker_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  event_id <<foreign>>\n  notification_type\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship ORGANIZES_EVENT {\n}\nrelationship HOSTS_EVENT {\n}\nrelationship SELLS_TICKET {\n}\nrelationship PURCHASES_TICKET {\n}\nrelationship HAS_PAYMENT {\n}\nrelationship TRACKS_STATISTICS {\n}\nrelationship INVITES_SPEAKER {\n}\nrelationship SENDS_NOTIFICATION {\n}\n\nORGANIZES_EVENT -1- Organizer\nORGANIZES_EVENT -N- Event\n\nHOSTS_EVENT -1- Venue\nHOSTS_EVENT -N- Event\n\nSELLS_TICKET -1- Event\nSELLS_TICKET -N- Ticket\n\nPURCHASES_TICKET -1- Attendee\nPURCHASES_TICKET -N- Ticket\n\nHAS_PAYMENT -1- Ticket\nHAS_PAYMENT -1- Payment\n\nTRACKS_STATISTICS -1- Event\nTRACKS_STATISTICS -1- Statistics\n\nINVITES_SPEAKER -N- Event\nINVITES_SPEAKER -N- Speaker\n\nSENDS_NOTIFICATION -1- Event\nSENDS_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "Design a ER diagram for EventEase, an event management platform that helps organizers manage and plan events. The system supports functions like attendee registration, ticket purchases, event updates, and monitoring performance metrics. Administrators can manage event logistics and oversee event details through a centralized dashboard, while customers can buy tickets and receive updates about the events. Payment systems are integrated to handle transactions securely.",
        "output":  "@startchen\n\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  organization_name\n  organizer_status\n}\n\nentity Event {\n  event_id <<key>>\n  organizer_id <<foreign>>\n  event_name\n  event_description\n  event_date\n  venue_id <<foreign>>\n  event_status\n}\n\nentity Venue {\n  venue_id <<key>>\n  venue_name\n  location\n  capacity\n  venue_status\n}\n\nentity Ticket {\n  ticket_id <<key>>\n  event_id <<foreign>>\n  ticket_type\n  price\n  availability_status\n  ticket_status\n}\n\nentity Attendee {\n  attendee_id <<key>>\n  name\n  email\n  phone\n  attendee_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  ticket_id <<foreign>>\n  attendee_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_method\n  payment_status\n}\n\nentity Statistics {\n  statistics_id <<key>>\n  event_id <<foreign>>\n  total_tickets_sold\n  total_revenue\n  demographics_data <<multi>>\n  statistics_status\n}\n\nentity Speaker {\n  speaker_id <<key>>\n  name\n  email\n  phone\n  topic\n  speaker_status\n}\n\nrelationship ORGANIZES_EVENT {\n}\nrelationship HOSTS_EVENT {\n}\nrelationship SELLS_TICKET {\n}\nrelationship PURCHASES_TICKET {\n}\nrelationship HAS_PAYMENT {\n}\nrelationship TRACKS_STATISTICS {\n}\nrelationship INVITES_SPEAKER {\n}\n\nORGANIZES_EVENT -1- Organizer\nORGANIZES_EVENT -N- Event\n\nHOSTS_EVENT -1- Venue\nHOSTS_EVENT -N- Event\n\nSELLS_TICKET -1- Event\nSELLS_TICKET -N- Ticket\n\nPURCHASES_TICKET -1- Attendee\nPURCHASES_TICKET -N- Ticket\n\nHAS_PAYMENT -1- Ticket\nHAS_PAYMENT -1- Payment\n\nTRACKS_STATISTICS -1- Event\nTRACKS_STATISTICS -1- Statistics\n\nINVITES_SPEAKER -N- Event\nINVITES_SPEAKER -N- Speaker\n\n@endchen"
    },
    {
        "input": "The Online Learning Management System (OLMS) is a comprehensive platform designed to facilitate online education and training. OLMS offers features like course creation, student enrollment, assessments, and progress tracking. It also provides tools for communication, collaboration, and content delivery. The system aims to enhance the learning experience for students and streamline the teaching process for instructors. Design a ER diagram for the Online Learning Management System.",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  enrollment_date\n  student_status\n}\n\nentity Instructor {\n  instructor_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n  instructor_status\n}\n\nentity Course {\n  course_id <<key>>\n  course_name\n  course_description\n  credit_hours\n  start_date\n  end_date\n  course_status\n}\n\nentity Assessment {\n  assessment_id <<key>>\n  course_id <<foreign>>\n  assessment_name\n  assessment_type\n  total_marks\n  assessment_status\n}\n\nentity Submission {\n  submission_id <<key>>\n  assessment_id <<foreign>>\n  student_id <<foreign>>\n  submission_date\n  marks_obtained\n  submission_status\n}\n\nentity Content {\n  content_id <<key>>\n  course_id <<foreign>>\n  content_title\n  content_type\n  upload_date\n  content_status\n}\n\nrelationship TEACHES_COURSE {\n}\nrelationship ENROLLS_IN {\n  enrollment_date\n  enrollment_status\n}\nrelationship HAS_ASSESSMENT {\n}\nrelationship SUBMITS {\n}\nrelationship BELONGS_TO {\n}\nrelationship HAS_CONTENT {\n}\nrelationship COMMUNICATES_WITH {\n  message_content\n  message_date\n  communication_status\n}\n\nInstructor -1- TEACHES_COURSE\nTEACHES_COURSE -N- Course\n\nStudent -1- ENROLLS_IN\nENROLLS_IN -N- Course\n\nCourse -1- HAS_ASSESSMENT\nHAS_ASSESSMENT -N- Assessment\n\nStudent -1- SUBMITS\nSUBMITS -N- Submission\n\nAssessment -1- BELONGS_TO\nBELONGS_TO -N- Submission\n\nCourse -1- HAS_CONTENT\nHAS_CONTENT -N- Content\n\nInstructor -N- COMMUNICATES_WITH\nCOMMUNICATES_WITH -N- Student\n\n@endchen"
    },
    {
        "input": "Design a ER diagram for a crypto exchange system involving currency exchange, trading, viewing market trends, and updating market trends using external market data from sources like Binance and Kraken.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n  account_status\n}\n\nentity Wallet {\n  wallet_id <<key>>\n  user_id <<foreign>>\n  balance <<multi>>\n  wallet_status\n}\n\nentity Currency {\n  currency_id <<key>>\n  currency_name\n  symbol\n  currency_type\n  currency_status\n}\n\nentity Trade {\n  trade_id <<key>>\n  user_id <<foreign>>\n  trade_type\n  currency_id <<foreign>>\n  amount\n  trade_date\n  trade_status\n}\n\nentity ExchangeRate {\n  rate_id <<key>>\n  currency_from_id <<foreign>>\n  currency_to_id <<foreign>>\n  exchange_rate\n  rate_date\n  rate_status\n}\n\nentity MarketTrend {\n  trend_id <<key>>\n  currency_id <<foreign>>\n  trend_date\n  price\n  volume\n  trend_status\n}\n\nentity ExternalMarketData {\n  source_id <<key>>\n  source_name\n  source_url\n  last_update\n  source_status\n}\n\nrelationship OWNS_WALLET {\n}\nrelationship PERFORMS_TRADE {\n}\nrelationship CONTAINS_CURRENCY {\n}\nrelationship UPDATES_RATE {\n}\nrelationship VIEWS_TRENDS {\n}\nrelationship UPDATES_TRENDS {\n}\nrelationship PROVIDES_DATA {\n}\n\nOWNS_WALLET -1- User\nOWNS_WALLET -1- Wallet\n\nPERFORMS_TRADE -1- User\nPERFORMS_TRADE -N- Trade\n\nCONTAINS_CURRENCY -1- Wallet\nCONTAINS_CURRENCY -N- Currency\n\nUPDATES_RATE -1- ExchangeRate\nUPDATES_RATE -N- Currency\n\nVIEWS_TRENDS -1- User\nVIEWS_TRENDS -N- MarketTrend\n\nUPDATES_TRENDS -1- ExternalMarketData\nUPDATES_TRENDS -N- MarketTrend\n\nPROVIDES_DATA -1- ExternalMarketData\nPROVIDES_DATA -N- ExchangeRate\n\n@endchen"
    },
    {
        "input": "Give the ERD for this system. The company is organized into departments. Each department has a unique name, a unique number, and a particular employee who manages the department. We keep track of the start date when that employee began managing the department. A department may have several locations. A department controls a number of projects, each of which has a unique name, a unique number, and a single location. The database will store each employee’s name, Social Security number, address, salary, sex (gender), and birth date. An employee is assigned to one department, but may work on several projects, which are not necessarily controlled by the same department. It is required to keep track of the current number of hours per week that an employee works on each project, as well as the direct supervisor of each employee (who is another employee). The database will keep track of the dependents of each employee for insurance purposes, including each dependent’s first name, sex, birth date, and relationship to the employee.",
        "output": "@startchen\nentity Department {\n    name <<key>>\n    number\n    start_date\n    locations\n}\n\nentity Employee {\n    ssn <<key>>\n    name\n    address\n    salary\n    sex\n    birth_date\n    supervisor_ssn <<FK>>\n    department_number <<FK>>\n}\n\nentity Project {\n    name <<key>>\n    number\n    location\n    department_number\n}\n\nentity Dependent {\n    id <<key>>\n    first_name\n    sex\n    birth_date\n    relationship\n    employee_ssn <<FK>>\n}\n\nentity Supervisor {\n    ssn <<key>>\n    name\n}\n\nrelationship manages {\n}\n\nrelationship controls {\n}\n\nrelationship works_on {\n}\n\nrelationship has {\n}\n\nrelationship supervises {\n}\n\n' Relationships\nDepartment -1- manages\nmanages -N- Employee\nDepartment -1- controls\ncontrols -N- Project\nEmployee -1- works_on\nworks_on -N- Project\nEmployee -1- has\nhas -N- Dependent\nSupervisor -1- supervises\nsupervises -N- Employee\n\n@endchen"
    },
    {
        "input": "Give an ERD for this system. A UNIVERSITY database tracks student enrollments, grades, and related academic details. The system includes the following entities and relationships: COLLEGE: Represents the university’s organizational structure. Each college has a unique name (CName), main office (COffice), phone number (CPhone), and a faculty member as the dean. Colleges administer multiple academic departments. DEPARTMENT (DEPT): Each department has a unique name (DName), code (DCode), main office (DOffice), phone (DPhone), and a faculty member as chair, with the start date of their tenure (CStartDate). Departments offer courses and manage instructors and students. COURSE: Departments offer courses, each with a unique name (CoName), code (CCode), level (e.g., 1 for freshman, 2 for sophomore), credit hours (Credits), and a description (CDesc). INSTRUCTOR: Each instructor has a unique identifier (Id), name (IName), office (IOffice), phone (IPhone), and rank (Rank) and is assigned to one primary department. STUDENT: Each student has a unique ID (Sid), name (SName: composed of FName, MName, LName), address (Addr), phone (Phone), major code (Major), and date of birth (DoB). Students belong to one primary department, and their grades are tracked for completed sections. SECTION: Courses are offered as sections, each with a unique identifier (SecId), section number (SecNo), semester (Sem), year (Year), classroom (CRoom: building code and room number), and schedule (DaysTime). Each section is linked to one course and one instructor. Sections must have at least five students. The system maintains many-to-many relationships between STUDENT and SECTION, with grades recorded as available. Historical and current section data are stored for reference, ensuring comprehensive academic tracking.",
        "output": "@startchen\nentity College {\n    CName <<key>>\n    COffice\n    CPhone\n}\n\nentity Faculty {\n    FacultyId <<key>>\n    FacultyName\n}\n\nentity Dean {\n    Id <<key>>\n    Name\n    FacultyId <<FK>>\n}\n\nentity Department {\n    DName <<key>>\n    DCode <<key>>\n    DOffice\n    DPhone\n    CStartDate\n    DeanId <<FK>>\n}\n\nentity Course {\n    CoName <<key>>\n    CCode <<key>>\n    Level\n    Credits\n    CDesc\n}\n\nentity Instructor {\n    Id <<key>>\n    IName\n    IOffice\n    IPhone\n    Rank\n    DepartmentCode <<FK>>\n}\n\nentity Student {\n    Sid <<key>>\n    Name {\n        FName\n        MName\n        LName\n    }\n    Addr\n    Phone\n    Major\n    DoB\n    DepartmentCode <<FK>>\n}\n\nentity Section {\n    SecId <<key>>\n    SecNo\n    Sem\n    Year\n    CRoom\n    DaysTime\n    grade\n}\n\nrelationship administers {\n}\n\nrelationship offers {\n}\n\nrelationship teaches {\n}\n\nrelationship employs {\n}\n\nrelationship enrolls {\n}\n\nrelationship has {\n}\n\nrelationship supervises {\n}\n\n' Relationships\nCollege -1- administers\nadministers -N- Department\nDepartment -1- employs\nemploys -N- Faculty\nDepartment -1- has\nhas -N- Course\nDepartment -1- employs\nemploys -N- Instructor\nInstructor -1- teaches\nteaches -N- Section\nCourse -1- has\nhas -N- Section\nStudent -N- enrolls\nenrolls -N- Section\nDean -1- supervises\nsupervises -N- Department\n\n@endchen"
    },
    {
        "input": "Design an ER schema for keeping track of information about votes taken in the U.S. House of Representatives during the current two-year congressional session. The database needs to keep track of each U.S. STATE’s Name (e.g., ‘Texas’, ‘New York’, ‘California’) and include the Region of the state (whose domain is {‘Northeast’, ‘Midwest’, ‘Southeast’, ‘Southwest’, ‘West’}). Each CONGRESS_PERSON in the House of Representatives is described by his or her Name, plus the District represented, the Start_date when the congressperson was first elected, and the political Party to which he or she belongs (whose domain is {‘Republican’, ‘Democrat’, ‘Independent’, ‘Other’}). The database keeps track of each BILL (i.e., proposed law), including the Bill_name, the Date_of_vote on the bill, whether the bill Passed_or_failed (whose domain is {‘Yes’, ‘No’}), and the Sponsor (the congressperson(s) who sponsored—that is, proposed—the bill). The database also keeps track of how each congressperson voted on each bill (domain of Vote attribute is {‘Yes’, ‘No’, ‘Abstain’, ‘Absent’}).",
        "output": "@startchen\nentity State {\n    Name <<key>>\n    Region {\n        ' Domains\n        Northeast\n        Midwest\n        Southeast\n        Southwest\n        West\n    }\n}\n\nentity CongressPerson {\n    Name <<key>>\n    District\n    Start_date\n    Party {\n        ' Domains\n        Republican\n        Democrat\n        Independent\n        Other\n    }\n}\n\nentity Bill {\n    Bill_name <<key>>\n    Date_of_vote\n    Passed_or_failed {\n        ' Domains\n        Yes\n        No\n    }\n    Sponsor <<FK>>\n}\n\nentity Vote {\n    VoteID <<key>>\n    CongressPerson_Name <<FK>>\n    Bill_Name <<FK>>\n    Vote {\n        ' Domains\n        Yes\n        No\n        Abstain\n        Absent\n    }\n}\n\nrelationship administers{\n}\n\nrelationship sponsors {\n}\n\nrelationship votes_on {\n}\n\nrelationship relates_to {\n}\n\n' Relationships\nState -1- administers\nadministers -N- CongressPerson\nCongressPerson -N- sponsors\nsponsors -1- Bill\nCongressPerson -N- votes_on\nvotes_on -N- Vote\nVote -N- relates_to\nrelates_to -1- Bill\n@endchen"
    },
    {
        "input": "Give ERD for this system. A database is being constructed to keep track of the teams and games of a sports league. A team has a number of players, not all of whom participate in each game. It is desired to keep track of the players participating in each game for each team, the positions they played in that game, and the result of the game.",
        "output": "@startchen\nentity Team {\n    TeamID <<key>>\n    TeamName\n}\n\nentity Player {\n    PlayerID <<key>>\n    PlayerName\n    TeamID <<FK>>\n}\n\nentity Game {\n    GameID <<key>>\n    Date\n    Opponent\n    Result\n}\n\nentity Participation {\n    ParticipationID <<key>>\n    PlayerID <<FK>>\n    GameID <<FK>>\n    PositionPlayed\n}\n\nrelationship has {\n}\n\nrelationship plays_in {\n}\n\nrelationship participates_in {\n}\n\nrelationship involves {\n}\n\n' Relationships\nTeam -1- has\nhas -N- Player\nPlayer -N- plays_in\nplays_in -N- Game\nPlayer -N- participates_in\nparticipates_in -N- Participation\nGame -1- involves\ninvolves -N- Participation\n@endchen"
    },
    {
        "input": "Give an ERD for this system. Consider a MAIL_ORDER database in which employees take orders for parts from customers. The data requirements are summarized as follows:\n1. The mail order company has employees, each identified by a unique employee number, first and last name, and Zip Code.\n2. Each customer of the company is identified by a unique customer number, first and last name, and Zip Code.\n3. Each part sold by the company is identified by a unique part number, a part name, price, and quantity in stock.\n4. Each order placed by a customer is taken by an employee and is given a unique order number. Each order contains specified quantities of one or more parts. Each order has a date of receipt as well as an expected ship date. The actual ship date is also recorded.",
        "output": "@startchen\nentity Company {\n    CompanyID <<key>>\n    CompanyName\n    Address\n    ZipCode\n}\n\nentity Employee {\n    EmployeeID <<key>>\n    FirstName\n    LastName\n    ZipCode\n    CompanyID <<FK>>\n}\n\nentity Customer {\n    CustomerID <<key>>\n    FirstName\n    LastName\n    ZipCode\n    CompanyID <<FK>>\n}\n\nentity Part {\n    PartNumber <<key>>\n    PartName\n    Price\n    QuantityInStock\n}\n\nentity Order {\n    OrderNumber <<key>>\n    OrderDate\n    ExpectedShipDate\n    ActualShipDate\n    EmployeeID <<FK>>\n    CustomerID <<FK>>\n}\n\nentity OrderDetail {\n    OrderDetailID <<key>>\n    OrderNumber <<FK>>\n    PartNumber <<FK>>\n    Quantity\n}\n\nrelationship employs {\n}\n\nrelationship serves {\n}\n\nrelationship takes {\n}\n\nrelationship places {\n}\n\nrelationship contains {\n}\n\nrelationship included_in {\n}\n\n' Relationships\nCompany -1- employs\nemploys -N- Employee\nCompany -1- serves\nserves -N- Customer\nEmployee -1- takes\ntakes -N- Order\nCustomer -1- places\nplaces -N- Order\nOrder -1- contains\ncontains -N- OrderDetail\nPart -1- included_in\nincluded_in -N- OrderDetail\n\n@endchen"
    },
    {
        "input": "Give the ERD for this system. Consider a MOVIE database in which data is recorded about the movie industry. The data requirements are summarized as follows:\n1. Each movie is identified by title and year of release. Each movie has a length in minutes. Each has a production company, and each is classified under one or more genres (such as horror, action, drama, and so forth).\n2. Each movie has one or more directors and one or more actors appearing in it.\n3. Each movie also has a plot outline. Finally, each movie has zero or more quotable quotes, each of which is spoken by a particular actor appearing in the movie.\n4. Actors are identified by name and date of birth and appear in one or more movies. Each actor has a role in the movie.\n5. Directors are also identified by name and date of birth and direct one or more movies. It is possible for a director to act in a movie (including one that he or she may also direct).\n6. Production companies are identified by name and each has an address. A production company produces one or more movies.",
        "output": "@startchen\nentity Movie {\n    Title <<key>>\n    YearOfRelease\n    LengthInMinutes\n    PlotOutline\n}\n\nentity Genre {\n    GenreName <<key>>\n}\n\nentity Actor {\n    ActorName <<key>>\n    DateOfBirth\n}\n\nentity Director {\n    DirectorName <<key>>\n    DateOfBirth\n}\n\nentity ProductionCompany {\n    CompanyName <<key>>\n    Address\n}\n\nentity Quote {\n    QuoteID <<key>>\n    QuoteText\n}\n\nentity Role {\n    RoleID <<key>>\n    RoleName\n    ActorName <<FK>>\n    MovieTitle <<FK>>\n}\n\nrelationship belongs_to {\n}\n\nrelationship acts_in {\n}\n\nrelationship directs {\n}\n\nrelationship produces {\n}\n\nrelationship has {\n}\n\nrelationship spoken_by {\n}\n\nrelationship features {\n}\n\nrelationship plays {\n}\n\n' Relationships\nMovie -1- belongs_to\nbelongs_to -N- Genre\nMovie -N- acts_in\nacts_in -N- Actor\nMovie -N- acts_in\nacts_in -N- Director\nMovie -N- directs\ndirects -N- Director\nProductionCompany -1- produces\nproduces -N- Movie\nMovie -1- has\nhas -N- Quote\nQuote -N- spoken_by\nspoken_by -1- Actor\nActor -N- plays\nplays -N- Role\nMovie -N- features\nfeatures -N- Role\n\n@endchen"
    },
    {
        "input": "Give the ERD for this system. Consider a CONFERENCE_REVIEW database in which researchers submit their research papers for consideration. Reviews by reviewers are recorded for use in the paper selection process. The database system caters primarily to reviewers who record answers to evaluation questions for each paper they review and make recommendations regarding whether to accept or reject the paper. The data requirements are summarized as follows: 1. Authors of papers are uniquely identified by e-mail id. First and last names are also recorded. 2. Each paper is assigned a unique identifier by the system and is described by a title, abstract, and the name of the electronic file containing the paper. 3. A paper may have multiple authors, but one of the authors is designated as the contact author. 4. Reviewers of papers are uniquely identified by e-mail address. Each reviewer’s first name, last name, phone number, affiliation, and topics of interest are also recorded. 5. Each paper is assigned between two and four reviewers. A reviewer rates each paper assigned to him or her on a scale of 1 to 10 in four categories: technical merit, readability, originality, and relevance to the conference. 6. Finally, each reviewer provides an overall recommendation regarding each paper. 7. Each review contains two types of written comments: one to be seen by the review committee only and the other as feedback to the author(s).",
        "output": "@startchen\nentity Author {\n    EmailID <<key>>\n    FirstName\n    LastName\n}\n\nentity Paper {\n    PaperID <<key>>\n    Title\n    Abstract\n    FileName\n    ContactAuthorID <<FK>>\n}\n\nentity Reviewer {\n    EmailID <<key>>\n    FirstName\n    LastName\n    PhoneNumber\n    Affiliation\n    TopicsOfInterest\n}\n\nentity Review {\n    ReviewID <<key>>\n    PaperID <<FK>>\n    ReviewerID <<FK>>\n    TechnicalMeritRating\n    ReadabilityRating\n    OriginalityRating\n    RelevanceRating\n    OverallRecommendation\n    CommitteeComments\n    AuthorFeedback\n}\n\nrelationship has {\n}\n\nrelationship submits {\n}\n\nrelationship rates {\n}\n\nrelationship assigned_to {\n}\n\nrelationship reviews {\n}\n\n' Relationships\nAuthor -N- submits\nsubmits -1- Paper\nPaper -N- assigned_to\nassigned_to -N- Reviewer\nReviewer -N- reviews\nreviews -1- Review\nReview -1- rates\nrates -1- Paper\n\n@endchen"
    },
    {
        "input": "The following narrative describes a simplified version of the organization of Olympic facilities planned for the summer Olympics. Draw an EER diagram that shows the entity types, attributes, relationships, and specializations for this application. State any assumptions you make. The Olympic facilities are divided into sports complexes. Sports complexes are divided into one-sport and multisport types. Multisport complexes have areas of the complex designated for each sport with a location indicator (e.g., center, NE corner, and so on). A complex has a location, chief organizing individual, total occupied area, and so on. Each complex holds a series of events (e.g., the track stadium may hold many different races). For each event, there is a planned date, duration, number of participants, number of officials, and so on. A roster of all officials will be maintained together with the list of events each official will be involved in. Different equipment is needed for the events (e.g., goal posts, poles, parallel bars) as well as for maintenance. The two types of facilities (one-sport and multisport) will have different types of information. For each type, the number of facilities needed is kept, together with an approximate budget.",
        "output": "@startchen\nentity SportsComplex {\n    ComplexID <<key>>\n    Location\n    ChiefOrganizingIndividual\n    TotalOccupiedArea\n    NumberOfFacilities\n    ApproximateBudget\n}\n\nentity OneSportComplex {\n}\n\nentity MultiSportComplex {\n    AreaID <<key>>\n    SportType\n    LocationIndicator\n}\n\nentity Event {\n    EventID <<key>>\n    PlannedDate\n    Duration\n    NumberOfParticipants\n    NumberOfOfficials\n}\n\nentity Official {\n    OfficialID <<key>>\n    Name\n    Role\n}\n\nentity Equipment {\n    EquipmentID <<key>>\n    EquipmentType\n}\n\nentity Roster {\n    RosterID <<key>>\n}\n\nrelationship hosts {\n}\n\nrelationship involves {\n}\n\nrelationship requires {\n}\n\nrelationship listed_in {\n}\n\n' Relationships\nSportsComplex -1- hosts\nhosts -N- Event\nEvent -N- involves\ninvolves -1- Official\nMultiSportComplex -1- requires\nrequires -N- Equipment\nOneSportComplex -1- requires\nrequires -N- Equipment\nOfficial -N- listed_in\nlisted_in -1- Roster\n\n' Specialization\nSportsComplex ->- OneSportComplex\nSportsComplex ->- MultiSportComplex\n\n@endchen"
    },
    {
        "input": "Provide an ERD for this system. The Georgia Tech Library (GTL) database system is designed to manage members, books, borrowing activities, and the catalog effectively. The library serves approximately 16,000 members and holds 100,000 titles with 250,000 volumes (averaging 2.5 copies per book). About 10% of the books are on loan at any time. The system ensures librarians can track book availability, including how many copies are in the library or out on loan. An online catalog organizes books by author, title, and subject area, with detailed descriptions accessible for reference. Each book is uniquely identified by its International Standard Book Number (ISBN), allowing differentiation between editions or bindings of the same title. Certain books, like rare items, maps, or reference materials, are non-lendable and tracked separately. The database also keeps a wishlist of books that librarians aim to acquire, such as rare or out-of-print editions. Members can borrow up to five books for 21 days, with a one-week grace period before reminders are sent. Faculty members, considered automatic members, have extended borrowing privileges, allowing three-month loans with a two-week grace period. Membership requires an application, including personal details like SSN, addresses, and phone numbers. Each member receives a card valid for four years, with renewal notices sent a month before expiry. Faculty member data is auto-integrated from employee records, and cards are sent to their campus address. The system also identifies active and inactive members based on borrowing behavior. It tracks top borrowers, ensuring data on borrowing trends is available. Approximately 5% of members receive reminders to return overdue books, and a similar percentage of overdue books are lost or unreturned. The database differentiates between lendable and non-lendable books, tracks borrowing history, and keeps data on books of interest for acquisition. It manages the librarian roles, including chief librarian, reference librarians, check-out staff, and assistants, to streamline library operations efficiently.",
        "output": "@startchen\nentity Member {\n    MemberID <<key>>\n    SSN\n    FirstName\n    LastName\n    CampusAddress\n    HomeAddress\n    PhoneNumber\n    MembershipType\n    CardExpirationDate\n    IsActive\n}\n\nentity Book {\n    ISBN <<key>>\n    Title\n    Author\n    SubjectArea\n    Description\n    CanBeLent\n    IsRare\n}\n\nentity Loan {\n    LoanID <<key>>\n    MemberID <<FK>>\n    ISBN <<FK>>\n    CheckoutDate\n    DueDate\n    ReturnDate\n    IsOverdue\n}\n\nentity Librarian {\n    LibrarianID <<key>>\n    Name\n    Role\n}\n\nentity Catalog {\n    CatalogID <<key>>\n    ISBN <<FK>>\n    Title\n    Author\n    SubjectArea\n    Description\n}\n\nentity Reminder {\n    ReminderID <<key>>\n    MemberID <<FK>>\n    NoticeDate\n    RenewalDate\n}\n\nrelationship borrows {\n}\n\nrelationship manages {\n}\n\nrelationship issues {\n}\n\nrelationship has {\n}\n\nrelationship includes {\n}\n\n' Relationships\nMember -N- borrows\nborrows -N- Loan\nLibrarian -N- manages\nmanages -N- Catalog\nCatalog -1- has\nhas -N- Book\nMember -N- issues\nissues -1- Reminder\nLoan -1- includes\nincludes -(1,5)- Book\n\n@endchen"
    },
    {
        "input": "Give an ERD for this scenario. Design a database to keep track of information for an art museum. Assume that the following requirements were collected: 1. The museum has a collection of ART_OBJECTS. Each ART_OBJECT has a unique Id_no, an Artist (if known), a Year (when it was created, if known), a Title, and a Description. The art objects are categorized in several ways, as discussed below. 2. ART_OBJECTS are categorized based on their type. There are three main types—PAINTING, SCULPTURE, and STATUE—plus another type called OTHER to accommodate objects that do not fall into one of the three main types. 3. A PAINTING has a Paint_type (oil, watercolor, etc.), material on which it is Drawn_on (paper, canvas, wood, etc.), and Style (modern, abstract, etc.). 4. A SCULPTURE or a statue has a Material from which it was created (wood, stone, etc.), Height, Weight, and Style. 5. An art object in the OTHER category has a Type (print, photo, etc.) and Style. 6. ART_OBJECTs are categorized as either PERMANENT_COLLECTION (objects that are owned by the museum) and BORROWED. Information captured about objects in the PERMANENT_COLLECTION includes Date_acquired, Status (on display, on loan, or stored), and Cost. Information captured about BORROWED objects includes the Collection from which it was borrowed, Date_borrowed, and Date_returned. 7. Information describing the country or culture of Origin (Italian, Egyptian, American, Indian, and so forth) and Epoch (Renaissance, Modern, Ancient, and so forth) is captured for each ART_OBJECT. 8. The museum keeps track of ARTIST information, if known: Name, DateBorn (if known), Date_died (if not living), Country_of_origin, Epoch, Main_style, and Description. The Name is assumed to be unique. 9. Different EXHIBITIONS occur, each having a Name, Start_date, and End_date. EXHIBITIONS are related to all the art objects that were on display during the exhibition. 10. Information is kept on other COLLECTIONS with which the museum interacts; this information includes Name (unique), Type (museum, personal, etc.), Description, Address, Phone, and current Contact_person.",
        "output": "@startchen\n\nentity ART_OBJECT {\n  Id_no <<key>>\n  Artist\n  Year\n  Title\n  Description\n}\n\nentity PAINTING {\n  Paint_type\n  Drawn_on\n  Style\n}\n\nentity SCULPTURE {\n  Material\n  Height\n  Weight\n  Style\n}\n\nentity STATUE {\n  Material\n  Height\n  Weight\n  Style\n}\n\nentity OTHER {\n  Type\n  Style\n}\n\nentity PERMANENT_COLLECTION {\n  Date_acquired\n  Status\n  Cost\n}\n\nentity BORROWED {\n  Collection\n  Date_borrowed\n  Date_returned\n}\n\nentity ORIGIN {\n  Country_or_Culture\n  Epoch\n}\n\nentity ARTIST {\n  Name <<key>>\n  DateBorn\n  Date_died\n  Country_of_origin\n  Epoch\n  Main_style\n  Description\n}\n\nentity EXHIBITION {\n  Name <<key>>\n  Start_date\n  End_date\n}\n\nentity COLLECTION {\n  Name <<key>>\n  Type\n  Description\n  Address\n  Phone\n  Contact_person\n}\n\nrelationship CREATED_BY <<identifying>> {\n}\nrelationship ORIGINATED_FROM {\n}\nrelationship DISPLAYED_IN {\n}\nrelationship PART_OF {\n}\nrelationship BORROWED_FROM {\n}\nrelationship IS_A {\n}\nrelationship PROVIDES {\n}\n\nARTIST -1- CREATED_BY\nCREATED_BY -N- ART_OBJECT\n\nART_OBJECT -N- ORIGINATED_FROM\nORIGINATED_FROM -1- ORIGIN\n\nART_OBJECT -N- DISPLAYED_IN\nDISPLAYED_IN -1- EXHIBITION\n\nART_OBJECT -N- PART_OF\nPART_OF -1- PERMANENT_COLLECTION\n\nART_OBJECT -N- BORROWED_FROM\nBORROWED_FROM -1- BORROWED\n\nART_OBJECT -1- IS_A\nIS_A -1- PAINTING\nIS_A -1- SCULPTURE\nIS_A -1- STATUE\nIS_A -1- OTHER\n\nCOLLECTION -1- PROVIDES\nPROVIDES -N- BORROWED\n\n@endchen"
    },
    {
        "input": "Provide an ERD for the following scenario. 1. An EER diagram for a small-private-airport database; the database is used to keep track of airplanes, their owners, airport employees, and pilots. 2. Each AIRPLANE has a registration number [Reg#], is of a particular plane type [OF_TYPE], and is stored in a particular hangar [STORED_IN]. 3. Each PLANE_TYPE has a model number [Model], a capacity [Capacity], and a weight [Weight]. 4. Each HANGAR has a number [Number], a capacity [Capacity], and a location [Location]. 5. The database also keeps track of the OWNERs of each plane [OWNS] and the EMPLOYEEs who have maintained the plane [MAINTAIN]. 6. Each relationship instance in OWNS relates an AIRPLANE to an OWNER and includes the purchase date [Pdate]. 7. Each relationship instance in MAINTAIN relates an EMPLOYEE to a service record [SERVICE]. 8. Each plane undergoes service many times; hence, it is related by [PLANE_SERVICE] to a number of SERVICE records. 9. A SERVICE record includes as attributes the date of maintenance [Date], the number of hours spent on the work [Hours], and the type of work done [Work_code]. 10. We use a weak entity type [SERVICE] to represent airplane service, because the airplane registration number is used to identify a service record. 11. An OWNER is either a person or a corporation. Hence, we use a union type (category) [OWNER] that is a subset of the union of corporation [CORPORATION] and person [PERSON] entity types. 12. Both pilots [PILOT] and employees [EMPLOYEE] are subclasses of PERSON. 13. Each PILOT has specific attributes license number [Lic_num] and restrictions [Restr]; each EMPLOYEE has specific attributes salary [Salary] and shift worked [Shift]. 14. All PERSON entities in the database have data kept on their Social Security number [Ssn], name [Name], address [Address], and telephone number [Phone]. 15. For CORPORATION entities, the data kept includes name [Name], address [Address], and telephone number [Phone]. 16. The database also keeps track of the types of planes each pilot is authorized to fly [FLIES] and the types of planes each employee can do maintenance work on [WORKS_ON].",
        "output": "@startchen\n\nentity AIRPLANE {\n    Reg <<key>>\n    OF_TYPE\n    STORED_IN\n}\n\nentity PLANE_TYPE {\n    Model <<key>>\n    Capacity\n    Weight\n}\n\nentity HANGAR {\n    Number <<key>>\n    Capacity\n    Location\n}\n\nentity OWNER {\n}\n\nentity CORPORATION {\n    Name <<key>>\n    Address\n    Phone\n}\n\nentity PERSON {\n    Ssn <<key>>\n    Name\n    Address\n    Phone\n}\n\nentity EMPLOYEE {\n    Salary\n    Shift\n}\n\nentity PILOT {\n    Lic_num <<key>>\n    Restr\n}\n\nentity SERVICE {\n    Date\n    Hours\n    Work_code\n}\n\nOWNER ->- o { PERSON, CORPORATION }\nPERSON =>= d { EMPLOYEE, PILOT }\n\nrelationship OWNS {\n    Pdate\n}\nrelationship MAINTAIN {\n}\nrelationship PLANE_SERVICE {\n}\nrelationship FLIES {\n}\nrelationship WORKS_ON {\n}\nrelationship STORED_IN {\n}\nrelationship OF_TYPE {\n}\n\nAIRPLANE -N- OWNS\nOWNS -1- OWNER\n\nEMPLOYEE -N- MAINTAIN\nMAINTAIN -1- SERVICE\n\nAIRPLANE -N- PLANE_SERVICE\nPLANE_SERVICE -1- SERVICE\n\nPILOT -N- FLIES\nFLIES -1- PLANE_TYPE\n\nEMPLOYEE -N- WORKS_ON\nWORKS_ON -1- PLANE_TYPE\n\nAIRPLANE -N- STORED_IN\nSTORED_IN -1- HANGAR\n\nAIRPLANE -1- OF_TYPE\nOF_TYPE -1- PLANE_TYPE\n\n@endchen"
    },
    {
        "input": "Provide ERD for this system. 1. The game of chess is played between two players. 2. The game is played on an 8 × 8 board. 3. The players are assigned a color of black or white at the start of the game. 4. Each player starts with the following pieces (traditionally called chessmen): a. king, b. queen, c. 2 rooks, d. 2 bishops, e. 2 knights, f. 8 pawns. 5. Every piece has its own initial position. 6. Every piece has its own set of legal moves based on the state of the game. You do not need to worry about which moves are or are not legal except for the following issues: a. A piece may move to an empty square or capture an opposing piece. b. If a piece is captured, it is removed from the board. c. If a pawn moves to the last row, it is “promoted” by converting it to another piece (queen, rook, bishop, or knight).",
        "output": "@startchen\n\nentity GAME {\n    Id <<key>>\n    Status\n}\nentity PLAYER {\n    Id <<key>>\n    Color\n}\n\nentity BOARD {\n    Dimensions\n}\n\nentity PIECE {\n    Type\n    Initial_position\n}\n\nentity KING {\n}\n\nentity QUEEN {\n}\n\nentity ROOK {\n}\n\nentity BISHOP {\n}\n\nentity KNIGHT {\n}\n\nentity PAWN {\n}\n\nPIECE ->- o { KING, QUEEN, ROOK, BISHOP, KNIGHT, PAWN }\n\nrelationship HAS {\n}\nrelationship PLAYS {\n}\nrelationship MOVES {\n}\nrelationship CONTAINS {\n}\n\nGAME -1- HAS\nHAS -2- PLAYER\nPLAYER -1- PLAYS\nPLAYS -N- PIECE\nPLAYER -N- MOVES\nMOVES -1- PIECE\nGAME -1- HAS\nHAS -N- PIECE\nGAME -1- CONTAINS\nCONTAINS -1- BOARD\n\n@endchen"
    },
    {
        "input": "Give ERD for the following system. Consider a GRADE_BOOK database in which instructors within an academic department record points earned by individual students in their classes, where each student is identified by a unique identifier, first and last name, and an e-mail address; each instructor teaches certain courses each term, identified by a course number, section number, and term; students are enrolled in each course; each course has grading components with maximum points and weights, totaling 100; instructors record the points earned by each student in each grading component.",
        "output": "@startchen\n\nentity STUDENT {\n    StudentID <<key>>\n    FirstName\n    LastName\n    Email\n}\n\nentity INSTRUCTOR {\n    InstructorID <<key>>\n    FirstName\n    LastName\n}\n\nentity COURSE {\n    CourseNumber <<key>>\n    SectionNumber <<key>>\n    Term\n}\n\nentity GRADING_COMPONENT {\n    ComponentName <<key>>\n    MaxPoints\n    Weight\n}\n\nentity GRADE {\n    PointsEarned\n}\n\nrelationship ENROLLED_IN {\n}\n\nrelationship TEACHES {\n}\n\nrelationship HAS_COMPONENT {\n}\n\nrelationship RECORDS {\n}\n\nrelationship Is_Assigned {\n}\n\nrelationship HAS {\n}\n\nSTUDENT -N- ENROLLED_IN\nENROLLED_IN -1- COURSE\nINSTRUCTOR -N- TEACHES\nTEACHES -1- COURSE\nCOURSE -N- HAS_COMPONENT\nHAS_COMPONENT -1- GRADING_COMPONENT\nINSTRUCTOR -N- RECORDS\nRECORDS -N- GRADE\nSTUDENT -1- Is_Assigned\nIs_Assigned -N- GRADE\nGRADE -1- HAS\nHAS -N- GRADING_COMPONENT\n\n@endchen"
    },
    {
        "input": "Provide an ERD for this system.\n1. The online auction database has members, each identified by a unique member number, e-mail address, name, password, home address, and phone number. 2. A member may be a buyer or a seller. A buyer has a shipping address, while a seller has a bank account number and routing number recorded in the database. 3. Items are placed by a seller for sale and are identified by a unique item number assigned by the system, along with item title, description, starting bid price, bidding increment, start date, and end date of the auction. 4. Items are categorized based on a fixed classification hierarchy (e.g., COMPUTER → HARDWARE → MODEM). 5. Buyers make bids for items they are interested in, recording bid price and time. 6. The highest bid at the end of the auction declares the bidder the winner, allowing the transaction between buyer and seller to proceed. 7. Buyers and sellers may record feedback on completed transactions, including a rating (1–10) and a comment.",
        "output": "@startchen\n\nentity MEMBER {\n    MemberID <<key>>\n    Email\n    Name\n    Password\n    Address\n    Phone\n}\n\nentity BUYER {\n    ShippingAddress\n}\n\nentity SELLER {\n    BankAccountNumber\n    RoutingNumber\n}\n\nentity ITEM {\n    ItemNumber <<key>>\n    Title\n    Description\n    StartingBid\n    BiddingIncrement\n    StartDate\n    EndDate\n}\n\nentity BID {\n    BidPrice\n    BidTime\n}\n\nentity CATEGORY {\n    Name <<key>>\n}\n\nentity FEEDBACK {\n    Rating\n    Comment\n}\n\nMEMBER ->- o { BUYER, SELLER }\n\nrelationship PLACED_BY {\n}\nrelationship MAKES {\n}\nrelationship HAS {\n}\nrelationship RECEIVES {\n}\n\nSELLER -1- PLACED_BY\nPLACED_BY -N- ITEM\nBUYER -N- MAKES\nMAKES -1- BID\nITEM -N- HAS\nHAS -1- CATEGORY\nBUYER -N- RECEIVES\nRECEIVES -1- FEEDBACK\nSELLER -N- RECEIVES\nRECEIVES -1- FEEDBACK\n\n@endchen"
    },
    {
        "input": "Draw an ERD for the following system.\nConsider a database system for a baseball organization such as the major leagues. The data requirements are summarized as follows: 1. The personnel involved in the league include players, coaches, managers, and umpires. Each is identified by a unique personnel id. They are also described by their first and last names along with the date and place of birth. 2. Players are further described by other attributes such as their batting orientation (left, right, or switch) and have a lifetime batting average (BA). 3. Within the players group is a subset of players called pitchers. Pitchers have a lifetime ERA (earned run average) associated with them. 4. Teams are uniquely identified by their names. Teams are also described by the city in which they are located and the division and league in which they play (such as Central division of the American League). 5. Teams have one manager, a number of coaches, and a number of players. 6. Games are played between two teams, with one designated as the home team and the other the visiting team on a particular date. The score (runs, hits, and errors) is recorded for each team. The team with the most runs is declared the winner of the game. 7. With each finished game, a winning pitcher and a losing pitcher are recorded. In case there is a save awarded, the save pitcher is also recorded. 8. With each finished game, the number of hits (singles, doubles, triples, and home runs) obtained by each player is also recorded.",
        "output": "@startchen\n\nentity PERSONNEL {\n    PersonnelID <<key>>\n    FirstName\n    LastName\n    DateOfBirth\n    PlaceOfBirth\n}\n\nentity PLAYER {\n    BattingOrientation\n    LifetimeBA\n}\n\nentity PITCHER {\n    LifetimeERA\n}\n\nentity COACH {\n    Specialty\n}\n\nentity MANAGER {\n}\n\nentity UMPIRE {\n    ExperienceLevel\n}\n\nentity TEAM {\n    TeamName <<key>>\n    City\n    Division\n    League\n}\n\nentity GAME {\n    GameDate <<key>>\n    HomeScore\n    HomeHits\n    HomeErrors\n    VisitorScore\n    VisitorHits\n    VisitorErrors\n    WinningPitcherID\n    LosingPitcherID\n    SavePitcherID\n}\n\nentity STATS {\n    Singles\n    Doubles\n    Triples\n    HomeRuns\n}\n\nPERSONNEL ->- o { PLAYER, COACH, MANAGER, UMPIRE }\nPLAYER ->- o { PITCHER }\n\nrelationship PLAYS_FOR {\n}\nrelationship HAS_MANAGER {\n}\nrelationship HAS_COACH {\n}\nrelationship PARTICIPATES_IN {\n}\nrelationship RECORDED_IN {\n}\nrelationship OFFICIATES {\n}\n\nPITCHER -N- PLAYS_FOR\nPLAYS_FOR -1- TEAM\n\nPLAYER -N- PLAYS_FOR\nPLAYS_FOR -1- TEAM\n\nTEAM -1- HAS_MANAGER\nHAS_MANAGER -1- MANAGER\n\nTEAM -1- HAS_COACH\nHAS_COACH -N- COACH\n\nPLAYER -N- RECORDED_IN\nRECORDED_IN -1- STATS\n\nTEAM -2- PARTICIPATES_IN\nPARTICIPATES_IN -1- GAME\n\nUMPIRE -N- OFFICIATES\nOFFICIATES -N- GAME\n\n@endchen"
    },
    {
        "input": "Generate an ERD for this system.\nThe hostel management system is designed to manage the allocation of rooms, track payments, and maintain information on both students and staff. 1. Student Registration and Allocation Students register for the hostel by filling out an application form that includes their student ID, name, contact details, department, year of study, and gender. Each student is assigned a room based on availability. Rooms are categorized by room number, block, floor, capacity, and type (single, double, triple occupancy). A student can occupy only one room at a time, and multiple students may share the same room if it has more than one bed. Once a room is allocated, the system stores the date of allocation and generates a room assignment ID to track the occupancy history. 2. Room Management Each room belongs to a block within the hostel (e.g., Block A, Block B). The system maintains the status of rooms, indicating whether a room is vacant, occupied, or under maintenance. There are staff members assigned to manage room maintenance requests. These staff members are identified by their staff ID, name, role, and contact information. 3. Fees and Payment Tracking Students are charged a monthly fee based on the room type they are assigned. The fee details include the amount, due date, and payment status (paid, pending, overdue). Students can make payments for the hostel fees through the system. Each payment is recorded with a payment ID, payment date, amount paid, and the method of payment (cash, card, online transfer). The system should also track any penalties for late payments and generate invoices for students. 4. Visitor Management The hostel management system allows students to register visitors. Visitors are recorded with visitor ID, name, contact details, and the date and time of their visit. A visitor must be assigned to a specific student, and their entry and exit are recorded for security purposes. 5. Complaint and Maintenance Tracking Students can file complaints regarding room maintenance or other issues through the system. Each complaint is assigned a complaint ID, description, date filed, and status (open, in progress, resolved). Maintenance staff members are assigned to resolve these complaints, and the system tracks maintenance requests, including the staff assigned, completion date, and maintenance details. 6. Reporting The system generates reports on room occupancy, student payment statuses, and maintenance requests. These reports can be filtered by block, student, or date range.",
        "output": "@startchen\n\nentity STUDENT {\n    StudentID <<key>>\n    Name\n    ContactDetails\n    Department\n    YearOfStudy\n    Gender\n}\n\nentity ROOM {\n    RoomNumber <<key>>\n    Block\n    Floor\n    Capacity\n    Type\n    Status\n}\n\nentity ROOM_ASSIGNMENT {\n    AssignmentID <<key>>\n    AllocationDate\n}\n\nentity STAFF {\n    StaffID <<key>>\n    Name\n    Role\n    ContactInformation\n}\n\nentity FEE {\n    FeeID <<key>>\n    Amount\n    DueDate\n    PaymentStatus\n}\n\nentity PAYMENT {\n    PaymentID <<key>>\n    PaymentDate\n    AmountPaid\n    MethodOfPayment\n}\n\nentity VISITOR {\n    VisitorID <<key>>\n    Name\n    ContactDetails\n    VisitDateTime\n}\n\nentity COMPLAINT {\n    ComplaintID <<key>>\n    Description\n    DateFiled\n    Status\n}\n\nentity MAINTENANCE_REQUEST {\n    RequestID <<key>>\n    CompletionDate\n    MaintenanceDetails\n}\n\nentity REPORT {\n    ReportID <<key>>\n    Type\n    FilterCriteria\n}\n\nrelationship ASSIGNED_TO {\n}\nrelationship ALLOCATES {\n}\nrelationship MANAGES {\n}\nrelationship MAKES {\n}\nrelationship VISITS {\n}\nrelationship FILES {\n}\nrelationship RESOLVES {\n}\nrelationship GENERATES {\n}\nrelationship IS_CHARGED {\n}\n\nROOM_ASSIGNMENT -1- ASSIGNED_TO\nASSIGNED_TO -1- STUDENT\n\nSTAFF -N- MANAGES\nMANAGES -1- ROOM\n\nROOM -1- ALLOCATES\nALLOCATES -(1,N)- ROOM_ASSIGNMENT\n\nSTUDENT -1- MAKES\nMAKES -1- PAYMENT\n\nSTUDENT -1- VISITS\nVISITS -N- VISITOR\n\nSTUDENT -N- FILES\nFILES -N- COMPLAINT\n\nCOMPLAINT -N- RESOLVES\nRESOLVES -1- MAINTENANCE_REQUEST\n\nSTAFF -1- MANAGES\nMANAGES -N- MAINTENANCE_REQUEST\n\nROOM -N- GENERATES\nGENERATES -1- REPORT\n\nSTUDENT -1- IS_CHARGED\nIS_CHARGED -1- FEE\n\n@endchen"
    },
    {
        "input": "Provide ERD of the system. A software house management system is designed to manage employees, projects, clients, and resources for a software development company. 1. Employee Management The company employs software engineers, project managers, quality assurance testers, designers, and other roles. Each employee has an employee ID, name, email, contact number, position, and department (e.g., Development, QA, HR). Employees are also tracked by their date of joining, salary, and availability (active, on leave, etc.). Employees can be assigned to multiple projects at the same time, but each project requires tracking the employee’s role on the project (developer, tester, manager, etc.). 2. Client Management The system maintains details about clients who provide the company with projects. Each client has a client ID, company name, contact person, email, and phone number. Clients can have multiple projects with the software house. Each project has an associated start date, end date, budget, and status (active, completed, on hold). A client can make payments to the software house for services provided. These payments are tracked with a payment ID, payment date, amount, and payment method (bank transfer, credit card, etc.). 3. Project Management Each project is given a project ID, name, description, and deadline. The system tracks the start date and end date of each project. Each project is divided into milestones. A milestone includes a milestone ID, description, start date, end date, and status (in progress, completed). A project can be assigned multiple employees, with each employee having a specific role (developer, manager, tester, etc.) in the project. The system records the hours worked by employees on each project. The system should also track the project budget, including cost of resources, payments made by clients, and any additional expenses. 4. Task Management Projects are broken down into tasks. Each task has a task ID, description, priority (low, medium, high), assigned employee, deadline, and status (pending, in progress, completed). Employees are responsible for completing tasks, and the system records time logs for each task, showing how long it took to complete. Tasks may also have dependencies, meaning some tasks can only begin once others are completed. 5. Resource Management The software house uses various resources such as software licenses, hardware, and office supplies. Each resource has a resource ID, name, type (software, hardware), purchase date, cost, and assigned department. Resources can be allocated to employees or projects. The system should track the current status of resources (in use, available, damaged) and manage inventory levels. 6. Reporting and Monitoring The system generates reports on project progress, employee performance, and resource allocation. Reports on client payments and project financials (e.g., total expenditure vs. budget) are also generated for management to monitor the health of each project. The system can notify managers when project deadlines are approaching or when payments from clients are overdue. 7. Payroll Management The system should manage employee payroll by storing details like salary, bonus, deductions, and pay date. Employees receive monthly salaries, and the system tracks the payroll status (paid, pending) for each employee.",
        "output": "@startchen\n\nentity EMPLOYEE {\n    EmployeeID <<key>>\n    Name\n    Email\n    ContactNumber\n    Position\n    Department\n    DateOfJoining\n    Salary\n    Availability\n}\n\nentity CLIENT {\n    ClientID <<key>>\n    CompanyName\n    ContactPerson\n    Email\n    PhoneNumber\n}\n\nentity PROJECT {\n    ProjectID <<key>>\n    Name\n    Description\n    StartDate\n    EndDate\n    Budget\n    Status\n}\n\nentity MILESTONE {\n    MilestoneID <<key>>\n    Description\n    StartDate\n    EndDate\n    Status\n}\n\nentity TASK {\n    TaskID <<key>>\n    Description\n    Priority\n    AssignedEmployee\n    Deadline\n    Status\n}\n\nentity RESOURCE {\n    ResourceID <<key>>\n    Name\n    Type\n    PurchaseDate\n    Cost\n    AssignedDepartment\n    Status\n}\n\nentity PAYMENT {\n    PaymentID <<key>>\n    PaymentDate\n    Amount\n    PaymentMethod\n}\n\nentity PAYROLL {\n    PayrollID <<key>>\n    Salary\n    Bonus\n    Deductions\n    PayDate\n    Status\n}\n\nrelationship ASSIGNED_TO {\n}\nrelationship MAINTAINS {\n}\nrelationship ASSIGNED {\n}\nrelationship PAYS {\n}\nrelationship TRACKS {\n}\nrelationship ALLOCATED {\n}\nrelationship IS_DIVIDED {\n}\nrelationship HAS {\n}\n\nEMPLOYEE -N- ASSIGNED_TO\nASSIGNED_TO -1- PROJECT\n\nCLIENT -1- MAINTAINS\nMAINTAINS -N- PROJECT\n\nCLIENT -N- PAYS\nPAYS -1- PAYMENT\n\nPROJECT -N- TRACKS\nTRACKS -1- MILESTONE\n\nTASK -N- IS_DIVIDED\nIS_DIVIDED -1- PROJECT\n\nPROJECT -N- ALLOCATED\nALLOCATED -N- RESOURCE\n\nEMPLOYEE -1- HAS\nHAS -1- PAYROLL\n\nEMPLOYEE -1- ALLOCATED\nALLOCATED -N- RESOURCE\n\n@endchen"
    },
    {
        "input": "This system manages final year projects for university students, covering all phases from proposal submission to final evaluation. It tracks students, faculty, projects, committees, and evaluations to streamline the process. 1. Student and Project Management: Students can submit project proposals individually or in groups, with each group having 2-4 members. The system tracks student details such as ID, name, email, and department, as well as group information like group ID and leader. Proposals include details such as proposal ID, title, description, submission date, and status. Projects are managed with attributes like project ID, title, description, start and end dates, and status (ongoing, completed, or rejected). Projects are supervised by faculty members or external mentors, whose roles and details are recorded. 2. Committee and Evaluation Management: Each project evaluation committee, identified by a committee ID, comprises faculty members with assigned roles (chairperson, evaluator, observer). Committees evaluate projects and provide feedback or request changes. Evaluations include progress reports and final assessments, tracking report submissions, feedback, and scores. Final evaluations break scores into components like innovation, technical accuracy, and presentation. 3. Milestone and Task Management: Projects are divided into milestones, each with a milestone ID, name, due date, and status. Tasks under each milestone are assigned to group members and monitored for progress. Supervisors manage tasks and milestones, ensuring timely completion. 4. Document Management and Reporting: Students upload project-related documents (e.g., proposals, reports, code), tagged with document ID, title, and type. Resource requirements like software, hardware, and budgets are tracked. The system generates reports on project progress, student performance, and evaluations. Alerts notify students and supervisors of approaching deadlines. 5. Grading and Results: Committees assign grades after final evaluations, stored with evaluation ID, total score, and grade breakdowns. The system tracks grade histories, helping supervisors analyze student performance trends. This streamlined approach ensures efficient project management and evaluation.",
        "output": "@startchen\nentity STUDENT {\n  StudentID <<key>>\n  Name\n  Email\n  Department\n  DegreeProgram\n  YearOfStudy\n  GroupID <<FK>>\n}\nentity GROUP {\n  GroupID <<key>>\n  LeaderID <<FK>>\n}\nentity PROPOSAL {\n  ProposalID <<key>>\n  Title\n  Description\n  SubmissionDate\n  Status\n  GroupID <<FK>>\n}\nentity PROJECT {\n  ProjectID <<key>>\n  Title\n  Description\n  StartDate\n  EndDate\n  Status\n  SupervisorID <<FK>>\n}\nentity SUPERVISOR {\n  SupervisorID <<key>>\n  Name\n  Department\n  Email\n  Designation\n}\nentity MENTOR {\n  MentorID <<key>>\n  Name\n  Company\n  Email\n  Role\n}\nentity COMMITTEE {\n  CommitteeID <<key>>\n  DateOfEvaluation\n}\nentity COMMITTEE_MEMBER {\n  CommitteeMemberID <<key>>\n  CommitteeRole\n  CommitteeID <<FK>>\n  FacultyID <<FK>>\n}\nentity EVALUATION {\n  EvaluationID <<key>>\n  Feedback\n  Score\n  Comments\n  ProjectID <<FK>>\n}\nentity PROGRESS_REPORT {\n  ReportID <<key>>\n  SubmissionDate\n  Feedback\n  Status\n  ProjectID <<FK>>\n}\nentity MILESTONE {\n  MilestoneID <<key>>\n  Name\n  DueDate\n  Status\n  ProjectID <<FK>>\n}\nentity TASK {\n  TaskID <<key>>\n  Description\n  AssignedGroupMembers\n  StartDate\n  EndDate\n  CompletionStatus\n  MilestoneID <<FK>>\n}\nentity DOCUMENT {\n  DocumentID <<key>>\n  Title\n  UploadDate\n  FileType\n  ProjectID <<FK>>\n}\nentity RESOURCE {\n  ResourceID <<key>>\n  Name\n  Quantity\n  Cost\n  ProjectID <<FK>>\n}\nentity GRADE {\n  GradeID <<key>>\n  Component\n  Score\n  FinalGrade\n  EvaluationID <<FK>>\n}\nrelationship BELONGS_TO {\n}\nrelationship SUBMITS {\n}\nrelationship OVERSEEN_BY {\n}\nrelationship INVOLVES {\n}\nrelationship COMMITTEE_INCLUDES {\n}\nrelationship ASSESSES {\n}\nrelationship DIVIDED_INTO {\n}\nrelationship CONTAINS {\n}\nrelationship REQUIRES {\n}\nrelationship EVALUATED_BY {\n}\nrelationship HAS {\n}\nrelationship IS_ASSIGNED {\n}\nrelationship INCLUDES {\n}\n\nSTUDENT -N- BELONGS_TO\nBELONGS_TO -1- GROUP\n\nGROUP -1- SUBMITS\nSUBMITS -N- PROPOSAL\n\nPROJECT -1- HAS\nHAS -1- PROPOSAL\nPROJECT -N- OVERSEEN_BY\nOVERSEEN_BY -1- SUPERVISOR\nPROJECT -1- INVOLVES\nINVOLVES -N- MENTOR\nCOMMITTEE -N- COMMITTEE_INCLUDES\nCOMMITTEE_INCLUDES -N- COMMITTEE_MEMBER\nCOMMITTEE -N- ASSESSES\nASSESSES -N- EVALUATION\nPROJECT -1- DIVIDED_INTO\nDIVIDED_INTO -N- MILESTONE\nMILESTONE -1- HAS\nHAS -N- TASK\nPROJECT -1- CONTAINS\nCONTAINS -N- DOCUMENT\nPROJECT -1- REQUIRES\nREQUIRES -N- RESOURCE\nPROJECT -N- EVALUATED_BY\nEVALUATED_BY -1- EVALUATION\nGRADE -1- INCLUDES\nINCLUDES -N- EVALUATION\nPROJECT -1- IS_ASSIGNED\nIS_ASSIGNED -1- GRADE\nPROJECT -1- HAS\nHAS -N- PROGRESS_REPORT\n@endchen"
    },
    {
        "input": "Give ERD for this system. The system is designed to manage both students and faculty, along with their associated academic activities and roles within the institution. 1. Student Management The system stores student information, including student ID, name, email, contact details, department, program, and year of study. Each student is enrolled in multiple courses. The system tracks course enrollments, grades, and attendance. Students are assigned advisors (faculty members) to guide them throughout their academic journey. 2. Faculty Management Faculty members have a faculty ID, name, email, department, designation (professor, lecturer), and courses taught. Faculty members are responsible for teaching courses, advising students, and evaluating student performance through grades and assessments. 3. Course Management Courses are defined with a course ID, name, description, credits, and semester offered. Each course is taught by one or more faculty members and is attended by a group of students. The system tracks course schedules, assignments, exams, and final grades for students. 4. Department Management The institution is divided into multiple departments (e.g., Computer Science, Mathematics), each with a department head who oversees faculty and academic activities. Departments manage both students and faculty within their academic programs. 5. Reports and Monitoring The system generates reports on student performance, faculty workload, course enrollments, and department statistics. Academic administrators can monitor student progress, faculty assignments, and overall department performance.",
        "output": "@startchen\n\nentity STUDENT {\n    StudentID <<key>>\n    Name\n    Email\n    ContactDetails\n    Department\n    Program\n    YearOfStudy\n}\n\nentity FACULTY {\n    FacultyID <<key>>\n    Name\n    Email\n    Department\n    Designation\n}\n\nentity COURSE {\n    CourseID <<key>>\n    Name\n    Description\n    Credits\n    SemesterOffered\n}\n\nentity DEPARTMENT {\n    DepartmentID <<key>>\n    Name\n    HeadOfDepartment\n}\n\nrelationship ENROLLED_IN {\n}\nrelationship TAUGHT_BY {\n}\nrelationship GUIDED_BY {\n}\nrelationship BELONGS_TO {\n}\nrelationship CONTAINS {\n}\n\nSTUDENT -N- ENROLLED_IN\nENROLLED_IN -1- COURSE\n\nCOURSE -N- TAUGHT_BY\nTAUGHT_BY -1- FACULTY\n\nSTUDENT -1- GUIDED_BY\nGUIDED_BY -N- FACULTY\n\nSTUDENT -N- BELONGS_TO\nBELONGS_TO -1- DEPARTMENT\n\nFACULTY -N- BELONGS_TO\nBELONGS_TO -1- DEPARTMENT\n\nDEPARTMENT -1- CONTAINS\nCONTAINS -N- COURSE\n\n@endchen"
    },
    {
        "input": "Provide an ERD for this. The system manages patients, doctors, staff, and medical resources within a hospital. 1. Patient Management: Patients are registered with details like patient ID, name, date of birth, contact information, and medical history. The system tracks appointments, diagnoses, treatments, and prescriptions for each patient. Patients may be inpatients (admitted) or outpatients, and the system records their admission details (room, ward, doctor assigned) and discharge summaries. 2. Doctor Management: Doctors are identified by doctor ID, name, specialization, contact details, and availability. Doctors are responsible for diagnosing and treating patients. The system tracks patient-doctor assignments and records the treatment plans and prescriptions provided by each doctor. Doctors may also perform surgeries, and the system tracks the schedule and surgery details. 3. Staff Management: Other hospital staff members, such as nurses, technicians, and administrative staff, are managed with staff ID, name, role, department, and shift schedules. Staff are assigned to various tasks, such as assisting in patient care, performing tests, or managing administrative duties. 4. Appointment and Scheduling: Patients can schedule appointments with doctors, which are recorded with appointment ID, date, time, and doctor assigned. The system also manages the doctor’s schedule to avoid conflicts and ensure proper patient care. 5. Treatment and Billing: The system records treatment plans, including medications, tests, and procedures prescribed by doctors. The billing module generates invoices for treatments, medications, and services provided. Each invoice contains details like billing ID, date, amount, and payment status. 6. Medical Records and Reports: The hospital maintains medical records for each patient, including their treatment history, lab results, and diagnostic reports. The system generates reports on patient admissions, treatment outcomes, and resource utilization within the hospital.",
        "output": "@startchen\n\nentity PATIENT {\n    PatientID <<key>>\n    Name\n    DateOfBirth\n    ContactInformation\n    MedicalHistory\n}\n\nentity INPATIENT {\n    PatientID <<FK>>\n    AdmissionID <<FK>>\n}\n\nentity OUTPATIENT {\n    PatientID <<FK>>\n}\n\nentity DOCTOR {\n    DoctorID <<key>>\n    Name\n    Specialization\n    ContactDetails\n    Availability\n}\n\nentity STAFF {\n    StaffID <<key>>\n    Name\n    Role\n    Department\n    ShiftSchedule\n}\n\nentity APPOINTMENT {\n    AppointmentID <<key>>\n    Date\n    Time\n    DoctorID <<FK>>\n    PatientID <<FK>>\n}\n\nentity TREATMENT {\n    TreatmentID <<key>>\n    Medications\n    Tests\n    Procedures\n    DoctorID <<FK>>\n    PatientID <<FK>>\n}\n\nentity INVOICE {\n    BillingID <<key>>\n    Date\n    Amount\n    PaymentStatus\n    PatientID <<FK>>\n}\n\nentity MEDICAL_RECORD {\n    RecordID <<key>>\n    TreatmentHistory\n    LabResults\n    DiagnosticReports\n    PatientID <<FK>>\n}\n\nentity ADMISSION {\n    AdmissionID <<key>>\n    Room\n    Ward\n    AdmissionDate\n    DischargeSummary\n    PatientID <<FK>>\n}\n\nentity SURGERY {\n    SurgeryID <<key>>\n    SurgeryDate\n    SurgeryDetails\n    DoctorID <<FK>>\n    PatientID <<FK>>\n}\n\nentity TASK {\n    TaskID <<key>>\n    Type\n}\n\nrelationship HAS { \n}\nrelationship IS_ADMITTED {\n}\nrelationship ASSIGNED_TO { \n}\nrelationship SCHEDULED_FOR {\n}\nrelationship TREATED_WITH { \n}\nrelationship PAYS {\n}\nrelationship PERFORMS {\n}\nrelationship ASSIST {\n}\nrelationship COVERS {\n}\nrelationship BOOKS {\n}\nrelationship PRESCRIBES {\n}\n\nPATIENT =>= d {INPATIENT, OUTPATIENT}\n\nPATIENT -1- BOOKS\nBOOKS -N- APPOINTMENT\n\nPATIENT -1- TREATED_WITH\nTREATED_WITH -N- TREATMENT\n\nPATIENT -1- PAYS\nPAYS -N- INVOICE\n\nPATIENT -1- HAS\nHAS -N- MEDICAL_RECORD\n\nINPATIENT -1- IS_ADMITTED\nIS_ADMITTED -1- ADMISSION\n\nDOCTOR -1- SCHEDULED_FOR\nSCHEDULED_FOR -N- APPOINTMENT\n\nDOCTOR -1- PRESCRIBES\nPRESCRIBES -N- TREATMENT\n\nTREATMENT -1- COVERS\nCOVERS -1- INVOICE\n\nDOCTOR -1- PERFORMS\nPERFORMS -N- SURGERY\n\nSTAFF -1- ASSIGNED_TO\nASSIGNED_TO -N- TASK\n\nSTAFF -N- ASSIST\nASSIST -1- DOCTOR\n\n@endchen"
    },
    {
        "input": "Generate an ERD for this system. This system manages the operations of a shopping mall, including tenants (shops), employees, visitors, and services provided within the mall. 1. Shop/Tenant Management The mall houses multiple shops, each registered with shop ID, shop name, type of business (e.g., retail, food), floor number, rental amount, and lease period. Each shop is managed by a shop owner or manager, with details such as owner name, contact information, and contract details. The system tracks rental payments made by each shop and generates invoices for shop owners. 2. Employee Management The system manages mall employees, including security personnel, maintenance staff, and management staff. Each employee is identified by an employee ID, name, position, shift schedule, and assigned duties. Employees are assigned to specific zones of the mall (e.g., parking, food court, retail areas), and their attendance and performance are monitored. 3. Visitor Management The system tracks visitors entering the mall, including visitor count per day, entry time, and exit time. Special events or promotions may attract more visitors, and the system can help analyze visitor trends during these events. 4. Parking Management The mall offers parking facilities for visitors. The system manages parking slots, including slot ID, floor, availability, and type (standard, VIP). Visitors are issued parking tickets, and the system records parking fees and time spent in the parking area. 5. Event and Promotion Management The mall hosts events, such as sales, product launches, or festivals. Each event is recorded with an event ID, event name, date, location (within the mall), and organizer details. The system tracks promotions run by individual shops, including promotion details, duration, and participating stores. 6. Maintenance and Facility Management The system handles maintenance requests from shops or employees, with each request assigned a request ID, description, date reported, staff assigned, and status (open, in progress, resolved). The system also manages facility maintenance (e.g., elevators, air conditioning), ensuring they are regularly serviced and operational. 7. Financial Management The system tracks the mall’s financial operations, including rental income, maintenance costs, and utility bills (e.g., electricity, water). It generates financial reports on mall earnings, operational expenses, and shop rental payments.",
        "output": "@startchen\n\nentity SHOP {\n    ShopID <<key>>\n    ShopName\n    BusinessType\n    FloorNumber\n    RentalAmount\n    LeasePeriod\n    OwnerID <<FK>>\n}\n\nentity SHOP_OWNER {\n    OwnerID <<key>>\n    Name\n    ContactInformation\n    ContractDetails\n}\n\nentity INVOICE {\n    InvoiceID <<key>>\n    Date\n    Amount\n    Status\n    ShopID <<FK>>\n}\n\nentity EMPLOYEE {\n    EmployeeID <<key>>\n    Name\n    Position\n    ShiftSchedule\n    AssignedDuties\n    ZoneID <<FK>>\n    Attendance\n    Performance\n}\n\nentity VISITOR {\n    VisitorID <<key>>\n    EntryTime\n    ExitTime\n}\n\nentity PARKING_SLOT {\n    SlotID <<key>>\n    Floor\n    Availability\n    Type\n}\n\nentity PARKING_TICKET {\n    TicketID <<key>>\n    IssueTime\n    ParkingFee\n    SlotID <<FK>>\n    VisitorID <<FK>>\n}\n\nentity EVENT {\n    EventID <<key>>\n    EventName\n    Date\n    Location\n    OrganizerDetails\n}\n\nentity PROMOTION {\n    PromotionID <<key>>\n    Details\n    Duration\n    ParticipatingStores\n}\n\nentity MAINTENANCE_REQUEST {\n    RequestID <<key>>\n    Description\n    DateReported\n    Status\n    AssignedStaffID <<FK>>\n}\n\nentity FACILITY {\n    FacilityID <<key>>\n    Name\n    ServiceDate\n    Status\n}\n\nentity FINANCIAL_RECORD {\n    RecordID <<key>>\n    RentalIncome\n    MaintenanceCost\n    UtilityBills\n}\n\nentity ZONE {\n    ZoneID <<key>>\n    Name\n    Location\n}\n\nrelationship OWNS {\n}\nrelationship MANAGES {\n}\nrelationship VISITS {\n}\nrelationship INCLUDES {\n}\nrelationship IS_ASSIGNED {\n}\nrelationship HOSTS {\n}\nrelationship RUNS {\n}\nrelationship REQUESTS {\n}\nrelationship MAINTAINS {\n}\nrelationship TRACKS {\n}\nrelationship INVOICES {\n}\nrelationship PAYS {\n}\nrelationship IS_ISSUED {\n}\n\nSHOP_OWNER -1- OWNS\nOWNS -1- SHOP\n\nSHOP_OWNER -1- PAYS\nPAYS -N- INVOICE\n\nFINANCIAL_RECORD -1- TRACKS\nTRACKS -N- INVOICE\n\nSHOP -1- RUNS\nRUNS -N- PROMOTION\n\nEMPLOYEE -N- MANAGES\nMANAGES -1- ZONE\n\nVISITOR -1- VISITS\nVISITS -N- SHOP\n\nVISITOR -1- IS_ISSUED\nIS_ISSUED -1- PARKING_TICKET\n\nPARKING_SLOT -1- IS_ASSIGNED\nIS_ASSIGNED -1- PARKING_TICKET\n\nEVENT -N- HOSTS\nHOSTS -1- SHOP\n\nSHOP -1- REQUESTS\nREQUESTS -N- MAINTENANCE_REQUEST\n\nMAINTENANCE_REQUEST -1- INCLUDES\nINCLUDES -(1,N)- FACILITY\n\nFACILITY -1- MAINTAINS\nMAINTAINS -N- EMPLOYEE\n\n@endchen"
    },
    {
        "input": "Generate an ERD for this system. The system manages firefighters, equipment, emergency responses, and fire stations. Firefighters are tracked with details such as ID, rank, certifications, and shift schedules. They are assigned to response teams for emergencies, which include fires, accidents, or natural disasters. The system logs incidents with details like location, type of emergency, response time, and team assignments. It also handles equipment management, tracking the condition and availability of fire trucks, protective gear, and other firefighting tools, ensuring timely maintenance. Additionally, the system oversees fire stations, including their location, personnel, and equipment inventory, along with managing training programs and certifications for firefighters. Reports on emergency response times, equipment usage, and firefighter performance help in post-incident analysis and operational improvements. Financial management covers budget allocation for equipment and training expenses, ensuring efficient resource usage.",
        "output": "@startchen\n\nentity FIREFIGHTER {\n    FirefighterID <<key>>\n    Rank\n    Certifications\n    ShiftSchedule\n}\n\nentity RESPONSE_TEAM {\n    TeamID <<key>>\n    Type\n    AssignedFirefighters\n}\n\nentity INCIDENT {\n    IncidentID <<key>>\n    Location\n    EmergencyType\n    ResponseTime\n}\n\nentity EQUIPMENT {\n    EquipmentID <<key>>\n    Type\n    Condition\n    Availability\n    MaintenanceDate\n    AssignedStationID <<FK>>\n}\n\nentity FIRE_STATION {\n    StationID <<key>>\n    Location\n    PersonnelCount\n    EquipmentInventory\n}\n\nentity TRAINING_PROGRAM {\n    ProgramID <<key>>\n    Name\n    Description\n    Duration\n}\n\nentity FINANCIAL_RECORD {\n    RecordID <<key>>\n    BudgetAllocation\n    EquipmentExpense\n    TrainingExpense\n}\n\nrelationship ASSIGNED_TO {\n}\nrelationship RESPONDS_TO {\n}\nrelationship USES {\n}\nrelationship USED_IN {\n}\nrelationship MANAGES {\n}\nrelationship UNDERGOES {\n}\nrelationship TRACKS {\n}\nrelationship INCLUDES {\n}\nrelationship HAS {\n}\n\nFIREFIGHTER -N- ASSIGNED_TO\nASSIGNED_TO -1- RESPONSE_TEAM\n\nRESPONSE_TEAM -1- RESPONDS_TO\nRESPONDS_TO -N- INCIDENT\n\nFIREFIGHTER -N- USES\nUSES -N- EQUIPMENT\n\nEQUIPMENT -N- MANAGES\nMANAGES -1- FIRE_STATION\n\nEQUIPMENT -N- USED_IN\nUSED_IN -1- INCIDENT\n\nFIREFIGHTER -N- UNDERGOES\nUNDERGOES -1- TRAINING_PROGRAM\n\nFINANCIAL_RECORD -1- INCLUDES\nINCLUDES -N- EQUIPMENT\n\nFINANCIAL_RECORD -1- INCLUDES\nINCLUDES -N- TRAINING_PROGRAM\n\nFIRE_STATION -1- TRACKS\nTRACKS -N- FINANCIAL_RECORD\n\nFIRE_STATION -1- HAS\nHAS -N- FIREFIGHTER\n\n@endchen"
    },
    {
        "input": "Give ERD for this system. The mobile application allows users to create, organize, and manage personal notes. Each user registers with a unique account and can create multiple notes, each containing a title, content, and optional tags for categorization. Notes are saved with creation and last modified dates, and users can organize them into folders for better structure. The app supports features like search, sorting (by date, title), and pinning important notes for quick access. Additionally, users can set reminders for specific notes, and the app sends notifications when these reminders are due. The app may also support syncing across devices, allowing users to access their notes from multiple platforms. Users can also backup their data to the cloud, ensuring that notes are not lost. The system tracks user activity, such as note creation and edits, and provides a recycle bin for deleted notes that can be restored within a specific time period.",
        "output": "@startchen\n\nentity USER {\n    UserID <<key>>\n    Username\n    Password\n    Email\n}\n\nentity NOTE {\n    NoteID <<key>>\n    Title\n    Content\n    Tags\n    CreatedDate\n    LastModifiedDate\n}\n\nentity FOLDER {\n    FolderID <<key>>\n    Name\n    Description\n}\n\nentity REMINDER {\n    ReminderID <<key>>\n    ReminderDateTime\n    NotificationStatus\n}\n\nentity DEVICE {\n    DeviceID <<key>>\n    DeviceType\n    LastSyncDate\n}\n\nentity CLOUD_BACKUP {\n    BackupID <<key>>\n    BackupDate\n    Status\n}\n\nentity ACTIVITY_LOG {\n    LogID <<key>>\n    ActivityType\n    ActivityDate\n}\n\nrelationship CREATES {\n}\n\nrelationship CONTAINS {\n}\n\nrelationship SETS {\n}\n\nrelationship HAS {\n}\n\nrelationship BACKS_UP {\n}\n\nrelationship LOGGED_BY {\n}\n\nrelationship STORES {\n}\n\nrelationship ORGANIZES {\n}\n\nrelationship STORED_IN {\n}\n\nUSER -1- CREATES\nCREATES -N- NOTE\n\nUSER -1- ORGANIZES\nORGANIZES -N- FOLDER\n\nFOLDER -1- CONTAINS\nCONTAINS -N- NOTE\n\nUSER -1- SETS\nSETS -N- REMINDER\n\nNOTE -1- STORED_IN\nSTORED_IN -(1,N)- DEVICE\n\nUSER -1- BACKS_UP\nBACKS_UP -N- NOTE\n\nCLOUD_BACKUP -1- STORES\nSTORES -N- NOTE\n\nACTIVITY_LOG -N- LOGGED_BY\nLOGGED_BY -1- USER\n\nNOTE -1- HAS\nHAS -1- REMINDER\n\n@endchen"
    },
    {
        "input": "Provide an ERD for the following system. The system manages the production and operations of a cloth manufacturing factory, including raw material procurement, production processes, inventory management, and quality control. It tracks raw materials such as cotton, polyester, and dyes, along with details like supplier information, purchase orders, and inventory levels. The production process is managed through the tracking of production batches, including batch ID, fabric type, quantity produced, and production dates. The system monitors machinery usage, maintenance schedules, and operator assignments to ensure efficient workflow. Quality control is integrated into the system, recording inspections, defects, and quality metrics to maintain production standards. Additionally, the system manages finished goods inventory, allowing for tracking of stock levels, sales orders, and shipping logistics. Reports on production efficiency, material usage, and inventory levels help in analyzing performance and making informed operational decisions.",
        "output": "@startchen\n\nentity RAW_MATERIAL {\n    MaterialID <<key>>\n    MaterialType\n    SupplierID <<FK>>\n    PurchaseOrderID <<FK>>\n    InventoryLevel\n}\n\nentity SUPPLIER {\n    SupplierID <<key>>\n    SupplierName\n    ContactInfo\n}\n\nentity PRODUCTION_BATCH {\n    BatchID <<key>>\n    FabricType\n    QuantityProduced\n    ProductionDate\n}\n\nentity MACHINE {\n    MachineID <<key>>\n    MachineType\n    MaintenanceSchedule\n    OperatorID <<FK>>\n}\n\nentity OPERATOR {\n    OperatorID <<key>>\n    OperatorName\n    Shift\n}\n\nentity QUALITY_CONTROL {\n    InspectionID <<key>>\n    BatchID <<FK>>\n    Defects\n    QualityMetrics\n}\n\nentity FINISHED_GOOD {\n    GoodID <<key>>\n    ProductType\n    StockLevel\n    SalesOrderID <<FK>>\n}\n\nentity SALES_ORDER {\n    SalesOrderID <<key>>\n    OrderDate\n    Quantity\n}\n\nentity SHIPPING_LOGISTICS {\n    ShippingID <<key>>\n    GoodID <<FK>>\n    ShippingDate\n    Status\n}\n\nrelationship PRODUCES {\n}\nrelationship TRACKS {\n}\nrelationship ASSIGNED_TO {\n}\nrelationship INSPECTS {\n}\nrelationship CONTAINS {\n}\nrelationship RECORDS {\n}\nrelationship PROVIDES {\n}\nrelationship USES {\n}\n\nSUPPLIER -1- PROVIDES\nPROVIDES -N- RAW_MATERIAL\n\nPRODUCTION_BATCH -1- TRACKS\nTRACKS -N- RAW_MATERIAL\n\nMACHINE -1- USES\nUSES -N- PRODUCTION_BATCH\n\nMACHINE -1- PRODUCES\nPRODUCES -N- FINISHED_GOOD\n\nMACHINE -1- ASSIGNED_TO\nASSIGNED_TO -N- OPERATOR\n\nOPERATOR -1- INSPECTS\nINSPECTS -N- QUALITY_CONTROL\n\nFINISHED_GOOD -N- CONTAINS\nCONTAINS -1- SALES_ORDER\n\nFINISHED_GOOD -1- RECORDS\nRECORDS -1- SHIPPING_LOGISTICS\n\n@endchen"
    },
    {
        "input": "Give ERD for the following system. The system is designed to manage the operations of a disaster management company, focusing on preparedness, response, recovery, and mitigation of disasters. It tracks emergency response teams, including details such as team member IDs, names, roles, contact information, and certifications relevant to disaster response (e.g., first aid, search and rescue). The company manages disaster response plans for various types of emergencies (natural disasters, industrial accidents, etc.), including specific procedures, assigned personnel, and required resources. Each plan is documented with plan ID, type of disaster, location, and contact points for local authorities and agencies. The system also monitors resource inventory, including supplies like food, water, medical kits, and equipment such as vehicles and communication devices. Each item is tracked by inventory ID, quantity, location, and expiration dates for perishable items. Additionally, the company conducts training programs for personnel, documenting training schedules, attendee lists, and evaluation results to ensure that staff are adequately prepared. The system generates reports on past disaster responses, resource usage, and team performance, aiding in continuous improvement and effective planning for future emergencies.",
        "output": "@startchen\n\nentity MEMBER {\n    MemberID <<key>>\n    Name\n    Role\n    ContactInfo\n    Certification\n}\n\nentity EMERGENCY_RESPONSE_TEAM {\n    TeamID <<key>>\n    TeamName\n    MemberID <<FK>>\n}\n\nentity EMERGENCY {\n    EmergencyID <<key>>\n    EmergencyType\n    Location\n    Date\n    Severity\n}\n\nentity DISASTER_RESPONSE_PLAN {\n    PlanID <<key>>\n    DisasterType\n    Location\n    ContactPoints\n}\n\nentity RESOURCE {\n    ResourceID <<key>>\n    ResourceType\n    Quantity\n    Location\n    ExpirationDate\n}\n\nentity RESOURCE_INVENTORY {\n    InventoryID <<key>>\n    ItemType\n    Quantity\n    Location\n    ExpirationDate\n}\n\nentity TRAINING_PROGRAM {\n    TrainingID <<key>>\n    Schedule\n    AttendeeList\n    EvaluationResults\n}\n\nentity REPORT {\n    ReportID <<key>>\n    EmergencyID <<FK>>\n    ResponseDate\n    ResourceUsage\n    TeamPerformance\n}\n\nrelationship ASSIGNED_TO {\n}\nrelationship HAS {\n}\nrelationship TRACKS {\n}\nrelationship TRAINS {\n}\nrelationship CONTAINS {\n}\nrelationship INCLUDES {\n}\nrelationship RESPONDS_TO {\n}\nrelationship ASSOCIATED_WITH {\n}\n\nEMERGENCY_RESPONSE_TEAM -1- CONTAINS\nCONTAINS -N- MEMBER\n\nDISASTER_RESPONSE_PLAN -1- INCLUDES\nINCLUDES -N- RESOURCE_INVENTORY\n\nDISASTER_RESPONSE_PLAN -N- ASSIGNED_TO\nASSIGNED_TO -N- MEMBER\n\nEMERGENCY -N- RESPONDS_TO\nRESPONDS_TO -1- EMERGENCY_RESPONSE_TEAM\n\nEMERGENCY -1- TRACKS\nTRACKS -1- REPORT\n\nTRAINING_PROGRAM -1- TRAINS\nTRAINS -N- MEMBER\n\nRESOURCE_INVENTORY -1- HAS\nHAS -N- RESOURCE\n\nDISASTER_RESPONSE_PLAN -1- ASSOCIATED_WITH\nASSOCIATED_WITH -1- EMERGENCY\n\n@endchen"
    },
    {
        "input": "Provide an ERD for the following system. The Car Rental System manages the rental process for customers looking to hire vehicles for short-term use. Customers can register an account with details such as customer ID, name, contact information, and driver's license details. Once registered, customers can browse available cars based on criteria like car type (SUV, sedan, etc.), availability, and price per day. The system manages a fleet of vehicles, tracking details such as car ID, make and model, license plate, status (available, rented, in maintenance), and rental price. When a customer wants to rent a car, they can choose the rental period, and the system calculates the total rental cost based on the daily rate and any additional fees (e.g., insurance, GPS). The rental process includes generating a rental agreement that outlines the terms, including the pickup and drop-off locations, dates, and conditions for the rental. The system also tracks the fuel policy (full-to-full, pre-purchase), mileage limits, and any security deposits required. Upon return, the system assesses the car’s condition, tracks mileage, and records any damages. Customers can provide feedback and ratings based on their rental experience. The system generates reports on vehicle usage, customer satisfaction, and financial performance, aiding management in optimizing the fleet and improving services.",
        "output": "@startchen\n\nentity CUSTOMER {\n  CustomerID <<key>>\n  Name\n  ContactInfo\n  DriversLicense\n}\n\nentity CAR {\n  CarID <<key>>\n  Make\n  Model\n  LicensePlate\n  Status\n  DailyRentalPrice\n}\n\nentity RENTAL_DETAILS {\n  RentalID <<key>>\n  RentalStartDate\n  RentalEndDate\n  TotalCost\n  PickupLocation\n  DropoffLocation\n  FuelPolicy\n  MileageLimit\n  SecurityDeposit\n  CustomerID <<FK>>\n  CarID <<FK>>\n}\n\nentity RENTAL_AGREEMENT {\n  AgreementID <<key>>\n  TermsAndConditions\n  RentalID <<FK>>\n}\n\nentity RETURN_DETAILS {\n  ReturnID <<key>>\n  ReturnDate\n  CarCondition\n  Mileage\n  Damages\n  RentalID <<FK>>\n}\n\nentity FEEDBACK {\n  FeedbackID <<key>>\n  Rating\n  Comments\n  CustomerID <<FK>>\n}\n\nrelationship RENTS {\n}\nrelationship INCLUDES { \n}\nrelationship RETURNED_BY { \n}\nrelationship PROVIDES_FEEDBACK { \n}\nrelationship ASSOCIATED_WITH {\n}\n\nCUSTOMER -N- RENTS\nRENTS -1- CAR\n\nRENTAL_DETAILS -1- INCLUDES\nINCLUDES -1- RENTAL_AGREEMENT\n\nRENTAL_DETAILS -1- INCLUDES\nINCLUDES -1- RETURN_DETAILS\n\nRETURN_DETAILS -1- RETURNED_BY\nRETURNED_BY -1- CUSTOMER\n\nCUSTOMER -N- PROVIDES_FEEDBACK\nPROVIDES_FEEDBACK -1- FEEDBACK\n\nCAR -1- ASSOCIATED_WITH\nASSOCIATED_WITH -N- RENTAL_DETAILS\n\n@endchen"
    },
    {
        "input": "Provide an ERD for this system. The Package Tracking System is designed to manage and monitor the movement of packages from the sender to the recipient, ensuring transparency and efficiency in the shipping process. When a package is dispatched, it is assigned a unique tracking ID, which is linked to the sender’s and recipient’s details, including names, addresses, and contact information. The system tracks the package through various stages of transit, including pickup, in transit, customs clearance (if applicable), and delivery. Each stage is logged with timestamps, locations, and status updates (e.g., out for delivery, delayed, delivered). This allows customers to view real-time updates on the package’s journey via a mobile app or web portal. Logistics personnel can update the status and location of the package at various checkpoints, and the system generates automated notifications to inform customers of significant updates, such as successful delivery or delays. Additionally, the system manages warehouse inventory, tracking packages stored at distribution centers with details on their expected delivery timelines. Upon delivery, the system captures the recipient’s signature (either digitally or physically) to confirm receipt, and customers can provide feedback on their delivery experience. The Package Tracking System generates reports on delivery performance, customer satisfaction, and package transit times, helping logistics companies enhance their operations and service quality.",
        "output": "@startchen\nentity SENDER {\n  SenderID <<key>>\n  Name\n  Address\n  ContactInfo\n}\n\nentity RECIPIENT {\n  RecipientID <<key>>\n  Name\n  Address\n  ContactInfo\n}\n\nentity PACKAGE {\n  TrackingID <<key>>\n  Weight\n  Dimensions\n  Status\n  DispatchDate\n  ExpectedDeliveryDate\n  SenderID <<FK>>\n  RecipientID <<FK>>\n}\n\nentity TRANSIT_LOG {\n  LogID <<key>>\n  Timestamp\n  Location\n  StatusUpdate\n  TrackingID <<FK>>\n}\n\nentity WAREHOUSE {\n  WarehouseID <<key>>\n  Location\n  Capacity\n}\n\nentity DELIVERY {\n  DeliveryID <<key>>\n  DeliveryDate\n  RecipientSignature\n  TrackingID <<FK>>\n}\n\nentity FEEDBACK {\n  FeedbackID <<key>>\n  Rating\n  Comments\n  RecipientID <<FK>>\n}\n\nrelationship SENDS {\n}\nrelationship RECEIVES {\n}\nrelationship TRACKED_BY {\n}\nrelationship STORED_AT {\n}\nrelationship CONFIRMED_BY {\n}\nrelationship PROVIDES_FEEDBACK {\n}\n\nSENDER -1- SENDS\nSENDS -N- PACKAGE\n\nRECIPIENT -1- RECEIVES\nRECEIVES -N- PACKAGE\n\nPACKAGE -N- TRACKED_BY\nTRACKED_BY -1- TRANSIT_LOG\n\nPACKAGE -N- STORED_AT\nSTORED_AT -1- WAREHOUSE\n\nPACKAGE -1- CONFIRMED_BY\nCONFIRMED_BY -1- DELIVERY\n\nRECIPIENT -1- PROVIDES_FEEDBACK\nPROVIDES_FEEDBACK -N- FEEDBACK\n@endchen"
    },
    {
        "input": "Generate an ERD for this. The Snack and Grocery Shop Management System streamlines operations for retail stores that sell snacks, beverages, and grocery items. It handles inventory, sales, customer orders, supplier relations, and financial management to ensure efficient store operations. Product and Inventory Management: Each product is registered with a product ID, name, brand, category (snacks, groceries, beverages), price, stock quantity, and expiration date for perishables. The system tracks stock levels and alerts managers about low inventory or expiring items. Automatic restocking can be configured by setting reorder levels, generating purchase orders for suppliers, and updating inventory upon delivery. Sales and Order Management: In-store purchases are processed through a point-of-sale (POS) system, recording details such as products sold, payment method, and receipt. For online orders, customers can choose delivery or in-store pickup, with order tracking to ensure timely processing. The system stores order IDs, customer details, and transaction data, supporting loyalty rewards for repeat customers. Supplier and Customer Management: Supplier information, including ID, contact details, and products supplied, is maintained. Purchase orders track ordered items, quantities, delivery status, and costs. Customer profiles store IDs, contact details, and order history, enabling personalized promotions and loyalty program management. Customers earn points redeemable for discounts based on their purchase habits. Reporting, Analytics, and Promotions: Detailed sales reports cover performance trends, top-selling items, and low performers. Analytics on seasonal demand and profit margins guide inventory and pricing strategies. The system supports creating and tracking time-based discounts and promotions, enhancing customer engagement and driving sales. Financial and Payment Management: The system supports various payment methods, ensuring smooth transactions and tracking revenue, expenses, and profits. Refunds and exchanges are managed seamlessly, updating inventory and customer records. Financial reports help store owners make informed decisions for efficient financial management. This comprehensive system enhances store productivity, improves customer satisfaction, and optimizes inventory and sales strategies.",
        "output": "@startchen\n\nentity PRODUCT {\n  ProductID <<key>>\n  Name\n  Brand\n  Category\n  Price\n  StockQuantity\n  ExpirationDate\n}\n\nentity INVENTORY {\n  InventoryID <<key>>\n  ProductID <<FK>>\n  ReorderLevel\n  StockLevel\n}\n\nentity SUPPLIER {\n  SupplierID <<key>>\n  Name\n  ContactInfo\n  ProductsSupplied\n}\n\nentity CUSTOMER {\n  CustomerID <<key>>\n  Name\n  ContactInfo\n  LoyaltyPoints\n}\n\nentity ORDER {\n  OrderID <<key>>\n  OrderDate\n  TotalAmount\n  PaymentMethod\n  CustomerID <<FK>>\n}\n\nentity ORDER_DETAILS {\n  OrderDetailsID <<key>>\n  OrderID <<FK>>\n  ProductID <<FK>>\n  Quantity\n  Price\n}\n\nentity PURCHASE_ORDER {\n  PurchaseOrderID <<key>>\n  SupplierID <<FK>>\n  OrderDate\n  Status\n  TotalCost\n}\n\nentity PROMOTION {\n  PromotionID <<key>>\n  Name\n  StartDate\n  EndDate\n  DiscountPercentage\n}\n\nrelationship SUPPLIES {\n}\nrelationship PURCHASED_BY {\n}\nrelationship INCLUDES {\n}\nrelationship BELONGS_TO {\n}\nrelationship MANAGES {\n}\nrelationship APPLIES_TO {\n}\nrelationship CONTAINS {\n}\n\nSUPPLIER -1- SUPPLIES\nSUPPLIES -N- PRODUCT\n\nCUSTOMER -1- PURCHASED_BY\nPURCHASED_BY -N- ORDER\n\nORDER -1- INCLUDES\nINCLUDES -N- ORDER_DETAILS\n\nORDER_DETAILS -N- CONTAINS\nCONTAINS -1- PRODUCT\n\nPRODUCT -N- BELONGS_TO\nBELONGS_TO -1- INVENTORY\n\nPRODUCT -N- APPLIES_TO\nAPPLIES_TO -1- PROMOTION\n\nSUPPLIER -N- MANAGES\nMANAGES -1- PURCHASE_ORDER\n@endchen"
    },

    {
        "input": "Design a entity relationship diagram for it. Functional requirements for Webmed Healthcare System:\n\n1. The system must allow patients and caregivers to register on the platform.\n2. The system must provide a secure login feature for accessing healthcare services.\n3. The system must offer a feature for users to explore different healthcare facilities and services.\n4. The system must include a finance module focused on purchasing insurance.\n5. The system must display comprehensive information about diseases and their symptoms under a Health A-Z feature.\n6. The system must include resources such as a symptom checker, health calculator, and a function to find a doctor based on location.\n7. The system must provide an online medicine delivery option under the drugs and supplements section.\n8. The system must offer a payment module for reimbursing providers for services delivered.\n9. The system must collect user feedback for quality improvement purposes.\n10. The system must offer a logout functionality for users to securely exit the platform.\n11. The system must include a bulletin for news, health awareness, and information on experts and counselling programs.\n12. The system must provide access to health insurance guides and ambulance services under the resources section.",
        "output": "@startchen\n\nentity USER {\n    user_id <<key>>\n    name\n    email\n    password\n    role\n}\nentity PATIENT {\n    address\n    phone\n    date_of_birth\n}\nentity DOCTOR {\n    specialization\n    phone\n}\n\nUSER ->- d { PATIENT, DOCTOR }\n\nentity INSURANCE {\n    insurance_id <<key>>\n    name\n    type\n    details\n}\nentity MEDICINE {\n    medicine_id <<key>>\n    name\n    description\n    price\n    availability\n}\nentity APPOINTMENT {\n    appointment_id <<key>>\n    date\n    time\n    location\n    status\n    patient_id <<FK>>\n    doctor_id <<FK>>\n}\nentity FEEDBACK {\n    feedback_id <<key>>\n    user_id <<FK>>\n    comments\n    rating\n}\nentity PAYMENT {\n    payment_id <<key>>\n    amount\n    date\n    method\n    status\n    user_id <<FK>>\n}\nentity COUNSELING_PROGRAM {\n    program_id <<key>>\n    name\n    details\n    date\n    location\n}\n\nrelationship books {\n}\nrelationship prescribes {\n}\nrelationship enrolls {\n}\nrelationship gives {\n}\nrelationship makes {\n}\nrelationship access {\n}\n\nPATIENT -1- gives\ngives -N- FEEDBACK\nPATIENT -1- makes\nmakes -N- PAYMENT\nPATIENT -1- books\nbooks -N- APPOINTMENT\nDOCTOR -1- prescribes\nprescribes -N- MEDICINE\nPATIENT -1- enrolls\nenrolls -N- INSURANCE\nPATIENT -1- access\naccess -N- COUNSELING_PROGRAM\n\n@endchen"
    },
    {
        "input": "Design a entity relationship diagram for this system. Functional requirements for the Online Examination System:\n\n1. The system must allow students to register and create accounts.\n2. The system must enable teachers to create exams and set questions.\n3. The system must allow students to take exams online.\n4. The system must generate results for the exams taken by students.\n5. The system must provide exam analysis, including performance review and insights.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  username\n  password\n}\n\nentity Student {\n}\n\nentity Teacher {\n}\n\nUser =>= d { Student, Teacher }\n\nentity Exam {\n  exam_id <<key>>\n  title\n  created_date\n}\n\nentity Question {\n  question_id <<key>>\n  content\n  answer_options\n  correct_answer\n}\n\nentity ExamResult {\n  result_id <<key>>\n  score\n  completion_date\n}\n\nrelationship REGISTERS {\n  registration_date\n}\n\nrelationship CREATES {\n}\n\nrelationship CONTAINS {\n}\n\nrelationship TAKES {\n  start_time\n  end_time\n}\n\nrelationship GENERATES {\n}\n\nrelationship RESULTS_FOR {\n}\n\nREGISTERS -1- Student\nREGISTERS -N- Exam\n\nCREATES -1- Teacher\nCREATES -N- Exam\n\nCONTAINS -1- Exam\nCONTAINS -N- Question\n\nTAKES -1- Student\nTAKES -N- Exam\n\nGENERATES -1- Exam\nGENERATES -N- ExamResult\n\nRESULTS_FOR -1- Student\nRESULTS_FOR -1- Exam\nRESULTS_FOR -1- ExamResult\n\n@endchen"
    },
    {
        "input": "Design a entity relationship diagram for this system. Functional requirements for the Online Voting System:\n\n1. The system must allow citizens to register as voters.\n2. The system must enable candidates to register for elections.\n3. The system must allow registered voters to cast their votes online.\n4. The system must generate results for the elections based on the votes cast.\n5. The system must provide analysis of the votes, including voter turnout and demographics.",
        "output": "@startchen\n\nentity Voter {\n  voter_id <<key>>\n  name\n password\n  address\n  date_of_birth\n  registration_date\n}\n\nentity Candidate {\n  candidate_id <<key>>\n  name\n password\n  party\n  registration_date\n}\n\nentity Election {\n  election_id <<key>>\n  title\n  election_date\n}\n\nentity Vote {\n  vote_id <<key>>\n  timestamp\n}\n\nentity Result {\n  result_id <<key>>\n  total_votes\n  winner\n}\n\nrelationship REGISTERS_AS_VOTER {\n  registration_date\n}\n\nrelationship REGISTERS_AS_CANDIDATE {\n  registration_date\n}\n\nrelationship CASTS_VOTE {\n  vote_time\n}\n\nrelationship GENERATES {\n}\n\nREGISTERS_AS_VOTER -1- Voter\nREGISTERS_AS_VOTER -1- Election\n\nREGISTERS_AS_CANDIDATE -1- Candidate\nREGISTERS_AS_CANDIDATE -1- Election\n\nCASTS_VOTE -1- Voter\nCASTS_VOTE -1- Candidate\nCASTS_VOTE -1- Vote\n\nGENERATES -1- Election\nGENERATES -N- Result\n\n@endchen"
    },
    {
        "input": "Design a entity relationship diagram for this system. Functional requirements for the E-Ticketing System for Buses:\n\n1. The system must allow customers to register and create an account for booking tickets.\n2. The system must enable customers to make bus reservations and purchase tickets online.\n3. The system must provide customers with the ability to cancel their reservations if needed.\n4. The system must facilitate secure payments, allowing customers to pay for tickets online through bank transactions.\n5. The system must allow customers to check the status of their reservations and buses online.\n6. The system must allow customers to edit their profiles and manage their accounts.\n7. The system must allow the admin to manage user accounts, including deleting accounts.\n8. The system must enable managers to update and manage routes, bus schedules, vehicle records, and payment information.\n9. The system must generate reports related to bus reservations, payments, and cancellations for management use.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n password\n  phone\n}\n\nentity Bus {\n  bus_id <<key>>\n  bus_type\n  capacity\n  operator\n}\n\nentity Route {\n  route_id <<key>>\n  origin\n  destination\n  distance\n}\n\nentity Schedule {\n  schedule_id <<key>>\n  departure_time\n  arrival_time\n  date\n}\n\nentity Reservation {\n  reservation_id <<key>>\n  status\n  reservation_date\n}\n\nentity Payment {\n  payment_id <<key>>\n  payment_date\n  amount\n  status\n  bank_pin\n}\n\nentity Admin {\n  admin_id <<key>>\n  username\n  password\n}\n\nrelationship CHECKS_AVAILABILITY {\n}\n\nrelationship RESERVES {\n  reservation_date\n}\n\nrelationship PAYS_FOR {\n  payment_date\n}\n\nrelationship CANCELS_RESERVATION {\n  cancellation_date\n}\n\nrelationship ASSIGNS {\n}\n\nrelationship FOLLOWS_ROUTE {\n}\n\nrelationship USES {\n}\n\nrelationship MANAGES {\n  manage_date\n}\n\nCHECKS_AVAILABILITY -1- Customer\nCHECKS_AVAILABILITY -N- Bus\n\nRESERVES -1- Customer\nRESERVES -1- Reservation\n\nPAYS_FOR -1- Customer\nPAYS_FOR -1- Payment\n\nCANCELS_RESERVATION -1- Customer\nCANCELS_RESERVATION -1- Reservation\n\nASSIGNS -1- Bus\nASSIGNS -N- Route\n\nFOLLOWS_ROUTE -1- Bus\nFOLLOWS_ROUTE -N- Schedule\n\nUSES -1- Reservation\nUSES -1- Bus\n\nMANAGES -1- Admin\nMANAGES -N- Reservation\n\n@endchen"          
    },
    {
        "input": "Design a entity relationship diagram for this system. Functional requirements for the Weather Monitoring System:\n\n1. The system must allow users to check the current weather status, including temperature, humidity, rainfall, pressure, and dew point.\n2. The system must provide live updates of weather data for real-time viewing.\n3. The system must alert users with tips and warnings during certain weather conditions.\n4. The system must display weather data in graphical form to allow easier analysis of temperature variations.\n5. The system must predict the weather for the next few days based on current and past data.\n6. The system must provide a weekly analysis, including average, highest, and lowest temperatures of the week.\n",
        "output": "@startchen\n\nentity Location {\n  location_id <<key>>\n  city\n  region\n  country\n}\n\nentity SensorData {\n  data_id <<key>>\n  timestamp\n  temperature\n  humidity\n  rainfall\n  pressure\n  dew_point\n}\n\nentity WeatherAlert {\n  alert_id <<key>>\n  alert_type\n  message\n  alert_time\n}\n\nentity Prediction {\n  prediction_id <<key>>\n  prediction_date\n  predicted_temperature\n  predicted_humidity\n  predicted_rainfall\n}\n\nrelationship MEASURES {\n}\n\nrelationship ALERTS {\n}\n\nrelationship PREDICTS {\n}\n\nMEASURES -1- Location\nMEASURES -N- SensorData\n\nALERTS -1- Location\nALERTS -N- WeatherAlert\n\nPREDICTS -1- Location\nPREDICTS -N- Prediction\n\n@endchen"          
    },
    {
        "input": "Give entity relationship diagram for this system. Functional requirements for the Online Shopping System:\n\n1. The system must allow users to register and create an account.\n2. The system must provide a product catalog displaying available products for purchase.\n3. The system must allow users to add products to their shopping cart.\n4. The system must include a payment gateway for users to make payments for their purchases.\n5. The system must display the user's order history, showing past orders.\n6. The system must offer customer support functionality for users to ask queries or report issues.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  username\n  email\n  password\n  registration_date\n}\n\nentity Product {\n  product_id <<key>>\n  name\n  description\n  price\n  stock\n  category\n}\n\nentity ShoppingCart {\n  cart_id <<key>>\n  created_date\n}\n\nentity CartItem {\n  item_id <<key>>\n  quantity\n}\n\nentity Order {\n  order_id <<key>>\n  order_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  payment_date\n  amount\n  payment_method\n  payment_status\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship REGISTERS {\n  registration_date\n}\n\nrelationship ADDS_TO_CART {\n}\n\nrelationship CONTAINS {\n}\n\nrelationship PLACES_ORDER {\n  order_date\n}\n\nrelationship PAYS_FOR {\n  payment_date\n}\n\nrelationship SUPPORTS {\n}\n\nrelationship INCLUDES {\n}\n\nrelationship REPRESENTS {\n}\n\nREGISTERS -1- User\nREGISTERS -1- ShoppingCart\n\nADDS_TO_CART -1- User\nADDS_TO_CART -N- CartItem\n\nCONTAINS -1- ShoppingCart\nCONTAINS -N- CartItem\n\nREPRESENTS -1- CartItem\nREPRESENTS -1- Product\n\nPLACES_ORDER -1- User\nPLACES_ORDER -1- Order\n\nPAYS_FOR -1- Order\nPAYS_FOR -1- Payment\n\nSUPPORTS -1- User\nSUPPORTS -N- CustomerSupport\n\nINCLUDES -1- Order\nINCLUDES -N- CartItem\n\n@endchen"          
    },
    {
        "input": "Give entity relationship diagram for this system. Functional requirements for the Library Management System:\n\n1. The system must allow users to register and create an account.\n2. The system must provide a book catalog displaying all available books.\n3. The system must allow users to borrow books from the library.\n4. The system must allow users to return borrowed books.\n5. The system must allow users to renew borrowed books.\n6. The system must calculate late fees for books returned after the due date.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n password\n  phone\n  registration_date\n}\n\nentity Book {\n  isbn <<key>>\n  title\n  author\n  publisher\n  genre\n  publication_year\n}\n\nentity BorrowRequest {\n  request_id <<key>>\n  borrow_date\n  due_date\n  return_date\n  status <<derived>>\n  late_fee\n}\n\nrelationship REGISTERS {\n  registration_date\n}\n\nrelationship BORROWS {\n  borrow_date\n  due_date\n}\n\nrelationship RETURNS {\n  return_date\n}\n\nrelationship RENEWS {\n  renewal_date\n}\n\nREGISTERS -1- User\nREGISTERS -1- BorrowRequest\n\nBORROWS -1- User\nBORROWS -1- Book\nBORROWS -N- BorrowRequest\n\nRETURNS -1- User\nRETURNS -N- BorrowRequest\n\nRENEWS -1- User\nRENEWS -N- BorrowRequest\n\n@endchen"              
    },
    {
        "input": "Give entity relationship diagram for this system. Functional requirements for the e-Province system:\n\n1. The system must allow citizens to register for an account.\n2. The system must provide a login module where users can log in using their unique application number with an approved status.\n3. The system must allow users to apply for government certificates like birth/death certificates, income and caste certificates, etc.\n4. The system must provide an admin module that can issue certificates to citizens.\n5. The system must manage user profiles, allowing users to update their personal information.\n6. The system must allow admins to view user profiles.\n7. The system must allow admins to deactivate users.",
        "output": "@startchen\n\nentity Citizen {\n  citizen_id <<key>>\n  name\n  address\n  date_of_birth\n  contact_number\n  email\n password\n}\n\nentity Admin {\n  admin_id <<key>>\n  username\n  password\n}\n\nentity Application {\n  application_id <<key>>\n  application_date\n  status\n}\n\nentity Certificate {\n  certificate_id <<key>>\n  certificate_type\n  issue_date\n  expiry_date\n}\n\nentity UserProfile {\n  profile_id <<key>>\n  citizen_id <<foreign>>\n  created_date\n  last_updated\n}\n\nentity CommonServiceCentre {\n  csc_id <<key>>\n  location\n  contact_info\n}\n\nrelationship MANAGES {\n}\n\nrelationship SUBMITS {\n  application_date\n}\n\nrelationship ISSUES {\n  issue_date\n}\n\nrelationship ACCESS_VIA_CSC {\n  access_date\n}\n\nrelationship APPROVES {\n  approval_date\n}\n\nrelationship MAINTAINS_PROFILE {\n  created_date\n  last_updated\n}\n\nMANAGES -1- Admin\nMANAGES -N- Citizen\n\nSUBMITS -1- Citizen\nSUBMITS -N- Application\n\nISSUES -1- Application\nISSUES -1- Certificate\n\nACCESS_VIA_CSC -1- CommonServiceCentre\nACCESS_VIA_CSC -N- Application\n\nAPPROVES -1- Admin\nAPPROVES -N- Application\n\nMAINTAINS_PROFILE -1- Citizen\nMAINTAINS_PROFILE -1- UserProfile\n\n@endchen"          
    },
    {
        "input": "Give entity relationship diagram for this system. Functional requirements for the Online Banking System:\n\n1. The system must allow customers to register by creating an account.\n2. The system must provide account management functionality for users to view and manage their accounts.\n3. The system must enable customers to transfer funds between their accounts.\n4. The system must allow customers to pay bills online.\n5. The system must display a transaction history for users to review past transactions.\n6. The system must offer customer support functionality for users to contact customer support for queries or issues.\n7. Customer support should provide solutions to queries raised by customers through an included support system.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n password\n  phone\n  registration_date\n}\n\nentity Account {\n  account_id <<key>>\n  account_type\n  balance\n  status\n}\n\nentity Transaction {\n  transaction_id <<key>>\n  transaction_date\n  amount\n  transaction_type\n  description\n}\n\nentity BillPayment {\n  bill_id <<key>>\n  payee_name\n  bill_amount\n  due_date\n  payment_date\n}\n\nentity FundTransfer {\n  transfer_id <<key>>\n  from_account <<foreign>>\n  to_account <<foreign>>\n  transfer_date\n  transfer_amount\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship OWNS {\n}\n\nrelationship MAKES {\n  transaction_date\n}\n\nrelationship PAYS_BILL {\n  payment_date\n}\n\nrelationship TRANSFERS_FUNDS {\n  transfer_date\n}\n\nrelationship SUPPORTS {\n}\n\nOWNS -1- Customer\nOWNS -N- Account\n\nMAKES -1- Account\nMAKES -N- Transaction\n\nPAYS_BILL -1- Account\nPAYS_BILL -N- BillPayment\n\nTRANSFERS_FUNDS -1- Account\nTRANSFERS_FUNDS -N- FundTransfer\n\nSUPPORTS -1- Customer\nSUPPORTS -N- CustomerSupport\n\n@endchen"
    },
    {
        "input": "Functional requirements for the DigiDocLocker:\n\n1. The system must allow citizens to register and log in to the platform.\n2. The system must allow users to upload documents in various file formats.\n3. The system must display the complete user profile based on the information stored in the database.\n4. The system must allow users to request documents from the respective issuers.\n5. The system must display certificate issuers’ names and the number of documents issued by the issuers to the user.\n6. The system must display the requesters’ names and the number of documents requested by them.\n Give me ERD for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n password\n  phone\n  registration_date\n}\n\nentity Document {\n  document_id <<key>>\n  document_type\n  upload_date\n  file_format\n  document_url\n}\n\nentity Profile {\n  profile_id <<key>>\n  user_id <<foreign>>\n password\n  full_name\n  address\n  date_of_birth\n}\n\nentity Issuer {\n  issuer_id <<key>>\n  issuer_name\n  issuer_type\n}\n\nentity Requester {\n  requester_id <<key>>\n  requester_name\n password\n  requester_type\n}\n\nrelationship REGISTERS {\n  registration_date\n}\n\nrelationship UPLOADS {\n  upload_date\n}\n\nrelationship ASSOCIATED_WITH {\n}\n\nrelationship ISSUED_BY {\n  issue_date\n}\n\nrelationship REQUESTED_BY {\n  request_date\n}\n\nREGISTERS -1- User\nREGISTERS -1- Profile\n\nUPLOADS -1- User\nUPLOADS -N- Document\n\nASSOCIATED_WITH -1- Profile\nASSOCIATED_WITH -N- Document\n\nISSUED_BY -1- Issuer\nISSUED_BY -N- Document\n\nREQUESTED_BY -1- Requester\nREQUESTED_BY -N- Document\n\n@endchen"
    },
    {
        "input": "Functional requirements for the E-Retail system:\n\n1. The system must allow sellers and customers to register and log in to the platform.\n2. The system must allow sellers to list products for sale.\n3. The system must display all available products for customers to view.\n4. The system must allow customers to buy products and make payments.\n5. The system must enable customers to rate the products they have purchased.\n6. The system must allow customers to report sellers for any violations or issues with the product or delivery.\n7. The system must display the contact information and rating of the seller to the customer before purchasing a product.\n \n Give me ERD for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n password\n  phone\n  address\n  registration_date\n}\n\nentity Customer {\n}\n\nentity Seller {\n  seller_id <<key>>\n  rating\n}\n\nUser =>= d { Customer, Seller }\n\nentity Product {\n  product_id <<key>>\n  name\n  description\n  price\n  category\n  stock\n  rating\n  upload_date\n}\n\nentity Order {\n  order_id <<key>>\n  order_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity Review {\n  review_id <<key>>\n  rating\n  comment\n  review_date\n}\n\nentity Report {\n  report_id <<key>>\n  report_date\n  issue_type\n  description\n}\n\nrelationship LISTS_PRODUCT {\n  listing_date\n}\n\nrelationship PLACES_ORDER {\n  order_date\n}\n\nrelationship MAKES_PAYMENT {\n  payment_date\n}\n\nrelationship HAS_SELLERREVIEWS {\n  review_date\n}\n\nrelationship HAS_PRODUCTREVIEWS {\n  review_date\n}\n\nrelationship REPORTS_SELLER {\n  report_date\n}\n\nrelationship GIVES{\n}\n\nLISTS_PRODUCT -1- Seller\nLISTS_PRODUCT -N- Product\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nMAKES_PAYMENT -1- Order\nMAKES_PAYMENT -1- Payment\n\nGIVES -1- Customer\nGIVES -N- Review\n\nHAS_PRODUCTREVIEWS -N- Review\nHAS_PRODUCTREVIEWS -1- Product\n\nHAS_SELLERREVIEWS -N- Review\nHAS_SELLERREVIEWS -1- Seller\n\nREPORTS_SELLER -1- Customer\nREPORTS_SELLER -N- Report\n\n@endchen"          
    },

    {
        "input": "Functional requirements for the Online Food Ordering System:\n\n1. The system must allow users to register and log in to the platform.\n2. The system must allow users to select a restaurant to order food from.\n3. The system must provide a menu for users to browse food items from the selected restaurant.\n4. The system must allow users to place an order for food.\n5. The system must facilitate payment through a secure payment gateway.\n6. The system must allow users to track the status of their orders.\n7. The system must allow users to contact customer support for any queries or issues.\n Give me ERD for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n}\nentity Restaurant {\n  restaurant_id <<key>>\n  name\n  location\n  contact_info\n  rating\n}\nentity Menu {\n  menu_id <<key>>\n  restaurant_id <<foreign>>\n  menu_type\n}\nentity MenuItem {\n  item_id <<key>>\n  menu_id <<foreign>>\n  name\n  description\n  price\n  availability\n}\nentity Order {\n  order_id <<key>>\n  order_date\n  total_amount\n  status\n}\nentity Payment {\n  payment_id <<key>>\n  payment_date\n  amount\n  payment_method\n  status\n}\nentity CustomerSupport {\n  support_id <<key>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship SELECTS {\n}\nrelationship CONTAINS_ITEMS {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship INCLUDES_ITEMS {\n}\nrelationship PLACES_ORDER {\n  order_date\n}\nrelationship MAKES_PAYMENT {\n  payment_date\n}\nrelationship CONTACTS_SUPPORT {\n}\n\nUser -1- SELECTS\nSELECTS -N- Restaurant\n\nMenu -1- CONTAINS_ITEMS\nCONTAINS_ITEMS -N- MenuItem\n\nMenu -1-  ASSOCIATED_WITH\nASSOCIATED_WITH -1- Restaurant\n\nOrder -1- INCLUDES_ITEMS\nINCLUDES_ITEMS -N- MenuItem\n\nUser -1- PLACES_ORDER \nPLACES_ORDER -N- Order\n\nOrder -1- MAKES_PAYMENT\nMAKES_PAYMENT -1- Payment\n\nUser -1- CONTACTS_SUPPORT\nCONTACTS_SUPPORT -N- CustomerSupport\n\n@endchen"
    },
    {
        "input": "Functional requirements for the Online Movie Ticket Booking System:\n\n1. The system must allow users to register and log in to the platform.\n2. The system must allow users to select a movie for which they want to book tickets.\n3. The system must allow users to select seats for the selected movie.\n4. The system must facilitate payment through a secure payment gateway.\n5. The system must confirm the ticket booking after payment is made.\n6. The system must allow users to cancel their ticket bookings if necessary.\n7. The system must allow users to contact customer support for any queries or issues.\n Give me ERD for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\nentity Movie {\n  movie_id <<key>>\n  title\n  genre\n  duration\n  rating\n  release_date\n}\nentity Screening {\n  screening_id <<key>>\n  movie_id <<foreign>>\n  theater\n  screening_date\n  screening_time\n}\nentity Seat {\n  seat_id <<key>>\n  screening_id <<foreign>>\n  seat_number\n  seat_type\n  status\n}\nentity Booking {\n  booking_id <<key>>\n  user_id <<foreign>>\n  screening_id <<foreign>>\n  booking_date\n  total_amount\n  status\n}\nentity Payment {\n  payment_id <<key>>\n  booking_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\nrelationship SELECTS_MOVIE {\n}\nrelationship SELECTS_SEAT {\n}\nrelationship MAKES_BOOKING {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship SHOWS {\n}\nrelationship HAS_SEATS {\n}\n\nUser -1- SELECTS_MOVIE\nSELECTS_MOVIE -N- Movie\nBooking -1- SELECTS_SEAT \nSELECTS_SEAT -N- Seat\nUser -1- MAKES_BOOKING\nMAKES_BOOKING -1- Booking\nBooking  -1- MAKES_PAYMENT\nMAKES_PAYMENT -1- Payment\nBooking -1- ASSOCIATED_WITH\nASSOCIATED_WITH -1- Screening\nScreening -1- SHOWS\nSHOWS -1- Movie\nScreening -1- HAS_SEATS\nHAS_SEATS -N- Seat\n\n@endchen"   
    },
    {
        "input": "Functional requirements for the Online Hotel Booking System:\n\n1. The system must allow users to register and log in to the platform.\n2. The system must allow users to select a hotel for which they want to book rooms.\n3. The system must allow users to select rooms in the selected hotel.\n4. The system must facilitate payment through a secure payment gateway.\n5. The system must confirm the booking of rooms after payment is made.\n6. The system must allow users to cancel their room bookings if necessary.\n7. The system must allow users to contact customer support for any queries or issues.\n Give me ERD for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\nentity Hotel {\n  hotel_id <<key>>\n  name\n  location\n  rating\n  contact_info\n}\nentity Room {\n  room_id <<key>>\n  hotel_id <<foreign>>\n  room_type\n  price\n  availability_status\n}\nentity Booking {\n  booking_id <<key>>\n  user_id <<foreign>>\n  hotel_id <<foreign>>\n  booking_date\n  total_amount\n  status\n}\nentity Payment {\n  payment_id <<key>>\n  booking_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\nentity CustomerSupport {\n  support_id <<key>>\n  user_id <<foreign>>\n  query_date\n  query_description\n  resolution_status\n}\nrelationship HAS_ROOMS {\n}\nrelationship SELECTS_ROOM {\n}\nrelationship MAKES_BOOKING {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship CONFIRMS_BOOKING {\n}\nrelationship CONTACTS_SUPPORT {\n}\n\nHotel -1- HAS_ROOMS\nHAS_ROOMS -N- Room\nBooking -1- SELECTS_ROOM\nSELECTS_ROOM -N- Room\nUser -1- MAKES_BOOKING\nMAKES_BOOKING -1- Booking\nBooking -1- MAKES_PAYMENT\nMAKES_PAYMENT -1- Payment\nBooking -1- CONFIRMS_BOOKING\nCONFIRMS_BOOKING -1- Hotel\nUser -1- CONTACTS_SUPPORT \nCONTACTS_SUPPORT -N- CustomerSupport\n\n@endchen"  
    },
    {
        "input": "Give me ERD for this system. Functional requirements for the Online Flight Booking System:\n\n1. The system must allow users to register and log in to the platform.\n2. The system must allow users to select a flight for which they want to book tickets.\n3. The system must allow users to select seats for the selected flight.\n4. The system must facilitate payment through a secure payment gateway.\n5. The system must confirm the booking of tickets after payment is made.\n6. The system must allow users to cancel their ticket bookings if necessary.\n7. The system must allow users to contact customer support for any queries or issues.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Flight {\n  flight_id <<key>>\n  airline\n  departure_city\n  arrival_city\n  departure_time\n  arrival_time\n}\n\nentity Seat {\n  seat_id <<key>>\n  flight_id <<foreign>>\n  seat_number\n  seat_type\n  status\n}\n\nentity Booking {\n  booking_id <<key>>\n  user_id <<foreign>>\n  flight_id <<foreign>>\n  booking_date\n  total_amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  booking_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  user_id <<foreign>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship SELECTS_FLIGHT {\n}\n\nrelationship SELECTS_SEAT {\n}\n\nrelationship MAKES_BOOKING {\n}\n\nrelationship MAKES_PAYMENT {\n}\n\nrelationship CONFIRMS_BOOKING {\n}\n\nrelationship CANCELS_BOOKING {\n  cancellation_date\n}\n\nrelationship CONTACTS_SUPPORT {\n}\n\nSELECTS_FLIGHT -1- User\nSELECTS_FLIGHT -N- Flight\n\nSELECTS_SEAT -1- Booking\nSELECTS_SEAT -N- Seat\n\nMAKES_BOOKING -1- User\nMAKES_BOOKING -1- Booking\n\nMAKES_PAYMENT -1- Booking\nMAKES_PAYMENT -1- Payment\n\nCONFIRMS_BOOKING -1- Booking\nCONFIRMS_BOOKING -1- Flight\n\nCANCELS_BOOKING -1- User\nCANCELS_BOOKING -1- Booking\n\nCONTACTS_SUPPORT -1- User\nCONTACTS_SUPPORT -N- CustomerSupport\n\n@endchen"
    },
    {
        "input": "Give me ERD for this system. Functional requirements for the Online Event Management System:\n\n1. The system must allow users to register and log in to the platform.\n2. The system must allow users to create events and manage event details.\n3. The system must allow users to promote events to attract attendees.\n4. The system must allow users to book tickets for events.\n5. The system must facilitate payment through a secure payment gateway for tickets.\n6. The system must allow users to track the status of events and ticket bookings.\n7. The system must allow users to contact customer support for any queries or issues.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Event {\n  event_id <<key>>\n  name\n  description\n  location\n  start_date\n  end_date\n}\n\nentity Ticket {\n  ticket_id <<key>>\n  event_id <<foreign>>\n  user_id <<foreign>>\n  booking_date\n  amount\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  ticket_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nentity CustomerSupport {\n  support_id <<key>>\n  user_id <<foreign>>\n  query_date\n  query_description\n  resolution_status\n}\n\nrelationship CREATES_EVENT {\n}\n\nrelationship PROMOTES_EVENT {\n}\n\nrelationship BOOKS_TICKET {\n}\n\nrelationship MAKES_PAYMENT {\n}\n\nrelationship TRACKS_EVENT {\n}\n\nrelationship CONTACTS_SUPPORT {\n}\n\nCREATES_EVENT -1- User\nCREATES_EVENT -N- Event\n\nPROMOTES_EVENT -1- User\nPROMOTES_EVENT -N- Event\n\nBOOKS_TICKET -1- User\nBOOKS_TICKET -1- Ticket\n\nMAKES_PAYMENT -1- Ticket\nMAKES_PAYMENT -1- Payment\n\nTRACKS_EVENT -1- User\nTRACKS_EVENT -N- Event\n\nCONTACTS_SUPPORT -1- User\nCONTACTS_SUPPORT -N- CustomerSupport\n\n@endchen"
    },
    {
        "input": "Design me ERD for this system.Functional requirements for the Law Enforcement System:\n\n1. The system must allow lawyers to register and log in to the platform.\n2. The system must allow lawyers to view case details and logs.\n3. The system must allow lawyers to add and update case details.\n4. The system must support both criminal and civil case categories.\n5. The system must provide online filing options for cases.\n6. The system must allow lawyers to download model forms for cases.\n7. The system must provide quick references for common legal cases.\n8. The system must offer e-books and other legal resources for reference.\n9. The system must allow lawyers to view blogs, news updates, and submit feedback.",
        "output": "@startchen\n\nentity Lawyer {\n  lawyer_id <<key>>\n  name\n  email\n  password\n  phone\n}\nentity Case {\n  case_id <<key>>\n  lawyer_id <<foreign>>\n  case_type\n  case_details\n  case_date\n}\nentity Document {\n  document_id <<key>>\n  case_id <<foreign>>\n  document_type\n  document_url\n}\nentity Calendar {\n  calendar_id <<key>>\n  lawyer_id <<foreign>>\n  event_date\n  event_details\n}\nentity Form {\n  form_id <<key>>\n  form_type\n  form_url\n}\nentity Exam {\n  exam_id <<key>>\n  exam_name\n  exam_date\n  exam_details\n}\nentity Feedback {\n  feedback_id <<key>>\n  lawyer_id <<foreign>>\n  feedback_date\n  feedback_details\n}\nrelationship HANDLES_CASE {\n}\nrelationship UPLOADS_DOCUMENT {\n}\nrelationship MANAGES_SCHEDULE {\n}\nrelationship ACCESSES {\n}\nrelationship PROVIDES_FEEDBACK {\n}\n\nLawyer -1- HANDLES_CASE\nHANDLES_CASE -N- Case\nCase -1- UPLOADS_DOCUMENT\nUPLOADS_DOCUMENT -N- Document\nLawyer -1- MANAGES_SCHEDULE\nMANAGES_SCHEDULE -N- Calendar\nLawyer -1- ACCESSES\nACCESSES -N- Form\nACCESSES -N- Exam\nLawyer -1- PROVIDES_FEEDBACK\nPROVIDES_FEEDBACK -N- Feedback\n\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional requirements for 'My Helper' application:\n\n1. The system must allow users to send an SMS to perform remote operations on their phones.\n2. The system must allow users to track the location of their phone via an SMS.\n3. The system must allow users to lock their phones remotely via an SMS.\n4. The system must allow users to change the sound profile (silent to normal) of their phone via an SMS.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  phone_number\n  email\n  password\n  registration_date\n}\n\nentity Device {\n  device_id <<key>>\n  user_id <<foreign>>\n  device_name\n  device_type\n  device_status\n  last_known_location\n}\n\nentity SMSCommand {\n  command_id <<key>>\n  command_type\n  description\n  execution_result\n}\n\nentity LocationHistory {\n  location_id <<key>>\n  device_id <<foreign>>\n  location_date\n  latitude\n  longitude\n}\n\nentity ProfileChange {\n  profile_change_id <<key>>\n  device_id <<foreign>>\n  change_date\n  previous_profile\n  new_profile\n}\n\nrelationship OWNS_DEVICE {\n}\n\nrelationship SENDS_COMMAND {\n}\n\nrelationship TRACKS_LOCATION {\n}\n\nrelationship CHANGES_PROFILE {\n}\n\nOWNS_DEVICE -1- User\nOWNS_DEVICE -N- Device\n\nSENDS_COMMAND -1- Device\nSENDS_COMMAND -N- SMSCommand\n\nTRACKS_LOCATION -1- Device\nTRACKS_LOCATION -N- LocationHistory\n\nCHANGES_PROFILE -1- Device\nCHANGES_PROFILE -N- ProfileChange\n\n@endchen"          
    },
    {
        "input": "Design me ERD for this system. Functional requirements for COVID-19 Management System:\n\n1. The system must allow healthcare organizations to track COVID-19 patients.\n2. The system must enable healthcare organizations to treat COVID-19 patients via virtual care.\n3. The system must provide the government with tools to monitor the spread of the virus.\n4. The system must allow healthcare organizations and the government to assess the risk profiles of patients.\n5. The system must raise awareness about COVID-19 among the general public.\n6. The system must allow patients to connect with virtual care services for consultation.\n7. The system must provide patients with the ability to buy medicines online.",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  age\n  gender\n  address\n  phone\n  email\n  password\n  registration_date\n}\n\nentity HealthcareProvider {\n  provider_id <<key>>\n  name\n  password\n  location\n  contact_info\n}\n\nentity TestResult {\n  result_id <<key>>\n  patient_id <<foreign>>\n  test_date\n  test_result\n}\n\nentity TreatmentPlan {\n  plan_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  treatment_date\n  treatment_details\n}\n\nentity AwarenessCampaign {\n  campaign_id <<key>>\n  campaign_name\n  campaign_date\n  campaign_details\n}\n\nentity VirtualCare {\n  care_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  care_date\n  care_details\n}\n\nrelationship HAS {\n}\n\nrelationship ASSIGNED_TREATMENT {\n}\n\nrelationship ASSIGNS_TREATMENT {\n}\n\nrelationship CONDUCTS_CAMPAIGN {\n}\n\nrelationship PROVIDES_VIRTUAL_CARE {\n}\n\nrelationship USES_VIRTUAL_CARE {\n}\n\nHAS -1- Patient\nHAS -N- TestResult\n\nASSIGNED_TREATMENT -1- Patient\nASSIGNED_TREATMENT -N- TreatmentPlan\n\nASSIGNS_TREATMENT -1- HealthcareProvider\nASSIGNS_TREATMENT -N- TreatmentPlan\n\nCONDUCTS_CAMPAIGN -1- HealthcareProvider\nCONDUCTS_CAMPAIGN -N- AwarenessCampaign\n\nUSES_VIRTUAL_CARE -1- Patient\nUSES_VIRTUAL_CARE -N- VirtualCare\n\nPROVIDES_VIRTUAL_CARE -1- HealthcareProvider\nPROVIDES_VIRTUAL_CARE -N- VirtualCare\n\n@endchen"          
    },
    {
        "input": "Design me ERD for this system. Functional requirements for 'Car Care' application:\n\n1. The system must allow car owners to register and log in.\n2. The system must allow car owners to enter car information.\n3. The system must allow service centers to enter the estimated expiry dates of car parts.\n4. The system must notify car owners and service centers about the expiry dates of car parts.\n5. The system must allow car owners to accept service requests and select the parts for service.\n6. The system must enable service centers to pick up the car, examine it, prepare a list of damaged parts, and perform the selected services.\n7. The system must allow the service center to update the car information after servicing.\n8. The system must provide an online payment option for car owners to make payments for the service.",
        "output": "@startchen\n\nentity CarOwner {\n  owner_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity ServiceCenter {\n  center_id <<key>>\n  name\n  location\n  contact_info\n}\n\nentity Car {\n  car_id <<key>>\n  owner_id <<foreign>>\n  make\n  model\n  year\n  registration_number\n}\n\nentity CarPart {\n  part_id <<key>>\n  car_id <<foreign>>\n  part_name\n  install_date\n  expiry_date\n  status\n}\n\nentity ServiceRequest {\n  request_id <<key>>\n  car_id <<foreign>>\n  center_id <<foreign>>\n  request_date\n  status\n}\n\nentity Service {\n  service_id <<key>>\n  request_id <<foreign>>\n  service_date\n  total_cost\n  payment_status\n}\n\nentity PartReplacement {\n  replacement_id <<key>>\n  service_id <<foreign>>\n  part_id <<foreign>>\n  replaced_date\n  cost\n}\n\nrelationship OWNS {\n}\n\nrelationship MONITORS {\n}\n\nrelationship SUBMITS_REQUEST {\n}\n\nrelationship HANDLES_SERVICE {\n}\n\nrelationship REPLACES_PART {\n}\n\nrelationship MAKES_PAYMENT {\n}\n\nOWNS -1- CarOwner\nOWNS -N- Car\n\nMONITORS -1- Car\nMONITORS -N- CarPart\n\nSUBMITS_REQUEST -1- CarOwner\nSUBMITS_REQUEST -N- ServiceRequest\n\nHANDLES_SERVICE -1- ServiceCenter\nHANDLES_SERVICE -N- ServiceRequest\n\nREPLACES_PART -1- Service\nREPLACES_PART -N- PartReplacement\n\nMAKES_PAYMENT -1- CarOwner\nMAKES_PAYMENT -N- Service\n\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional requirements for 'E-Ration Shop':\n\n1. The system must allow ration cardholders to register, log in, and order grocery items online.\n2. The system must display shop details, stock availability, and shop advertisements to ration cardholders.\n3. The system must notify ration cardholders about stock availability regularly.\n4. The system must provide product delivery functionality for ration cardholders.\n5. The system must provide a complaint forum for ration cardholders to submit grievances.\n6. The system must allow retailers to manage stock, advertise their shop, and deliver products.\n7. The system must support payments through PayTM, COD, and other payment gateways.\n8. The system must have admin and moderator functionalities, such as managing users, monitoring system usage, approving retailer applications, generating reports, and managing content.\n9. The system must use Aadhaar-based authentication and OTP verification for secure access.",
        "output": "@startchen\n\nentity RationCardHolder {\n  cardholder_id <<key>>\n  name\n  address\n  phone\n  email\n  registration_date\n}\nentity Shopkeeper {\n  shopkeeper_id <<key>>\n  name\n  shop_name\n  location\n  contact_info\n}\nentity Shop {\n  shop_id <<key>>\n  shopkeeper_id <<foreign>>\n  shop_name\n  location\n  geo_location\n  opening_time\n  closing_time\n}\nentity Product {\n  product_id <<key>>\n  product_name\n  category\n  price\n  stock\n}\nentity Order {\n  order_id <<key>>\n  cardholder_id <<foreign>>\n  shop_id <<foreign>>\n  product_id <<foreign>>\n  order_date\n  quantity\n  total_amount\n  status\n}\nentity Complaint {\n  complaint_id <<key>>\n  cardholder_id <<foreign>>\n  shop_id <<foreign>>\n  complaint_date\n  complaint_details\n  status\n}\nentity Payment {\n  payment_id <<key>>\n  order_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nrelationship HAS_SHOP {\n}\nrelationship SELLS_PRODUCT {\n}\nrelationship PLACES_ORDER {\n}\nrelationship RAISES_COMPLAINT {\n}\nrelationship PROCESSES_PAYMENT {\n}\n\nShopkeeper -1- HAS_SHOP\nHAS_SHOP -N- Shop\nShop -1- SELLS_PRODUCT\nSELLS_PRODUCT -N- Product\nRationCardHolder -1- PLACES_ORDER\nPLACES_ORDER -N- Order\nRationCardHolder -1- RAISES_COMPLAINT\nRAISES_COMPLAINT -N- Complaint\nOrder -1- PROCESSES_PAYMENT\nPROCESSES_PAYMENT -1- Payment\n\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional requirements for 'Textile Management System':\n\n1. The system must allow customers to register and sample available products.\n2. The system must allow customers and manufacturers to check stock availability.\n3. The system must support the purchasing and processing of raw materials by the manufacturer.\n4. The system must enable the production of garments by the manufacturer.\n5. The system must allow for product checking, clearance, and shipment of finished garments.\n6. The system must generate bills for customers and reports for manufacturers.\n7. The system must allow customers to order garments.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity RawMaterial {\n  material_id <<key>>\n  material_name\n  supplier\n  quantity\n  price\n  purchase_date\n}\n\nentity Garment {\n  garment_id <<key>>\n  garment_name\n  size\n  color\n  quantity\n  production_date\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  delivery_date\n  status\n}\n\nentity Shipment {\n  shipment_id <<key>>\n  order_id <<foreign>>\n  shipment_date\n  delivery_status\n}\n\nentity Invoice {\n  invoice_id <<key>>\n  order_id <<foreign>>\n  total_amount\n  payment_status\n}\n\nentity Report {\n  report_id <<key>>\n  report_date\n  issue_type\n  description\n}\n\nrelationship PLACES_ORDER {\n}\n\nrelationship CONTAINS_MATERIAL {\n}\n\nrelationship PRODUCES_GARMENT {\n}\n\nrelationship SHIPS_ORDER {\n}\n\nrelationship GENERATES_INVOICE {\n}\n\nrelationship GENERATES_REPORT {\n}\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nCONTAINS_MATERIAL -1- Order\nCONTAINS_MATERIAL -N- RawMaterial\n\nPRODUCES_GARMENT -N- RawMaterial\nPRODUCES_GARMENT -N- Garment\n\nSHIPS_ORDER -1- Order\nSHIPS_ORDER -1- Shipment\n\nGENERATES_INVOICE -1- Order\nGENERATES_INVOICE -1- Invoice\n\nGENERATES_REPORT -1- Order\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional requirements for 'Hotel Reservation System':\n\n1. The system must allow customers to register, log in, search available rooms, book rooms, and make payments.\n2. The system must allow customers to view their reservations and contact customer support.\n3. The system must allow hotel managers to add or update room details and generate reports.\n4. The system must provide customer support to assist users with their queries and issues.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Room {\n  room_id <<key>>\n  room_type\n  capacity\n  rate_per_night\n  availability_status\n}\n\nentity Reservation {\n  reservation_id <<key>>\n  customer_id <<foreign>>\n  room_id <<foreign>>\n  check_in_date\n  check_out_date\n  reservation_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  reservation_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  payment_status\n}\n\nentity SupportTicket {\n  ticket_id <<key>>\n  customer_id <<foreign>>\n  issue_type\n  description\n  status\n  created_date\n  resolved_date\n}\n\nentity Report {\n  report_id <<key>>\n  reservation_id <<foreign>>\n  generated_date\n  report_type\n  description\n}\n\nrelationship MAKES_RESERVATION {\n}\nrelationship ASSIGNS_ROOM {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship CREATES_TICKET {\n}\nrelationship GENERATED_FROM {\n}\n\nMAKES_RESERVATION -1- Customer\nMAKES_RESERVATION -N- Reservation\n\nASSIGNS_ROOM -1- Reservation\nASSIGNS_ROOM -1- Room\n\nMAKES_PAYMENT -1- Reservation\nMAKES_PAYMENT -1- Payment\n\nCREATES_TICKET -1- Customer\nCREATES_TICKET -N- SupportTicket\n\nGENERATED_FROM -N- Report\nGENERATED_FROM -1- Reservation\n\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional requirements for 'Learning Management System':\n\n1. The system must allow students to register, enroll in courses, submit assignments, and view their grades.\n2. The system must allow instructors to create courses, manage student assignments, and grade submissions.\n3. The system must facilitate collaboration through discussion forums for students and instructors.\n4. The system must provide a feedback mechanism for students to share their learning experiences with instructors.",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Instructor {\n  instructor_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Course {\n  course_id <<key>>\n  title\n  description\n  instructor_id <<foreign>>\n  start_date\n  end_date\n}\n\nentity Assignment {\n  assignment_id <<key>>\n  course_id <<foreign>>\n  student_id <<foreign>>\n  title\n  description\n  due_date\n  grade\n}\n\nentity DiscussionForum {\n  forum_id <<key>>\n  course_id <<foreign>>\n  topic\n  post_date\n  post_content\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  feedback_date\n  feedback_content\n}\n\nrelationship ENROLLS_IN {\n}\nrelationship TEACHES {\n}\nrelationship SUBMITS_ASSIGNMENT {\n}\nrelationship PARTICIPATES_IN_FORUM {\n}\nrelationship PROVIDES_FEEDBACK {\n}\n\nENROLLS_IN -1- Student\nENROLLS_IN -N- Course\n\nTEACHES -1- Instructor\nTEACHES -N- Course\n\nSUBMITS_ASSIGNMENT -1- Student\nSUBMITS_ASSIGNMENT -N- Assignment\n\nPARTICIPATES_IN_FORUM -N- Student\nPARTICIPATES_IN_FORUM -1- DiscussionForum\n\nPROVIDES_FEEDBACK -1- Student\nPROVIDES_FEEDBACK -N- Feedback\n\n@endchen"
    },
    {
        "input": "Functional requirements for 'Inventory Management System':\n\n1. The system must allow store managers to view current inventory levels, reorder products, and manage suppliers.\n2. The system must track deliveries and update inventory levels accordingly.\n3. The system must generate reports on product usage and reorder history. Design me ERD for this system.",
        "output": "@startchen\n\nentity StoreManager {\n  manager_id <<key>>\n  name\n  email\n  password\n  contact_number\n  store_location\n}\n\nentity Product {\n  product_id <<key>>\n  name\n  description\n  price\n  reorder_level\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  product_id <<foreign>>\n  location\n  quantity_in_stock\n  last_updated\n}\n\nentity Supplier {\n  supplier_id <<key>>\n  name\n  contact_info\n  address\n}\n\nentity Order {\n  order_id <<key>>\n  supplier_id <<foreign>>\n  manager_id <<foreign>>\n  order_date\n  total_amount\n  status\n}\n\nentity Delivery {\n  delivery_id <<key>>\n  order_id <<foreign>>\n  delivery_date\n  received_by\n  delivery_status\n}\n\nentity Report {\n  report_id <<key>>\n  report_date\n  report_type\n  description\n}\n\nrelationship MANAGES_INVENTORY {\n}\nrelationship PLACES_ORDER {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship SUPPLIES {\n}\nrelationship STORES_IN {\n}\n\nMANAGES_INVENTORY -1- StoreManager\nMANAGES_INVENTORY -N- Inventory\n\nSTORES_IN -N- Product\nSTORES_IN -1- Inventory\n\nPLACES_ORDER -1- StoreManager\nPLACES_ORDER -N- Order\n\nASSOCIATED_WITH -1- Order\nASSOCIATED_WITH -1- Delivery\n\nGENERATES_REPORT -1- StoreManager\nGENERATES_REPORT -N- Report\n\nSUPPLIES -1- Supplier\nSUPPLIES -N- Product\n\n@endchen"
    },
    {
        "input": "Functional requirements for 'Gym Management System':\n\n1. The system must allow users to register as members, book sessions, and track their fitness progress.\n2. Trainers must be able to create workout plans, manage their schedules, and monitor client progress.\n3. The system must handle membership payments through an integrated payment gateway. Design me ERD for this system.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n  membership_status\n}\n\nentity Trainer {\n  trainer_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n  experience_years\n}\n\nentity Membership {\n  membership_id <<key>>\n  user_id <<foreign>>\n  start_date\n  end_date\n  status\n  membership_type\n}\n\nentity Session {\n  session_id <<key>>\n  trainer_id <<foreign>>\n  user_id <<foreign>>\n  session_date\n  session_time\n  status\n}\n\nentity WorkoutPlan {\n  workout_id <<key>>\n  trainer_id <<foreign>>\n  user_id <<foreign>>\n  plan_details\n  start_date\n  end_date\n}\n\nentity Progress {\n  progress_id <<key>>\n  user_id <<foreign>>\n  workout_id <<foreign>>\n  date\n  weight\n  body_fat\n  muscle_mass\n  notes\n}\n\nentity Payment {\n  payment_id <<key>>\n  user_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  status\n}\n\nrelationship SIGNS_UP {\n}\nrelationship TRAINS_SESSION {\n}\nrelationship BOOKS_SESSION {\n}\nrelationship TRACKS_PROGRESS {\n}\nrelationship MANAGES_PAYMENT {\n}\nrelationship CREATES_PLAN {\n}\n\nSIGNS_UP -1- User\nSIGNS_UP -1- Membership\n\nTRAINS_SESSION -1- Trainer\nTRAINS_SESSION -N- Session\n\nBOOKS_SESSION -1- User\nBOOKS_SESSION -N- Session\n\nTRACKS_PROGRESS -1- WorkoutPlan\nTRACKS_PROGRESS -N- Progress\n\nMANAGES_PAYMENT -1- User\nMANAGES_PAYMENT -N- Payment\n\nCREATES_PLAN -1- Trainer\nCREATES_PLAN -N- WorkoutPlan\n\n@endchen"
    },
    {
        "input": "Functional requirements for 'Warehouse Management System':\n\n1. The system must track stock levels in real-time and manage shipments and deliveries.\n2. Warehouse managers must be able to manage the entire stock lifecycle, generate reports, and manage employee schedules.\n3. The system must include inventory optimization features to adjust stock based on real-time demand. Design me ERD for this system.",
        "output": "@startchen\n\nentity WarehouseManager {\n  manager_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Employee {\n  employee_id <<key>>\n  name\n  email\n  password\n  phone\n  role\n  shift\n}\n\nentity StockItem {\n  item_id <<key>>\n  name\n  category\n  quantity\n  location\n  last_updated\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  item_id <<foreign>>\n  current_quantity\n  reorder_point\n  safety_stock\n  lead_time\n  last_checked\n}\n\nentity Shipment {\n  shipment_id <<key>>\n  item_id <<foreign>>\n  quantity\n  shipment_date\n  delivery_date\n  status\n}\n\nentity Report {\n  report_id <<key>>\n  manager_id <<foreign>>\n  report_date\n  report_type\n  description\n}\n\nentity Schedule {\n  schedule_id <<key>>\n  employee_id <<foreign>>\n  shift_date\n  shift_time\n  status\n}\n\nrelationship MANAGES {\n managed_by\n}\nrelationship MANAGES_STOCK {\n}\nrelationship TRACKS_ITEM {\n}\nrelationship HAS_SHIPMENT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship HAS_SCHEDULE {\n}\n\nMANAGES -1- WarehouseManager\nMANAGES -1- Inventory\n\nMANAGES_STOCK -1- Employee\nMANAGES_STOCK -N- StockItem\n\nTRACKS_ITEM -1- Inventory\nTRACKS_ITEM -N- StockItem\n\nHAS_SHIPMENT -1- StockItem\nHAS_SHIPMENT -N- Shipment\n\nGENERATES_REPORT -1- WarehouseManager\nGENERATES_REPORT -N- Report\n\nHAS_SCHEDULE -1- Employee\nHAS_SCHEDULE -N- Schedule\n\n@endchen"
    },
    {
        "input": "Functional Requirements for Hospital Management System:\n1. The system shall allow patients to book appointments with available doctors.\n2. The system shall enable patients to view their medical records for ongoing treatments.\n3. The system shall allow patients to receive prescriptions electronically after consultations.\n4. The system shall allow doctors to manage patient records efficiently, keeping them up-to-date with relevant information.\n5. The system shall enable doctors to schedule follow-up appointments with patients.\n6. The system shall generate invoices for medical services used by patients through the billing module.\n7. The system shall allow doctors to issue prescriptions electronically, minimizing paperwork.\n Design me ERD for this system.",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\nentity Doctor {\n  doctor_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n  experience_years\n}\nentity Appointment {\n  appointment_id <<key>>\n  patient_id <<foreign>>\n  doctor_id <<foreign>>\n  appointment_date\n  appointment_time\n  status\n}\nentity MedicalRecord {\n  record_id <<key>>\n  patient_id <<foreign>>\n  doctor_id <<foreign>>\n  record_date\n  diagnosis\n  treatment\n}\nentity Prescription {\n  prescription_id <<key>>\n  doctor_id <<foreign>>\n  patient_id <<foreign>>\n  prescription_date\n  medication\n  dosage\n}\nentity Invoice {\n  invoice_id <<key>>\n  patient_id <<foreign>>\n  doctor_id <<foreign>>\n  invoice_date\n  total_amount\n  payment_status\n}\n\nrelationship BOOKS_APPOINTMENT {\n}\nrelationship HAS_APPOINTMENT {\n}\nrelationship CREATES_RECORD {\n}\nrelationship HAS_RECORD {\n}\nrelationship GIVES_PRESCRIPTION {\n}\nrelationship HAS_PRESCRIPTION {\n}\nrelationship GENERATES_INVOICE {\n}\n\nPatient -1- BOOKS_APPOINTMENT\nBOOKS_APPOINTMENT -N- Appointment\nDoctor -1- HAS_APPOINTMENT\nHAS_APPOINTMENT -N- Appointment\nDoctor -1- CREATES_RECORD\nCREATES_RECORD -N- MedicalRecord\nPatient -1- HAS_RECORD\nHAS_RECORD -N- MedicalRecord\nDoctor -1- GIVES_PRESCRIPTION\nGIVES_PRESCRIPTION -N- Prescription\nPatient -1- HAS_PRESCRIPTION\nHAS_PRESCRIPTION -N- Prescription\nDoctor -1- GENERATES_INVOICE\nGENERATES_INVOICE -N- Invoice\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional Requirements for Banking System:\n1. The system shall allow customers to deposit money into their accounts.\n2. The system shall allow customers to withdraw money from their accounts.\n3. The system shall allow customers to transfer funds between accounts.\n4. The system shall allow customers to check their account balances.\n5. The system shall allow customers to apply for loans.\n6. The system shall provide customers with access to their transaction history.\n7. The system shall allow bank employees to manage customer accounts, including details and status.\n8. The system shall allow bank employees to approve or reject loan applications submitted by customers.\n9. The system shall allow bank employees to generate reports on banking operations.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Employee {\n  employee_id <<key>>\n  name\n  email\n  password\n  phone\n  role\n  department\n}\n\nentity Account {\n  account_id <<key>>\n  customer_id <<foreign>>\n  account_type\n  balance\n  status\n}\n\nentity Transaction {\n  transaction_id <<key>>\n  account_id <<foreign>>\n  transaction_date\n  transaction_type\n  amount\n  description\n}\n\nentity Loan {\n  loan_id <<key>>\n  customer_id <<foreign>>\n  loan_type\n  amount\n  status\n}\n\nentity Report {\n  report_id <<key>>\n  employee_id <<foreign>>\n  customer_id <<foreign, optional>>\n  account_id <<foreign, optional>>\n  loan_id <<foreign, optional>>\n  report_date\n  report_type\n  description\n}\n\nrelationship OPENS_ACCOUNT {\n}\nrelationship HAS_TRANSACTION {\n}\nrelationship TAKES_LOAN {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship REPORTS_ON {\n}\n\nOPENS_ACCOUNT -1- Customer\nOPENS_ACCOUNT -N- Account\n\nHAS_TRANSACTION -1- Account\nHAS_TRANSACTION -N- Transaction\n\nTAKES_LOAN -1- Customer\nTAKES_LOAN -N- Loan\n\nGENERATES_REPORT -1- Employee\nGENERATES_REPORT -N- Report\n\nREPORTS_ON -1- Report\nREPORTS_ON -0..1- Customer\nREPORTS_ON -0..1- Account\nREPORTS_ON -0..1- Loan\n\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional Requirements for Car Rental System:\n1. The system shall allow customers to search for available cars.\n2. The system shall allow customers to select the desired car for rental.\n3. The system shall allow customers to make a reservation for the selected car.\n4. The system shall allow customers to view their booking history.\n5. The system shall allow customers to cancel their bookings if needed.\n6. The system shall allow car rental agencies to manage their fleet of cars.\n7. The system shall allow car rental agencies to track bookings made by customers.\n8. The system shall allow car rental agencies to generate reports on rental activity.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity CarRentalAgency {\n  agency_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n}\n\nentity Car {\n  car_id <<key>>\n  agency_id <<foreign>>\n  make\n  model\n  year\n  registration_number\n  availability_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  customer_id <<foreign>>\n  car_id <<foreign>>\n  booking_date\n  start_date\n  end_date\n  status\n}\n\nentity Report {\n  report_id <<key>>\n  agency_id <<foreign>>\n  report_date\n  report_type\n  description\n}\n\nrelationship MAKES_BOOKING {\n}\nrelationship MANAGES_CAR {\n}\nrelationship HAS {\n}\nrelationship GENERATES_REPORT {\n}\n\nMAKES_BOOKING -1- Customer\nMAKES_BOOKING -N- Booking\n\nMANAGES_CAR -1- CarRentalAgency\nMANAGES_CAR -N- Car\n\nHAS -1- Car\nHAS -N- Booking\n\nGENERATES_REPORT -1- CarRentalAgency\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional Requirements for Final Year Project (FYP) Management System:\n1. The system shall allow students to submit their project proposals for approval.\n2. The system shall allow students to upload progress reports at various stages of the project.\n3. The system shall allow students to track the evaluation status of their projects.\n4. The system shall allow supervisors to review student submissions and provide detailed feedback.\n5. The system shall allow supervisors to set project deadlines to ensure students stay on track.\n6. The system shall allow supervisors to monitor the progress of each student.\n7. The system shall allow panel members to evaluate projects during key milestones and offer scores.\n8. The system shall allow the FYP committee to assign panel members to projects.\n9. The system shall allow the FYP committee to approve or reject proposals based on academic standards.\n10. The system shall allow the FYP committee to ensure the overall quality of the submitted projects.\n11. The system shall facilitate communication between students, supervisors, and panel members to foster collaboration.",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\nentity Supervisor {\n  supervisor_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\nentity Group {\n  group_id <<key>>\n  supervisor_id <<foreign>>\n}\nentity PanelMember {\n  panel_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\nentity Project {\n  project_id <<key>>\n  group_id <<foreign>>\n  panel_id <<foreign>>\n  title\n  description\n  start_date\n  end_date\n  status\n}\nentity Proposal {\n  proposal_id <<key>>\n  project_id <<foreign>>\n  proposal_date\n  proposal_status\n  proposal_details\n}\nentity ProgressReport {\n  report_id <<key>>\n  project_id <<foreign>>\n  report_date\n  report_status\n  report_details\n}\nentity Evaluation {\n  evaluation_id <<key>>\n  project_id <<foreign>>\n  panel_id <<foreign>>\n  evaluation_date\n  score\n  comments\n}\nrelationship CONSISTS_OF {\n}\nrelationship SUPERVISES {\n}\nrelationship DOES_PROJECT {\n}\nrelationship SUBMITS_PROPOSAL {\n}\nrelationship UPLOADS_REPORT {\n}\nrelationship HAS {\n}\nrelationship EVALUATES_PROJECT {\n}\n\nGroup -1- CONSISTS_OF\nCONSISTS_OF -3- Student\nSupervisor -1- SUPERVISES\nSUPERVISES -N- Group\nGroup -1- DOES_PROJECT\nDOES_PROJECT -1- Project\nGroup -1- SUBMITS_PROPOSAL\nSUBMITS_PROPOSAL -1- Proposal\nGroup -1- UPLOADS_REPORT\nUPLOADS_REPORT -N- ProgressReport\nProject -1- HAS\nHAS -N- Evaluation\nPanelMember -1- EVALUATES_PROJECT\nEVALUATES_PROJECT -N- Evaluation\n@endchen"
    },
    {
        "input": "Design me ERD for this system. Functional Requirements for 'Online Auction System':\n1. The system shall allow users to register and create accounts for bidding.\n2. The system shall allow users to browse and search for items available for auction.\n3. The system shall allow users to place bids on items they are interested in.\n4. The system shall notify users of the status of their bids and the auction results.\n5. The system shall allow sellers to list items for auction and set starting prices.\n6. The system shall allow sellers to monitor the progress of their auctions and view bids placed on their items.\n7. The system shall allow sellers to close auctions and finalize transactions with winning bidders.\n8. The system shall provide a secure payment gateway for users to make payments for won items.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Seller {\n  seller_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Item {\n  item_id <<key>>\n  seller_id <<foreign>>\n  item_name\n  description\n  starting_price\n  auction_status\n}\n\nentity Bid {\n  bid_id <<key>>\n  user_id <<foreign>>\n  item_id <<foreign>>\n  bid_amount\n  bid_date\n  bid_status\n}\n\nentity Transaction {\n  transaction_id <<key>>\n  user_id <<foreign>>\n  item_id <<foreign>>\n  transaction_date\n  payment_status\n}\n\nrelationship REGISTERS {\n}\nrelationship SELLS_ITEM {\n}\nrelationship PLACES_BID {\n}\nrelationship MAKES_TRANSACTION {\n}\n\nREGISTERS -1- User\nREGISTERS -1- Seller\n\nSELLS_ITEM -1- Seller\nSELLS_ITEM -N- Item\n\nPLACES_BID -1- User\nPLACES_BID -N- Bid\n\nMAKES_TRANSACTION -1- User\nMAKES_TRANSACTION -1- Transaction\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Volunteer Management System:\n1. The system shall allow volunteers to sign up for events.\n2. The system shall allow volunteers to view assigned tasks.\n3. The system shall track the participation hours of each volunteer.\n4. The system shall allow volunteers to update their availability for events.\n5. The system shall allow coordinators to assign tasks to volunteers.\n6. The system shall allow coordinators to track the participation of volunteers.\n7. The system shall allow event managers to schedule events in advance.\n8. The system shall allow event managers to approve volunteer rosters for events.\n9. The system shall allow event managers to monitor the success and effectiveness of events.\n10. The system shall generate reports on participation and event success for evaluation.",
        "output": "@startchen\n\nentity Volunteer {\n  volunteer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity EventCoordinator {\n  coordinator_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\n\nentity Task {\n  task_id <<key>>\n  volunteer_id <<foreign>>\n  event_id <<foreign>>\n  task_description\n  task_status\n}\n\nentity Event {\n  event_id <<key>>\n  coordinator_id <<foreign>>\n  event_date\n  event_time\n  location\n  status\n}\n\nentity ParticipationRecord {\n  record_id <<key>>\n  volunteer_id <<foreign>>\n  event_id <<foreign>>\n  participation_date\n  participation_hours\n}\n\nentity Report {\n  report_id <<key>>\n  coordinator_id <<foreign>>\n  event_id <<foreign>>\n  report_date\n  report_type\n  description\n}\n\nrelationship SIGNS_UP_FOR_EVENT {\n}\nrelationship MANAGES_TASK {\n}\nrelationship SCHEDULES_EVENT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship HAS_TASK {\n}\nrelationship RECORDS_PARTICIPATION {\n}\nrelationship DOCUMENTS_EVENT {\n}\n\nSIGNS_UP_FOR_EVENT -1- Volunteer\nSIGNS_UP_FOR_EVENT -N- Event\n\nMANAGES_TASK -1- Volunteer\nMANAGES_TASK -N- Task\n\nSCHEDULES_EVENT -1- EventCoordinator\nSCHEDULES_EVENT -N- Event\n\nGENERATES_REPORT -1- EventCoordinator\nGENERATES_REPORT -N- Report\n\nHAS_TASK -1- Event\nHAS_TASK -N- Task\n\nRECORDS_PARTICIPATION -1- Event\nRECORDS_PARTICIPATION -1- ParticipationRecord\n\nDOCUMENTS_EVENT -1- Event\nDOCUMENTS_EVENT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Hiring System at TechHire Solutions:\n1. The system shall allow candidates to submit applications including resumes and cover letters.\n2. The system shall scan resumes for relevant skills, experience, and qualifications.\n3. The system shall automatically shortlist candidates based on the scan results.\n4. The system shall allow recruiters to schedule interviews for shortlisted candidates.\n5. The system shall allow interviewers to provide feedback and ratings after each interview round.\n6. The system shall allow recruiters to select the most qualified candidates based on interview feedback.\n7. The system shall generate offer letters for selected candidates.\n8. The system shall track the overall hiring status across all stages of the recruitment cycle.",
        "output": "@startchen\n\nentity Candidate {\n  candidate_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  application_date\n}\n\nentity Interviewer {\n  interviewer_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\n\nentity JobApplication {\n  application_id <<key>>\n  candidate_id <<foreign>>\n  position\n  resume\n  cover_letter\n  application_status\n}\n\nentity InterviewRound {\n  round_id <<key>>\n  application_id <<foreign>>\n  interviewer_id <<foreign>>\n  round_date\n  round_type\n  feedback\n  rating\n}\n\nentity HiringDecision {\n  decision_id <<key>>\n  application_id <<foreign>>\n  decision_date\n  decision_status\n  offer_letter\n}\n\nentity HiringStatus {\n  status_id <<key>>\n  application_id <<foreign>>\n  interview_status\n  hiring_status\n}\n\nrelationship SUBMITS_APPLICATION {\n}\nrelationship CONDUCTS_INTERVIEW {\n}\nrelationship LOGS_FEEDBACK {\n}\nrelationship HAS_DECISION {\n}\nrelationship TRACKS_STATUS {\n}\n\nSUBMITS_APPLICATION -1- Candidate\nSUBMITS_APPLICATION -N- JobApplication\n\nCONDUCTS_INTERVIEW -1- Interviewer\nCONDUCTS_INTERVIEW -N- InterviewRound\n\nLOGS_FEEDBACK -1- InterviewRound\nLOGS_FEEDBACK -N- JobApplication\n\nHAS_DECISION -1- JobApplication\nHAS_DECISION -1- HiringDecision\n\nTRACKS_STATUS -1- JobApplication\nTRACKS_STATUS -1- HiringStatus\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for GitHub Universe 2023 Management System:\n1. The system shall allow participants to register for the event.\n2. The system shall allow participants to sign up for keynotes and workshops.\n3. The system shall manage sponsor onboarding and interactions.\n4. The system shall track sponsor branding during the event.\n5. The system shall manage the overall event schedule.\n6. The system shall send real-time updates to all users.\n7. The system shall allow participants to submit feedback on the sessions they attend.\n8. The system shall allow speakers to schedule and present technical talks.\n9. The system shall generate reports based on user feedback and event metrics.\n10. The system shall monitor event attendance.\n11. The system shall allow sponsors to submit sponsorship proposals.\n12. The system shall allow sponsors to review their benefits for sponsoring the event.",
        "output": "@startchen\n\nentity Sponsor {\n  sponsor_id <<key>>\n  name\n  email\n  password\n  phone\n  company\n  proposal\n  benefits\n  registration_date\n}\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\nentity Participant {\n  participant_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n  registration_status\n}\nentity Speaker {\n  speaker_id <<key>>\n  name\n  email\n  phone\n  topic\n  session_date\n  session_time\n}\nentity Event {\n  event_id <<key>>\n  organizer_id <<foreign>>\n  event_date\n  event_time\n  location\n  status\n}\nentity Feedback {\n  feedback_id <<key>>\n  participant_id <<foreign>>\n  event_id <<foreign>>\n  feedback_date\n  rating\n  comment\n}\nentity Notification {\n  notification_id <<key>>\n  event_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n}\nrelationship SUBMITS_PROPOSAL {\n}\nrelationship MANAGES_SPONSOR {\n}\nrelationship REGISTERS_FOR {\n}\nrelationship SCHEDULES_SESSION {\n}\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship SENDS_NOTIFICATION {\n}\n\nSponsor -1- SUBMITS_PROPOSAL \nSUBMITS_PROPOSAL -N- Event\nOrganizer -1- MANAGES_SPONSOR\nMANAGES_SPONSOR -N- Sponsor\nParticipant -1- REGISTERS_FOR\nREGISTERS_FOR -N- Event\nSpeaker -1- SCHEDULES_SESSION\nSCHEDULES_SESSION -N- Event\nParticipant -1- PROVIDES_FEEDBACK\nPROVIDES_FEEDBACK -N- Feedback\nEvent -1- SENDS_NOTIFICATION\nSENDS_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for University Course Registration System:\n1. The system shall allow students to search for available courses.\n2. The system shall allow students to add courses to their course list.\n3. The system shall allow students to register for the upcoming semester.\n4. The system shall allow students to drop courses if needed.\n5. The system shall allow students to view their academic history.\n6. The system shall allow professors to view the list of enrolled students.\n7. The system shall allow professors to assign grades to students.\n8. The system shall allow professors to provide feedback on assignments.",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\nentity Professor {\n  professor_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\nentity Course {\n  course_id <<key>>\n  professor_id <<foreign>>\n  course_name\n  course_code\n  department\n  semester\n}\nentity Enrollment {\n  enrollment_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  enrollment_date\n  enrollment_status\n}\nentity Assignment {\n  assignment_id <<key>>\n  course_id <<foreign>>\n  student_id <<foreign>>\n  assignment_title\n  due_date\n  submission_date\n  grade\n  feedback\n}\nentity Grade {\n  grade_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  grade_date\n  grade\n}\nentity AcademicHistory {\n  history_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  action_date\n  action_type\n  notes\n}\nrelationship REGISTERS_COURSE {\n}\nrelationship GRADES_COURSE {\n}\nrelationship TRACKS_HISTORY {\n}\nrelationship ENROLLS_IN {\n}\nrelationship TEACHES_COURSE {\n}\nrelationship COMPLETES_ASSIGNMENT {\n}\nrelationship GIVE_FEEDBACK {\n}\n\nStudent -1- REGISTERS_COURSE\nREGISTERS_COURSE -N- Enrollment\nProfessor -1- GRADES_COURSE\nGRADES_COURSE -N- Grade\nStudent -1- TRACKS_HISTORY\nTRACKS_HISTORY -N- AcademicHistory\nEnrollment -1- ENROLLS_IN\nENROLLS_IN -1- Course\nProfessor -1- TEACHES_COURSE\nTEACHES_COURSE -N- Course\nStudent -1- COMPLETES_ASSIGNMENT\nCOMPLETES_ASSIGNMENT -N- Assignment\nProfessor -1- GIVE_FEEDBACK\nGIVE_FEEDBACK -N- Assignment\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Social Media Platform:\n1. The system shall allow users to create and manage their profiles.\n2. The system shall allow users to post content, including text, images, and videos.\n3. The system shall allow users to interact with other users by commenting and liking posts.\n4. The system shall allow users to join and participate in group discussions.\n5. The system shall allow users to send private messages to each other.\n6. The system shall notify users about new activities on the platform, such as interactions with their posts.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Post {\n  post_id <<key>>\n  user_id <<foreign>>\n  post_date\n  content\n  likes\n  comments\n}\n\nentity Group {\n  group_id <<key>>\n  group_name\n  description\n  member_count\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  message_date\n  message_content\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n}\n\nrelationship CREATES_POST {\n}\nrelationship JOINS_GROUP {\n}\nrelationship SENDS_MESSAGE {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nCREATES_POST -1- User\nCREATES_POST -N- Post\n\nJOINS_GROUP -(1,N)- User\nJOINS_GROUP -(N,1)- Group\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Social Networking Platform (like Facebook):\n1. The system shall allow users to create personalized profiles.\n2. The system shall allow users to send and accept friend requests to build connections.\n3. The system shall allow users to share posts including text, photos, and videos.\n4. The system shall allow users to engage with posts through likes, comments, and reactions.\n5. The system shall allow users to send private messages and share media.\n6. The system shall notify users in real-time about interactions and new connections.\n7. The system shall allow business users to create and manage business pages.\n8. The system shall allow business users to manage targeted advertisements.\n9. The system shall allow moderators to monitor content and ensure it complies with community guidelines.\n10. The system shall allow administrators to manage platform-wide activities and enforce guidelines.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n}\nentity BusinessUser {\n  business_user_id <<key>>\n  business_name\n  business_type\n}\nentity Moderator {\n  moderator_id <<key>>\n  assigned_area\n}\nentity Administrator {\n  admin_id <<key>>\n  permissions\n}\nUser ->- d { BusinessUser, Moderator, Administrator }\n\nentity Post {\n  post_id <<key>>\n  user_id <<foreign>>\n  post_date\n  content\n  likes\n  comments\n}\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  message_date\n  message_content\n}\nentity Page {\n  page_id <<key>>\n  user_id <<foreign>>\n  page_name\n  description\n  followers\n}\nentity Advertisement {\n  ad_id <<key>>\n  business_user_id <<foreign>>\n  page_id <<foreign>>\n  ad_content\n  target_audience\n  ad_date\n  status\n}\n\nrelationship CREATES_POST {\n}\nrelationship SENDS_MESSAGE {\n}\nrelationship CREATES_PAGE {\n}\nrelationship MANAGES_ADVERTISEMENT {\n}\nrelationship BEFRIENDS {\n  friendship_date\n  status\n}\nrelationship MODERATE_POSTS {\n  moderation_date\n  action_taken\n  notes\n}\n\nUser -1- CREATES_POST\nCREATES_POST -N- Post\nUser -1- BEFRIENDS\nBEFRIENDS -N- User\nUser -1- SENDS_MESSAGE\nSENDS_MESSAGE -N- Message\nBusinessUser -1- CREATES_PAGE\nCREATES_PAGE -N- Page\nBusinessUser -1- MANAGES_ADVERTISEMENT\nMANAGES_ADVERTISEMENT -N- Advertisement\nModerator -1- MODERATE_POSTS\nMODERATE_POSTS -N- Post\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Blood Donation App:\n1. The system shall allow users to register as blood donors.\n2. The system shall allow recipients to find donors based on blood type and location.\n3. The system shall allow users to post blood requests in urgent situations.\n4. The system shall notify donors of blood requests.\n5. The system shall allow recipients to locate nearby hospitals.\n6. The system shall allow blood banks to organize blood donation drives.\n7. The system shall allow blood banks to track blood availability.\n8. The system shall allow donors to donate blood.\n",
        "output": "@startchen\n\nentity Donor {\n  donor_id <<key>>\n  name\n  email\n  password\n  phone\n  blood_type\n  location\n  registration_date\n}\n\nentity Recipient {\n  recipient_id <<key>>\n  name\n  email\n  password\n  phone\n  blood_type\n  location\n  request_date\n}\n\nentity BloodBank {\n  bank_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  registration_date\n}\n\nentity DonationDrive {\n  drive_id <<key>>\n  bank_id <<foreign>>\n  drive_date\n  drive_location\n  drive_status\n}\n\nentity BloodRequest {\n  request_id <<key>>\n  recipient_id <<foreign>>\n  donor_id <<foreign>>\n  request_date\n  request_status\n}\n\nentity BloodAvailability {\n  availability_id <<key>>\n  bank_id <<foreign>>\n  blood_type\n  quantity\n  last_updated\n}\n\nrelationship REGISTERS_AS_DONOR {\n}\nrelationship FINDS_DONOR {\n}\nrelationship POSTS_REQUEST {\n}\nrelationship ORGANIZES_DRIVE {\n}\nrelationship TRACKS_AVAILABILITY {\n}\n\nREGISTERS_AS_DONOR -1- Donor\nREGISTERS_AS_DONOR -N- BloodBank\n\nFINDS_DONOR -1- Recipient\nFINDS_DONOR -N- Donor\n\nPOSTS_REQUEST -1- Recipient\nPOSTS_REQUEST -N- BloodRequest\n\nORGANIZES_DRIVE -1- BloodBank\nORGANIZES_DRIVE -N- DonationDrive\n\nTRACKS_AVAILABILITY -1- BloodBank\nTRACKS_AVAILABILITY -N- BloodAvailability\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Ride-Sharing Platform (like Uber):\n1. The system shall allow passengers to request rides to specific destinations.\n2. The system shall allow passengers to track the location of their rides in real-time.\n3. The system shall allow passengers to pay for the service through the platform.\n4. The system shall allow passengers to rate their drivers after the ride.\n5. The system shall allow drivers to accept ride requests.\n6. The system shall allow drivers to navigate to the passenger's location and destination.\n7. The system shall allow drivers to provide safe and efficient rides to passengers.\n8. The system shall provide customer support features for passengers and drivers.\n9. The system shall allow customer support to assist users in resolving issues.\n",
        "output": "@startchen\n\nentity Passenger {\n  passenger_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Driver {\n  driver_id <<key>>\n  name\n  email\n  password\n  phone\n  vehicle\n  license_plate\n}\n\nentity Ride {\n  ride_id <<key>>\n  passenger_id <<foreign>>\n  driver_id <<foreign>>\n  ride_date\n  pickup_location\n  dropoff_location\n  fare\n  rating\n}\n\nentity Payment {\n  payment_id <<key>>\n  passenger_id <<foreign>>\n  driver_id <<foreign>>\n  ride_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_status\n}\n\nentity SupportTicket {\n  ticket_id <<key>>\n  passenger_id <<foreign>>\n  driver_id <<foreign>>\n  ticket_date\n  issue\n  status\n}\n\nrelationship REQUESTS_RIDE {\n}\nrelationship ACCEPTS_RIDE {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship RAISES_TICKET {\n}\n\nREQUESTS_RIDE -1- Passenger\nREQUESTS_RIDE -N- Ride\n\nACCEPTS_RIDE -1- Driver\nACCEPTS_RIDE -N- Ride\n\nMAKES_PAYMENT -1- Passenger\nMAKES_PAYMENT -N- Payment\n\nRAISES_TICKET -1- Passenger\nRAISES_TICKET -N- SupportTicket\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Food Delivery Platform (like DoorDash):\n1. The system shall allow customers to browse restaurant menus.\n2. The system shall allow customers to place orders for delivery or pickup.\n3. The system shall allow customers to track the status of their delivery.\n4. The system shall allow restaurants to receive customer orders.\n5. The system shall allow restaurants to prepare food after receiving orders.\n6. The system shall allow restaurants to notify customers when their orders are ready for pickup or delivery.\n7. The system shall allow delivery drivers to accept delivery requests.\n8. The system shall allow delivery drivers to pick up orders from restaurants.\n9. The system shall allow delivery drivers to deliver orders to customers.\n10. The system shall provide customer support features to resolve issues.\n11. The system shall allow customer support to provide assistance to users.\n",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Restaurant {\n  restaurant_id <<key>>\n  name\n  email\n  password\n  phone\n  cuisine\n  location\n}\n\nentity DeliveryDriver {\n  driver_id <<key>>\n  name\n  email\n  password\n  phone\n  vehicle\n  license_plate\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  restaurant_id <<foreign>>\n  driver_id <<foreign>>\n  order_date\n  delivery_date\n  status\n}\n\nentity Payment {\n  payment_id <<key>>\n  customer_id <<foreign>>\n  restaurant_id <<foreign>>\n  order_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_status\n}\n\nentity SupportTicket {\n  ticket_id <<key>>\n  customer_id <<foreign>>\n  restaurant_id <<foreign>>\n  ticket_date\n  issue\n  status\n}\n\nrelationship PLACES_ORDER {\n}\nrelationship RECEIVES_ORDER {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship HAS {\n}\nrelationship RAISES_TICKET {\n}\nrelationship DELIVERS_ORDER {\n}\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nRECEIVES_ORDER -1- Restaurant\nRECEIVES_ORDER -N- Order\n\nDELIVERS_ORDER -1- DeliveryDriver\nDELIVERS_ORDER -N- Order\n\nMAKES_PAYMENT -1- Customer\nMAKES_PAYMENT -N- Payment\n\nHAS -1- Order\nHAS -1- Payment\n\nRAISES_TICKET -1- Customer\nRAISES_TICKET -N- SupportTicket\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Job Finder App (SheWorks):\n1. The system shall allow job seekers to create profiles.\n2. The system shall allow job seekers to upload resumes.\n3. The system shall allow job seekers to search for jobs that align with their preferences (e.g., flexible hours, remote work).\n4. The system shall allow job seekers to apply for jobs through the platform.\n5. The system shall notify users of job updates, interview calls, and feedback.\n6. The system shall allow job seekers to schedule interviews with employers.\n7. The system shall offer career development workshops for job seekers.\n8. The system shall allow job seekers to participate in networking events.\n9. The system shall allow employers to shortlist candidates based on their profiles and resumes.\n10. The system shall allow employers to post job vacancies.\n11. The system shall allow mentors to offer mentorship to job seekers.\n12. The system shall recommend job opportunities to job seekers based on their profiles and resumes.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\nentity Employer {\n  employer_id <<key>>\n  name\n  email\n  password\n  phone\n  company\n}\nentity JobListing {\n  job_id <<key>>\n  employer_id <<foreign>>\n  job_title\n  job_description\n  job_type\n  location\n  salary\n}\nentity Application {\n  application_id <<key>>\n  user_id <<foreign>>\n  job_id <<foreign>>\n  application_date\n  application_status\n}\nentity Interview {\n  interview_id <<key>>\n  application_id <<foreign>>\n  employer_id <<foreign>>\n  user_id <<foreign>>\n  interview_date\n  interview_status\n}\nentity Event {\n  event_id <<key>>\n  event_date\n  event_type\n  event_description\n}\n\nrelationship POSTS_JOB {\n}\nrelationship APPLIES_FOR_JOB {\n}\nrelationship SCHEDULES_INTERVIEW {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship ATTENDS_EVENT {\n}\n\nEmployer -1- POSTS_JOB\nPOSTS_JOB -N- JobListing\nUser -1- APPLIES_FOR_JOB\nAPPLIES_FOR_JOB -N- Application\nApplication -N- ASSOCIATED_WITH\nASSOCIATED_WITH -1- Interview\nEmployer -1- SCHEDULES_INTERVIEW\nSCHEDULES_INTERVIEW -N- Interview\nUser -1- ATTENDS_EVENT\nATTENDS_EVENT -N- Event\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Hackathon Management Web App:\n1. The system shall allow participants to register for the hackathon event.\n2. The system shall allow participants to form teams for the event.\n3. The system shall allow participants to submit their projects.\n4. The system shall provide a chat feature for team communication.\n5. The system shall notify participants about event updates and important announcements.\n6. The system shall allow participants to view the event schedule.\n7. The system shall allow mentors to provide guidance through the platform.\n8. The system shall allow mentors to review team project progress.\n9. The system shall allow judges to evaluate projects.\n10. The system shall allow judges to score submissions.\n11. The system shall allow organizers to manage judging rounds.\n12. The system shall allow sponsors to submit sponsorship materials.\n13. The system shall allow sponsors to track the visibility of their sponsorships.\n14. The system shall allow organizers to coordinate event announcements.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Participant {\n  team_id <<foreign>>\n}\n\nentity Mentor {\n  expertise\n  availability\n}\n\nentity Organizer {\n  department\n}\n\nentity Judge {\n  expertise\n  availability\n}\n\nentity Sponsor {\n  company\n  contribution\n}\n\nUser ->- d { Participant, Mentor, Organizer, Judge, Sponsor }\n\nentity Team {\n  team_id <<key>>\n  project_id <<foreign>>\n  team_name\n}\n\nentity Project {\n  project_id <<key>>\n  team_id <<foreign>>\n  project_name\n  project_description\n  project_status\n  submission_date\n}\n\nentity Schedule {\n  schedule_id <<key>>\n  event_name\n  event_date\n  event_type\n  event_description\n}\n\nentity ChatRoom {\n  chatroom_id <<key>>\n  room_name\n  created_date\n}\n\nentity Message {\n  message_id <<key>>\n  chatroom_id <<foreign>>\n  user_id <<foreign>>\n  message_date\n  message_content\n}\n\nentity Notification {\n  notification_id <<key>>\n  recipient_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n}\n\nrelationship REGISTERS_FOR_EVENT {\n}\nrelationship FORMS_TEAM {\n}\nrelationship SUBMITS_PROJECT {\n}\nrelationship OFFERS_GUIDANCE {\n}\nrelationship MANAGES_SCHEDULE {\n}\nrelationship EVALUATES_PROJECT {\n}\nrelationship SUBMITS_BRANDING {\n}\nrelationship PARTICIPATES_IN_CHAT {\n}\nrelationship SENDS_MESSAGE {\n}\nrelationship MESSAGE_IN_CHATROOM {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nREGISTERS_FOR_EVENT -1- Participant\nREGISTERS_FOR_EVENT -N- Schedule\n\nFORMS_TEAM -N- Participant\nFORMS_TEAM -1- Team\n\nSUBMITS_PROJECT -1- Team\nSUBMITS_PROJECT -1- Project\n\nOFFERS_GUIDANCE -1- Mentor\nOFFERS_GUIDANCE -N- Project\n\nMANAGES_SCHEDULE -1- Organizer\nMANAGES_SCHEDULE -N- Schedule\n\nEVALUATES_PROJECT -1- Judge\nEVALUATES_PROJECT -N- Project\n\nSUBMITS_BRANDING -1- Sponsor\nSUBMITS_BRANDING -N- Team\n\nPARTICIPATES_IN_CHAT -1- User\nPARTICIPATES_IN_CHAT -N- ChatRoom\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\nMESSAGE_IN_CHATROOM -1- ChatRoom\nMESSAGE_IN_CHATROOM -N- Message\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Seminar Management System:\n1. The system shall allow audience members to register for the seminar.\n2. The system shall allow audience members to book seats for sessions.\n3. The system shall notify audience members about session schedules and updates.\n4. The system shall allow audience members to view the seminar session schedule.\n5. The system shall provide a feedback mechanism for audience members to evaluate sessions.\n6. The system shall allow organizers to manage auditorium allocation for sessions.\n7. The system shall allow organizers to manage speaker session content.\n8. The system shall allow organizers to invite guest speakers to the seminar.\n9. The system shall allow organizers to track audience attendance.\n10. The system shall allow organizers to coordinate event timings and session schedules.\n11. The system shall allow sponsors to promote their brands through the platform.\n12. The system shall allow guest speakers to manage their seminar session content.\n",
        "output": "@startchen\n\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Speaker {\n  speaker_id <<key>>\n  name\n  email\n  password\n  phone\n  expertise\n  session_date\n  session_time\n}\n\nentity AudienceMember {\n  member_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Sponsor {\n  sponsor_id <<key>>\n  name\n  email\n  password\n  phone\n  company\n  registration_date\n}\n\nentity Session {\n  session_id <<key>>\n  organizer_id <<foreign>>\n  speaker_id <<foreign>>\n  session_date\n  session_time\n  session_topic\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  member_id <<foreign>>\n  session_id <<foreign>>\n  feedback_date\n  rating\n  comment\n}\n\nentity Notification {\n  notification_id <<key>>\n  recipient_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n}\n\nrelationship SCHEDULES_EVENT {\n}\nrelationship SPEAKS_ON {\n}\nrelationship REGISTERS_FOR_SESSION {\n}\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship NOTIFIES {\n}\nrelationship SPONSORS {\n}\n\nSCHEDULES_EVENT -1- Organizer\nSCHEDULES_EVENT -N- Session\n\nSPEAKS_ON -1- Speaker\nSPEAKS_ON -N- Session\n\nREGISTERS_FOR_SESSION -1- AudienceMember\nREGISTERS_FOR_SESSION -N- Session\n\nSPONSORS -1- Sponsor\nSPONSORS -N- Session\n\nPROVIDES_FEEDBACK -1- AudienceMember\nPROVIDES_FEEDBACK -N- Feedback\n\nNOTIFIES -1- Organizer\nNOTIFIES -N- Notification\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Project Management System:\n1. The system shall allow project managers to create project plans.\n2. The system shall allow project managers to assign tasks to team members.\n3. The system shall allow project managers to track project progress.\n4. The system shall allow team members to view their assigned tasks.\n5. The system shall allow team members to update the status of their tasks.\n6. The system shall provide a communication feature for team members to interact with each other.\n7. The system shall allow project managers to generate project reports.\n8. The system shall allow project managers to monitor project timelines.\n9. The system shall help project managers identify potential risks.\n10. The system shall allow stakeholders to access project information.\n11. The system shall allow stakeholders to review progress reports.\n12. The system shall allow stakeholders to provide feedback on project deliverables.\n",
        "output": "@startchen\n\nentity ProjectManager {\n  manager_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity TeamMember {\n  member_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity ProjectPlan {\n  plan_id <<key>>\n  manager_id <<foreign>>\n  plan_name\n  plan_description\n  plan_status\n}\n\nentity Task {\n  task_id <<key>>\n  plan_id <<foreign>>\n  member_id <<foreign>>\n  task_name\n  task_description\n  task_status\n}\n\nentity Report {\n  report_id <<key>>\n  plan_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nentity Stakeholder {\n  stakeholder_id <<key>>\n  name\n  email\n  phone\n  department\n  registration_date\n}\n\nrelationship CREATES_PLAN {\n}\nrelationship ASSIGNS_TASK {\n}\nrelationship COMPLETES_TASK {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship REVIEWS_REPORT {\n}\n\nCREATES_PLAN -1- ProjectManager\nCREATES_PLAN -N- ProjectPlan\n\nASSIGNS_TASK -1- ProjectManager\nASSIGNS_TASK -N- Task\n\nCOMPLETES_TASK -1- TeamMember\nCOMPLETES_TASK -N- Task\n\nGENERATES_REPORT -1- ProjectPlan\nGENERATES_REPORT -N- Report\n\nREVIEWS_REPORT -1- Stakeholder\nREVIEWS_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Customer Relationship Management (CRM) System:\n1. The system shall allow sales teams to track customer leads.\n2. The system shall allow sales teams to manage customer accounts.\n3. The system shall allow sales teams to analyze sales data.\n4. The system shall allow marketing teams to create targeted campaigns.\n5. The system shall allow marketing teams to track customer engagement.\n6. The system shall allow marketing teams to generate reports on campaign performance.\n7. The system shall allow customer support teams to log customer inquiries.\n8. The system shall allow customer support teams to resolve customer issues.\n9. The system shall allow customer support teams to provide feedback on customer satisfaction.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\nentity SalesTeam {\n  team_id <<key>>\n}\nentity MarketingTeam {\n  team_id <<key>>\n}\nentity SupportTeam {\n  team_id <<key>>\n}\nUser ->- d { SalesTeam, MarketingTeam, SupportTeam }\n\nentity Lead {\n  lead_id <<key>>\n  team_id <<foreign>>\n  lead_name\n  lead_source\n}\nentity Campaign {\n  campaign_id <<key>>\n  team_id <<foreign>>\n  campaign_name\n  campaign_type\n}\nentity Inquiry {\n  inquiry_id <<key>>\n  customer_id <<foreign>>\n  inquiry_date\n  inquiry_type\n  inquiry_status\n}\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  phone\n}\nrelationship TRACKS_LEAD {\n}\nrelationship CREATES_CAMPAIGN {\n}\nrelationship HANDLES_INQUIRY {\n}\nrelationship MAKES_INQUIRY {\n}\nrelationship MANAGES_ACCOUNT {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship GENERATES_REPORT {\n}\n\nSalesTeam -1- TRACKS_LEAD\nTRACKS_LEAD -N- Lead\nMarketingTeam -1- CREATES_CAMPAIGN\nCREATES_CAMPAIGN -N- Campaign\nCustomer -1- MAKES_INQUIRY\nMAKES_INQUIRY -N- Inquiry\nSupportTeam -1- HANDLES_INQUIRY\nHANDLES_INQUIRY -N- Inquiry\nSalesTeam -1- MANAGES_ACCOUNT\nMANAGES_ACCOUNT -N- Customer\nLead -1- ASSOCIATED_WITH\nASSOCIATED_WITH -1- Customer\nSalesTeam -1- GENERATES_REPORT\nGENERATES_REPORT -N- Campaign\nMarketingTeam -1- GENERATES_REPORT\nGENERATES_REPORT -N- Campaign\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Content Management System (CMS):\n1. The system shall allow users to create digital content.\n2. The system shall allow users to edit existing content.\n3. The system shall allow users to collaborate on content creation.\n4. The system shall allow users to upload media files (e.g., images, videos).\n5. The system shall allow users to organize content into categories.\n6. The system shall allow users to schedule content publication.\n7. The system shall allow administrators to approve content before publication.\n8. The system shall provide version control for content management.\n9. The system shall provide analytics to analyze content performance.\n10. The system shall allow administrators to manage user permissions.\n11. The system shall allow administrators to monitor content performance.\n12. The system shall ensure the security of the platform.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Administrator {\n  admin_id <<key>>\n  user_id <<foreign>>\n  role\n  permissions\n}\n\nentity Content {\n  content_id <<key>>\n  user_id <<foreign>>\n  content_title\n  content_type\n  approval_status\n  version_number\n  category\n  publication_date\n  schedule_date\n}\n\nentity MediaFile {\n  file_id <<key>>\n  content_id <<foreign>>\n  file_name\n  file_type\n  file_size\n  upload_date\n}\n\nentity Analytics {\n  analytics_id <<key>>\n  content_id <<foreign>>\n  analytics_date\n  analytics_type\n  analytics_data\n}\n\nrelationship CREATES_CONTENT {\n}\nrelationship CONTAINS_MEDIA {\n}\nrelationship TRACKS_ANALYTICS {\n}\nrelationship APPROVES_CONTENT {\n}\n\nCREATES_CONTENT -1- User\nCREATES_CONTENT -N- Content\n\nCONTAINS_MEDIA -(1,1)- Content\nCONTAINS_MEDIA -(0,N)- MediaFile\n\nTRACKS_ANALYTICS -1- Content\nTRACKS_ANALYTICS -N- Analytics\n\nAPPROVES_CONTENT -1- Administrator\nAPPROVES_CONTENT -N- Content\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Learning Management System (LMS):\n1. The system shall allow instructors to create courses.\n2. The system shall allow instructors to upload learning materials.\n3. The system shall allow instructors to assess student performance.\n4. The system shall allow students to enroll in courses.\n5. The system shall allow students to access course content.\n6. The system shall allow students to submit assignments.\n7. The system shall allow students to take quizzes.\n8. The system shall provide discussion forums for students to participate in course discussions.\n9. The system shall allow instructors to grade assignments.\n10. The system shall allow administrators to manage user accounts.\n11. The system shall allow administrators to monitor course enrollment.\n12. The system shall allow administrators to generate reports on student progress.\n",
            "output": "@startchen\n\nentity Instructor {\n  instructor_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n}\nentity Course {\n  course_id <<key>>\n  instructor_id <<foreign>>\n  course_name\n  course_description\n  start_date\n  end_date\n}\nentity Assignment {\n  assignment_id <<key>>\n  course_id <<foreign>>\n  assignment_title\n  due_date\n  submission_date\n  grade\n}\nentity Quiz {\n  quiz_id <<key>>\n  course_id <<foreign>>\n  quiz_title\n  quiz_date\n  quiz_status\n}\nentity Discussion {\n  discussion_id <<key>>\n  course_id <<foreign>>\n  discussion_date\n  discussion_content\n}\nentity Report {\n  report_id <<key>>\n  course_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship CREATES_COURSE {\n}\nrelationship ENROLLS_IN {\n  enrollment_date\n  enrollment_status\n}\nrelationship SUBMITS_ASSIGNMENT {\n}\nrelationship TAKES_QUIZ {\n}\nrelationship PARTICIPATES_IN{\n}\nrelationship ASSIGNS_GRADE {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RELATES_TO_COURSE {\n}\nrelationship TEACHES_COURSE {\n}\n\nAdministrator -1-CREATES_COURSE \nCREATES_COURSE -N- Course\nStudent -1- ENROLLS_IN\nENROLLS_IN -N- Course\nInstructor -1- TEACHES_COURSE\nTEACHES_COURSE -N- Course\nCourse -1- RELATES_TO_COURSE\nRELATES_TO_COURSE -N- Assignment\nRELATES_TO_COURSE -N- Quiz\nStudent -1- SUBMITS_ASSIGNMENT\nSUBMITS_ASSIGNMENT -N- Assignment\nStudent -1- TAKES_QUIZ\nTAKES_QUIZ -N- Quiz\nStudent -1- PARTICIPATES_IN\nPARTICIPATES_IN -N- Discussion\nInstructor -1- ASSIGNS_GRADE\nASSIGNS_GRADE -N- Assignment\nCourse -N- GENERATES_REPORT\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Project Tracking System:\n1. The system shall allow team members to create tasks.\n2. The system shall allow team members to assign tasks to other team members.\n3. The system shall allow team members to set deadlines for tasks.\n4. The system shall allow team members to update task statuses.\n5. The system shall allow team members to track progress on tasks.\n6. The system shall provide communication features for team members to collaborate.\n7. The system shall generate reports on project progress.\n8. The system shall allow project managers to monitor project timelines.\n9. The system shall help project managers identify bottlenecks in the project.\n10. The system shall allow project managers to oversee project progress.\n11. The system shall allow project managers to allocate resources for tasks.\n12. The system shall help project managers ensure that project milestones are met.\n",
        "output": "@startchen\n\nentity TeamMember {\n  member_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity ProjectManager {\n  manager_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Task {\n  task_id <<key>>\n  manager_id <<foreign>>\n  member_id <<foreign>>\n  task_name\n  task_description\n  task_status\n  deadline\n}\n\nentity Report {\n  report_id <<key>>\n  manager_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship ASSIGNS_TASK {\n}\nrelationship UPDATES_TASK {\n}\nrelationship GENERATES_REPORT {\n}\n\nASSIGNS_TASK -1- ProjectManager\nASSIGNS_TASK -N- Task\n\nUPDATES_TASK -1- TeamMember\nUPDATES_TASK -N- Task\n\nGENERATES_REPORT -1- ProjectManager\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Task Management System:\n1. The system shall allow users to create tasks.\n2. The system shall allow users to set priorities for tasks.\n3. The system shall allow users to set deadlines for task completion.\n4. The system shall allow users to update the status of tasks.\n5. The system shall allow users to track progress on tasks.\n6. The system shall allow users to categorize tasks based on different criteria.\n7. The system shall generate task lists for users.\n8. The system shall allow users to set reminders for tasks.\n9. The system shall allow users to organize tasks into projects.\n10. The system shall allow users to share tasks with collaborators.\n11. The system shall allow users to assign tasks to team members.\n12. The system shall notify users about task updates and deadlines.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Team {\n  team_id <<key>>\n  team_name\n  creation_date\n}\n\nentity Task {\n  task_id <<key>>\n  assigned_to_id <<foreign>>\n  assigned_to_type\n  task_name\n  description\n  priority\n  status\n  deadline\n  category\n}\n\nentity Reminder {\n  reminder_id <<key>>\n  task_id <<foreign>>\n  reminder_date\n  reminder_time\n  reminder_message\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  task_id <<foreign>>\n  notification_date\n  notification_type\n  notification_content\n}\n\nrelationship MANAGES_TASK {\n}\nrelationship SETS_REMINDER {\n}\nrelationship SENDS_NOTIFICATION {\n}\nrelationship BELONGS_TO {\n}\nrelationship COLLABORATES_WITH {\n}\n\nBELONGS_TO -(1,N)- User\nBELONGS_TO -(N,1)- Team\n\nMANAGES_TASK -1- Team\nMANAGES_TASK -N- Task\n\nSETS_REMINDER -1- User\nSETS_REMINDER -N- Reminder\n\nSENDS_NOTIFICATION -1- Task\nSENDS_NOTIFICATION -N- Notification\n\nCOLLABORATES_WITH -1- User\nCOLLABORATES_WITH -N- User\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Bug Tracking System:\n1. The system shall allow developers to log software bugs.\n2. The system shall allow developers to assign bugs to team members.\n3. The system shall allow developers to track the status of bug fixes.\n4. The system shall allow developers to update the status of bugs.\n5. The system shall allow developers to prioritize bugs based on severity.\n6. The system shall provide communication features for developers to collaborate on bug resolution.\n7. The system shall generate bug reports for tracking bug statistics.\n8. The system shall allow project managers to monitor bug resolution timelines.\n9. The system shall help project managers identify recurring bugs in the software.\n10. The system shall allow project managers to oversee the progress of bug resolution.\n11. The system shall allow project managers to allocate resources for fixing bugs.\n12. The system shall help project managers ensure software quality standards are met.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Developer {\n}\n\nentity TeamMember {\n}\n\nentity ProjectManager {\n}\n\nUser ->- o { Developer, TeamMember, ProjectManager }\n\nentity Team {\n  team_id <<key>>\n  team_name\n  created_date\n}\n\nentity Bug {\n  bug_id <<key>>\n  assigned_to_id <<foreign>>\n  reported_by_id <<foreign>>\n  team_id <<foreign>>\n  bug_name\n  bug_description\n  bug_status\n  priority\n  reported_date\n  resolution_date\n}\n\nentity Report {\n  report_id <<key>>\n  manager_id <<foreign>>\n  bug_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  recipient_id <<foreign>>\n  bug_id <<foreign>>\n  message_content\n  message_date\n}\n\nrelationship BELONGS_TO_TEAM {\n}\nrelationship LOGS_BUG {\n}\nrelationship ASSIGNS_BUG {\n}\nrelationship UPDATES_BUG {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship SENDS_MESSAGE {\n}\n\nBELONGS_TO_TEAM -N- TeamMember\nBELONGS_TO_TEAM -1- Team\n\nLOGS_BUG -1- Developer\nLOGS_BUG -N- Bug\n\nASSIGNS_BUG -1- ProjectManager\nASSIGNS_BUG -N- Bug\n\nUPDATES_BUG -1- TeamMember\nUPDATES_BUG -N- Bug\n\nGENERATES_REPORT -1- ProjectManager\nGENERATES_REPORT -N- Report\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Customer Support System:\n1. The system shall allow customer support agents to log customer inquiries.\n2. The system shall allow customer support agents to assign tickets to support agents.\n3. The system shall allow customer support agents to track ticket resolutions.\n4. The system shall allow customer support agents to update ticket statuses.\n5. The system shall allow customer support agents to prioritize tickets based on urgency.\n6. The system shall provide communication features for customer support agents to communicate with customers about issue resolutions.\n7. The system shall generate support reports for tracking customer inquiries and resolutions.\n8. The system shall allow managers to monitor ticket resolution timelines.\n9. The system shall help managers identify recurring customer issues.\n10. The system shall allow managers to oversee the progress of ticket resolutions.\n11. The system shall allow managers to allocate resources for resolving customer issues.\n12. The system shall help managers ensure customer satisfaction standards are met.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Customer {\n}\n\nentity SupportAgent {\n}\n\nentity Manager {\n}\n\nUser ->- d { Customer, SupportAgent, Manager }\n\nentity Ticket {\n  ticket_id <<key>>\n  customer_id <<foreign>>\n  assigned_to_id <<foreign>>\n  issue_title\n  issue_description\n  priority\n  status\n  creation_date\n  resolution_date\n}\n\nentity Message {\n  message_id <<key>>\n  ticket_id <<foreign>>\n  sender_id <<foreign>>\n  recipient_id <<foreign>>\n  message_content\n  message_date\n}\n\nentity Report {\n  report_id <<key>>\n  manager_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship CREATES_TICKET {\n}\nrelationship ASSIGNS_TICKET {\n}\nrelationship UPDATES_TICKET {\n}\nrelationship COMMUNICATES_ON_TICKET {\n}\nrelationship GENERATES_REPORT {\n}\n\nCREATES_TICKET -1- Customer\nCREATES_TICKET -N- Ticket\n\nASSIGNS_TICKET -1- Manager\nASSIGNS_TICKET -N- Ticket\n\nUPDATES_TICKET -1- SupportAgent\nUPDATES_TICKET -N- Ticket\n\nCOMMUNICATES_ON_TICKET -1- User\nCOMMUNICATES_ON_TICKET -N- Message\n\nGENERATES_REPORT -1- Manager\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Help Desk System:\n1. The system shall allow users to log help desk tickets.\n2. The system shall allow support agents to assign tickets to agents.\n3. The system shall allow users and support agents to track ticket resolutions.\n4. The system shall allow support agents to update ticket statuses.\n5. The system shall allow support agents to prioritize tickets based on urgency.\n6. The system shall provide communication features for support agents to communicate with users regarding issue resolutions.\n7. The system shall generate help desk reports for tracking ticket statistics.\n8. The system shall allow managers to monitor ticket resolution timelines.\n9. The system shall help managers identify recurring technical issues.\n10. The system shall allow managers to oversee the progress of ticket resolutions.\n11. The system shall allow managers to allocate resources for resolving tickets.\n12. The system shall help managers ensure that service level agreements are met.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Customer {\n}\n\nentity SupportAgent {\n}\n\nentity Manager {\n}\n\nUser ->- d { Customer, SupportAgent, Manager }\n\nentity Ticket {\n  ticket_id <<key>>\n  customer_id <<foreign>>\n  assigned_to_id <<foreign>>\n  issue_title\n  issue_description\n  priority\n  status\n  creation_date\n  resolution_date\n}\n\nentity Message {\n  message_id <<key>>\n  ticket_id <<foreign>>\n  sender_id <<foreign>>\n  recipient_id <<foreign>>\n  message_content\n  message_date\n}\n\nentity Report {\n  report_id <<key>>\n  manager_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship LOGS_TICKET {\n}\nrelationship ASSIGNS_TICKET {\n}\nrelationship UPDATES_TICKET {\n}\nrelationship COMMUNICATES_ON_TICKET {\n}\nrelationship GENERATES_REPORT {\n}\n\nLOGS_TICKET -1- Customer\nLOGS_TICKET -N- Ticket\n\nASSIGNS_TICKET -1- Manager\nASSIGNS_TICKET -N- Ticket\n\nUPDATES_TICKET -1- SupportAgent\nUPDATES_TICKET -N- Ticket\n\nCOMMUNICATES_ON_TICKET -1- User\nCOMMUNICATES_ON_TICKET -N- Message\n\nGENERATES_REPORT -1- Manager\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Library Management System:\n1. The system shall allow librarians to catalog books.\n2. The system shall allow librarians to manage patron accounts.\n3. The system shall allow librarians to track book loans.\n4. The system shall allow patrons to search for books in the library catalog.\n5. The system shall allow patrons to check out books from the library.\n6. The system shall allow patrons to renew book loans.\n7. The system shall generate library reports for tracking book circulation and other statistics.\n8. The system shall allow librarians to monitor book circulation.\n9. The system shall help librarians identify overdue books.\n10. The system shall allow administrators to oversee library operations.\n11. The system shall allow administrators to allocate resources for the library.\n12. The system shall help administrators ensure that library policies are enforced.\n",
        "output": "@startchen\n\nentity Librarian {\n  librarian_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Patron {\n  patron_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Book {\n  book_id <<key>>\n  librarian_id <<foreign>>\n  book_title\n  author\n  genre\n  publication_date\n  availability\n}\n\nentity Loan {\n  loan_id <<key>>\n  patron_id <<foreign>>\n  book_id <<foreign>>\n  loan_date\n  due_date\n  return_date\n  status\n}\n\nentity Report {\n  report_id <<key>>\n  admin_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship CATALOGS_BOOK {\n}\nrelationship CHECKS_OUT_BOOK {\n}\nrelationship RENEWS_LOAN {\n}\nrelationship MANAGES_ACCOUNT {\n}\nrelationship TRACKS_LOAN {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship REPORTS_ON {\n}\n\nCATALOGS_BOOK -1- Librarian\nCATALOGS_BOOK -N- Book\n\nCHECKS_OUT_BOOK -1- Patron\nCHECKS_OUT_BOOK -N- Book\n\nRENEWS_LOAN -1- Patron\nRENEWS_LOAN -N- Loan\n\nMANAGES_ACCOUNT -1- Librarian\nMANAGES_ACCOUNT -N- Patron\n\nTRACKS_LOAN -1- Librarian\nTRACKS_LOAN -N- Loan\n\nGENERATES_REPORT -1- Administrator\nGENERATES_REPORT -N- Report\n\nREPORTS_ON -1- Report\nREPORTS_ON -N- Book\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Hotel Management System:\n1. The system shall allow hotel staff to create guest reservations.\n2. The system shall allow hotel staff to assign rooms to guests.\n3. The system shall allow hotel staff to track guest check-ins and check-outs.\n4. The system shall allow guests to book rooms.\n5. The system shall allow guests to request hotel services.\n6. The system shall allow guests to provide feedback on their stay.\n7. The system shall generate reports for hotel staff on hotel operations.\n8. The system shall allow hotel staff to monitor room availability.\n9. The system shall help hotel staff identify guest preferences.\n10. The system shall allow managers to oversee hotel operations.\n11. The system shall allow managers to allocate resources effectively.\n12. The system shall help managers ensure guest satisfaction.\n",
        "output": "@startchen\n\nentity Guest {\n  guest_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  guest_status\n}\n\nentity Room {\n  room_id <<key>>\n  room_number\n  room_type\n  room_rate\n  availability_status\n  room_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  guest_id <<foreign>>\n  room_id <<foreign>>\n  check_in_date\n  check_out_date\n  booking_status\n}\n\nentity RoomService {\n  service_id <<key>>\n  booking_id <<foreign>>\n  service_date\n  service_description\n  service_charge\n  service_status\n}\n\nentity Invoice {\n  invoice_id <<key>>\n  booking_id <<foreign>>\n  issue_date\n  total_amount\n  payment_status\n  invoice_status\n}\n\nentity Staff {\n  staff_id <<key>>\n  name\n  role\n  email\n  password\n  phone\n  staff_status\n}\n\nrelationship ALLOCATES_ROOM {\n}\nrelationship RESERVES_ROOM {\n}\nrelationship REQUESTS_SERVICE {\n}\nrelationship GENERATES_INVOICE {\n}\nrelationship MANAGES_BOOKING {\n}\nrelationship MAINTAINS_ROOM {\n}\n\nRESERVES_ROOM -1- Guest\nRESERVES_ROOM -N- Booking\n\nALLOCATES_ROOM -1- Booking\nALLOCATES_ROOM -N- Room\n\nREQUESTS_SERVICE -1- Booking\nREQUESTS_SERVICE -N- RoomService\n\nGENERATES_INVOICE -1- Booking\nGENERATES_INVOICE -1- Invoice\n\nMANAGES_BOOKING -1- Staff\nMANAGES_BOOKING -N- Booking\n\nMAINTAINS_ROOM -1- Staff\nMAINTAINS_ROOM -N- Room\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for National Health ID System:\n1. The system shall allow patients to create a unique Health ID.\n2. The system shall allow health data consent managers to seek a patient’s consent for sharing health data.\n3. The system shall maintain the health records of patients digitally.\n4. The system shall allow health authorities to use health records for patient diagnosis.\n5. The system shall allow health authorities to record medications, including vaccinations, for newborns and patients.\n",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  mobile_number\n  password\n  aadhaar_number\n  health_id\n}\n\nentity HealthDataConsentManager {\n  manager_id <<key>>\n  password\n  manager_name\n  manager_type\n}\n\nentity HealthRecord {\n  record_id <<key>>\n  health_id <<foreign>>\n  patient_id <<foreign>>\n  record_date\n  record_type\n  record_content\n}\n\nentity HealthID {\n  health_id <<key>>\n  patient_id <<foreign>>\n  creation_date\n}\n\nrelationship HAS_HEALTH_ID {\n}\n\nrelationship LINKED_TO {\n}\n\nrelationship LINKS_TO_RECORDS {\n}\n\nHAS_HEALTH_ID -1- Patient\nHAS_HEALTH_ID -1- HealthID\n\nLINKED_TO -1- HealthID\nLINKED_TO -N- HealthDataConsentManager\n\nLINKS_TO_RECORDS -1- HealthID\nLINKS_TO_RECORDS -N- HealthRecord\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Device Donation System:\n1. The system shall allow donors to enter the details of the device they are willing to donate.\n2. The system shall allow donors to enter their address details for pickup.\n3. The system shall notify donors to wait for the approval of the device.\n4. The system shall allow admins to verify the details of the donated device.\n5. The system shall allow admins to assign a pickup executive to collect the device.\n6. The system shall allow volunteers to join the team to help with device pickups.\n",
        "output": "@startchen\n\nentity Donor {\n  donor_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  device_details\n  donation_status\n}\n\nentity Admin {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity PickupExecutive {\n  executive_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  pickup_status\n}\n\nentity Volunteer {\n  volunteer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  registration_date\n}\n\nentity Device {\n  device_id <<key>>\n  donor_id <<foreign>>\n  device_name\n  device_type\n  device_condition\n  approval_status\n}\n\nrelationship DONATES_DEVICE {\n}\nrelationship VERIFIES_DEVICE {\n}\nrelationship ASSIGNS_PICKUP {\n}\nrelationship PICKS_UP_DEVICE {\n}\nrelationship JOINS_TEAM {\n}\n\nDONATES_DEVICE -1- Donor\nDONATES_DEVICE -N- Device\n\nVERIFIES_DEVICE -1- Admin\nVERIFIES_DEVICE -N- Device\n\nASSIGNS_PICKUP -1- Admin\nASSIGNS_PICKUP -N- PickupExecutive\n\nPICKS_UP_DEVICE -1- PickupExecutive\nPICKS_UP_DEVICE -N- Device\n\nJOINS_TEAM -1- Volunteer\nJOINS_TEAM -N- PickupExecutive\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Car Rental System:\n1. The system shall allow users to search for available cars for rental.\n2. The system shall allow users to select a car for rental from the available options.\n3. The system shall allow users to make a reservation for a rental car.\n4. The system shall allow users to specify the rental duration.\n5. The system shall allow users to specify the pick-up and drop-off locations for the rental car.\n6. The system shall generate rental agreements for car rentals.\n7. The system shall allow administrators to track rental durations for cars.\n8. The system shall process payments for car rentals.\n9. The system shall allow administrators to manage car listings.\n10. The system shall allow administrators to monitor reservations.\n11. The system shall allow administrators to confirm the availability of cars for rental.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Car {\n  car_id <<key>>\n  admin_id <<foreign>>\n  car_make\n  car_model\n  car_year\n  car_type\n  availability\n}\n\nentity Reservation {\n  reservation_id <<key>>\n  user_id <<foreign>>\n  car_id <<foreign>>\n  reservation_date\n  pick_up_date\n  drop_off_date\n  status\n}\n\nentity Agreement {\n  agreement_id <<key>>\n  reservation_id <<foreign>>\n  agreement_date\n  agreement_content\n}\n\nentity Payment {\n  payment_id <<key>>\n  user_id <<foreign>>\n  reservation_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_status\n}\n\nrelationship MAKES_RESERVATION {\n}\nrelationship MANAGES_CARS {\n}\nrelationship GENERATES_AGREEMENT {\n}\nrelationship PROCESSES_PAYMENT {\n}\nrelationship USES_RESERVATION {\n}\n\nMAKES_RESERVATION -1- User\nMAKES_RESERVATION -N- Reservation\n\nMANAGES_CARS -1- Administrator\nMANAGES_CARS -N- Car\n\nGENERATES_AGREEMENT -1- Reservation\nGENERATES_AGREEMENT -N- Agreement\n\nPROCESSES_PAYMENT -1- User\nPROCESSES_PAYMENT -N- Payment\n\nUSES_RESERVATION -N- Reservation\nUSES_RESERVATION -1- Car\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Online College Magazine System:\n1. The system shall allow users (students, faculty, contributors) to manage articles, including writing, editing, and publishing.\n2. The system shall allow users to rate published articles.\n3. The system shall allow users to comment on published articles.\n4. The system shall allow users to organize articles based on appropriate categories.\n5. The system shall allow guests to read, comment on, and rate articles.\n6. The system shall allow guests to contribute content for the magazine if interested.\n7. The system shall allow moderators to review articles before they are published.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Student {\n  department\n}\n\nentity Faculty {\n  department\n}\n\nentity Alumni {\n  department\n}\n\nentity Guest {\n}\n\nentity Moderator {\n  department\n}\n\nentity Article {\n  article_id <<key>>\n  author_id <<foreign>>\n  article_title\n  article_content\n  article_type\n  publication_date\n  status\n}\n\nentity Comment {\n  comment_id <<key>>\n  article_id <<foreign>>\n  commenter_id <<foreign>>\n  comment_content\n  comment_date\n}\n\nentity Rating {\n  rating_id <<key>>\n  article_id <<foreign>>\n  rater_id <<foreign>>\n  rating_value\n  rating_date\n}\n\nUser ->- d { Student, Faculty, Alumni, Guest, Moderator }\n\nrelationship WRITES_ARTICLE {\n}\nrelationship REVIEWS_ARTICLE {\n}\nrelationship COMMENTS_ON_ARTICLE {\n}\nrelationship RATES_ARTICLE {\n}\nrelationship HAS_RATING {\n}\n\nWRITES_ARTICLE -1- User\nWRITES_ARTICLE -N- Article\n\nREVIEWS_ARTICLE -1- Moderator\nREVIEWS_ARTICLE -N- Article\n\nCOMMENTS_ON_ARTICLE -1- Guest\nCOMMENTS_ON_ARTICLE -N- Comment\n\nRATES_ARTICLE -1- Guest\nRATES_ARTICLE -N- Rating\n\nHAS_RATING -1- Article\nHAS_RATING -N- Rating\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Crime Record Management System:\n1. The system shall allow petitioners to file a First Incident Report (FIR).\n2. The system shall allow victims to record complaints.\n3. The system shall allow tracking of criminals, including those arrested, to be arrested, or escaped.\n4. The system shall allow investigating officers to manage cases, including updating and tracking the status of cases.\n5. The system shall allow investigating officers to monitor crime activities throughout the state.\n",
        "output": "@startchen\n\nentity Petitioner {\n  petitioner_id <<key>>\n  name\n  address\n  phone\n  email\n  password\n  registration_date\n}\n\nentity Victim {\n  victim_id <<key>>\n  name\n  address\n  phone\n  email\n  password\n  registration_date\n}\n\nentity Accused {\n  accused_id <<key>>\n  name\n  address\n  phone\n  email\n  password\n  registration_date\n}\n\nentity Case {\n  case_id <<key>>\n  petitioner_id <<foreign>>\n  victim_id <<foreign>>\n  accused_id <<foreign>>\n  officer_id <<foreign>>\n  case_type\n  case_status\n  case_date\n}\n\nentity InvestigatingOfficer {\n  officer_id <<key>>\n  name\n  address\n  phone\n  email\n  registration_date\n}\n\nentity Complaint {\n  complaint_id <<key>>\n  petitioner_id <<foreign>>\n  victim_id <<foreign>>\n  accused_id <<foreign>>\n  complaint_date\n  complaint_content\n}\n\nrelationship FILES_FIR {\n}\nrelationship INVESTIGATES_CASE {\n}\nrelationship FILES_COMPLAINT {\n}\nrelationship IS_VICTIM_OF {\n}\nrelationship IS_ACCUSED_IN {\n}\n\nFILES_FIR -1- Petitioner\nFILES_FIR -N- Case\n\nINVESTIGATES_CASE -1- InvestigatingOfficer\nINVESTIGATES_CASE -N- Case\n\nFILES_COMPLAINT -1- Petitioner\nFILES_COMPLAINT -N- Complaint\n\nIS_VICTIM_OF -1- Victim\nIS_VICTIM_OF -N- Case\n\nIS_ACCUSED_IN -1- Accused\nIS_ACCUSED_IN -N- Case\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Smart Traffic System:\n1. The system shall allow traffic police to monitor roads with high traffic levels.\n2. The system shall detect helmet and seat belt violations using image processing.\n3. The system shall submit details of driver violations to the traffic police when the driver violates the law more than two times.\n4. The system shall operate street lights based on population density at night to save electricity.\n5. The system shall allow traffic police to cancel the license of drivers who violate the law.\n6. The system shall regulate automated traffic lights to control traffic flow and avoid congestion.\n",
        "output": "@startchen\n\nentity Driver {\n  driver_id <<key>>\n  name\n  license_number\n  violation_count\n  penalty\n  license_status\n}\n\nentity TrafficPolice {\n  police_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Camera {\n  camera_id <<key>>\n  location\n  camera_type\n  camera_status\n}\n\nentity Signal {\n  signal_id <<key>>\n  signal_type\n  signal_status\n}\n\nentity StreetLight {\n  light_id <<key>>\n  location\n  light_type\n  light_status\n}\n\nentity Violation {\n  violation_id <<key>>\n  driver_id <<foreign>>\n  camera_id <<foreign>>\n  violation_date\n  violation_type\n  violation_status\n}\n\nrelationship DETECTS_VIOLATION {\n}\nrelationship SUBMITS_TO_POLICE {\n}\nrelationship MONITORS_DRIVER {\n}\nrelationship OPERATES_SIGNAL {\n}\nrelationship OPERATES_LIGHT {\n}\nrelationship CANCELS_LICENSE {\n}\nrelationship ASSOCIATE_WITH {\n}\n\nDETECTS_VIOLATION -1- Camera\nDETECTS_VIOLATION -N- Violation\n\nSUBMITS_TO_POLICE -1- Violation\nSUBMITS_TO_POLICE -N- TrafficPolice\n\nMONITORS_DRIVER -1- Camera\nMONITORS_DRIVER -N- Driver\n\nOPERATES_SIGNAL -1- Signal\nOPERATES_SIGNAL -N- Camera\n\nOPERATES_LIGHT -1- StreetLight\nOPERATES_LIGHT -N- Camera\n\nCANCELS_LICENSE -1- TrafficPolice\nCANCELS_LICENSE -N- Driver\n\nASSOCIATE_WITH -1- Violation\nASSOCIATE_WITH -N- Driver\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Job Portal System:\n1. The system shall allow job seekers to view available job listings.\n2. The system shall provide job availability predictions to job seekers.\n3. The system shall allow job seekers to search for jobs using filters like location, sector, and eligibility.\n4. The system shall allow job seekers and companies to register profiles.\n5. The system shall allow companies to shortlist candidates for job positions.\n6. The system shall allow companies to post job listings.\n7. The system shall allow job seekers to apply for jobs.\n",
        "output": "@startchen\n\nentity Candidate {\n  candidate_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  sector\n  interest\n  eligibility\n}\n\nentity Company {\n  company_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  sector\n}\n\nentity Job {\n  job_id <<key>>\n  company_id <<foreign>>\n  job_title\n  job_description\n  job_location\n  job_sector\n  job_package\n  job_platform\n  job_interest\n  job_eligibility\n}\n\nentity Application {\n  application_id <<key>>\n  candidate_id <<foreign>>\n  job_id <<foreign>>\n  application_date\n  application_status\n}\n\nrelationship SUBMITS_APPLICATION {\n}\nrelationship RECEIVES_APPLICATION {\n}\nrelationship POSTS_JOB {\n}\nrelationship SHORTLISTS_APPLICATION {\n}\nrelationship SELECTS_APPLICATION {\n}\n\nSUBMITS_APPLICATION -1- Candidate\nSUBMITS_APPLICATION -N- Application\n\nRECEIVES_APPLICATION -1- Job\nRECEIVES_APPLICATION -N- Application\n\nPOSTS_JOB -1- Company\nPOSTS_JOB -N- Job\n\nSHORTLISTS_APPLICATION -1- Company\nSHORTLISTS_APPLICATION -N- Application\n\nSELECTS_APPLICATION -1- Company\nSELECTS_APPLICATION -N- Application\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Aarogya Setu App:\n1. The system shall help users identify COVID-19 hotspots in their area.\n2. The system shall perform contact tracing to identify possible COVID-19 exposures.\n3. The system shall notify users about their proximity to nearby infections or hotspots.\n4. The system shall allow users to self-identify their risk based on symptoms and exposure.\n5. The system shall monitor users' health assessments based on their self-reported data.\n6. The system shall help users identify COVID-19 symptoms.\n7. The system shall send users alerts about the best safety precautions.\n8. The system shall provide users with a list of quarantine measures for those at high risk.\n9. The system shall assist users who have a travel history with self-quarantine measures.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  health_status\n  risk_level\n  reported_symptoms\n}\n\nentity Hotspot {\n  hotspot_id <<key>>\n  location\n  hotspot_type\n  hotspot_status\n}\n\nentity Quarantine {\n  quarantine_id <<key>>\n  user_id <<foreign>>\n  quarantine_start_date\n  quarantine_end_date\n  quarantine_status\n  quarantine_location\n}\n\nentity Alert {\n  alert_id <<key>>\n  user_id <<foreign>>\n  alert_date\n  alert_type\n  alert_content\n}\n\nrelationship UNDER_QUARANTINE {\n}\nrelationship RECIEVES_ALERT {\n}\nrelationship NEAR_HOTSPOT {\n}\n\nUNDER_QUARANTINE -1- User\nUNDER_QUARANTINE -1- Quarantine\n\nRECIEVES_ALERT -1- User\nRECIEVES_ALERT -N- Alert\n\nNEAR_HOTSPOT -N- User\nNEAR_HOTSPOT -1- Hotspot\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Wedding Planner System:\n1. The system shall allow couples to create wedding budgets.\n2. The system shall allow couples to select venues for their wedding.\n3. The system shall allow couples to hire vendors for services like catering, photography, and entertainment.\n4. The system shall allow couples to manage guest lists.\n5. The system shall allow couples to send invitations to their guests.\n6. The system shall allow couples to track RSVPs from guests.\n7. The system shall allow couples to create wedding timelines for event planning.\n8. The system shall allow couples to manage seating arrangements for the wedding event.\n9. The system shall allow couples to coordinate event logistics.\n10. The system shall allow wedding planners to oversee the planning process.\n11. The system shall allow wedding planners to communicate with vendors.\n12. The system shall allow wedding planners to ensure the smooth execution of the wedding events.\n",
        "output": "@startchen\n\nentity Couple {\n  couple_id <<key>>\n  name\n  email\n  password\n  phone\n  wedding_date\n  budget\n}\n\nentity Vendor {\n  vendor_id <<key>>\n  name\n  email\n  password\n  phone\n  service_type\n  availability\n}\n\nentity Guest {\n  guest_id <<key>>\n  name\n  email\n  password\n  phone\n  rsvp_status\n}\n\nentity Wedding {\n  wedding_id <<key>>\n  couple_id <<foreign>>\n  venue\n  date\n  budget\n  status\n}\n\nentity Planner {\n  planner_id <<key>>\n  name\n  email\n  phone\n  department\n  registration_date\n}\n\nentity EventTimeline {\n  timeline_id <<key>>\n  wedding_id <<foreign>>\n  event_date\n  event_description\n  event_location\n  event_status\n}\n\nrelationship HIRES_PLANNER {\n}\nrelationship HIRES_VENDOR {\n}\nrelationship INVITES_GUEST {\n}\nrelationship MANAGES_WEDDING {\n}\nrelationship HAS_TIMELINE {\n}\n\nHIRES_PLANNER -1- Couple\nHIRES_PLANNER -1- Planner\n\nHIRES_VENDOR -1- Planner\nHIRES_VENDOR -N- Vendor\n\nINVITES_GUEST -1- Wedding\nINVITES_GUEST -N- Guest\n\nMANAGES_WEDDING -1- Planner\nMANAGES_WEDDING -N- Wedding\n\nHAS_TIMELINE -1- Wedding\nHAS_TIMELINE -N- EventTimeline\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Arcade Management System:\n1. The system shall allow arcade owners to add new games.\n2. The system shall allow arcade owners to set game prices.\n3. The system shall allow arcade owners to track game usage.\n4. The system shall allow customers to purchase tickets to play games.\n5. The system shall allow customers to play games using purchased tickets.\n6. The system shall allow customers to redeem tickets for prizes.\n7. The system shall allow arcade owners to manage customer accounts.\n8. The system shall track ticket balances for customers.\n9. The system shall generate reports on game popularity and arcade performance.\n10. The system shall allow arcade owners to oversee arcade operations.\n11. The system shall allow arcade owners to allocate resources effectively.\n12. The system shall allow arcade owners to ensure customer satisfaction.\n",
        "output": "@startchen\n\nentity Owner {\n  owner_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n}\n\nentity Game {\n  game_id <<key>>\n  owner_id <<foreign>>\n  game_title\n  game_type\n  ticket_cost\n  game_status\n  game_usage\n}\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n}\n\nentity Ticket {\n  ticket_id <<key>>\n  game_id <<foreign>>\n  customer_id <<foreign>>\n  purchase_date\n  tickets_purchased\n  tickets_used\n  ticket_balance\n}\n\nentity Prize {\n  prize_id <<key>>\n  game_id <<foreign>>\n  customer_id <<foreign>>\n  prize_name\n  prize_cost\n  prize_availability\n  redemption_date\n}\n\nentity Report {\n  report_id <<key>>\n  owner_id <<foreign>>\n  report_date\n  report_type\n  report_content\n}\n\nrelationship PURCHASES_TICKET {\n}\nrelationship USES_TICKET {\n}\nrelationship REDEEMS_PRIZE {\n}\nrelationship HAS_PRIZE {\n}\nrelationship OWNS_GAME {\n}\nrelationship GENERATES_REPORT {\n}\n\nOWNS_GAME -1- Owner\nOWNS_GAME -N- Game\n\nUSES_TICKET -1- Ticket\nUSES_TICKET -1- Game\n\nPURCHASES_TICKET -1- Customer\nPURCHASES_TICKET -N- Ticket\n\nHAS_PRIZE -1- Game\nHAS_PRIZE -N- Prize\n\nREDEEMS_PRIZE -1- Customer\nREDEEMS_PRIZE -N- Prize\n\nGENERATES_REPORT -1- Owner\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Blind Navigation Mobile App:\n1. The system shall provide audio directions to blind users based on GPS data.\n2. The system shall allow blind users to search for nearby places of interest.\n3. The system shall allow blind users to plan routes for navigation.\n4. The system shall provide real-time updates on the user’s location during navigation.\n5. The system shall allow users to set their preferences for navigation and audio feedback.\n6. The system shall allow users to save their favorite locations for future reference.\n7. The system shall provide access to emergency services in case of need.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  preferences\n}\n\nentity Location {\n  location_id <<key>>\n  location_name\n  location_type\n  location_address\n  location_status\n}\n\nentity Route {\n  route_id <<key>>\n  user_id <<foreign>>\n  start_location\n  end_location\n  route_distance\n  route_duration\n  route_status\n}\n\nentity PointOfInterest {\n  poi_id <<key>>\n  location_id <<foreign>>\n  poi_name\n  poi_type\n  poi_description\n  poi_status\n}\n\nentity EmergencyService {\n  service_id <<key>>\n  service_name\n  service_type\n  service_phone\n  service_address\n  service_status\n}\n\nentity Update {\n  update_id <<key>>\n  user_id <<foreign>>\n  update_date\n  update_content\n}\n\nrelationship PLANS_ROUTE {\n}\nrelationship SAVES_LOCATION {\n}\nrelationship ACCESS_SERVICE {\n}\nrelationship RECEIVES_UPDATE {\n}\nrelationship ASSOCIATES_POI {\n}\n\nPLANS_ROUTE -1- User\nPLANS_ROUTE -N- Route\n\nSAVES_LOCATION -1- User\nSAVES_LOCATION -N- Location\n\nACCESS_SERVICE -1- User\nACCESS_SERVICE -N- EmergencyService\n\nRECEIVES_UPDATE -1- User\nRECEIVES_UPDATE -N- Update\n\nASSOCIATES_POI -1- Location\nASSOCIATES_POI -N- PointOfInterest\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Sign Language Translator Mobile App:\n1. The system shall translate sign language gestures into text and speech.\n2. The system shall allow deaf users to communicate with hearing users by converting signed words and phrases.\n3. The system shall convert sign language gestures into text for display.\n4. The system shall convert sign language gestures into spoken words.\n5. The system shall allow users to customize sign language dictionaries.\n6. The system shall allow users to save common phrases for quick access.\n7. The system shall allow users to adjust translation settings for personalized usage.\n",
        "output": "@startchen\n\nentity DeafUser {\n  user_id <<key>>\n  name {\n    Fname\n    Lname\n  }\n  email\n  password\n  phone\n}\n\nentity SignGesture {\n  gesture_id <<key>>\n  gesture_type\n  gesture_translation\n  accuracy_score\n}\n\nentity Display {\n  display_id <<key>>\n  content <<multi>>\n  output_type <<derived>>\n}\n\nrelationship INPUTS_SIGN {\n}\nrelationship CONVERTS_TO_TEXT {\ntranslation_setting\n}\nrelationship CONVERTS_TO_AUDIO {\ntranslation_setting\n}\n\nINPUTS_SIGN -1- DeafUser\nINPUTS_SIGN -N- SignGesture\n\nCONVERTS_TO_TEXT -1- SignGesture\nCONVERTS_TO_TEXT -1- Display\n\nCONVERTS_TO_AUDIO -1- SignGesture\nCONVERTS_TO_AUDIO -1- Display\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Glacier Melting Prediction System:\n1. The system shall allow scientists to input data related to glacier melting.\n2. The system shall allow scientists to run simulations for predicting glacier melting.\n3. The system shall allow scientists to visualize the results of glacier melting predictions.\n4. The system shall generate reports on glacier melting and its potential impact.\n5. The system shall allow scientists to share data with other researchers.\n6. The system shall identify trends in glacier melting patterns over time.\n",
        "output": "@startchen\n\nentity Scientist {\n  scientist_id <<key>>\n  name {\n    Fname\n    Lname \n  }\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity Glacier {\n  glacier_id <<key>>\n  glacier_name\n  glacier_location\n  glacier_type\n  glacier_status\n}\n\nentity Data {\n  data_id <<key>>\n  scientist_id <<foreign>>\n  data_content <<multi>>\n  data_type <<derived>>\n  data_source\n  data_date\n}\n\nentity Simulation {\n  simulation_id <<key>>\n  scientist_id <<foreign>>\n  simulation_date\n  simulation_results\n}\n\nentity Report {\n  report_id <<key>>\n  scientist_id <<foreign>>\n  report_date\n  report_content\n}\n\nrelationship INPUTS_DATA {\n}\nrelationship RUNS_SIMULATION {\n}\nrelationship ASSOCIATED_WITH_DATA {\n}\nrelationship ASSOCIATED_WITH_SIMULATION {\n}\nrelationship GENERATES_REPORT {\n}\n\nINPUTS_DATA -1- Scientist\nINPUTS_DATA -N- Data\n\nRUNS_SIMULATION -1- Scientist\nRUNS_SIMULATION -N- Simulation\n\nASSOCIATED_WITH_DATA -1- Glacier\nASSOCIATED_WITH_DATA -N- Data\n\nASSOCIATED_WITH_SIMULATION -1- Glacier\nASSOCIATED_WITH_SIMULATION -N- Simulation\n\nGENERATES_REPORT -1- Scientist\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Air Quality Monitoring System:\n1. The system shall allow environmental agencies to monitor real-time air quality data.\n2. The system shall allow environmental agencies to set pollution thresholds for various air pollutants.\n3. The system shall issue alerts when air pollution levels exceed set thresholds.\n4. The system shall generate air quality reports based on collected data.\n5. The system shall map pollution sources in urban areas.\n6. The system shall identify trends in air pollution patterns over time.\n",
        "output": "@startchen\n\nentity Agency {\n  agency_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  registration_date\n}\n\nentity PollutionSource {\n  source_id <<key>>\n  source_name\n  source_location\n  source_type\n  source_status\n}\n\nentity WeatherData {\n  weather_id <<key>>\n  temperature\n  humidity\n  wind_speed\n  wind_direction\n  weather_date\n  weather_location\n}\n\nentity AirQualityData {\n  data_id <<key>>\n  source_id <<foreign>>\n  weather_id <<foreign>>\n  particulate_matter_level\n  ozone_level\n  nitrogen_dioxide_level\n}\n\nentity Threshold {\n  threshold_id <<key>>\n  parameter\n  max_value\n  min_value\n  alert_level\n}\n\nentity Alert {\n  alert_id <<key>>\n  agency_id <<foreign>>\n  alert_date\n  parameter\n  alert_message\n}\n\nentity Report {\n  report_id <<key>>\n  agency_id <<foreign>>\n  report_date\n  report_content\n}\n\nrelationship COLLECTED_FROM {\n}\nrelationship SETS_THRESHOLD {\n}\nrelationship HAS_THRESHOLD {\n}\nrelationship ISSUES_ALERT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship INFLUENCED_BY {\n}\n\nCOLLECTED_FROM -N- AirQualityData\nCOLLECTED_FROM -1- PollutionSource\n\nINFLUENCED_BY -N- AirQualityData\nINFLUENCED_BY -1- WeatherData\n\nSETS_THRESHOLD -1- Agency\nSETS_THRESHOLD -N- Threshold\n\nHAS_THRESHOLD -1- AirQualityData\nHAS_THRESHOLD -1- Threshold\n\nISSUES_ALERT -1- Agency\nISSUES_ALERT -N- Alert\n\nGENERATES_REPORT -1- Agency\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Diagramming Tool:\n1. The system shall allow software engineers to create UML diagrams.\n2. The system shall allow software engineers to create flowcharts and other visual representations.\n3. The system shall allow software engineers to customize visual elements such as shapes and connectors.\n4. The system shall allow software engineers to collaborate on diagrams with team members.\n5. The system shall allow software engineers to share diagrams with other users.\n6. The system shall allow software engineers to export diagrams in various formats.\n7. The system shall provide version control for diagrams.\n8. The system shall provide diagram templates for easy use.\n9. The system shall integrate with other software development tools.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  role\n}\n\nentity Diagram {\n  diagram_id <<key>>\n  user_id <<foreign>>\n  title\n  diagram_type\n  creation_date\n  last_modified_date\n  status\n}\n\nentity Shape {\n  shape_id <<key>>\n  diagram_id <<foreign>>\n  shape_type\n  position_x\n  position_y\n  customization\n}\n\nentity Connector {\n  connector_id <<key>>\n  diagram_id <<foreign>>\n  start_shape_id <<foreign>>\n  end_shape_id <<foreign>>\n  connector_type\n  connector_style\n}\n\nentity Version {\n  version_id <<key>>\n  diagram_id <<foreign>>\n  version_number\n  save_date\n  changes_summary\n}\n\nentity Template {\n  template_id <<key>>\n  name\n  description\n  diagram_type\n}\n\nrelationship CREATES_DIAGRAM {\n}\nrelationship CONTAINS_SHAPE {\n}\nrelationship LINKS_SHAPES {\n}\nrelationship HAS_VERSION {\n}\nrelationship USES_TEMPLATE {\n}\nrelationship COLLABORATES_WITH {\n diagram_id <<foreign>>\n}\n\nCREATES_DIAGRAM -1- User\nCREATES_DIAGRAM -N- Diagram\n\nCONTAINS_SHAPE -1- Diagram\nCONTAINS_SHAPE -N- Shape\n\nLINKS_SHAPES -1- Connector\nLINKS_SHAPES -2- Shape\n\nHAS_VERSION -1- Diagram\nHAS_VERSION -N- Version\n\nUSES_TEMPLATE -1- Diagram\nUSES_TEMPLATE -1- Template\n\nCOLLABORATES_WITH -1- User\nCOLLABORATES_WITH -N- User\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Fitness Application:\n1. The system shall allow users to log exercises performed.\n2. The system shall track calories burned by users during workouts.\n3. The system shall allow users to create personalized workout plans.\n4. The system shall allow users to set fitness goals.\n5. The system shall provide users with workout summaries.\n6. The system shall send users reminders for scheduled workouts.\n7. The system shall allow users to track their nutrition intake.\n8. The system shall allow users to log their meals.\n9. The system shall calculate users' daily calorie intake.\n10. The system shall allow users to monitor their overall nutrition intake.\n11. The system shall provide users with meal summaries.\n12. The system shall send users alerts for meal planning.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  age\n  weight\n  height\n  fitness_goal\n}\n\nentity Workout {\n  workout_id <<key>>\n  user_id <<foreign>>\n  workout_date\n  workout_type\n  duration\n  calories_burned\n}\n\nentity Exercise {\n  exercise_id <<key>>\n  workout_id <<foreign>>\n  exercise_name\n  sets\n  reps\n  weight\n  duration\n  calories_burned\n}\n\nentity Nutrition {\n  nutrition_id <<key>>\n  user_id <<foreign>>\n  meal_date\n  meal_type\n  meal_content\n  calories_intake\n}\n\nentity Goal {\n  goal_id <<key>>\n  user_id <<foreign>>\n  goal_type\n  target\n  progress\n}\n\nentity Reminder {\n  reminder_id <<key>>\n  user_id <<foreign>>\n  reminder_date\n  reminder_type\n  reminder_content\n}\n\nrelationship LOGS_WORKOUT {\n}\nrelationship LOGS_EXERCISE {\n}\nrelationship LOGS_NUTRITION {\n}\nrelationship SETS_GOAL {\n}\nrelationship SETS_REMINDER {\n}\n\nLOGS_WORKOUT -1- User\nLOGS_WORKOUT -N- Workout\n\nLOGS_EXERCISE -1- Workout\nLOGS_EXERCISE -N- Exercise\n\nLOGS_NUTRITION -1- User\nLOGS_NUTRITION -N- Nutrition\n\nSETS_GOAL -1- User\nSETS_GOAL -N- Goal\n\nSETS_REMINDER -1- User\nSETS_REMINDER -N- Reminder\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Hostel Finding Application:\n1. The system shall allow students to search for hostels based on location, price, and amenities.\n2. The system shall allow students to book hostel accommodations online.\n3. The system shall provide filters for refining search results.\n4. The system shall allow students to view hostel reviews.\n5. The system shall allow students to compare hostel options.\n6. The system shall allow students to manage their bookings.\n7. The system shall send students booking confirmations.\n8. The system shall provide directions to hostels after booking.\n",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  institution\n}\n\nentity Hostel {\n  hostel_id <<key>>\n  hostel_name\n  hostel_location\n  hostel_price\n  hostel_amenities\n  hostel_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  student_id <<foreign>>\n  hostel_id <<foreign>>\n  booking_date\n  check_in_date\n  check_out_date\n  booking_status <<derived>>\n}\n\nentity Review {\n  review_id <<key>>\n  student_id <<foreign>>\n  hostel_id <<foreign>>\n  review_date\n  review_content\n  review_rating\n}\n\nrelationship BOOKS_HOSTEL {\n}\nrelationship WRITES_REVIEW {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship HAS_REVIEWS {\n}\n\nBOOKS_HOSTEL -1- Student\nBOOKS_HOSTEL -N- Booking\n\nASSOCIATED_WITH -1- Booking\nASSOCIATED_WITH -1- Hostel\n\nWRITES_REVIEW -1- Student\nWRITES_REVIEW -N- Review\n\nHAS_REVIEWS -1- Hostel\nHAS_REVIEWS -N- Review\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Messaging Application:\n1. The system shall allow users to send text messages to their contacts.\n2. The system shall allow users to send photos to their contacts.\n3. The system shall allow users to send videos to their contacts.\n4. The system shall allow users to send voice messages to their contacts.\n5. The system shall support group chats for multiple participants.\n6. The system shall provide message encryption for secure communication.\n7. The system shall allow users to share multimedia content, including photos, videos, and voice messages.\n8. The system shall allow users to create chat groups.\n9. The system shall allow users to add or remove participants from chat groups.\n10. The system shall allow users to customize chat settings, including notifications and privacy options.\n11. The system shall send notifications for new messages and updates.\n12. The system shall allow users to archive messages for future reference.\n13. The system shall allow users to block contacts from sending messages.\n14. The system shall allow users to manage message storage on their devices.\n15. The system shall allow users to view their message history.\n16. The system shall send alerts for incoming messages.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  status\n}\n\nentity Contact {\n  contact_id <<key>>\n  user_id <<foreign>>\n  contact_name\n  contact_email\n  contact_phone\n  contact_status\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  message_content\n  message_type\n  message_date\n  message_status\n}\n\nentity Group {\n  group_id <<key>>\n  group_name\n  group_admin_id <<foreign>>\n  group_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship SENDS_MESSAGE {\n}\nrelationship ADDS_CONTACT {\n}\nrelationship CREATES_GROUP {\n}\nrelationship GETS_NOTIFICATION {\n}\nrelationship JOINS_GROUP {\n  membership_date\n  membership_status\n}\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\nADDS_CONTACT -1- User\nADDS_CONTACT -N- Contact\n\nCREATES_GROUP -1- User\nCREATES_GROUP -N- Group\n\nGETS_NOTIFICATION -1- User\nGETS_NOTIFICATION -N- Notification\n\nJOINS_GROUP -1- User\nJOINS_GROUP -N- Group\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Social Media Application:\n1. The system shall allow users to share photos with their friends.\n2. The system shall allow users to share videos with their friends.\n3. The system shall allow users to share messages with their friends.\n4. The system shall support multimedia sharing, including photos, videos, and messages.\n5. The system shall support chat messaging between users.\n6. The system shall support story posting for users to share temporary content.\n7. The system shall allow users to create posts for sharing on their profiles.\n8. The system shall allow users to view stories posted by their friends.\n9. The system shall allow users to send direct messages to their contacts.\n10. The system shall allow users to add friends to their social network.\n11. The system shall allow users to follow other users' profiles.\n12. The system shall allow users to comment on posts.\n13. The system shall allow users to manage their privacy settings.\n14. The system shall provide an activity feed for users to view new content from their friends.\n15. The system shall send notifications to users for new posts, messages, and updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name {\n    Fname\n    Lname\n  }\n  email\n  password\n  phone\n  location\n  status\n}\n\nentity Post {\n  post_id <<key>>\n  user_id <<foreign>>\n  post_content <<multi>>\n  post_type <<derived>>\n  post_date\n  post_status\n}\n\nentity Story {\n  story_id <<key>>\n  user_id <<foreign>>\n  story_content <<multi>>\n  story_type <<derived>>\n  story_date\n  story_status\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  message_content <<multi>>\n  message_date\n  message_status\n}\n\nrelationship CREATES_POST {\n}\nrelationship CREATES_STORY {\n}\nrelationship SENDS_MESSAGE {\n}\nrelationship ADDS_FRIEND {\n  friendship_date\n  friendship_status\n}\nrelationship FOLLOWS_USER {\n  follow_date\n  follow_status\n}\n\nCREATES_POST -1- User\nCREATES_POST -N- Post\n\nCREATES_STORY -1- User\nCREATES_STORY -N- Story\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\nADDS_FRIEND -1- User\nADDS_FRIEND -N- User\n\nFOLLOWS_USER -1- User\nFOLLOWS_USER -N- User\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Logo Design Application:\n1. The system shall allow users to create custom logos for businesses, websites, and products.\n2. The system shall allow users to select colors for their logo designs.\n3. The system shall allow users to add text and graphics to their logos.\n4. The system shall allow users to customize logo templates.\n5. The system shall allow users to save their logo designs for future use.\n6. The system shall allow users to download their logos in various formats.\n7. The system shall allow users to share their logos on social media platforms.\n8. The system shall allow users to collaborate on logo design projects with other users.\n9. The system shall provide access to design tools for logo creation.\n10. The system shall allow users to manage their logo design projects.\n11. The system shall allow users to view their design history.\n12. The system shall provide users with design suggestions based on their project requirements.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  business_name\n}\n\nentity Logo {\n  logo_id <<key>>\n  logo_name\n  logo_design\n  logo_colors <<multi>>\n  logo_status\n  logo_image\n}\n\nentity Template {\n  template_id <<key>>\n  template_name\n  template_type\n  template_design\n  template_colors <<multi>>\n}\n\nentity Project {\n  project_id <<key>>\n  project_name\n  project_status\n}\n\nrelationship CREATES_LOGO {\n creation_date\n}\nrelationship USES_TEMPLATE {\n}\nrelationship MANAGES_PROJECT {\n}\nrelationship COLLABORATES_ON {\n  collaborator_id <<multi>>\n  collaboration_date\n}\nrelationship HAS_LOGO {\n}\n\nCREATES_LOGO -1- User\nCREATES_LOGO -N- Logo\n\nUSES_TEMPLATE -1- Logo\nUSES_TEMPLATE -1- Template\n\nMANAGES_PROJECT -1- User\nMANAGES_PROJECT -N- Project\n\nHAS_LOGO -1- Project\nHAS_LOGO -N- Logo\n\nCOLLABORATES_ON -1- User\nCOLLABORATES_ON -N- Project\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Daraz E-Commerce Platform:\n1. The system shall allow users to browse products available for sale.\n2. The system shall allow users to add items to their cart for purchase.\n3. The system shall allow users to make purchases online.\n4. The system shall support product categories for easy browsing.\n5. The system shall provide search filters for narrowing down product searches.\n6. The system shall offer product recommendations to users based on their preferences.\n7. The system shall allow users to create accounts for managing their shopping experience.\n8. The system shall allow users to view their order histories.\n9. The system shall allow users to track the shipment of their orders.\n10. The system shall process payments for purchases made by users.\n11. The system shall manage inventory for products listed on the platform.\n12. The system shall generate sales reports for tracking sales performance.\n13. The system shall allow administrators to add new products to the platform.\n14. The system shall allow administrators to update existing product listings.\n15. The system shall allow administrators to monitor user activity on the platform.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location{\n  address\n  city\n  zip code\n}\n  account_status\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  role\n}\n\nentity Product {\n  product_id <<key>>\n  name\n  category\n  price\n  quantity\n  status\n  added_by <<foreign>>\n  updated_by <<foreign>>\n}\n\nentity Order {\n  order_id <<key>>\n  user_id <<foreign>>\n  order_date\n  status\n  total_amount\n}\n\nentity Cart {\n  cart_id <<key>>\n  user_id <<foreign>>\n}\n\nentity Payment {\n  payment_id <<key>>\n  order_id <<foreign>>\n  payment_date\n  method\n  amount\n  status\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  product_id <<foreign>>\n  stock_quantity\n  stock_status\n}\n\nentity Report {\n  report_id <<key>>\n  admin_id <<foreign>>\n  report_date\n  report_type\n  content\n}\n\nrelationship ADDED_TO {\n}\nrelationship PLACES_ORDER {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship MANAGES_INVENTORY {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship CONSISTS_OF{\n}\nrelationship CONTAINS {\n}\n\nPLACES_ORDER -1- User\nPLACES_ORDER -N- Order\n\nCONTAINS -1- Order\nCONTAINS -N- Product\n\nADDED_TO -N- Product\nADDED_TO -N- Cart\n\nMAKES_PAYMENT -1- User\nMAKES_PAYMENT -N- Payment\n\nCONSISTS_OF -1- Inventory\nCONSISTS_OF -N- Product\n\nMANAGES_INVENTORY -1- Administrator\nMANAGES_INVENTORY -N- Inventory\n\nGENERATES_REPORT -1- Administrator\nGENERATES_REPORT -N- Report\n\n@endchen"            
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Bidding Application:\n1. The system shall allow users to participate in online auctions.\n2. The system shall allow users to place bids on auction items.\n3. The system shall allow users to win auctions by placing the highest bid.\n4. The system shall support different auction categories for easy navigation.\n5. The system shall provide notifications for new bids and auction updates.\n6. The system shall include countdown timers for auctions.\n7. The system shall allow users to create accounts for managing their bidding activities.\n8. The system shall allow users to view available auction listings.\n9. The system shall allow users to track their bid histories.\n10. The system shall allow users to manage their auction wins.\n11. The system shall send auction alerts to users.\n12. The system shall allow users to manage their auction activities.\n13. The system shall allow users to view auction results after bidding ends.\n14. The system shall provide users with payment instructions after winning an auction.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Auctioneer {\n  auctioneer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Item {\n  item_id <<key>>\n  item_name\n  item_category\n  item_description\n  item_status\n  auctioneer_id <<foreign>>\n}\n\nentity Bid {\n  bid_id <<key>>\n  user_id <<foreign>>\n  item_id <<foreign>>\n  bid_amount\n  bid_date\n  bid_status\n}\n\nentity Auction {\n  auction_id <<key>>\n  item_id <<foreign>>\n  auctioneer_id <<foreign>>\n  auction_start_date\n  auction_end_date\n  auction_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship PLACES_BID {\n}\nrelationship HOSTS_AUCTION {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship WINS_AUCTION {\n}\nrelationship LISTS_ITEM {\n}\nrelationship PARTICIPATES_IN {\n}\n\nPLACES_BID -1- User\nPLACES_BID -N- Bid\n\nHOSTS_AUCTION -1- Auctioneer\nHOSTS_AUCTION -N- Auction\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\nWINS_AUCTION -1- User\nWINS_AUCTION -N- Auction\n\nLISTS_ITEM -1- Auctioneer\nLISTS_ITEM -N- Item\n\nPARTICIPATES_IN -1- Item\nPARTICIPATES_IN -N- Bid\n\n@endchen"            
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for House Helper/Maid Finding Application:\n1. The system shall allow users to search for domestic helpers based on services, availability, and ratings.\n2. The system shall allow users to hire domestic helpers for household chores.\n3. The system shall allow users to view helper profiles, including services and ratings.\n4. The system shall allow users to request services from domestic helpers.\n5. The system shall allow users to schedule appointments with helpers.\n6. The system shall allow users to manage their bookings for helper services.\n7. The system shall track the service history of domestic helpers.\n8. The system shall allow users to provide feedback and ratings for domestic helpers.\n9. The system shall allow users to manage their preferences for selecting helpers.\n10. The system shall allow users to view service summaries after appointments.\n11. The system shall send users reminders for scheduled services.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Helper {\n  helper_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  availability\n  rating\n  status\n}\n\nentity Service {\n  service_id <<key>>\n  user_id <<foreign>>\n  helper_id <<foreign>>\n  service_date\n  service_type\n  service_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  user_id <<foreign>>\n  helper_id <<foreign>>\n  booking_date\n  booking_status\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  user_id <<foreign>>\n  helper_id <<foreign>>\n  feedback_date\n  feedback_content\n  feedback_rating\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship REQUESTS_SERVICE {\n}\nrelationship PROVIDES_SERVICE {\n}\nrelationship BOOKS_HELPER {\n}\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nREQUESTS_SERVICE -1- User\nREQUESTS_SERVICE -N- Service\n\nPROVIDES_SERVICE -1- Helper\nPROVIDES_SERVICE -N- Service\n\nBOOKS_HELPER -1- User\nBOOKS_HELPER -N- Booking\n\nPROVIDES_FEEDBACK -1- User\nPROVIDES_FEEDBACK -N- Feedback\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"            
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Pharmaceutical Supply Chain Management System:\n1. The system shall allow pharmaceutical companies to track inventory of pharmaceutical products.\n2. The system shall allow pharmaceutical companies to manage orders for products.\n3. The system shall allow pharmaceutical companies to monitor shipments of pharmaceutical products.\n4. The system shall allow pharmaceutical companies to input production data for product management.\n5. The system shall allow pharmaceutical companies to generate purchase orders.\n6. The system shall allow pharmaceutical companies to track product deliveries.\n7. The system shall allow pharmaceutical companies to manage supplier relationships.\n8. The system shall allow pharmaceutical companies to track sales data.\n9. The system shall generate reports on product performance for pharmaceutical companies.\n10. The system shall allow administrators to oversee supply chain operations.\n11. The system shall allow administrators to allocate resources for supply chain management.\n12. The system shall allow administrators to ensure product quality across the supply chain.\n",
        "output": "@startchen\n\nentity Company {\n  company_id <<key>>\n  company_name\n  company_location{\n    address\n    city\n    country\n    zip code\n  }\n  company_type\n  company_status\n}\n\nentity Product {\n  product_id <<key>>\n  product_name\n  product_category\n  product_price\n  product_quantity\n  product_status\n}\n\nentity Order {\n  order_id <<key>>\n  company_id <<foreign>>\n  order_date\n  order_status\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  product_id <<foreign>>\n  stock_quantity\n  stock_status <<derived>>\n}\n\nentity Supplier {\n  supplier_id <<key>>\n  supplier_name\n  supplier_location{\n    address\n    city\n    country\n    zip code\n  }\n  supplier_type\n  supplier_status\n}\n\nentity Report {\n  report_id <<key>>\n  company_id <<foreign>>\n  report_date\n  report_content <<multi>>\n  report_status\n}\n\nrelationship MANAGES_INVENTORY {\n}\nrelationship PLACES_ORDER {\n}\nrelationship CONTAINS_PRODUCT {\n}\nrelationship SUPPLIES_PRODUCT {\n}\nrelationship GENERATES_REPORT {\n}\n\nMANAGES_INVENTORY -1- Company\nMANAGES_INVENTORY -N- Inventory\n\nPLACES_ORDER -1- Company\nPLACES_ORDER -N- Order\n\nCONTAINS_PRODUCT -1- Order\nCONTAINS_PRODUCT -N- Product\n\nSUPPLIES_PRODUCT -1- Supplier\nSUPPLIES_PRODUCT -N- Product\n\nGENERATES_REPORT -1- Company\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Learn How to Code Application:\n1. The system shall allow users to learn programming languages through interactive tutorials.\n2. The system shall allow users to practice coding exercises to improve their skills.\n3. The system shall allow users to build software projects using project templates.\n4. The system shall provide coding tutorials for various programming languages.\n5. The system shall support code editors for users to write and test code.\n6. The system shall include project templates to assist users in building software projects.\n7. The system shall allow users to create accounts for managing their learning progress.\n8. The system shall allow users to view coding lessons provided by the platform.\n9. The system shall allow users to complete coding challenges to test their knowledge.\n10. The system shall track users' coding progress over time.\n11. The system shall allow users to manage code repositories for their projects.\n12. The system shall allow users to share code snippets with other users.\n13. The system shall allow users to manage their coding preferences.\n14. The system shall allow users to view their project histories.\n15. The system shall provide users with coding tips and suggestions to improve their skills.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n  coding_experience_level\n}\n\nentity Lesson {\n  lesson_id <<key>>\n  lesson_title\n  lesson_content\n  programming_language <<multi>>\n  lesson_type\n  lesson_difficulty\n  lesson_status\n}\n\nentity Challenge {\n  challenge_id <<key>>\n  user_id <<foreign>>\n  challenge_title\n  challenge_description\n  programming_language <<multi>>\n  challenge_difficulty\n  challenge_status\n}\n\nentity Project {\n  project_id <<key>>\n  user_id <<foreign>>\n  project_title\n  project_description\n  programming_language <<multi>>\n  project_status\n}\n\nentity Template {\n  template_id <<key>>\n  template_name\n  template_description\n  programming_language <<multi>>\n  template_status\n}\n\nrelationship TAKES_LESSON {\n progress_percentage\n}\nrelationship COMPLETES_CHALLENGE {\n completion_date\n}\nrelationship CREATES_PROJECT {\n creation_date\n}\nrelationship USES_TEMPLATE {\n}\n\nTAKES_LESSON -1- User\nTAKES_LESSON -N- Lesson\n\nCOMPLETES_CHALLENGE -1- User\nCOMPLETES_CHALLENGE -N- Challenge\n\nCREATES_PROJECT -1- User\nCREATES_PROJECT -N- Project\n\nUSES_TEMPLATE -1- Project\nUSES_TEMPLATE -N- Template\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Data Visualization Application:\n1. The system shall allow users to create visual representations of data.\n2. The system shall allow users to analyze trends based on the visualized data.\n3. The system shall allow users to present insights derived from data visualizations.\n4. The system shall provide data import tools for bringing in external data sets.\n5. The system shall support chart templates to assist users in visualizing data.\n6. The system shall include customization options for visual elements in charts.\n7. The system shall allow users to import data sets from various sources.\n8. The system shall allow users to create charts based on imported data.\n9. The system shall allow users to customize chart styles according to their preferences.\n10. The system shall allow users to save their visualizations for future reference.\n11. The system shall allow users to share data insights with others.\n12. The system shall allow users to export charts in various formats.\n13. The system shall allow users to manage their data sources.\n14. The system shall allow users to view the history of their visualizations.\n15. The system shall provide users with data analysis suggestions.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Data {\n  data_id <<key>>\n  user_id <<foreign>>\n  data_source\n  data_content <<multi>>\n  data_type <<derived>>\n  data_status\n}\n\nentity Chart {\n  chart_id <<key>>\n  user_id <<foreign>>\n  data_id <<foreign>>\n  chart_type\n  chart_style\n  chart_data <<multi>>\n  chart_status\n}\n\nentity Visualization {\n  visualization_id <<key>>\n  user_id <<foreign>>\n  visualization_title\n  visualization_description\n  visualization_type\n  visualization_status\n}\n\nentity Template {\n  template_id <<key>>\n  template_name\n  template_description\n  template_type\n  template_status\n}\n\nrelationship IMPORTS_DATA {\n  date_imported\n}\n\nrelationship CREATES_CHART {\n  creation_date\n}\n\nrelationship CONTAINS_CHART {\n}\n\nrelationship SAVES_VISUALIZATION {\n  saved_date\n}\n\nrelationship USES_TEMPLATE {\n}\n\nIMPORTS_DATA -1- User\nIMPORTS_DATA -N- Data\n\nCREATES_CHART -1- User\nCREATES_CHART -N- Chart\n\nCONTAINS_CHART -1- Visualization\nCONTAINS_CHART -N- Chart\n\nSAVES_VISUALIZATION -1- User\nSAVES_VISUALIZATION -N- Visualization\n\nUSES_TEMPLATE -1- Visualization\nUSES_TEMPLATE -1- Template\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for 'Find the One' Matchmaking Application:\n1. The system shall allow users to find compatible partners using matching algorithms.\n2. The system shall allow users to build relationships and connect with like-minded individuals.\n3. The system shall provide user profiles for creating and managing user data.\n4. The system shall support matching algorithms to suggest potential partners.\n5. The system shall include chat messaging features for communication between users.\n6. The system shall allow users to create profiles to participate in matchmaking.\n7. The system shall allow users to view partner suggestions based on compatibility.\n8. The system shall allow users to send messages to potential matches.\n9. The system shall track relationship statuses of users.\n10. The system shall allow users to manage their connections with others.\n11. The system shall provide relationship advice to users.\n12. The system shall allow users to manage their privacy settings for safe interactions.\n13. The system shall allow users to view their relationship histories.\n14. The system shall notify users about new matches.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  gender\n  age\n  relationship_status\n}\n\nentity Message {\n  message_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  message_content\n  message_date\n  message_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship SENDS_MESSAGE {\n}\nrelationship ESTABLISHES_CONNECTION {\n  connection_date\n  connection_status\n  compatibility_score\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nSENDS_MESSAGE -1- User\nSENDS_MESSAGE -N- Message\n\nESTABLISHES_CONNECTION -1- User\nESTABLISHES_CONNECTION -N- User\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for 'FoodPanda' Food Delivery Application:\n1. The system shall allow users to order food from restaurants for delivery.\n2. The system shall allow users to track the status of their food deliveries.\n3. The system shall allow users to provide feedback on the quality of the food they receive.\n4. The system shall support restaurant listings for users to browse available restaurants.\n5. The system shall allow users to browse menus of restaurants.\n6. The system shall allow users to customize their orders based on preferences.\n7. The system shall allow users to create accounts for managing orders and settings.\n8. The system shall allow users to place orders for food delivery.\n9. The system shall allow users to track the status of their orders in real-time.\n10. The system shall allow users to manage their delivery addresses for convenience.\n11. The system shall allow users to rate food items after receiving them.\n12. The system shall allow users to manage payment methods for seamless transactions.\n13. The system shall allow users to view their order histories.\n14. The system shall send notifications to users for order updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  password\n  phone\n  location {\n    address\n    city\n  }\n}\nentity Restaurant {\n  restaurant_id <<key>>\n  name\n  password\n  location\n  cuisine_type\n  status\n}\nentity Rider {\n  rider_id <<key>>\n  name\n  phone\n  password\n  vehicle_details\n  location\n  availability_status\n}\nentity Order {\n  order_id <<key>>\n  user_id <<foreign>>\n  restaurant_id <<foreign>>\n  rider_id <<foreign>>\n  order_date\n  order_status\n  total_amount\n}\nentity Menu {\n  menu_id <<key>>\n  restaurant_id <<foreign>>\n  menu_item\n  menu_price\n  menu_category\n  menu_status\n}\n\nrelationship PLACES_ORDER {\n}\nrelationship DELIVERS_ORDER {\n delivery_date\n delivery_status\n}\nrelationship DISPLAYS_MENU {\n}\nrelationship RATES_RESTAURANT {\n rating_score\n rating_date\n}\nrelationship ASSIGNS_ORDER {\n assign_date\n}\n\nUser -1- PLACES_ORDER\nPLACES_ORDER -N- Order\nRestaurant -1- ASSIGNS_ORDER\nASSIGNS_ORDER -N- Rider\nRider -1- DELIVERS_ORDER\nDELIVERS_ORDER -N- Order\nRestaurant -1- DISPLAYS_MENU\nDISPLAYS_MENU -N- Menu\nUser -1- RATES_RESTAURANT\nRATES_RESTAURANT -N- Restaurant\n\n@endchen"  
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Web Vulnerability Scanner:\n1. The system shall allow hackers to identify security vulnerabilities in web applications.\n2. The system shall detect common vulnerabilities such as SQL injection and cross-site scripting.\n3. The system shall allow hackers to run scans on target URLs to detect vulnerabilities.\n4. The system shall allow hackers to analyze scan results for potential security flaws.\n5. The system shall generate reports detailing the vulnerabilities found in the scans.\n6. The system shall allow hackers to exploit detected security flaws.\n7. The system shall provide recommendations for remediating identified vulnerabilities.\n8. The system shall allow hackers to manage scan settings for customized scans.\n9. The system shall allow hackers to view the history of previous scans.\n10. The system shall send alerts to hackers when critical vulnerabilities are found.\n",
        "output": "@startchen\n\nentity Hacker {\n  hacker_id <<key>>\n  name\n  email\n  password\n  location\n  hacking_experience\n  hacking_status\n}\n\nentity Scan {\n  scan_id <<key>>\n  hacker_id <<foreign>>\n  target_url\n  scan_date\n  scan_status\n}\n\nentity Vulnerability {\n  vulnerability_id <<key>>\n  scan_id <<foreign>>\n  vulnerability_type\n  vulnerability_description\n  vulnerability_status\n}\n\nentity Report {\n  report_id <<key>>\n  hacker_id <<foreign>>\n  report_date\n  report_content <<multi>>\n  report_status\n}\n\nrelationship RUNS_SCAN {\n}\nrelationship IDENTIFIES_VULNERABILITY {\n}\nrelationship GENERATES_REPORT {\n}\n\nRUNS_SCAN -1- Hacker\nRUNS_SCAN -N- Scan\n\nIDENTIFIES_VULNERABILITY -1- Scan\nIDENTIFIES_VULNERABILITY -N- Vulnerability\n\nGENERATES_REPORT -1- Hacker\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Course Management System:\n1. The system shall allow students to enroll in courses.\n2. The system shall allow students to view course materials online.\n3. The system shall allow students to submit assignments for evaluation.\n4. The system shall allow instructors to create courses for students.\n5. The system shall allow instructors to upload course materials for student access.\n6. The system shall allow instructors to grade assignments submitted by students.\n7. The system shall allow students to search for available courses.\n8. The system shall allow students to access course materials after enrollment.\n9. The system shall track student progress through courses.\n10. The system shall manage course schedules for students and instructors.\n11. The system shall generate reports on course performance and student progress.\n12. The system shall allow instructors to monitor student performance.\n13. The system shall allow instructors to provide feedback on assignments.\n14. The system shall allow instructors to communicate with students directly.\n",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n}\nentity Instructor {\n  instructor_id <<key>>\n  name\n  email\n  password\n  phone\n}\nentity Department {\n  department_id <<key>>\n  department_name\n  hod\n}\nentity Course {\n  course_id <<key>>\n  course_name\n  course_description\n  course_status\n  credits\n  enrollment_date\n  enrollment_status\n  grade\n}\nentity Assignment {\n  assignment_id <<key>>\n  course_id <<foreign>>\n  student_id <<foreign>>\n  assignment_title\n  assignment_description\n  assignment_grade\n}\nentity Feedback {\n  feedback_id <<key>>\n  student_id <<foreign>>\n  feedback_content\n  feedback_date\n}\n\nrelationship HAS {\n}\nrelationship OFFERS_COURSE {\n}\nrelationship ENROLLS_IN {\n  enrollment_date\n  enrollment_status\n}\nrelationship SUBMITS_ASSIGNMENT {\n}\nrelationship GIVES_GRADE {\n}\nrelationship RECEIVES_FEEDBACK {\n}\nrelationship TEACHES {\n}\n\nDepartment -1- HAS\nHAS -N- Student\nHAS -N- Instructor\nDepartment -1- OFFERS_COURSE\nOFFERS_COURSE -N- Course\nStudent -1- ENROLLS_IN\nENROLLS_IN -N- Course\nStudent -1- SUBMITS_ASSIGNMENT\nSUBMITS_ASSIGNMENT -N- Assignment\nInstructor -1- GIVES_GRADE\nGIVES_GRADE -N- Assignment\nInstructor -1- RECEIVES_FEEDBACK\nRECEIVES_FEEDBACK -N- Feedback\nInstructor -1- TEACHES\nTEACHES -N- Course\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Video Streaming Application:\n1. The system shall allow users to watch videos.\n2. The system shall allow users to create playlists of their favorite videos.\n3. The system shall allow users to share video content with friends.\n4. The system shall support video categories for browsing.\n5. The system shall provide search filters for narrowing down video searches.\n6. The system shall offer video recommendations based on user preferences.\n7. The system shall allow users to create accounts for personalized access.\n8. The system shall allow users to like or dislike videos.\n9. The system shall allow users to share videos on social media platforms.\n10. The system shall allow users to comment on videos.\n11. The system shall allow users to manage their video preferences.\n12. The system shall track users' video histories.\n13. The system shall send notifications to users when new content is available.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Video {\n  video_id <<key>>\n  video_title\n  video_url\n  category_id <<foreign>>\n  video_duration\n  video_status\n}\n\nentity VideoCategory {\n  category_id <<key>>\n  category_name\n  category_description\n}\n\nentity Playlist {\n  playlist_id <<key>>\n  user_id <<foreign>>\n  playlist_name\n  playlist_description\n  playlist_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship WATCHES_VIDEO {\n  watch_date\n  watch_duration\n}\nrelationship CREATES_PLAYLIST {\n  create_date\n}\nrelationship CONTAINS_VIDEO {\n}\nrelationship HAS_VIDEO {\n}\nrelationship LIKES_VIDEO {\n like_date\n}\nrelationship COMMENTS_ON {\n  comment_content\n  comment_date\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nWATCHES_VIDEO -1- User\nWATCHES_VIDEO -N- Video\n\nCREATES_PLAYLIST -1- User\nCREATES_PLAYLIST -N- Playlist\n\nCONTAINS_VIDEO -1- Playlist\nCONTAINS_VIDEO -N- Video\n\nLIKES_VIDEO -1- User\nLIKES_VIDEO -N- Video\n\nCOMMENTS_ON -1- User\nCOMMENTS_ON -N- Video\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\nHAS_VIDEO -1- VideoCategory\nHAS_VIDEO -N- Video\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Zoo Management System:\n1. The system shall allow zookeepers to manage animals in the zoo.\n2. The system shall allow zookeepers to manage exhibits for animal display.\n3. The system shall allow zookeepers to manage visitor information.\n4. The system shall allow zookeepers to input animal data such as health records and feeding schedules.\n5. The system shall allow zookeepers to track feeding schedules for animals.\n6. The system shall allow zookeepers to monitor the health of animals.\n7. The system shall allow visitors to view exhibit information such as animal species and locations.\n8. The system shall allow visitors to purchase tickets for zoo entry.\n9. The system shall allow visitors to attend animal shows or events.\n10. The system shall allow administrators to manage exhibit maintenance and ensure their upkeep.\n11. The system shall track visitor attendance for reporting purposes.\n12. The system shall generate reports on animal populations and exhibits.\n13. The system shall allow administrators to oversee zoo operations.\n14. The system shall allow administrators to allocate resources such as staff and funds.\n15. The system shall ensure the safety of visitors during their time in the zoo.\n",
        "output": "@startchen\n\nentity Zookeeper {\n  zookeeper_id <<key>>\n  name\n  email\n  password\n}\nentity Animal {\n  animal_id <<key>>\n  animal_name\n  animal_species\n  animal_dob\n  animal_health_status\n  exhibit_id <<foreign>>\n}\nentity Exhibit {\n  exhibit_id <<key>>\n  exhibit_name\n  exhibit_description\n  exhibit_status\n}\nentity Visitor {\n  visitor_id <<key>>\n  name\n  email\n  phone\n  location\n  visitor_status\n}\nentity Ticket {\n  ticket_id <<key>>\n  visitor_id <<foreign>>\n  ticket_date\n  ticket_price\n  ticket_status\n}\nentity Show {\n  show_id <<key>>\n  show_name\n  show_time\n  show_location\n  show_status\n}\n\nrelationship MANAGES_ANIMAL {\n}\nrelationship MAINTAINS_EXHIBIT {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship PURCHASES_TICKET {\n}\nrelationship ATTENDS_SHOW {\n  attendance_date\n}\nrelationship FEATURES_ANIMAL {\n}\n\nZookeeper -1- MANAGES_ANIMAL\nMANAGES_ANIMAL -N- Animal\nZookeeper -1- MAINTAINS_EXHIBIT\nMAINTAINS_EXHIBIT -N- Exhibit\nVisitor -1- PURCHASES_TICKET\nPURCHASES_TICKET -N- Ticket\nVisitor -1- ATTENDS_SHOW\nATTENDS_SHOW -N- Show\nShow -1- FEATURES_ANIMAL\nFEATURES_ANIMAL -N- Animal\nExhibit -1- ASSOCIATED_WITH\nASSOCIATED_WITH -N- Ticket\n\n@endchen"    
    },
    {
        "input": "Give me a ERD for this system. Functional Requirements for Welcome Party Planner Application:\n1. The system shall allow organizers to plan and manage welcome parties for new employees.\n2. The system shall allow organizers to manage party schedules.\n3. The system shall allow organizers to invite guests to the welcome parties.\n4. The system shall allow organizers to coordinate party activities.\n5. The system shall allow new employees to view party details.\n6. The system shall allow new employees to RSVP to events.\n7. The system shall allow new employees to participate in party games.\n8. The system shall allow organizers to manage party budgets for the events.\n9. The system shall allow organizers to track guest attendance.\n10. The system shall allow organizers to collect event feedback from guests.\n11. The system shall allow organizers to manage and customize party themes.\n12. The system shall allow organizers to view the history of past parties.\n13. The system shall send notifications to organizers for party updates.\n",
        "output": "@startchen\n\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  organizer_status\n}\n\nentity Employee {\n  employee_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  employee_status\n}\n\nentity Party {\n  party_id <<key>>\n  organizer_id <<foreign>>\n  party_date\n  party_location\n  party_theme\n  party_status\n}\n\nentity Activity {\n  activity_id <<key>>\n  party_id <<foreign>>\n  activity_name\n  activity_description\n  activity_status\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  employee_id <<foreign>>\n  party_id <<foreign>>\n  feedback_content\n  feedback_date\n}\n\nentity Notification {\n  notification_id <<key>>\n  organizer_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship PLANS_PARTY {\n}\nrelationship ATTENDS_PARTY {\n rsvp_status\n}\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship HAS_ACTIVITY {\n}\n\nPLANS_PARTY -1- Organizer\nPLANS_PARTY -N- Party\n\nATTENDS_PARTY -1- Employee\nATTENDS_PARTY -N- Party\n\nHAS_ACTIVITY -1- Party\nHAS_ACTIVITY -N- Activity\n\nPROVIDES_FEEDBACK -1- Employee\nPROVIDES_FEEDBACK -N- Feedback\n\nRECEIVES_NOTIFICATION -1- Organizer\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "Give me a ERD for this system. Functional Requirements for Trip Planner Application:\n1. The system shall allow users to plan trips and create trip itineraries.\n2. The system shall allow users to organize and manage their travel itineraries.\n3. The system shall allow users to share their travel experiences with others.\n4. The system shall allow users to search for travel destinations.\n5. The system shall allow users to book accommodations for their trips.\n6. The system shall allow users to arrange transportation options for their travel.\n7. The system shall allow users to create trip plans and add activities to their itineraries.\n8. The system shall allow users to view detailed information about their trips.\n9. The system shall allow users to add activities to their trip itineraries.\n10. The system shall allow users to manage their trip budgets.\n11. The system shall allow users to track and manage their travel expenses.\n12. The system shall allow users to share trip photos and memories.\n13. The system shall allow users to manage their travel preferences for future trips.\n14. The system shall allow users to view their trip histories.\n15. The system shall send users notifications and updates for their trips.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  account_status\n}\n\nentity Destination {\n  destination_id <<key>>\n  destination_name\n  destination_location\n  destination_description\n  destination_status\n}\n\nentity Trip {\n  trip_id <<key>>\n  user_id <<foreign>>\n  destination_id <<foreign>>\n  trip_date\n  trip_duration\n  trip_status\n}\n\nentity Itinerary {\n  itinerary_id <<key>>\n  trip_id <<foreign>>\n  itinerary_date\n  itinerary_activity\n  itinerary_status\n}\n\nentity Expense {\n  expense_id <<key>>\n  user_id <<foreign>>\n  trip_id <<foreign>>\n  expense_date\n  expense_amount\n  expense_category\n  expense_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship PLANS_TRIP {\n}\nrelationship CREATES_ITINERARY {\n}\nrelationship ADDS_ACTIVITY {\n}\nrelationship TRACKS_EXPENSE {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nPLANS_TRIP -1- User\nPLANS_TRIP -N- Trip\n\nCREATES_ITINERARY -1- Trip\nCREATES_ITINERARY -N- Itinerary\n\nADDS_ACTIVITY -1- Itinerary\nADDS_ACTIVITY -N- Destination\n\nTRACKS_EXPENSE -1- User\nTRACKS_EXPENSE -N- Expense\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "Give me a ERD for this system. Functional Requirements for Cafe Management System:\n1. The system shall allow cafe owners to manage orders placed by customers.\n2. The system shall track inventory levels for menu items and other products.\n3. The system shall analyze sales data to improve business performance.\n4. The system shall allow cafe owners to input and manage menu items.\n5. The system shall allow cafe owners to process customer orders.\n6. The system shall allow cafe owners to manage customer payments.\n7. The system shall allow customers to view menu options available at the cafe.\n8. The system shall allow customers to place orders for menu items.\n9. The system shall allow customers to pay for their purchases online or at the cafe.\n10. The system shall track inventory levels and notify owners of low stock.\n11. The system shall manage relationships with suppliers for inventory restocking.\n12. The system shall generate reports on sales performance for analysis.\n13. The system shall allow administrators to oversee cafe operations.\n14. The system shall allow administrators to allocate resources efficiently.\n15. The system shall ensure customer satisfaction by managing feedback and service quality.\n",
        "output": "@startchen\n\nentity Owner {\n  owner_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  owner_status\n}\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  customer_status\n}\n\nentity MenuItem {\n  menu_item_id <<key>>\n  menu_price\n  menu_category\n  menu_status\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  order_status\n  total_amount\n}\n\nentity Inventory {\n  inventory_id <<key>>\n  menu_item_id <<foreign>>\n  stock_quantity\n  stock_status\n}\n\nentity Supplier {\n  supplier_id <<key>>\n  supplier_name\n  supplier_location\n  supplier_status\n}\n\nentity Report {\n  report_id <<key>>\n  owner_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship HAS_ITEM {\n}\nrelationship TRACKS_INVENTORY {\n}\nrelationship SUPPLIES {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship PLACES_ORDER {\n}\nrelationship CONTAINS_MENU_ITEM {\n   quantity\n}\n\nHAS_ITEM -1- Inventory\nHAS_ITEM -N- MenuItem\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nCONTAINS_MENU_ITEM -1- Order\nCONTAINS_MENU_ITEM -N- MenuItem\n\nTRACKS_INVENTORY -1- Owner\nTRACKS_INVENTORY -N- Inventory\n\nSUPPLIES -1- Supplier\nSUPPLIES -N- MenuItem\n\nGENERATES_REPORT -1- Owner\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Crime Management System:\n1. The system shall allow investigators to manage criminal cases.\n2. The system shall allow investigators to track suspects involved in criminal activities.\n3. The system shall allow investigators to analyze crime data for trends and insights.\n4. The system shall allow investigators to input case details such as descriptions, timelines, and evidence.\n5. The system shall allow investigators to gather evidence for criminal cases.\n6. The system shall allow investigators to identify potential suspects in ongoing cases.\n7. The system shall allow officers to search criminal records for investigation purposes.\n8. The system shall allow officers to issue warrants for arrests or searches.\n9. The system shall allow officers to make arrests of suspects.\n10. The system shall allow administrators to track the progress of cases.\n11. The system shall allow administrators to manage evidence storage for cases.\n12. The system shall generate reports on crime trends and case statistics.\n13. The system shall allow administrators to oversee law enforcement operations.\n14. The system shall allow administrators to allocate resources for crime management.\n15. The system shall ensure public safety by tracking crime and managing law enforcement activities.\n",
        "output": "@startchen\n\nentity Investigator {\n  investigator_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  investigator_status\n}\n\nentity Officer {\n  officer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  officer_status\n}\n\nentity Suspect {\n  suspect_id <<key>> \n  name\n  age\n  gender\n  location\n  suspect_status\n}\n\nentity Case {\n  case_id <<key>>\n  investigator_id <<foreign>>\n  case_date\n  case_status\n  case_description\n}\n\nentity Evidence {\n  evidence_id <<key>>\n  case_id <<foreign>>\n  evidence_type\n  evidence_details\n  evidence_status\n}\n\nentity Report {\n  report_id <<key>>\n  investigator_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Warrant {\n  warrant_id <<key>>\n  officer_id <<foreign>>\n  suspect_id <<foreign>>\n  issue_date\n  warrant_status\n}\n\nrelationship MANAGES_CASE {\n}\nrelationship TRACKS_SUSPECT {\n}\nrelationship ISSUES_WARRANT {\n}\nrelationship GATHERS_EVIDENCE {\n}\nrelationship GENERATES_REPORT {\n}\n\nMANAGES_CASE -1- Investigator\nMANAGES_CASE -N- Case\n\nTRACKS_SUSPECT -1- Case\nTRACKS_SUSPECT -N- Suspect\n\nISSUES_WARRANT -1- Officer\nISSUES_WARRANT -N- Warrant\n\nGATHERS_EVIDENCE -1- Investigator\nGATHERS_EVIDENCE -N- Evidence\n\nGENERATES_REPORT -1- Investigator\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Intelligence Agency System:\n1. The system shall allow intelligence officers to manage national security threats.\n2. The system shall allow intelligence officers to track suspects involved in potential security threats.\n3. The system shall allow intelligence officers to analyze intelligence data for security insights.\n4. The system shall allow intelligence officers to input threat details, including descriptions and evidence.\n5. The system shall allow intelligence officers to gather intelligence related to national security.\n6. The system shall allow intelligence officers to identify suspects based on intelligence gathered.\n7. The system shall allow administrators to search criminal records for further investigation.\n8. The system shall allow administrators to issue warrants for security operations.\n9. The system shall allow administrators to make arrests based on warrants.\n10. The system shall allow administrators to track threat levels and updates.\n11. The system shall allow administrators to manage intelligence storage and security data.\n12. The system shall generate reports on security trends and intelligence data.\n13. The system shall allow administrators to oversee intelligence operations.\n14. The system shall allow administrators to allocate resources for national security.\n15. The system shall ensure national security through threat management and intelligence analysis.\n",
        "output": "@startchen\n\nentity Officer {\n  officer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  officer_status\n}\n\nentity Suspect {\n  suspect_id <<key>> \n  name\n  age\n  gender\n  location\n  suspect_status\n}\n\nentity Threat {\n  threat_id <<key>>\n  officer_id <<foreign>>\n  threat_date\n  threat_status\n  threat_description\n}\n\nentity Intelligence {\n  intelligence_id <<key>>\n  threat_id <<foreign>>\n  intelligence_type\n  intelligence_details\n  intelligence_status\n}\n\nentity Report {\n  report_id <<key>>\n  officer_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Warrant {\n  warrant_id <<key>>\n  officer_id <<foreign>>\n  suspect_id <<foreign>>\n  issue_date\n  warrant_status\n}\n\nrelationship MANAGES_THREAT {\n}\nrelationship TRACKS_SUSPECT {\n}\nrelationship ISSUES_WARRANT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RELATES_TO {\n}\n\nMANAGES_THREAT -1- Officer\nMANAGES_THREAT -N- Threat\n\nTRACKS_SUSPECT -1- Threat\nTRACKS_SUSPECT -N- Suspect\n\nRELATES_TO -1- Threat\nRELATES_TO -N- Intelligence\n\nISSUES_WARRANT -1- Officer\nISSUES_WARRANT -N- Warrant\n\nGENERATES_REPORT -1- Officer\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Protest Management System:\n1. The system shall allow organizers to manage demonstrations and protests.\n2. The system shall allow organizers to track participants involved in protests.\n3. The system shall allow organizers to analyze protest data for insights.\n4. The system shall allow organizers to input protest details such as location, time, and participants.\n5. The system shall allow organizers to gather information related to protests.\n6. The system shall allow organizers to identify participants for coordination.\n7. The system shall allow officers to monitor protest activities to ensure safety.\n8. The system shall allow officers to issue permits for protests and demonstrations.\n9. The system shall allow officers to ensure public safety during protests.\n10. The system shall allow administrators to track the progress of protests.\n11. The system shall allow administrators to manage protest locations and logistics.\n12. The system shall generate reports on protest trends and data.\n13. The system shall allow administrators to oversee protest operations.\n14. The system shall allow administrators to allocate resources for protest management.\n15. The system shall ensure peaceful demonstrations through proper coordination and safety measures.\n",
        "output": "@startchen\n\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  organizer_status\n}\n\nentity Officer {\n  officer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  officer_status\n}\n\nentity Participant {\n  participant_id <<key>>\n  name\n  age\n  gender\n  location\n  participant_status\n}\n\nentity Protest {\n  protest_id <<key>>\n  organizer_id <<foreign>>\n  protest_date\n  protest_location\n  protest_status\n  protest_description\n}\n\nentity Report {\n  report_id <<key>>\n  organizer_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Permit {\n  permit_id <<key>>\n  officer_id <<foreign>>\n  protest_id <<foreign>>\n  issue_date\n  permit_status\n}\n\nrelationship MANAGES_PROTEST {\n}\nrelationship TRACKS_PARTICIPANT {\n}\nrelationship ISSUES_PERMIT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RELATES_TO {\n}\n\nMANAGES_PROTEST -1- Organizer\nMANAGES_PROTEST -N- Protest\n\nTRACKS_PARTICIPANT -1- Protest\nTRACKS_PARTICIPANT -N- Participant\n\nISSUES_PERMIT -1- Officer\nISSUES_PERMIT -N- Permit\n\nRELATES_TO -1- Protest\nRELATES_TO -N- Permit\n\nGENERATES_REPORT -1- Organizer\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Boycott Management System:\n1. The system shall allow activists to organize boycotts and manage protest activities.\n2. The system shall allow activists to track the supporters involved in the boycott.\n3. The system shall allow activists to analyze boycott data and trends for insights.\n4. The system shall allow activists to input boycott details, including location and objectives.\n5. The system shall allow activists to gather information related to the boycott.\n6. The system shall allow activists to identify supporters and manage their involvement.\n7. The system shall allow officers to monitor boycott activities and ensure public safety.\n8. The system shall allow officers to issue public statements during the boycott.\n9. The system shall allow officers to ensure public safety during the boycott.\n10. The system shall allow administrators to track boycott progress and updates.\n11. The system shall allow administrators to manage boycott locations and logistics.\n12. The system shall generate reports on boycott trends and data analysis.\n13. The system shall allow administrators to oversee boycott operations.\n14. The system shall allow administrators to allocate resources for managing the boycott.\n15. The system shall ensure peaceful demonstrations by coordinating with law enforcement.\n",
        "output": "@startchen\n\nentity Activist {\n  activist_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  activist_status\n}\n\nentity Officer {\n  officer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  officer_status\n}\n\nentity Supporter {\n  supporter_id <<key>>\n  name\n  age\n  gender\n  location\n  supporter_status\n}\n\nentity Boycott {\n  boycott_id <<key>>\n  activist_id <<foreign>>\n  boycott_date\n  boycott_location\n  boycott_status\n  boycott_description\n}\n\nentity Report {\n  report_id <<key>>\n  activist_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Statement {\n  statement_id <<key>>\n  officer_id <<foreign>>\n  boycott_id <<foreign>>\n  issue_date\n  statement_status\n  statement_content\n  statement_type\n  related_incidents\n}\n\nrelationship ORGANIZES_BOYCOTT {\n}\nrelationship TRACKS_SUPPORTER {\n}\nrelationship ISSUES_STATEMENT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RELATES_TO {\n}\n\nORGANIZES_BOYCOTT -1- Activist\nORGANIZES_BOYCOTT -N- Boycott\n\nTRACKS_SUPPORTER -1- Boycott\nTRACKS_SUPPORTER -N- Supporter\n\nRELATES_TO -1- Boycott\nRELATES_TO -N- Statement\n\nISSUES_STATEMENT -1- Officer\nISSUES_STATEMENT -N- Statement\n\nGENERATES_REPORT -1- Activist\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Disaster Management System:\n1. The system shall allow responders to manage disaster incidents and response activities.\n2. The system shall allow responders to track victims affected by disasters.\n3. The system shall allow responders to analyze disaster data for insights.\n4. The system shall allow responders to input disaster details, including location and severity.\n5. The system shall allow responders to gather information during the disaster response.\n6. The system shall allow responders to identify victims for rescue operations.\n7. The system shall allow officers to monitor disaster activities to ensure public safety.\n8. The system shall allow officers to issue alerts and warnings during disasters.\n9. The system shall ensure public safety during disaster events.\n10. The system shall allow administrators to track disaster progress and updates.\n11. The system shall allow administrators to manage disaster locations and logistics.\n12. The system shall generate reports on disaster trends and data analysis.\n13. The system shall allow administrators to oversee disaster operations.\n14. The system shall allow administrators to allocate resources for disaster response.\n15. The system shall ensure timely responses by coordinating resources effectively.\n",
        "output": "@startchen\n\nentity Responder {\n  responder_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  responder_status\n}\n\nentity Officer {\n  officer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  officer_status\n}\n\nentity Victim {\n  victim_id <<key>>\n name\n  age\n  gender\n  location\n  victim_status\n}\n\nentity Disaster {\n  disaster_id <<key>>\n  responder_id <<foreign>>\n  disaster_date\n  disaster_location\n  disaster_status\n  disaster_description\n}\n\nentity Report {\n  report_id <<key>>\n  responder_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Alert {\n  alert_id <<key>>\n  officer_id <<foreign>>\n  disaster_id <<foreign>>\n  issue_date\n  alert_status\n  alert_content\n  alert_type\n  related_incidents\n}\n\nrelationship MANAGES_DISASTER {\n}\nrelationship TRACKS_VICTIM {\n}\nrelationship ISSUES_ALERT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RELATES_TO {\n}\n\nMANAGES_DISASTER -1- Responder\nMANAGES_DISASTER -N- Disaster\n\nTRACKS_VICTIM -1- Disaster\nTRACKS_VICTIM -N- Victim\n\nRELATES_TO -1- Disaster\nRELATES_TO -N- Alert\n\nISSUES_ALERT -1- Officer\nISSUES_ALERT -N- Alert\n\nGENERATES_REPORT -1- Responder\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Disaster Recovery System:\n1. The system shall allow organizations to recover from disasters and restore business operations.\n2. The system shall allow organizations to restore operations and critical systems after disasters.\n3. The system shall minimize downtime during the disaster recovery process.\n4. The system shall allow organizations to input disaster recovery plans for future incidents.\n5. The system shall allow organizations to activate recovery procedures when necessary.\n6. The system shall allow organizations to restore critical systems affected by the disaster.\n7. The system shall allow IT staff to monitor recovery progress during the recovery phase.\n8. The system shall allow IT staff to test backup systems for operational readiness.\n9. The system shall allow IT staff to ensure data integrity during recovery.\n10. The system shall track recovery timelines to measure the speed of restoration.\n11. The system shall manage resources required for disaster recovery efforts.\n12. The system shall generate reports on disaster recovery performance and timelines.\n13. The system shall allow administrators to oversee recovery operations and strategies.\n14. The system shall allow administrators to allocate resources effectively for recovery.\n15. The system shall ensure business continuity by minimizing downtime and restoring operations.\n",
        "output": "@startchen\n\nentity Organization {\n  organization_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  organization_status\n}\n\nentity ITStaff {\n  itstaff_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  itstaff_status\n}\n\nentity RecoveryPlan {\n  recoveryplan_id <<key>>\n  organization_id <<foreign>>\n  recoveryplan_description <<multi>>\n  recoveryplan_date\n  recoveryplan_status\n}\n\nentity Report {\n  report_id <<key>>\n  itstaff_id <<foreign>>\n  recoveryplan_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Backup {\n  backup_id <<key>>\n  recoveryplan_id <<foreign>>\n  backup_date\n  backup_status\n  backup_type\n  backup_details <<multi>>\n}\n\nentity DisasterEvent {\n  disaster_event_id <<key>>\n  organization_id <<foreign>>\n  event_date\n  event_type\n  event_description\n  event_status\n}\n\nrelationship HAS_PLAN {\n}\nrelationship MONITORS_RECOVERY {\n progress_percentage\n}\nrelationship CREATES_BACKUP {\n}\nrelationship TRACKS_EVENT {\n}\nrelationship GENERATES_REPORT {\n}\n\nHAS_PLAN -1- Organization\nHAS_PLAN -N- RecoveryPlan\n\nMONITORS_RECOVERY -1- ITStaff\nMONITORS_RECOVERY -N- RecoveryPlan\n\nCREATES_BACKUP -1- RecoveryPlan\nCREATES_BACKUP -N- Backup\n\nTRACKS_EVENT -1- Organization\nTRACKS_EVENT -N- DisasterEvent\n\nGENERATES_REPORT -1- ITStaff\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Give me a ERD for this system. Functional Requirements for Calculator Application:\n1. The system shall allow users to perform basic arithmetic operations such as addition, subtraction, multiplication, and division.\n2. The system shall provide a user-friendly interface for interacting with the calculator.\n3. The system shall allow users to input numerical values and select mathematical operators.\n4. The system shall display calculation results to the users.\n5. The system shall include the option to clear input values for new calculations.\n6. The system shall allow users to perform multiple operations in a sequence.\n7. The system shall save calculation history for reference.\n8. The system shall allow users to customize calculator settings, such as number format or theme.\n9. The system shall provide access to past calculations through a calculation log.\n10. The system shall notify users in case of calculation errors or invalid inputs.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Calculation {\n  calculation_id <<key>>\n  user_id <<foreign>>\n  calculation_date\n  calculation_type\n  calculation_input\n  calculation_result\n  calculation_status\n}\n\nentity Log {\n  log_id <<key>>\n  user_id <<foreign>>\n  log_date\n  log_content\n  log_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship PERFORMS_CALCULATION {\n}\nrelationship SAVES_LOG {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nPERFORMS_CALCULATION -1- User\nPERFORMS_CALCULATION -N- Calculation\n\nSAVES_LOG -1- User\nSAVES_LOG -N- Log\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "Give me a ERD for this system. Functional Requirements for Code Repository Platform:\n1. The system shall allow developers to manage source code for software development projects.\n2. The system shall facilitate collaboration on projects by providing tools for multiple developers to work together.\n3. The system shall track code changes and version control using appropriate tools.\n4. The system shall provide version control tools to manage revisions and updates to the codebase.\n5. The system shall support code review features to allow developers to review and approve code changes.\n6. The system shall include project management capabilities for organizing and tracking project progress.\n7. The system shall allow developers to create repositories to store project code.\n8. The system shall allow developers to commit code changes and save them in the repository.\n9. The system shall allow developers to merge code branches when working on multiple features.\n10. The system shall track code histories, including changes made by different developers.\n11. The system shall allow developers to manage project issues, such as bug tracking and feature requests.\n12. The system shall automate code testing to verify the functionality of code changes.\n13. The system shall allow developers to manage access permissions for the code repository.\n14. The system shall provide project wikis for sharing project documentation.\n15. The system shall send notifications to developers about updates or changes to the code.\n",
        "output": "@startchen\n\nentity Developer {\n  developer_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  developer_status\n}\n\nentity Repository {\n  repository_id <<key>>\n  repository_name\n  repository_description\n  repository_status\n  repository_type\n  programming_language <<multi>>\n  owner_id <<foreign>>\n}\n\nentity Commit {\n  commit_id <<key>>\n  repository_id <<foreign>>\n  developer_id <<foreign>>\n  commit_changes <<multi>>\n  commit_lines\n  commit_date\n  commit_message\n  commit_status\n}\n\nentity Issue {\n  issue_id <<key>>\n  repository_id <<foreign>>\n  developer_id <<foreign>>\n  issue_open_date\n  issue_close_date\n  issue_description <<multi>>\n  issue_status <<derived>>\n  issue_type\n}\n\nentity Notification {\n  notification_id <<key>>\n  developer_id <<foreign>>\n  repository_id <<foreign>>\n  notification_date\n  notification_content <<ulti>>\n  notification_status\n}\n\nrelationship COLLABORATES_ON {\n  access_level\n  role\n  join_date\n}\nrelationship HAS_OWNERSHIP {\n}\nrelationship COMMITS_CODE {\n}\nrelationship CREATES_ISSUE {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship BELONGS_TO {\n}\n\nCOLLABORATES_ON -N- Developer\nCOLLABORATES_ON -N- Repository\n\nHAS_OWNERSHIP -N- Developer\nHAS_OWNERSHIP -N- Repository\n\nCOMMITS_CODE -1- Developer\nCOMMITS_CODE -N- Commit\n\nCREATES_ISSUE -1- Developer\nCREATES_ISSUE -N- Issue\n\nBELONGS_TO -N- Commit\nBELONGS_TO -1- Repository\n\nBELONGS_TO -N- Issue\nBELONGS_TO -1- Repository\n\nRECEIVES_NOTIFICATION -1- Developer\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "Give me a ERD for this system. Functional Requirements for Meeting Scheduler Application:\n1. The system shall allow users to schedule meetings by selecting dates, times, and participants.\n2. The system shall allow users to invite participants to the meeting via email or other communication methods.\n3. The system shall allow users to manage meeting details, including the location, agenda, and duration.\n4. The system shall integrate with users' calendars for better scheduling.\n5. The system shall support availability checks for participants to find suitable meeting times.\n6. The system shall send reminder notifications to users for upcoming meetings.\n7. The system shall allow users to create meeting requests and share them with participants.\n8. The system shall allow users to send meeting invitations to participants.\n9. The system shall allow users to set meeting agendas and distribute them to participants.\n10. The system shall track meeting schedules and maintain a record of upcoming and past meetings.\n11. The system shall manage participant responses to meeting invitations (accept/decline).\n12. The system shall generate meeting reports, including attendance and meeting notes.\n13. The system shall allow users to customize meeting settings, such as notification preferences.\n14. The system shall provide users with access to past meeting histories.\n15. The system shall send notifications to users about meeting updates or cancellations.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n}\nentity Meeting {\n  meeting_id <<key>>\n  organizer_id <<foreign>>\n  meeting_title\n  meeting_date\n  meeting_time\n  meeting_duration\n  meeting_location\n  meeting_status\n  meeting_agenda <<multi>>\n}\nentity MeetingRequest {\n  request_id <<key>>\n  organizer_id <<foreign>>\n  request_date\n  request_status\n  proposed_date <<multi>>\n  proposed_time <<multi>>\n}\nentity MeetingReport {\n  report_id <<key>>\n  meeting_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship CREATES_MEETING {\n}\nrelationship ATTENDS_MEETING {\n  join_time\n  response_status\n}\nrelationship GENERATES_REQUEST {\n}\nrelationship GENERATES_REPORT {\n}\n\nUser -1- CREATES_MEETING\nCREATES_MEETING -N- Meeting\nUser -N- ATTENDS_MEETING\nATTENDS_MEETING -1- Meeting\nUser -1- GENERATES_REQUEST\nGENERATES_REQUEST -N- MeetingRequest\nMeeting -N- GENERATES_REPORT\nGENERATES_REPORT -N- MeetingReport\n\n@endchen"        
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Webinar Platform:\n1. The system shall allow users (hosts) to host webinars with interactive features and audience engagement options.\n2. The system shall allow hosts to schedule webinars, invite participants, and present webinar content.\n3. The system shall allow hosts to track attendee interactions, such as Q&A and polls, during webinars.\n4. The system shall allow hosts to manage webinar recordings and store them for future access.\n5. The system shall provide tools for generating analytics reports on webinar performance.\n6. The system shall allow hosts to customize webinar settings, such as layout and branding.\n7. The system shall allow hosts to view the history of previous webinars.\n8. The system shall send notifications to hosts about upcoming webinars.\n",
        "output": "@startchen\n\nentity Host {\n  host_id <<key>>\n  name\n  email\n  password\n  phone\n}\nentity Attendee {\n  attendee_id <<key>>\n  name\n  email\n  password\n  phone\n  attendee_status\n}\nentity Webinar {\n  webinar_id <<key>>\n  host_id <<foreign>>\n  webinar_title\n  webinar_date\n  webinar_time\n  webinar_duration\n  webinar_content <<multi>>\n}\nentity Engagement {\n  engagement_id <<key>>\n  attendee_id <<foreign>>\n  webinar_id <<foreign>>\n  engagement_date\n  engagement_type\n  engagement_content\n  engagement_status\n}\n\nrelationship HOSTS_WEBINAR {\n}\nrelationship ATTENDS_WEBINAR {\n  join_time\n  response_status\n}\nrelationship HAS_ENGAGEMENT {\n  engagement_role\n  engagement_duration\n}\nrelationship PARTICIPATES_IN {\n}\n\nHost -1- HOSTS_WEBINAR\nHOSTS_WEBINAR -N- Webinar\nAttendee -N- ATTENDS_WEBINAR\nATTENDS_WEBINAR -1- Webinar\nAttendee -1- PARTICIPATES_IN\nPARTICIPATES_IN -N- Engagement\nWebinar -1- HAS_ENGAGEMENT\nHAS_ENGAGEMENT -N- Engagement\n\n@endchen" 
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Video Conferencing Application (Zoom):\n1. The system shall allow users to host virtual meetings and collaborate with team members and clients.\n2. The system shall provide video and audio conferencing tools for communication.\n3. The system shall allow users to share their screens during meetings.\n4. The system shall include a chat messaging feature for communication during meetings.\n5. The system shall allow users to schedule meetings, invite participants, and join virtual rooms.\n6. The system shall allow users to record meetings for future reference.\n7. The system shall allow users to manage meeting settings, such as mute/unmute participants.\n8. The system shall generate meeting reports with attendance and meeting details.\n9. The system shall allow users to customize virtual meeting backgrounds.\n10. The system shall allow users to view the history of previous meetings.\n11. The system shall notify users of upcoming meetings.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Meeting {\n  meeting_id <<key>>\n  host_id <<foreign>>\n  meeting_title\n  meeting_date\n  meeting_time\n  meeting_duration\n  meeting_status\n  meeting_topic\n  meeting_content <<multi>>\n}\n\nentity Participant {\n  participant_id <<key>>\n  name\n  email\n  phone\n  location\n  participant_status\n}\n\nentity Recording {\n  recording_id <<key>>\n  meeting_id <<foreign>>\n  recording_date\n  recording_duration\n  recording_status\n  recording_content\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  meeting_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nentity Report {\n  report_id <<key>>\n  user_id <<foreign>>\n  meeting_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship HOSTS_MEETING {\n}\nrelationship ATTENDS_MEETING {\n join_time\n response_status\n}\nrelationship RECORDS_MEETING {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship GENERATES_REPORT {\n}\n\nHOSTS_MEETING -1- User\nHOSTS_MEETING -N- Meeting\n\nATTENDS_MEETING -N- Participant\nATTENDS_MEETING -1- Meeting\n\nRECORDS_MEETING -1- Meeting\nRECORDS_MEETING -N- Recording\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\nGENERATES_REPORT -1- User\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Team Collaboration Platform (Slack):\n1. The system shall allow users to communicate, share files, and collaborate on projects using messaging channels.\n2. The system shall allow users to create channels for team communication and project discussions.\n3. The system shall allow users to send messages and share documents in the platform.\n4. The system shall provide tools for tracking project progress and managing team tasks.\n5. The system shall generate productivity reports based on task completion and collaboration.\n6. The system shall allow users to customize notification settings based on their preferences.\n7. The system shall provide access to message histories for reference.\n8. The system shall send alerts to users for important updates related to the project or messages.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  user_status\n  notification_preferences <<multi>>\n}\nentity Channel {\n  channel_id <<key>>\n  name\n  description\n  created_date\n}\nentity Message {\n  message_id <<key>>\n  user_id <<foreign>>\n  channel_id <<foreign>>\n  sent_date\n  message_content\n}\nentity File {\n  file_id <<key>>\n  uploaded_by <<foreign>>\n  channel_id <<foreign>>\n  file_name\n  file_type\n  file_size\n  uploaded_date\n  file_status\n}\nentity Task {\n  task_id <<key>>\n  assigned_to <<foreign>>\n  created_by <<foreign>>\n  channel_id <<foreign>>\n  task_title\n  task_description\n  task_status\n  due_date\n}\nentity Project {\n  project_id <<key>>\n  project_name\n  project_description\n  created_by <<foreign>>\n  start_date\n  end_date\n  status\n}\n\nrelationship PARTICIPATES_IN {\n  role\n  join_date\n}\nrelationship POSTS_MESSAGE {\n}\nrelationship UPLOADS_FILE {\n}\nrelationship ASSIGNED_TO_TASK {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship HAS_MESSAGE {\n}\n\nUser -N- PARTICIPATES_IN\nPARTICIPATES_IN -N- Channel\nUser -1- POSTS_MESSAGE\nPOSTS_MESSAGE -N- Message\nUser -1- UPLOADS_FILE\nUPLOADS_FILE -N- File\nUser -1- ASSIGNED_TO_TASK\nASSIGNED_TO_TASK -N- Task\nTask -N- ASSOCIATED_WITH\nASSOCIATED_WITH -1- Project\nChannel -1- HAS_MESSAGE\nHAS_MESSAGE -N- Message\n\n@endchen"    
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Project Management Tool (Trello):\n1. The system shall allow users to organize tasks and track project progress.\n2. The system shall provide task boards, task cards, and project timelines for task organization.\n3. The system shall allow users to create task boards, add task cards, and assign tasks to team members.\n4. The system shall allow users to track task statuses, manage project deadlines, and generate progress reports.\n5. The system shall allow users to customize task labels, view task histories, and receive notifications for task updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  user_status\n  notification_preferences <<multi>>\n}\n\nentity Board {\n  board_id <<key>>\n  name\n  description\n  created_by <<foreign>>\n  created_date\n  status\n}\n\nentity Card {\n  card_id <<key>>\n  board_id <<foreign>>\n  created_by <<foreign>>\n  assigned_to <<foreign>>\n  card_title\n  card_description\n  card_status\n  due_date\n}\n\nentity Label {\n  label_id <<key>>\n  board_id <<foreign>>\n  label_name\n  label_color\n  label_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  generated_by <<foreign>>\n  notification_type\n  notification_date\n  notification_content\n  notification_status\n}\n\nentity Report {\n  report_id <<key>>\n  generated_by <<foreign>>\n  board_id <<foreign>>\n  report_date\n  report_type\n  report_content\n  report_status\n}\n\nrelationship HAS {\n}\nrelationship CREATES_BOARD {\n}\nrelationship ADDS_CARD {\n}\nrelationship HAS_LABEL {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship GENERATES_REPORT {\n}\n\nCREATES_BOARD -1- User\nCREATES_BOARD -N- Board\n\nADDS_CARD -1- User\nADDS_CARD -N- Card\n\nHAS -1- Board\nHAS -N- Card\n\nHAS_LABEL -1- Card\nHAS_LABEL -N- Label\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\nGENERATES_REPORT -1- Board\nGENERATES_REPORT -N- Report\n\n@endchen"      
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Celebrity News and Events Platform:\n1. The system shall allow users to stay updated on celebrity news, explore profiles, and view event schedules.\n2. The system shall provide news articles, event listings, and celebrity profiles for user exploration.\n3. The system shall allow users to read news articles, view event schedules, and explore celebrity profiles.\n4. The system shall track trending topics, manage event registrations, and generate reports on celebrity engagements.\n5. The system shall allow users to customize news preferences, view event histories, and receive notifications for upcoming events.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  user_status\n  notification_preferences <<multi>>\n}\n\nentity Article {\n  article_id <<key>>\n  title\n  author\n  publication_date\n  content\n  status\n}\n\nentity Event {\n  event_id <<key>>\n  title\n  organizer\n  event_date\n  event_location\n  event_description\n  status\n}\n\nentity Celebrity {\n  celebrity_id <<key>>\n  name\n  profession\n  birth_date\n  biography\n  status\n}\n\nentity Report {\n  report_id <<key>>\n  celebrity_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  event_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship READS_ARTICLE {\n}\nrelationship FOLLOWS_CELEBRITY {\n}\nrelationship REGISTERS_FOR_EVENT {\n  registration_date\n  registration_status\n}\nrelationship RECEIVES_NOTIFICATION {\n}\nrelationship GENERATES_REPORT {\n}\n\nREADS_ARTICLE -1- User\nREADS_ARTICLE -N- Article\n\nREGISTERS_FOR_EVENT -1- User\nREGISTERS_FOR_EVENT -N- Event\n\nFOLLOWS_CELEBRITY -N- User\nFOLLOWS_CELEBRITY -1- Celebrity\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\nGENERATES_REPORT -1- Event\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Design me a ERD for this system. Functional Requirements for Tech-Talk Platform:\n1. The system shall allow users to engage in tech discussions, share knowledge, and collaborate on tech projects.\n2. The system shall provide discussion forums, knowledge-sharing tools, and project management features.\n3. The system shall allow users to participate in discussions, share tech resources, and collaborate on tech projects.\n4. The system shall track tech trends, manage project tasks, and generate reports on tech innovations.\n5. The system shall allow users to customize discussion preferences, view project histories, and receive notifications for tech updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  notification_preferences <<multi>>\n}\nentity Forum {\n  forum_id <<key>>\n  name\n  description\n  created_by <<foreign>>\n  created_date\n  status\n}\nentity Discussion {\n  discussion_id <<key>>\n  forum_id <<foreign>>\n  created_by <<foreign>>\n  discussion_title\n  discussion_content\n  discussion_status\n  discussion_date\n}\nentity Resource {\n  resource_id <<key>>\n  user_id <<foreign>>\n  resource_title\n  resource_link\n  resource_description\n  resource_status\n}\nentity Project {\n  project_id <<key>>\n  project_name\n  project_description\n  created_by <<foreign>>\n  start_date\n  end_date\n  project_status\n}\n\nrelationship PARTICIPATES_IN_DISCUSSION {\n}\nrelationship SHARES_RESOURCE {\n}\nrelationship COLLABORATES_ON_PROJECT {\n}\nrelationship BELONGS_TO_FORUM {\n}\n\nUser -N- PARTICIPATES_IN_DISCUSSION\nPARTICIPATES_IN_DISCUSSION -N- Discussion\nUser -1- SHARES_RESOURCE\nSHARES_RESOURCE -N- Resource\nUser -N- COLLABORATES_ON_PROJECT\nCOLLABORATES_ON_PROJECT -1- Project\nDiscussion -N- BELONGS_TO_FORUM\nBELONGS_TO_FORUM -1- Forum\n\n@endchen"  
    },
    {
        "input": "Create a ERD for following, Functional Requirements for Babysitter Management System:\n1. The system shall allow parents to search for available babysitters and book babysitting appointments.\n2. The system shall allow parents to communicate with babysitters, track babysitting sessions, and manage payment transactions.\n3. Babysitters shall be able to view babysitting requests, accept appointments, and provide care for children.\n4. The system shall include features for tracking babysitting schedules, generating reports on babysitter performance, and notifying parents of babysitting updates.\n",
        "output": "@startchen\n\nentity Parent {\n  parent_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  parent_status\n}\n\nentity Babysitter {\n  babysitter_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  babysitter_status\n}\n\nentity Child <<weak>> {\n  name <<key>>\n  age\n  gender\n  child_status\n}\n\nentity BabysittingSession {\n  session_id <<key>>\n  parent_id <<foreign>>\n  babysitter_id <<foreign>>\n  child_id <<foreign>>\n  session_date\n  session_time\n  session_duration\n  session_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  parent_id <<foreign>>\n  babysitter_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_status\n}\n\nentity Report {\n  report_id <<key>>\n  parent_id <<foreign>>\n  babysitter_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship HAS_BABYSITTER {\n}\nrelationship SCHEDULES_SESSION {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship GETS_PAYMENT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship PARENT_OF <<identifying>> {\n}\n\nHAS_BABYSITTER -1- BabysittingSession\nHAS_BABYSITTER -1- Babysitter\n\nSCHEDULES_SESSION -1- Parent\nSCHEDULES_SESSION -N- BabysittingSession\n\nMAKES_PAYMENT -1- Parent\nMAKES_PAYMENT -N- Payment\n\nGETS_PAYMENT -1- BabysittingSession\nGETS_PAYMENT -1- Payment\n\nGENERATES_REPORT -1- Parent\nGENERATES_REPORT -N- Report\n\nPARENT_OF -1- Parent\nPARENT_OF -N- Child\n\n@endchen"          
    },
    {
        "input": "Create a ERD for following, Functional Requirements for WhatsApp Sticker Maker Application:\n1. The system shall allow users to create custom stickers by designing stickers, importing images, and adding text.\n2. The system shall allow users to save stickers to collections, share stickers with friends, and download sticker packs.\n3. The system shall include features for editing sticker designs, managing sticker categories, and generating reports on sticker usage.\n4. The system shall allow users to customize sticker settings, view sticker histories, and receive notifications for sticker updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Sticker {\n  sticker_id <<key>>\n  user_id <<foreign>>\n  sticker_name\n  sticker_image\n  sticker_category\n  sticker_status\n}\n\nentity Collection {\n  collection_id <<key>>\n  user_id <<foreign>>\n  collection_name\n  collection_description\n  collection_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  generated_by <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship CREATES_STICKER {\n}\nrelationship ADDED_TO_COLLECTION {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nCREATES_STICKER -1- User\nCREATES_STICKER -N- Sticker\n\nADDED_TO_COLLECTION -N- Sticker\nADDED_TO_COLLECTION -1- Collection\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "Create a ERD for following, Functional Requirements for AI-Based Slides/Presentation Maker:\n1. The system shall allow users to create professional presentations by designing slides, adding content, and customizing slide layouts.\n2. The system shall provide templates, design tools, and data visualization options for slide creation.\n3. The system shall include features for tracking presentation progress, managing slide transitions, and generating reports on presentation engagement.\n4. The system shall allow users to customize presentation settings, view presentation histories, and receive notifications for presentation updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Presentation {\n  presentation_id <<key>>\n  user_id <<foreign>>\n  presentation_title\n  presentation_date\n  presentation_time\n  presentation_duration\n  presentation_status\n  presentation_topic\n  presentation_content <<multi>>\n}\n\nentity Slide {\n  slide_id <<key>>\n  presentation_id <<foreign>>\n  slide_number\n  slide_content\n  slide_layout\n  slide_status\n}\n\nentity Transition {\n  transition_id <<key>>\n  presentation_id <<foreign>>\n  transition_type\n  transition_duration\n  transition_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  presentation_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship CREATES_PRESENTATION {\n}\nrelationship ADDS_SLIDE {\n}\nrelationship INCLUDES_TRANSITION {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nCREATES_PRESENTATION -1- User\nCREATES_PRESENTATION -N- Presentation\n\nADDS_SLIDE -1- Presentation\nADDS_SLIDE -N- Slide\n\nINCLUDES_TRANSITION -1- Slide\nINCLUDES_TRANSITION -N- Transition\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"          
    },
    {
        "input": "Create a ERD for following, Functional Requirements for AI-Based Resume Builder:\n1. The system shall allow users to create professional resumes.\n2. The system shall allow users to design resume templates.\n3. The system shall allow users to analyze resume data.\n4. The system shall provide resume templates.\n5. The system shall provide design tools.\n6. The system shall support data visualization options.\n7. The system shall allow users to create resumes.\n8. The system shall allow users to add content to resumes.\n9. The system shall allow users to customize resume layouts.\n10. The system shall allow users to track resume progress.\n11. The system shall allow users to manage resume sections.\n12. The system shall generate reports on resume engagement.\n13. The system shall allow users to customize resume settings.\n14. The system shall allow users to view resume histories.\n15. The system shall notify users of resume updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Resume {\n  resume_id <<key>>\n  user_id <<foreign>>\n  resume_title\n  resume_date\n  resume_content <<multi>>\n  resume_status\n}\n\nentity Section {\n  section_id <<key>>\n  resume_id <<foreign>>\n  section_title\n  section_content\n  section_status\n}\n\nentity Report {\n  report_id <<key>>\n  user_id <<foreign>>\n  resume_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  user_id <<foreign>>\n  resume_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship CREATES_RESUME {\n}\nrelationship ADDS_SECTION {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship RECEIVES_NOTIFICATION {\n}\n\nCREATES_RESUME -1- User\nCREATES_RESUME -N- Resume\n\nADDS_SECTION -1- Resume\nADDS_SECTION -N- Section\n\nGENERATES_REPORT -1- User\nGENERATES_REPORT -N- Report\n\nRECEIVES_NOTIFICATION -1- User\nRECEIVES_NOTIFICATION -N- Notification\n\n@endchen"
    },
    {
        "input": "Create a ERD for following, Functional Requirements for AI-Based Chatbot:\n1. The system shall allow users to interact with automated responses.\n2. The system shall allow users to provide information through the chatbot.\n3. The system shall analyze user queries.\n4. The system shall provide chatbot templates.\n5. The system shall offer design tools for chatbot creation.\n6. The system shall support data visualization options.\n7. The system shall allow users to chat with the chatbot.\n8. The system shall allow users to ask questions.\n9. The system shall allow users to receive answers.\n10. The system shall track chatbot interactions.\n11. The system shall manage user queries.\n12. The system shall generate reports on chatbot performance.\n13. The system shall allow users to customize chatbot settings.\n14. The system shall allow users to view chatbot histories.\n15. The system shall notify users of chatbot updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Interaction {\n  interaction_id <<key>>\n  user_id <<foreign>>\n  chatbot_id <<foreign>>\n  interaction_date\n  interaction_content\n  interaction_status\n}\n\nentity Query {\n  query_id <<key>>\n  user_id <<foreign>>\n  query_content\n  query_date\n  query_status\n}\n\nentity Report {\n  report_id <<key>>\n  user_id <<foreign>>\n  chatbot_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship INTERACTS_WITH_CHATBOT {\n}\nrelationship ASKS_QUERY {\n}\nrelationship GENERATES_REPORT {\n}\n\nINTERACTS_WITH_CHATBOT -1- User\nINTERACTS_WITH_CHATBOT -N- Interaction\n\nASKS_QUERY -1- User\nASKS_QUERY -N- Query\n\nGENERATES_REPORT -1- User\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Create a ERD for following, Functional Requirements for VR-Based Training Platform:\n1. The system shall allow users to engage in virtual training sessions.\n2. The system shall allow users to learn new skills.\n3. The system shall analyze training data.\n4. The system shall provide VR training modules.\n5. The system shall offer interactive simulations.\n6. The system shall support progress tracking tools.\n7. The system shall allow users to participate in VR training sessions.\n8. The system shall allow users to complete skill challenges.\n9. The system shall provide feedback on user performance.\n10. The system shall track user training progress.\n11. The system shall manage skill assessments.\n12. The system shall generate reports on training outcomes.\n13. The system shall allow users to customize training settings.\n14. The system shall allow users to view training histories.\n15. The system shall notify users of training updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity TrainingSession {\n  session_id <<key>>\n  user_id <<foreign>>\n  session_date\n  session_time\n  session_duration\n  session_status\n  session_topic\n  session_content <<multi>>\n}\n\nentity SkillChallenge {\n  challenge_id <<key>>\n  session_id <<foreign>>\n  challenge_title\n  challenge_description\n  challenge_status\n}\n\nentity Progress {\n  progress_id <<key>>\n  user_id <<foreign>>\n  session_id <<foreign>>\n  progress_date\n  progress_content\n  progress_status\n}\n\nentity Report {\n  report_id <<key>>\n  session_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship PARTICIPATES_IN {\n}\nrelationship HAS_CHALLENGE {\n}\nrelationship TRACKS_PROGRESS {\n}\nrelationship GENERATES_REPORT {\n}\n\nPARTICIPATES_IN -1- User\nPARTICIPATES_IN -N- TrainingSession\n\nHAS_CHALLENGE -1- TrainingSession\nHAS_CHALLENGE -N- SkillChallenge\n\nTRACKS_PROGRESS -1- User\nTRACKS_PROGRESS -N- Progress\n\nGENERATES_REPORT -1- TrainingSession\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Create a ERD for following, Functional Requirements for Connexus VR-Based Social Platform:\n1. The system shall allow users to connect with like-minded individuals.\n2. The system shall allow users to engage in virtual social activities.\n3. The system shall analyze social interactions.\n4. The system shall provide VR social spaces for users.\n5. The system shall offer interactive games.\n6. The system shall support privacy settings for users.\n7. The system shall allow users to create virtual avatars.\n8. The system shall allow users to join social events.\n9. The system shall allow users to interact with other users.\n10. The system shall track social connections of users.\n11. The system shall allow users to manage privacy preferences.\n12. The system shall generate reports on social engagements.\n13. The system shall allow users to customize social settings.\n14. The system shall allow users to view social histories.\n15. The system shall notify users of social updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n  privacy preferences <<multi>>\n}\n\nentity Avatar {\n  avatar_id <<key>>\n  user_id <<foreign>>\n  avatar_name\n  avatar_image\n  avatar_status\n}\n\nentity SocialEvent {\n  event_id <<key>>\n  user_id <<foreign>>\n  event_date\n  event_time\n  event_duration\n  event_status\n  event_topic\n  event_content <<multi>>\n}\n\nentity Report {\n  report_id <<key>>\n  user_id <<foreign>>\n  event_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship CREATES_AVATAR {\n}\nrelationship JOINS_EVENT {\n}\nrelationship CONNECTS_WITH {\n  connection_date\n  connection_status\n}\nrelationship GENERATES_REPORT {\n}\n\nCREATES_AVATAR -1- User\nCREATES_AVATAR -N- Avatar\n\nJOINS_EVENT -1- Avatar\nJOINS_EVENT -N- SocialEvent\n\nCONNECTS_WITH -1- User\nCONNECTS_WITH -N- User\n\nGENERATES_REPORT -1- User\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Create a ERD for following, Functional Requirements for VR-Based Public Speaking App:\n1. The system shall allow users to overcome stage fright.\n2. The system shall allow users to practice public speaking.\n3. The system shall analyze speaking performance.\n4. The system shall provide VR speaking environments.\n5. The system shall offer speech coaching tools.\n6. The system shall support audience feedback options.\n7. The system shall allow users to practice speeches.\n8. The system shall provide coaching tips to users.\n9. The system shall allow users to improve their speaking skills.\n10. The system shall track the speaking progress of users.\n11. The system shall allow users to manage speech evaluations.\n12. The system shall generate reports on speaking performance.\n13. The system shall allow users to customize speaking settings.\n14. The system shall allow users to view speaking histories.\n15. The system shall notify users of speaking updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity SpeechSession {\n  session_id <<key>>\n  user_id <<foreign>>\n  session_date\n  session_time\n  session_duration\n  session_status\n  session_topic\n  session_content <<multi>>\n}\n\nentity CoachingTip {\n  tip_id <<key>>\n  session_id <<foreign>>\n  tip_content\n  tip_date\n  tip_status\n}\n\nentity Evaluation {\n  evaluation_id <<key>>\n  user_id <<foreign>>\n  session_id <<foreign>>\n  evaluator_type\n  evaluation_date\n  evaluation_score\n  evaluation_criteria <<multi>>\n  evaluation_content\n  evaluation_status\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  session_id <<foreign>>\n  feedback_source\n  feedback_date\n  feedback_content\n  feedback_sentiment\n  feedback_status\n}\n\nentity Report {\n  report_id <<key>>\n  session_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship PARTICIPATES_IN {\n}\nrelationship RECEIVES_TIP {\n}\nrelationship HAS_EVALUATION {\n}\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship GENERATES_REPORT {\n}\n\nPARTICIPATES_IN -1- User\nPARTICIPATES_IN -N- SpeechSession\n\nRECEIVES_TIP -1- User\nRECEIVES_TIP -N- CoachingTip\n\nHAS_EVALUATION -1- SpeechSession\nHAS_EVALUATION -N- Evaluation\n\nPROVIDES_FEEDBACK -1- SpeechSession\nPROVIDES_FEEDBACK -N- Feedback\n\nGENERATES_REPORT -1- SpeechSession\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Create a ERD for following, Functional Requirements for VR-Based Physiotherapy App:\n1. The system shall allow users to perform physical therapy exercises.\n2. The system shall allow users to track their rehabilitation progress.\n3. The system shall analyze rehabilitation data.\n4. The system shall provide VR exercise routines for users.\n5. The system shall offer motion tracking tools for users.\n6. The system shall support progress monitoring features.\n7. The system shall allow users to follow guided exercises.\n8. The system shall allow users to monitor their movements during exercises.\n9. The system shall help users improve their physical mobility.\n10. The system shall track users' exercise progress.\n11. The system shall allow users to manage their rehabilitation goals.\n12. The system shall generate reports on rehabilitation outcomes.\n13. The system shall allow users to customize exercise settings.\n14. The system shall allow users to view their exercise histories.\n15. The system shall notify users of exercise updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity ExerciseSession {\n  session_id <<key>>\n  user_id <<foreign>>\n  session_date\n  session_time\n  session_duration\n  session_status\n  session_topic\n  session_content <<multi>>\n}\n\nentity Goal {\n  goal_id <<key>>\n  user_id <<foreign>>\n  session_id <<foreign>>\n  goal_date\n  goal_content\n  goal_status\n}\n\nentity Progress {\n  progress_id <<key>>\n  user_id <<foreign>>\n  session_id <<foreign>>\n  progress_date\n  range_of_motion\n  accuracy_percentage\n  repetition_count\n  progress_status\n}\n\nentity Report {\n  report_id <<key>>\n  session_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship PARTICIPATES_IN {\n}\nrelationship TRACKS_PROGRESS {\n}\nrelationship SETS_GOAL {\n}\nrelationship GENERATES_REPORT {\n}\n\nPARTICIPATES_IN -1- User\nPARTICIPATES_IN -N- ExerciseSession\n\nTRACKS_PROGRESS -1- ExerciseSession\nTRACKS_PROGRESS -N- Progress\n\nSETS_GOAL -1- User\nSETS_GOAL -N- Goal\n\nGENERATES_REPORT -1- ExerciseSession\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Create a ERD for following, Functional Requirements for VR-Based Meditation App:\n1. The system shall allow users to practice meditation and mindfulness exercises.\n2. The system shall allow users to track their meditation progress.\n3. The system shall analyze meditation data.\n4. The system shall provide VR meditation environments for users.\n5. The system shall offer guided meditation sessions.\n6. The system shall support relaxation techniques for users.\n7. The system shall allow users to follow meditation guides.\n8. The system shall allow users to monitor their breathing and heart rate during meditation.\n9. The system shall help users improve their mental well-being.\n10. The system shall track users' meditation progress.\n11. The system shall allow users to manage their meditation goals.\n12. The system shall generate reports on meditation outcomes.\n13. The system shall allow users to customize meditation settings.\n14. The system shall allow users to view their meditation histories.\n15. The system shall notify users of meditation updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity MeditationSession {\n  session_id <<key>>\n  user_id <<foreign>>\n  session_date\n  session_time\n  session_duration\n  session_status\n  session_topic\n  session_content <<multi>>\n}\n\nentity Goal {\n  goal_id <<key>>\n  user_id <<foreign>>\n  session_id <<foreign>>\n  goal_date\n  goal_content\n  goal_status\n}\n\nentity Progress {\n  progress_id <<key>>\n  user_id <<foreign>>\n  session_id <<foreign>>\n  progress_date\n  heart_rate\n  breathing_rate\n  progress_status\n}\n\nentity Report {\n  report_id <<key>>\n  session_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship PARTICIPATES_IN {\n}\nrelationship TRACKS_PROGRESS {\n}\nrelationship SETS_GOAL {\n}\nrelationship GENERATES_REPORT {\n}\n\nPARTICIPATES_IN -1- User\nPARTICIPATES_IN -N- MeditationSession\n\nTRACKS_PROGRESS -1- MeditationSession\nTRACKS_PROGRESS -N- Progress\n\nSETS_GOAL -1- User\nSETS_GOAL -N- Goal\n\nGENERATES_REPORT -1- MeditationSession\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Create an ERD for this. The application must provide the ability to interpret sign language gestures into text and speech using image recognition technology. It should support input in multiple formats, including text, audio, and sign language gestures, and convert these inputs into other formats such as text, speech, or sign gestures. The system should allow users to submit feedback on translations to improve accuracy and satisfaction. It must include features for managing text and audio inputs, interpreting sign gestures with associated accuracy scores, and displaying outputs in various formats. Additionally, the application must support real-time translation across different communication methods to enable seamless interaction between deaf and hearing individuals.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name {\n    Fname\n    Lname\n  }\n  email\n  password\n  phone\n}\n\nentity TextInput {\n  text_input_id <<key>>\n  input\n  source\n  comments\n}\n\nentity AudioInput {\n  audio_input_id <<key>>\n  audio_to_text\n}\n\nentity SignGesture {\n  gesture_id <<key>>\n  gesture_type\n  accuracy_score\n}\n\nentity Feedback {\n  feedback_id <<key>>\n  comments\n  conversion_type\n  user_rating\n}\n\nentity Display {\n  display_id <<key>>\n  content <<multi>>\n  output_type <<derived>>\n}\n\nrelationship PROVIDES_FEEDBACK {\n}\nrelationship INPUTS_TEXT {\n}\nrelationship INPUTS_SIGN {\n}\nrelationship INPUTS_AUDIO {\n}\nrelationship CONVERTS_TO_TEXT {\n  conversion_time\n}\nrelationship CONVERTS_TO_SIGN {\n  conversion_time\n}\n\nPROVIDES_FEEDBACK -1- User\nPROVIDES_FEEDBACK -N- Feedback\n\nINPUTS_TEXT -1- User\nINPUTS_TEXT -N- TextInput\n\nINPUTS_SIGN -1- User\nINPUTS_SIGN -N- SignGesture\n\nINPUTS_AUDIO -1- User\nINPUTS_AUDIO -N- AudioInput\n\nCONVERTS_TO_SIGN -1- AudioInput\nCONVERTS_TO_SIGN -1- Display\n\nCONVERTS_TO_SIGN -1- TextInput\nCONVERTS_TO_SIGN -1- Display\n\nCONVERTS_TO_TEXT -1- SignGesture\nCONVERTS_TO_TEXT -1- Display\n\n@endchen"          
    },    
    {
        "input": "Draw a ERD. Functional Requirements for Salah Tracker App:\n1. The system shall allow users to track their daily prayers.\n2. The system shall allow users to set prayer reminders.\n3. The system shall analyze users' prayer habits.\n4. The system shall provide prayer tracking tools.\n5. The system shall offer reminder notifications.\n6. The system shall support prayer statistics for users.\n7. The system shall allow users to log their daily prayers.\n8. The system shall allow users to receive reminders for prayer times.\n9. The system shall allow users to view their prayer history.\n10. The system shall track the prayer progress of users.\n11. The system shall allow users to manage their prayer goals.\n12. The system shall generate reports on prayer habits.\n13. The system shall allow users to customize their prayer settings.\n14. The system shall allow users to view their prayer histories.\n15. The system shall notify users of prayer updates.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity Prayer {\n  prayer_id <<key>>\n  user_id <<foreign>>\n  prayer_name\n  prayer_date\n  prayer_time\n  prayer_duration\n  day_status\n}\n\nentity PrayerLog {\n  log_id <<key>>\n  user_id <<foreign>>\n  prayer_id <<foreign>>\n  log_date\n  log_time\n  prayer_status\n  prayer_notes\n}\n\nentity Reminder {\n  reminder_id <<key>>\n  user_id <<foreign>>\n  prayer_id <<foreign>>\n  reminder_time\n  reminder_content\n  reminder_status\n}\n\nentity Goal {\n  goal_id <<key>>\n  user_id <<foreign>>\n  goal_start_date\n  goal_end_date\n  goal_content\n  goal_progress\n  goal_status\n}\n\nentity Report {\n  report_id <<key>>\n  user_id <<foreign>>\n  report_date\n  report_content\n  report_status\n}\n\nrelationship LOGS_PRAYER {\n}\nrelationship HAS_PRAYER {\n}\nrelationship SETS_REMINDER {\n}\nrelationship SETS_GOAL {\n}\nrelationship GENERATES_REPORT {\n}\n\nLOGS_PRAYER -1- User\nLOGS_PRAYER -N- PrayerLog\n\nHAS_PRAYER -1- PrayerLog\nHAS_PRAYER -N- Prayer\n\nSETS_REMINDER -1- User\nSETS_REMINDER -N- Reminder\n\nSETS_GOAL -1- User\nSETS_GOAL -N- Goal\n\nGENERATES_REPORT -1- PrayerLog\nGENERATES_REPORT -N- Report\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for Online Pharmacy System:\n1. The system shall allow customers to create an account.\n2. The system shall allow customers to select medicines.\n3. The system shall allow customers to place an order.\n4. The system shall allow customers to view the status of their order.\n5. The system shall allow admins to manage supplier information.\n6. The system shall allow admins to provide supplier details.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  address\n  identification_number\n  user_status\n}\n\nentity Admin {\n  admin_id <<key>>\n  name\n  email\n  password\n  contact_number\n  admin_status\n}\n\nentity Medicine {\n  medicine_id <<key>>\n  medicine_name\n  medicine_price\n  medicine_quantity\n  medicine_status\n}\n\nentity Supplier {\n  supplier_id <<key>>\n  supplier_name\n  supplier_address\n  supplier_contact\n  supplier_status\n}\n\nentity Order {\n  order_id <<key>>\n  user_id <<foreign>>\n  order_date\n  order_status\n  medicine_id <<foreign>>\n  quantity\n  total_price\n}\n\nrelationship PLACES_ORDER {\n}\nrelationship MANAGES_SUPPLIER {\n}\nrelationship CONTAINS_MEDICINE {\n}\nrelationship SUPPLIES_MEDICINE {\n}\n\nPLACES_ORDER -1- User\nPLACES_ORDER -N- Order\n\nMANAGES_SUPPLIER -1- Admin\nMANAGES_SUPPLIER -N- Supplier\n\nCONTAINS_MEDICINE -1- Order\nCONTAINS_MEDICINE -N- Medicine\n\nSUPPLIES_MEDICINE -1- Supplier\nSUPPLIES_MEDICINE -N- Medicine\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for Health Equity Management System:\n1. The system shall allow patients to register and upload social and medical data.\n2. The system shall classify patients based on social determinants.\n3. The system shall allow patients to track their personal health.\n4. The system shall allow healthcare providers to plan health worker activity.\n5. The system shall notify patients of relevant medical events.\n6. The system shall allow healthcare providers, medical professionals, and government officials to access and analyze health data.\n7. The system shall allow the government to implement intervention schemes.\n",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  classification_id <<foreign>>\n  name\n  phone\n  email\n  health_status\n}\nentity Classification {\n  classification_id <<key>>\n  economic_status\n  health_insurance\n  demographics\n  hereditary_conditions\n  classification_date\n}\nentity Caretaker {\n  caretaker_id <<key>>\n  name\n  address\n  phone\n  email\n}\nentity HealthcareProvider {\n  provider_id <<key>>\n  name\n  address\n  phone\n  email\n}\nentity MedicalProfessional {\n  professional_id <<key>>\n  name\n  address\n  phone\n  email\n}\nentity GovernmentOfficial {\n  official_id <<key>>\n  name\n  address\n  phone\n  email\n}\nentity HealthRecord {\n  record_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  record_date\n  record_content\n  record_status\n}\nentity HealthScheme {\n  scheme_id <<key>>\n  patient_id <<foreign>>\n  scheme_name\n  scheme_details\n  scheme_status\n}\n\nrelationship TRACKS_HEALTH {\n}\nrelationship IMPLEMENTS_SCHEME {\n}\nrelationship ASSISTS_PATIENT {\n}\nrelationship ASSIGNS_CARETAKER {\n}\nrelationship PROVIDES_TREATMENT {\n}\nrelationship CLASSIFIES_PATIENT {\n}\nrelationship AVAILS {\n}\n\nHealthRecord -N- TRACKS_HEALTH\nTRACKS_HEALTH -1- Patient\nGovernmentOfficial -1- IMPLEMENTS_SCHEME\nIMPLEMENTS_SCHEME -N- HealthScheme\nCaretaker -1- ASSISTS_PATIENT\nASSISTS_PATIENT -N- Patient\nHealthcareProvider -1- ASSIGNS_CARETAKER\nASSIGNS_CARETAKER -N- Caretaker\nMedicalProfessional -1- PROVIDES_TREATMENT\nPROVIDES_TREATMENT -N- Patient\nClassification -1- CLASSIFIES_PATIENT\nCLASSIFIES_PATIENT -N- Patient\nPatient -1- AVAILS\nAVAILS -N- HealthScheme \n\n@endchen"
    },
    {
        "input": "Draw a ERD. Functional Requirements for e-Med System:\n1. The system shall allow users to set a medicine intake schedule.\n2. The system shall notify users when they need to restock their medicines.\n3. The system shall allow users to schedule appointments with family doctors.\n4. The system shall provide an emergency button for users to press in critical situations.\n5. The system shall contact individuals listed in the user's emergency contact list when the emergency button is pressed.\n6. The system shall allow users to record their medical history.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n}\nentity Medicine {\n  medicine_id <<key>>\n  medicine_name\n  price\n  quantity\n  expiry_date\n  availibility_status\n}\nentity Appointment {\n  appointment_id <<key>>\n  user_id <<foreign>>\n  doctor_name\n  doctor_specialization\n  date\n  time\n  location\n  status\n}\nentity EmergencyContact <<weak>> {\n  contact_name <<key>>\n  user_id <<foreign>>\n  relationship\n  phone\n}\nentity MedicalNote {\n  note_id <<key>>\n  user_id <<foreign>>\n  note_date\n  blood_pressure\n  blood_sugar_level\n  cholesterol_level\n  note_status\n}\nentity Reminder {\n  reminder_id <<key>>\n  medicine_id <<foreign>>\n  reminder_date\n  reminder_time\n  reminder_content\n}\nrelationship SCHEDULES_APPOINTMENT {\n}\nrelationship CONTACTS_EMERGENCY <<identifying>> {\n}\nrelationship KEEPS_NOTE {\n}\nrelationship RECEIVES_REMINDER {\n}\nrelationship TAKES_MEDICINE {\n}\n\nUser -1-SCHEDULES_APPOINTMENT \nSCHEDULES_APPOINTMENT -N- Appointment\nUser -1- CONTACTS_EMERGENCY\nCONTACTS_EMERGENCY -N- EmergencyContact\nUser -1- KEEPS_NOTE\nKEEPS_NOTE -N- MedicalNote\nUser -1- RECEIVES_REMINDER\nRECEIVES_REMINDER -N- Reminder\nUser -1- TAKES_MEDICINE\nTAKES_MEDICINE -N- Medicine\n\n@endchen"
    },
    {
        "input": "Draw a ERD. Functional Requirements for Health Application:\n1. The system shall allow users to provide their daily diet cycle.\n2. The system shall provide nutrient recommendations based on the daily diet cycle.\n3. The system shall allow users to upload their medical reports.\n4. The system shall provide nutrient suggestions based on the user's medical reports.\n5. The system shall allow users to enter disease information.\n6. The system shall provide nutrient benefits for fighting the entered disease.\n7. The system shall allow users to contact professional nutritionists for clarification.\n8. The system shall authenticate users before providing recommendations.\n9. The system shall provide machine learning-based nutrient recommendations.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n}\nentity Nutrient {\n  nutrient_id <<key>>\n  nutrient_name\n  description\n  benefits\n}\nentity DietCycle {\n  cycle_id <<key>>\n  user_id <<foreign>>\n  cycle_date\n  meal_details\n  calorie_intake\n  cycle_status\n}\nentity MedicalReport {\n  report_id <<key>>\n  user_id <<foreign>>\n  report_date\n  report_content\n  report_type\n}\nentity Disease {\n  disease_id <<key>>\n  disease_name\n  description\n  symptoms\n  prevention\n}\nentity Recommendation {\n  recommendation_id <<key>>\n  user_id <<foreign>>\n  date\n  content\n  source\n}\nentity Nutritionist {\n  nutritionist_id <<key>>\n  name\n  email\n  phone\n  specialization\n}\nrelationship RECOMMENDS_NUTRIENT {\n}\nrelationship BASED_ON {\n}\nrelationship RECORDS_DIET {\n}\nrelationship PROVIDES_REPORT {\n}\nrelationship FIGHTS_DISEASE {\n}\nrelationship CONSULTS_WITH {\n}\n\nRecommendation -1- RECOMMENDS_NUTRIENT\nRECOMMENDS_NUTRIENT -N- Nutrient\nRecommendation -N- BASED_ON\nBASED_ON -1- DietCycle\nBASED_ON -1- MedicalReport\nUser -1- RECORDS_DIET\nRECORDS_DIET -N- DietCycle\nUser -1- PROVIDES_REPORT\nPROVIDES_REPORT -N- MedicalReport\nNutrient -1- FIGHTS_DISEASE\nFIGHTS_DISEASE -N- Disease\nUser -1- CONSULTS_WITH\nCONSULTS_WITH -N- Nutritionist\n\n@endchen"  
    },
    {
        "input": "Draw a ERD. Functional Requirements for Health Tracker Application:\n1. The system shall allow users to input their daily food intake.\n2. The system shall allow users to track their exercise routines.\n3. The system shall allow users to monitor their water consumption.\n4. The system shall provide personalized recommendations based on user health data and goals.\n5. The system shall allow users to set reminders for meals, workouts, and hydration.\n6. The system shall allow users to connect with friends.\n7. The system shall allow users to share their achievements with friends.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  location\n  user_status\n}\n\nentity FoodLog {\n  food_log_id <<key>>\n  log_date\n  meal_type\n  food_items\n  calorie_intake\n  log_status\n}\n\nentity ExerciseLog {\n  exercise_log_id <<key>>\n  log_date\n  exercise_type\n  duration\n  calories_burned\n  log_status\n}\n\nentity WaterLog {\n  water_log_id <<key>>\n  log_date\n  water_amount\n  log_status\n}\n\nentity Goal {\n  goal_id <<key>>\n  goal_type\n  goal_description\n  target_value\n  current_progress\n  goal_status\n}\n\nentity Recommendation {\n  recommendation_id <<key>>\n  goal_id <<foreign>>\n  recommendation_date\n  recommendation_content\n  recommendation_source\n  recommendation_status\n}\n\nrelationship LOGS_FOOD {\n}\nrelationship LOGS_EXERCISE {\n}\nrelationship LOGS_WATER {\n}\nrelationship SETS_GOAL {\n}\nrelationship CONNECTS_WITH {\n connection_date\n connection_status\n}\nrelationship BASED_ON {\n}\n\nLOGS_FOOD -1- User\nLOGS_FOOD -N- FoodLog\n\nLOGS_EXERCISE -1- User\nLOGS_EXERCISE -N- ExerciseLog\n\nLOGS_WATER -1- User\nLOGS_WATER -N- WaterLog\n\nSETS_GOAL -1- User\nSETS_GOAL -N- Goal\n\nBASED_ON -N- Recommendation\nBASED_ON -1- Goal\n\nCONNECTS_WITH -1- User\nCONNECTS_WITH -N- User\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for FitnessPal Application:\n1. The system shall allow users to input their fitness preferences.\n2. The system shall allow users to provide their dietary restrictions.\n3. The system shall allow users to set health goals.\n4. The system shall provide personalized suggestions based on user data.\n5. The system shall allow users to track their progress.\n6. The system shall allow users to set reminders for workouts and meals.\n7. The system shall provide access to exercise routines.\n8. The system shall provide recipes for users to explore.\n9. The system shall allow users to connect with fitness trainers.\n10. The system shall allow users to consult nutritionists.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  fitness_preferences\n  dietary_restrictions\n  health_goals\n}\nentity ExerciseLog {\n  log_id <<key>>\n  user_id <<foreign>>\n  log_date\n  exercise_type\n  duration\n  calories_burned\n  intensity\n}\nentity WorkoutPlan {\n  plan_id <<key>>\n  user_id <<foreign>>\n  plan_duration\n  exercises\n}\nentity NutritionPlan {\n  plan_id <<key>>\n  user_id <<foreign>>\n  plan_type\n  plan_duration\n  meals\n}\nentity Recipe {\n  recipe_id <<key>>\n  recipe_name\n  recipe_ingredients\n  recipe_instructions\n}\nentity FitnessTrainer {\n  trainer_id <<key>>\n  name\n  email\n  phone\n  specialization\n  trainer_status\n}\nentity Nutritionist {\n  nutritionist_id <<key>>\n  name\n  email\n  phone\n  specialization\n  nutritionist_status\n}\nrelationship LOGS_EXERCISE {\n}\nrelationship ASSIGNS_WORKOUT_PLAN {\n}\nrelationship ASSIGNS_NUTRITION_PLAN {\n}\nrelationship INCLUDES_RECIPE {\n}\nrelationship HAS {\n}\nUser -1- LOGS_EXERCISE\nLOGS_EXERCISE -N- ExerciseLog\nFitnessTrainer -1- ASSIGNS_WORKOUT_PLAN\nASSIGNS_WORKOUT_PLAN -N- WorkoutPlan\nNutritionist -1- ASSIGNS_NUTRITION_PLAN\nASSIGNS_NUTRITION_PLAN -N- NutritionPlan\nNutritionPlan -1- INCLUDES_RECIPE\nINCLUDES_RECIPE -N- Recipe\nUser -1- HAS\nHAS -N- WorkoutPlan\nHAS -N- NutritionPlan\n\n@endchen"
    },
    {
        "input": "Draw a ERD. Functional Requirements for Student Counselling Management System:\n1. The system shall allow students to register for counselling.\n2. The system shall allow students to check their eligibility criteria for counselling.\n3. The system shall provide information about available colleges and universities.\n4. The system shall track counselling procedures for counsellors.\n5. The system shall generate reports based on the merit list of students.\n6. The system shall allow students to monitor seat availability in institutions.\n7. The system shall publish results of the counselling process.\n",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  qualification\n  merit_score\n}\nentity Counsellor {\n  counsellor_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  specialization\n}\nentity University {\n  university_id <<key>>\n  university_name\n  location\n  available_seats <<derived>>\n  booked_seats\n}\nentity Course {\n  course_id <<key>>\n  university_id <<foreign>>\n  course_name\n  course_duration\n  course_fee\n  total_seats\n  booked_seats\n}\nentity CounsellingSession {\n  session_id <<key>>\n  counsellor_id <<foreign>>\n  student_id <<foreign>>\n  session_date\n  session_notes\n}\nrelationship REGISTERS_FOR {\n}\nrelationship TAKES_SESSION {\n}\nrelationship APPLIES_FOR_ADMISSION {\n  admission_date\n  admission_status\n}\nrelationship OFFERS_COURSE {\n}\nrelationship ASSIGNS_UNIVERSITY {\n}\nStudent -1-REGISTERS_FOR \nREGISTERS_FOR -N- CounsellingSession\nCounsellor -1- TAKES_SESSION\nTAKES_SESSION -N- CounsellingSession\nStudent -1- APPLIES_FOR_ADMISSION\nAPPLIES_FOR_ADMISSION -N- University\nUniversity -1- OFFERS_COURSE\nOFFERS_COURSE -N- Course\nCounsellor -1- ASSIGNS_UNIVERSITY\nASSIGNS_UNIVERSITY -N- University\n\n@endchen"
    },
    {
        "input": "Draw a ERD. Functional Requirements for Online Visa Processing System:\n1. The system shall allow applicants to register by providing a valid email and password.\n2. The system shall allow applicants to log in by verifying credentials.\n3. The system shall allow applicants to apply for a visa online.\n4. The system shall allow applicants to submit necessary documents.\n5. The system shall allow applicants to select a visa type.\n6. The system shall allow applicants to view and modify the application.\n7. The system shall allow applicants to delete their visa application.\n8. The system shall allow applicants to check the status of their visa application.\n9. The system shall allow administrators to update applicant details.\n10. The system shall allow administrators to interact with the Visa Consultant Officer.\n11. The system shall allow administrators to approve or reject the visa application.\n12. The system shall allow Visa Consultant Officers to view visa details.\n13. The system shall allow Visa Consultant Officers to view document proofs submitted by the applicant.\n",
        "output": "@startchen\n\nentity Applicant {\n  applicant_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  applicant_status\n}\n\nentity VisaType {\n  visa_type_id <<key>>\n  visa_name\n  visa_description\n  visa_fee\n  visa_status\n}\n\nentity VisaApplication {\n  application_id <<key>>\n  applicant_id <<foreign>>\n  visa_type_id <<foreign>>\n  application_date\n  purpose_of_application\n  application_status\n}\n\nentity DocumentProof {\n  proof_id <<key>>\n  application_id <<foreign>>\n  proof_type\n  proof_content <<multi>>\n  proof_status\n}\n\nentity VisaConsultant {\n  consultant_id <<key>>\n  name\n  email\n  phone\n  specialization\n  consultant_status\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  admin_status\n}\n\nrelationship HAS_TYPE {\n}\nrelationship APPLIES_FOR_VISA {\n}\nrelationship SUBMITS_DOCUMENTS {\n}\nrelationship APPROVES_VISA {\n  approval_date\n  approval_status\n}\nrelationship MANAGES_APPLICATION {\n}\nrelationship INTERACTS_WITH {\n interaction_date\n message\n}\n\nHAS_TYPE -N- VisaApplication\nHAS_TYPE -1- VisaType\n\nAPPLIES_FOR_VISA -1- Applicant\nAPPLIES_FOR_VISA -N- VisaApplication\n\nSUBMITS_DOCUMENTS -1- VisaApplication\nSUBMITS_DOCUMENTS -N- DocumentProof\n\nAPPROVES_VISA -1- VisaConsultant\nAPPROVES_VISA -N- VisaApplication\n\nMANAGES_APPLICATION -1- Administrator\nMANAGES_APPLICATION -N- VisaApplication\n\nINTERACTS_WITH -1- Administrator\nINTERACTS_WITH -N- VisaConsultant\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for Placement Automation System:\n1. The system shall allow students to register as a student.\n2. The system shall allow companies to register as a company.\n3. The system shall allow students to upload their resumes.\n4. The system shall allow students to view available skills training.\n5. The system shall allow students to enroll in training.\n6. The system shall allow companies to post job opportunities.\n7. The system shall allow administrators to manage placement drives.\n8. The system shall allow students to view registered companies.\n9. The system shall allow students to track their placement status.\n10. The system shall allow administrators to manage student training records.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  skills <<multi>>\n  user_status\n}\n\nentity Company {\n  company_id <<key>>\n  company_name\n  company_location\n  job_roles <<multi>>\n  hiring_status\n  company_status\n}\n\nentity Admin {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  admin_status\n}\n\nentity Resume {\n  resume_id <<key>>\n  user_id <<foreign>>\n  resume_content\n  last_updated\n  resume_status\n}\n\nentity Training {\n  training_id <<key>>\n  user_id <<foreign>>\n  training_name\n  training_date\n  skills_set <<multi>>\n  training_provider\n  training_status\n}\n\nentity Placement {\n  placement_id <<key>>\n  company_id <<foreign>>\n  job_role\n  placement_date\n  placement_status\n}\n\nrelationship REGISTERS_FOR {\n registration_date\n registration_status\n}\nrelationship PLACED_AT {\n}\nrelationship MANAGES_PLACEMENT {\n}\nrelationship SUBMITS_RESUME {\n}\nrelationship PROVIDES_TRAINING {\n}\nrelationship COMPLETES_TRAINING {\n}\n\nREGISTERS_FOR -1- User\nREGISTERS_FOR -N- Placement\n\nPLACED_AT -1- Placement\nPLACED_AT -1- Company\n\nMANAGES_PLACEMENT -1- Admin\nMANAGES_PLACEMENT -N- Placement\n\nSUBMITS_RESUME -1- User\nSUBMITS_RESUME -N- Resume\n\nCOMPLETES_TRAINING -1- User\nCOMPLETES_TRAINING -N- Training\n\nPROVIDES_TRAINING -1- Company\nPROVIDES_TRAINING -N- Training\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for Farming Insights Application:\n1. The system shall provide real-time weather insights to the farmers.\n2. The system shall provide soil condition alerts to the farmers.\n3. The system shall provide market trend tracking information to the farmers.\n4. The system shall provide information about labour availability to the farmers.\n5. The system shall provide farming recommendations to the farmers.\n6. The system shall allow farmers to make data-driven decisions based on the recommendations provided.\n",
        "output": "@startchen\n\nentity Farmer {\n  farmer_id <<key>>\n  name\n  phone\n  address\n  phone_model\n  farmer_status\n}\n\nentity WeatherData {\n  weather_id <<key>>\n  farmer_id <<foreign>>\n  weather_date\n  location\n  weather_conditions\n  temperature\n  humidity\n  weather_status\n}\n\nentity SoilData {\n  soil_id <<key>>\n  farmer_id <<foreign>>\n  soil_date\n  location\n  soil_conditions\n  soil_moisture\n  soil_ph\n  soil_status\n}\n\nentity MarketData {\n  market_id <<key>>\n  farmer_id <<foreign>>\n  market_date\n  location\n  market_conditions\n  crop_prices\n  market_status\n}\n\nentity LabourData {\n  labour_id <<key>>\n  farmer_id <<foreign>>\n  labour_date\n  location\n  labour_availability\n  labour_cost\n  labour_status\n}\n\nrelationship FETCHES_WEATHER {\n}\nrelationship FETCHES_SOIL {\n}\nrelationship FETCHES_MARKET {\n}\nrelationship FETCHES_LABOUR {\n}\n\nFETCHES_WEATHER -1- Farmer\nFETCHES_WEATHER -N- WeatherData\n\nFETCHES_SOIL -1- Farmer\nFETCHES_SOIL -N- SoilData\n\nFETCHES_MARKET -1- Farmer\nFETCHES_MARKET -N- MarketData\n\nFETCHES_LABOUR -1- Farmer\nFETCHES_LABOUR -N- LabourData\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for Green Rides Application:\n1. The system shall allow users to select a route from source to destination.\n2. The system shall display traffic and pollution levels for the selected route.\n3. The system shall send notifications for traffic jams to users within a specific radius.\n4. The system shall allow users to report accident-prone spots to the concerned authority.\n5. The system shall provide Meals-on-Wheel service information for available restaurants on the route.\n6. The system shall allow users to activate Drive Mode to notify callers that they are driving.\n7. The system shall allow users to provide feedback on traffic and pollution accuracy.\n8. The system shall notify users of accident-prone areas based on the number of accidents.\n9. The system shall allow road authority admins to monitor road conditions and accident reports.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n}\nentity Route {\n  route_id <<key>>\n  user_id <<foreign>>\n  source\n  destination\n  route_status\n  total_distance\n  estimated_time\n}\nentity RouteData {\n  data_id <<key>>\n  route_id <<foreign>>\n  traffic_location\n  traffic_intensity\n  pollution_location\n  pollution_level\n  accident_location\n  accident_severity\n  timestamp\n}\nentity Restaurant {\n  restaurant_id <<key>>\n  restaurant_name\n  restaurant_location\n  menu\n  service_time\n  contact\n  ratings\n}\nentity Feedback {\n  feedback_id <<key>>\n  user_id <<foreign>>\n  feedback_content\n  feedback_date\n  feedback_status\n  feedback_rating\n}\nentity DriveMode {\n  drive_mode_id <<key>>\n  user_id <<foreign>>\n  status\n  geo_coordinates\n  speed_limit\n  activation_time\n}\nrelationship SELECTS_ROUTE {\n}\nrelationship REPORTS {\n}\nrelationship MONITORS_DRIVE_MODE {\n}\nrelationship GIVES_FEEDBACK {\n}\nUser -1- SELECTS_ROUTE\nSELECTS_ROUTE -N- Route\nRoute -1- REPORTS\nREPORTS -N- RouteData\nREPORTS -N- Restaurant\nUser -1- MONITORS_DRIVE_MODE\nMONITORS_DRIVE_MODE -N- DriveMode\nUser -1- GIVES_FEEDBACK\nGIVES_FEEDBACK -N- Feedback\n\n@endchen"   
    },
    {
        "input": "Draw a ERD. Functional Requirements for Art Gallery Management System:\n1. The system shall allow customers to browse art collections.\n2. The system shall allow customers to view detailed information about each art piece.\n3. The system shall allow customers to place orders for purchasing art.\n4. The system shall allow customers to make payments for orders.\n5. The system shall allow customers to cancel their orders if needed.\n6. The system shall allow admins to manage (add, update, delete) art items in the gallery.\n7. The system shall allow admins to update details like price, description, and stock availability for art.\n8. The system shall allow admins to generate reports on gallery activity and sales.\n",
        "output": "@startchen\n\nentity Admin {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  admin_status\n}\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  customer_status\n}\n\nentity ArtPiece {\n  art_id <<key>>\n  admin_id <<foreign>>\n  art_name\n  art_description\n  art_price\n  stock_availability\n  reproduction_protection\n  art_status <<derived>>\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  total_amount <<derived>>\n  order_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  order_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_method\n  payment_status\n}\n\nentity Report {\n  report_id <<key>>\n  admin_id <<foreign>>\n  report_date\n  report_type\n  report_content\n  report_status\n}\n\nentity Event {\n  event_id <<key>>\n  admin_id <<foreign>>\n  event_name\n  event_date\n  event_description\n  event_status\n}\n\nrelationship MANAGES_ART {\n}\nrelationship PLACES_ORDER {\n}\nrelationship CONTAINS_ART_PIECE {\n  quantity\n  item_price\n}\nrelationship HAS_PAYMENT {\n}\nrelationship GENERATES_REPORT {\n}\nrelationship ORGANIZES_EVENT {\n}\n\nMANAGES_ART -1- Admin\nMANAGES_ART -N- ArtPiece\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nCONTAINS_ART_PIECE -1- Order\nCONTAINS_ART_PIECE -N- ArtPiece\n\nHAS_PAYMENT -1- Order\nHAS_PAYMENT -1- Payment\n\nGENERATES_REPORT -1- Admin\nGENERATES_REPORT -N- Report\n\nORGANIZES_EVENT -1- Admin\nORGANIZES_EVENT -N- Event\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for College Trade Platform:\n1. The system shall allow students to register on the platform.\n2. The system shall allow students to post items for sale or trade.\n3. The system shall allow students to search for available goods.\n4. The system shall allow students to rate sellers based on previous transactions.\n5. The system shall allow students to buy or trade items.\n6. The system shall allow students to access and view seller ratings.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  user_type\n  overall_rating <<derived>>\n  user_status\n}\n\nentity Item {\n  item_id <<key>>\n  user_id <<foreign>>\n  item_name\n  item_description\n  item_category\n  item_price\n  item_condition\n  item_status <<derived>>\n  listed_date\n  trade_preference\n}\n\nrelationship SELLS_ITEM {\n  transaction_date\n  transaction_type\n  transaction_status\n}\nrelationship BUYS_ITEM {\n  transaction_date\n  transaction_type\n  transaction_status\n}\nrelationship RATES_USER {\n  rating_value\n  rating_comment\n  rating_date\n}\n\nSELLS_ITEM -1- User\nSELLS_ITEM -N- Item\n\nBUYS_ITEM -1- User\nBUYS_ITEM -N- Item\n\nRATES_USER -1- User\nRATES_USER -N- User\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for the Online Quiz System:\n1. The system shall allow the admin to register students and teachers.\n2. The system shall allow teachers to create quizzes.\n3. The system shall allow teachers to schedule quizzes.\n4. The system shall allow teachers to edit quizzes.\n5. The system shall allow students to take quizzes.\n6. The system shall automatically evaluate the quizzes.\n7. The system shall allow students to view correct answers after taking the quiz.\n8. The system shall allow students to provide feedback on the quiz.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n}\nentity Admin {\n role\n}\nentity Teacher {\n specialty\n}\nentity Student {\n credits\n semester\n}\nUser ->- d {Admin, Teacher, Student}\nentity Quiz {\n  quiz_id <<key>>\n  teacher_id <<foreign>>\n  quiz_date\n  quiz_duration\n  max_score\n  total_questions\n}\nentity Solution {\n  solution_id <<key>>\n  student_id <<foreign>>\n  question_text\n  question_type <<multi>>\n  options <<multi>>\n  correct_answer\n}\nentity Feedback {\n  feedback_id <<key>>\n  student_id <<foreign>>\n  quiz_id <<foreign>>\n  feedback_content\n  feedback_date\n}\nrelationship REGISTERS {\n}\nrelationship CREATES_QUIZ {\n}\nrelationship ATTEMPTS_QUIZ {\n  start_time\n  end_time\n  attempt_status\n  score\n}\nrelationship HAS_SOLUTION {\n}\nrelationship PROVIDES_FEEDBACK {\n}\nAdmin -1- REGISTERS\nREGISTERS -N- Teacher\nREGISTERS -N- Student\nTeacher -1- CREATES_QUIZ\nCREATES_QUIZ -N- Quiz\nStudent -1- ATTEMPTS_QUIZ\nATTEMPTS_QUIZ -N- Quiz\nQuiz -1- HAS_SOLUTION\nHAS_SOLUTION -1- Solution\nTeacher -1- PROVIDES_FEEDBACK\nPROVIDES_FEEDBACK -N- Feedback\n\n@endchen"     
    },
    {
        "input": "Draw a ERD. Functional Requirements for the Book Bank Management System:\n1. The system shall authenticate users before allowing access.\n2. The system shall allow members to borrow books.\n3. The system shall allow members to buy books.\n4. The system shall allow members to reserve books or magazines.\n5. The system shall allow members to return borrowed books.\n6. The system shall allow admins to update book stock.\n7. The system shall calculate due fines for late returns.\n8. The system shall track misplaced books using a bar scanner.\n9. The system shall allow admins to manage book titles.\n10. The system shall generate sales reports.\n11. The system shall manage user records.\n12. The system shall handle payments for books.\n",
        "output": "@startchen\n\nentity Member {\n  member_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  member_status\n}\n\nentity Book {\n  book_id <<key>>\n  book_name\n  book_author\n  book_genre\n  book_department\n  book_year\n  stock_availability\n  book_status\n}\n\nentity EBook {\n  ebook_id <<key>>\n  book_id <<foreign>>\n  ebook_link\n  ebook_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  member_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_method\n  payment_status\n}\n\nentity SalesReport {\n  report_id <<key>>\n  member_id <<foreign>>\n  book_id <<foreign>>\n  report_date\n  report_type\n  report_content\n  report_status\n}\n\nrelationship RESERVES_BOOK {\n  reservation_date\n  reservation_status\n}\nrelationship ISSUES_BOOK {\n  issue_date\n  due_date\n  return_date\n  fine_amount\n}\nrelationship HAS_EBOOK {\n}\nrelationship MAKES_PAYMENT {\n}\nrelationship GENERATES_REPORT {\n}\n\nRESERVES_BOOK -1- Member\nRESERVES_BOOK -N- Book\n\nISSUES_BOOK -1- Member\nISSUES_BOOK -N- Book\n\nHAS_EBOOK -1- Book\nHAS_EBOOK -N- EBook\n\nMAKES_PAYMENT -1- Member\nMAKES_PAYMENT -N- Payment\n\nGENERATES_REPORT -N- Book\nGENERATES_REPORT -1- SalesReport\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for the Mega Associates Website:\n1. The system shall allow clients to view the firm's major projects.\n2. The system shall allow clients to explore available departments and collaborations.\n3. The system shall allow clients to read recent news related to the firm.\n4. The system shall allow clients to explore firm insights.\n5. The system shall allow clients to learn about the firm's history.\n6. The system shall allow clients to contact the firm via mail or chat.\n7. The system shall allow job seekers to view career opportunities.\n8. The system shall allow administrators to manage website content.\n",
        "output": "@startchen\n\nentity Firm {\n  firm_id <<key>>\n  firm_name\n  location\n  description\n  established_year\n  contact_info\n  history_description <<multi>>\n}\nentity Department {\n  department_id <<key>>\n  firm_id <<foreign>>\n  department_name\n  department_head\n  description\n}\nentity Project {\n  project_id <<key>>\n  department_id <<foreign>>\n  project_name\n  project_description\n  start_date\n  end_date\n  project_status\n}\nentity NewsInsights {\n  news_id <<key>>\n  firm_id <<foreign>>\n  news_date\n  news_title\n  news_content\n}\nentity Career {\n  career_id <<key>>\n  firm_id <<foreign>>\n  career_position\n  department_id <<foreign>>\n  career_description\n  qualifications\n}\nrelationship HAS_DEPARTMENT {\n}\nrelationship HAS_PROJECT {\n}\nrelationship PROVIDES_NEWSINSIGHTS {\n}\nrelationship OFFERS_CAREER {\n}\nFirm -1-HAS_DEPARTMENT \nHAS_DEPARTMENT -N- Department\nDepartment -1- HAS_PROJECT\nHAS_PROJECT -N- Project\nDepartment -1- PROVIDES_NEWSINSIGHTS\nPROVIDES_NEWSINSIGHTS -N- NewsInsights\nFirm -1- OFFERS_CAREER\nOFFERS_CAREER -N- Career\n\n@endchen" 
    },
    {
        "input": "Draw a ERD. Functional Requirements for the Startup Meet System:\n1. The system shall allow entrepreneurs to create startup profiles.\n2. The system shall allow entrepreneurs to request funding from investors or mentors.\n3. The system shall allow entrepreneurs to submit startup abstracts to investors or mentors.\n4. The system shall allow entrepreneurs to give virtual presentations to investors or mentors.\n5. The system shall allow entrepreneurs to apply for government loans.\n6. The system shall allow entrepreneurs to view government policies for startups.\n7. The system shall allow mentors to provide guidance and mentorship to entrepreneurs.\n8. The system shall allow investors and mentors to review startup ideas.\n9. The system shall allow investors to accept investment proposals from entrepreneurs.\n",
        "output": "@startchen\n\nentity Startup {\n  startup_id <<key>>\n  startup_name\n  startup_description\n  startup_domain\n  startup_status\n}\n\nentity Entrepreneur {\n  entrepreneur_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  entrepreneur_status\n}\n\nentity Investor {\n  investor_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  investor_status\n}\n\nentity Mentor {\n  mentor_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  mentor_status\n}\n\nentity Policy {\n  policy_id <<key>>\n  policy_name\n  policy_description\n  eligibility_criteria\n  applicable_industries <<multi>>\n  application_deadline\n  policy_provider\n  policy_status\n}\n\nentity Loan {\n  loan_id <<key>>\n  loan_name\n  loan_description\n  loan_amount\n  interest_rate\n  repayment_terms\n  eligibility_criteria\n  funding_agency\n  loan_status\n}\n\nrelationship CREATED_BY {\n}\nrelationship REQUESTS_INVESTOR {\n  request_date\n  request_status\n}\nrelationship REQUESTS_MENTOR {\n  request_date\n  request_status\n}\nrelationship APPLY_FOR_POLICY {\n}\nrelationship APPLY_FOR_LOAN {\n}\n\nCREATED_BY -N- Startup\nCREATED_BY -1- Entrepreneur\n\nREQUESTS_INVESTOR -1- Startup\nREQUESTS_INVESTOR -N- Investor\n\nREQUESTS_MENTOR -1- Startup\nREQUESTS_MENTOR -N- Mentor\n\nAPPLY_FOR_POLICY -N- Policy\nAPPLY_FOR_POLICY -N- Startup\n\nAPPLY_FOR_LOAN -N- Startup\nAPPLY_FOR_LOAN -1- Loan\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for the Video Suggestion System:\n1. The system shall collect user activity data for video recommendations.\n2. The system shall process user data to generate video suggestions.\n3. The system shall generate a video dataset based on user interactions.\n4. The system shall suggest relevant videos to users.\n5. The system shall refresh and update video suggestions when users request or refresh their page.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  preferences <<multi>>\n  user_status\n}\n\nentity Video {\n  video_id <<key>>\n  video_title\n  video_description\n  video_category\n  video_tags <<multi>>\n  video_duration\n  video_trending_score\n  video_status\n}\n\nentity Like {\n  like_id <<key>>\n  user_id <<foreign>>\n  video_id <<foreign>>\n  like_date\n  like_status\n}\n\nentity Dislike {\n  dislike_id <<key>>\n  user_id <<foreign>>\n  video_id <<foreign>>\n  dislike_date\n  dislike_status\n}\n\nrelationship WATCHES_VIDEO {\n  watch_date\n  watch_duration\n  watch_status\n}\n\nrelationship HAS_LIKES {\n}\nrelationship GIVES_LIKES {\n}\n\nrelationship HAS_DISLIKES {\n}\nrelationship GIVES_DISLIKES {\n}\n\nrelationship RECOMMENDED_TO {\n  recommendation_reason <<multi>>\n  recommendation_date\n  recommendation_status\n}\n\nWATCHES_VIDEO -1- User\nWATCHES_VIDEO -N- Video\n\nHAS_LIKES -1- Video\nHAS_LIKES -N- Like\n\nGIVES_LIKES -1- User\nGIVES_LIKES -N- Like\n\nHAS_DISLIKES -1- Video\nHAS_DISLIKES -N- Dislike\n\nGIVES_DISLIKES -1- User\nGIVES_DISLIKES -N- Dislike\n\nRECOMMENDED_TO -N- Video\nRECOMMENDED_TO -N- User\n\n@endchen"          
    },
    {
        "input": "Draw a ERD. Functional Requirements for the Library Management System:\n1. The system shall allow library members to search books by title, author, subject, or publication date.\n2. The system shall allow library members to check out available book items.\n3. The system shall allow library members to reserve book items that are not currently available.\n4. The system shall retrieve book information, including borrower details.\n5. The system shall allow library members to return checked-out books.\n6. The system shall collect fines for late returns.\n7. The system shall send notifications when reserved books become available or when books are overdue.\n",
        "output": "@startchen\n\nentity LibraryMember {\n  member_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  membership_status\n  max_checkout_limit <<derived>>\n}\n\nentity Book {\n  book_id <<key>>\n  title\n  author\n  subject_category\n  publication_date\n  rack_number\n  unique_barcode\n  book_status\n}\n\nentity BookItem {\n  book_item_id <<key>>\n  book_id <<foreign>>\n  unique_barcode\n  availability_status\n  checkout_status\n}\n\nentity Checkout {\n  checkout_id <<key>>\n  member_id <<foreign>>\n  checkout_date\n  due_date\n  return_date\n  fine_amount <<derived>>\n  checkout_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  member_id <<foreign>>\n  book_item_id <<foreign>>\n  notification_type\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship RESERVES_BOOK {\n  reservation_date\n  reservation_status\n}\nrelationship PERFORMS_CHECKOUT {\n}\nrelationship ASSOCIATES_BOOK {\n}\nrelationship SENDS_NOTIFICATION {\n}\nrelationship TRACKS_BOOK_ITEMS {\n}\n\nRESERVES_BOOK -1- LibraryMember\nRESERVES_BOOK -N- BookItem\n\nPERFORMS_CHECKOUT -1- LibraryMember\nPERFORMS_CHECKOUT -N- Checkout\n\nASSOCIATES_BOOK -1- Checkout\nASSOCIATES_BOOK -1- BookItem\n\nSENDS_NOTIFICATION -1- Book\nSENDS_NOTIFICATION -N- Notification\n\nTRACKS_BOOK_ITEMS -1- Book\nTRACKS_BOOK_ITEMS -N- BookItem\n\n@endchen"
    },
    {
        "input": "Draw a ERD. Functional Requirements for the Course Management System:\n1. The system shall allow lecturers to give one or more lectures.\n2. The system shall allow lecturers to go on leave for research purposes, preventing them from giving lectures.\n3. The system shall allow students to attend one or more lectures.\n4. The system shall provide study groups for solving exercises during the semester.\n5. The system shall assign each student to a specific study group for the semester.\n6. The system shall ensure that a study group consists of two to three students.\n7. The system shall allow tutors to grade solutions submitted by study groups.\n",
        "output": "@startchen\n\nentity Lecturer {\n  lecturer_id <<key>>\n  name\n  email\n  password\n  research_status\n}\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n}\nentity Tutor {\n  tutor_id <<key>>\n  name\n  email\n  password\n  tutor_status\n}\nentity StudyGroup {\n  group_id <<key>>\n  group_name\n  semester\n}\nentity Lecture {\n  lecture_id <<key>>\n  lecturer_id <<foreign>>\n  lecture_title\n  date\n}\nentity Exercise {\n  exercise_id <<key>>\n  lecture_id <<foreign>>\n  exercise_title\n  exercise_description\n  submission_deadline\n  exercise_status\n}\nrelationship TEACHES_LECTURE {\n}\nrelationship ATTENDS_LECTURE {\n}\nrelationship ASSIGNED_TO_GROUP {\n}\nrelationship SOLVES_EXERCISE {\n  submission_date\n  submission_content\n  submission_status\n}\nrelationship GRADES_EXERCISE {\n  grade_value\n  grade_comments\n}\nLecturer -1- TEACHES_LECTURE\nTEACHES_LECTURE -N- Lecture\nStudent -1- ATTENDS_LECTURE\nATTENDS_LECTURE -N- Lecture\nStudent -(2,3)- ASSIGNED_TO_GROUP\nASSIGNED_TO_GROUP -1- StudyGroup\nStudyGroup -1- SOLVES_EXERCISE\nSOLVES_EXERCISE -N- Exercise\nTutor -1- GRADES_EXERCISE\nGRADES_EXERCISE -N- Exercise\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the Content Management System:\n1. The system shall allow an administrator to create a new blog account.\n2. The system shall verify author details before creating a blog account using the author credentials database.\n3. The system shall allow an administrator to create a new personal Wiki.\n4. The system shall verify author details before creating a personal Wiki using the Author Credentials service.\n",
        "output": "@startchen\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  admin_status\n}\n\nentity Blogger {\n  blogger_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  blogger_status\n}\n\nentity Wiki {\n  wiki_id <<key>>\n  author_id <<foreign>>\n  wiki_title\n  wiki_content\n  wiki_status\n}\n\nrelationship CREATES_BLOG_ACCOUNT {\n}\nrelationship CREATES_PERSONAL_WIKI {\n}\n\nCREATES_BLOG_ACCOUNT -1- Administrator\nCREATES_BLOG_ACCOUNT -N- Blogger\n\nCREATES_PERSONAL_WIKI -1- Administrator\nCREATES_PERSONAL_WIKI -N- Wiki\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the eDoc Health Record Management System:\n1. The system shall manage patient profiles, including comprehensive personal information.\n2. The system shall allow healthcare providers to input and organize patient medical history.\n3. The system shall allow advanced appointment scheduling for patients, including reminders.\n4. The system shall provide appointment reminders for both patients and healthcare providers.\n5. The system shall enable telemedicine consultations and remote interactions with patients.\n6. The system shall provide patients access to their health records through secure portals.\n7. The system shall allow data analysis, collaboration, and report generation for healthcare teams.\n8. The system shall support importing and exporting health data between systems.\n9. The system shall perform regular backups and provide data recovery options.\n10. The system shall manage patient medication records, including medication reminders.\n11. The system shall store and manage diagnostic records like lab results and imaging reports.\n",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  date_of_birth\n  email\n  phone\n  address\n  emergency_contact\n  patient_status\n}\nentity MedicalHistory {\n  history_id <<key>>\n  patient_id <<foreign>>\n  history_date\n  diagnosis\n  treatments\n  allergies\n  lab_results <<multi>>\n  diagnostic_report <<multi>>\n}\nentity HealthcareProvider {\n  provider_id <<key>>\n  name\n  specialization\n  email\n  phone\n  provider_status\n}\nentity TelemedicineSession {\n  session_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  session_date\n  session_time\n  session_notes\n  session_status\n}\nentity Medication {\n  medication_id <<key>>\n  patient_id <<foreign>>\n  medication_name\n  dosage\n  frequency\n  start_date\n  end_date\n  reminder_status\n  medication_status\n}\nrelationship HAS_MEDICAL_HISTORY {\n}\nrelationship SCHEDULES_APPOINTMENT {\n  appointment_date\n  appointment_time\n  appointment_status\n  reminder_status\n}\nrelationship CONDUCTS_SESSION {\n}\nrelationship PRESCRIBES_MEDICATION {\n}\nPatient -1- HAS_MEDICAL_HISTORY\nHAS_MEDICAL_HISTORY -N- MedicalHistory\nPatient -1- SCHEDULES_APPOINTMENT\nSCHEDULES_APPOINTMENT -N- TelemedicineSession\nHealthcareProvider -1- CONDUCTS_SESSION\nCONDUCTS_SESSION -N- TelemedicineSession\nHealthcareProvider -1- PRESCRIBES_MEDICATION\nPRESCRIBES_MEDICATION -N- Medication\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the HealthCare Management System:\n1. The system shall manage patient profiles.\n2. The system shall input and organize medical history.\n3. The system shall allow advanced appointment scheduling.\n4. The system shall send appointment reminders.\n5. The system shall allow telemedicine consultations.\n6. The system shall provide access to patient portals.\n7. The system shall analyze data and generate reports.\n8. The system shall support import/export of health data.\n9. The system shall perform data backups and recovery.\n10. The system shall manage medication records.\n11. The system shall store diagnostic reports.\n",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  date_of_birth\n  email\n  phone\n  address\n  emergency_contact\n  patient_status\n}\nentity MedicalHistory {\n  history_id <<key>>\n  patient_id <<foreign>>\n  history_date\n  diagnosis\n  treatments\n  allergies\n  lab_results <<multi>>\n  diagnostic_report <<multi>>\n}\nentity HealthcareProvider {\n  provider_id <<key>>\n  name\n  specialization\n  email\n  phone\n  provider_status\n}\nentity TelemedicineSession {\n  session_id <<key>>\n  patient_id <<foreign>>\n  provider_id <<foreign>>\n  session_date\n  session_time\n  session_notes\n  session_status\n}\nentity Medication {\n  medication_id <<key>>\n  patient_id <<foreign>>\n  medication_name\n  dosage\n  frequency\n  start_date\n  end_date\n  reminder_status\n  medication_status\n}\nrelationship HAS_MEDICAL_HISTORY {\n}\nrelationship SCHEDULES_APPOINTMENT {\n  appointment_date\n  appointment_time\n  appointment_status\n  reminder_status\n}\nrelationship CONDUCTS_SESSION {\n}\nrelationship PRESCRIBES_MEDICATION {\n}\nPatient -1- HAS_MEDICAL_HISTORY\nHAS_MEDICAL_HISTORY -N- MedicalHistory\nPatient -1- SCHEDULES_APPOINTMENT\nSCHEDULES_APPOINTMENT -N- TelemedicineSession\nHealthcareProvider -1- CONDUCTS_SESSION\nCONDUCTS_SESSION -N- TelemedicineSession\nHealthcareProvider -1- PRESCRIBES_MEDICATION\nPRESCRIBES_MEDICATION -N- Medication\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the Parcel Delivery Management System:\n1. The system shall provide advanced parcel tracking.\n2. The system shall manage returns efficiently.\n3. The system shall monitor real-time parcel inventory.\n4. The system shall support customer interactions with customer service.\n5. The system shall process payments securely and efficiently.\n",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n}\nentity Parcel {\n  parcel_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  weight\n  dimensions\n  tracking_number\n  shipment_date\n  delivery_date\n  location\n  timestamp\n  parcel_status\n}\nentity ReturnRequest {\n  return_id <<key>>\n  parcel_id <<foreign>>\n  request_date\n  reason\n  return_status\n}\nentity Inventory {\n  inventory_id <<key>>\n  location\n  available_space\n  inventory_status\n}\nentity Payment {\n  payment_id <<key>>\n  customer_id <<foreign>>\n  amount\n  payment_method\n  payment_date\n  payment_status\n}\nentity SupportTicket {\n  ticket_id <<key>>\n  parcel_id <<foreign>>\n  issue_description\n  ticket_status\n  resolution_date\n}\nrelationship MANAGES_PARCEL {\n}\nrelationship INITIATES {\n}\nrelationship ASSOCIATED_WITH {\n}\nrelationship SUBMITS_PAYMENT {\n}\nrelationship HAS_PAYMENT {\n}\nCustomer -1- MANAGES_PARCEL\nMANAGES_PARCEL -N- Parcel\nCustomer -1- INITIATES\nINITIATES -N- ReturnRequest\nINITIATES -N- SupportTicket\nInventory -1- ASSOCIATED_WITH\nASSOCIATED_WITH -N- Parcel\nCustomer -1- SUBMITS_PAYMENT\nSUBMITS_PAYMENT -N- Payment\nParcel -1- HAS_PAYMENT\nHAS_PAYMENT -1- Payment\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the Crime Information System:\n1. The system shall manage users.\n2. The system shall receive crime-related notifications.\n3. The system shall allow the police to update FIRs.\n4. The system shall allow the police to create FIRs.\n5. The system shall provide access to police station information.\n6. The system shall provide access to a crime database.\n7. The system shall allow users to join community safety forums.\n8. The system shall manage criminal records.\n9. The system shall allow the police to search criminal records.\n",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  user_type\n}\nentity FIR {\n  fir_id <<key>>\n  user_id <<foreign>>\n  police_station_id <<foreign>>\n  crime_date\n  crime_location\n  crime_type\n  fir_status\n  fir_details\n}\nentity PoliceStation {\n  station_id <<key>>\n  station_name\n  station_location\n  contact_number\n  station_status\n  community_forum <<multi>>\n}\nentity Crime {\n  crime_id <<key>>\n  fir_id <<foreign>>\n  crime_description\n  crime_date\n  crime_type\n  crime_status\n}\nentity Criminal {\n  criminal_id <<key>>\n  name\n  alias\n  date_of_birth\n  crime_history <<multi>>\n  criminal_status\n}\nrelationship CREATES_FIR {\n}\nrelationship ASSIGNED_TO {\n}\nrelationship DOCUMENTS_CRIME {\n}\nrelationship MANAGES_RECORD {\n}\nUser -1- CREATES_FIR\nCREATES_FIR -N- FIR\nPoliceStation -1- ASSIGNED_TO\nASSIGNED_TO -N- FIR\nFIR -1- DOCUMENTS_CRIME\nDOCUMENTS_CRIME -N- Crime\nPoliceStation -1- MANAGES_RECORD\nMANAGES_RECORD -N- Criminal\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the Timetable Management System:\n1. The system shall allow users to register and log in securely.\n2. The system shall allow administrators to enroll students and manage their information.\n3. The system shall allow administrators to assign courses to students.\n4. The system shall allow administrators to assign courses to faculty.\n5. The system shall allow faculty members to input their preferred time slots for lectures.\n6. The system shall generate timetables based on student courses, faculty preferences, and available resources.\n7. The system shall allocate available lecture halls based on the generated timetable.\n8. The system shall generate reports detailing course allocations and schedules.\n9. The system shall provide students with reports showing their enrolled courses and schedules.\n10. The system shall provide faculty with reports detailing their course assignments and schedules.\n",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  enrollment_date\n  student_status\n}\nentity Faculty {\n  faculty_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  preferred_time_slots <<multi>>\n  faculty_status\n}\nentity Course {\n  course_id <<key>>\n  course_name\n  course_description\n  department\n  credits\n}\nentity LectureHall {\n  hall_id <<key>>\n  hall_name\n  capacity\n  resources_available\n  hall_status\n}\nentity Timetable {\n  timetable_id <<key>>\n  generated_date\n  semester\n  timetable_status\n}\nentity Lecture {\n  lecture_id <<key>>\n  timetable_id <<foreign>>\n  course_id <<foreign>>\n  faculty_id <<foreign>>\n  hall_id <<foreign>>\n  lecture_date\n  lecture_time\n  duration\n  lecture_status\n}\nrelationship ENROLLS_IN {\n}\nrelationship TEACHES_COURSE {\n}\nrelationship HAS_LECTURE {\n}\nrelationship ALLOCATES_HALL {\n}\nrelationship INCLUDES_LECTURE {\n}\nStudent -1- ENROLLS_IN\nENROLLS_IN -N- Course\nFaculty -1- TEACHES_COURSE\nTEACHES_COURSE -N- Course\nCourse -1- HAS_LECTURE\nHAS_LECTURE -N- Lecture\nLectureHall -1- ALLOCATES_HALL\nALLOCATES_HALL -1- Lecture\nTimetable -1- INCLUDES_LECTURE\nINCLUDES_LECTURE -N- Lecture\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the Cricket Stadium Management System:\n1. The system shall allow fans to view comprehensive information about upcoming events in the stadium.\n2. The system shall allow fans to explore different pricing plans for tickets.\n3. The system shall allow fans to check seat availability.\n4. The system shall allow fans to securely purchase tickets for events.\n5. The system shall allow sponsors to explore available sponsorship options within the stadium.\n6. The system shall allow sponsors to track the return on investment (ROI) for their sponsorships.\n",
        "output": "@startchen\n\nentity Fan {\n  fan_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  fan_status\n}\n\nentity Event {\n  event_id <<key>>\n  event_name\n  event_date\n  match_schedule\n  team_lineups <<multi>>\n  event_status\n}\n\nentity Ticket {\n  ticket_id <<key>>\n  event_id <<foreign>>\n  seat_number\n  price\n  availability_status\n  purchase_status\n}\n\nentity Sponsor {\n  sponsor_id <<key>>\n  name\n  email\n  phone\n  sponsorship_details\n  sponsor_status\n}\n\nentity Sponsorship {\n  sponsorship_id <<key>>\n  sponsor_id <<foreign>>\n  event_id <<foreign>>\n  sponsorship_amount\n  ROI_metrics\n  sponsorship_status\n}\n\nrelationship BOOKS_TICKET {\n  booking_date\n  payment_status\n}\nrelationship HAS_TICKET {\n}\nrelationship PROVIDES_SPONSORSHIP {\n}\nrelationship SPONSORS_EVENT {\n}\nrelationship TRACKS_ROI {\n}\n\nBOOKS_TICKET -1- Fan\nBOOKS_TICKET -N- Ticket\n\nHAS_TICKET -1- Event\nHAS_TICKET -N- Ticket\n\nPROVIDES_SPONSORSHIP -1- Sponsor\nPROVIDES_SPONSORSHIP -N- Sponsorship\n\nSPONSORS_EVENT -1- Sponsorship\nSPONSORS_EVENT -1- Event\n\nTRACKS_ROI -1- Sponsor\nTRACKS_ROI -N- Sponsorship\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the Tech E-Commerce System:\n1. The system shall allow customers to browse the catalog of tech goods and repair services.\n2. The system shall allow customers to add items to a shopping cart.\n3. The system shall allow customers to complete the checkout process to purchase products or services.\n4. The system shall allow customers to review their past orders.\n5. The system shall allow customers to cancel ongoing repair orders.\n6. The system shall allow customers to manage account details, including personal and billing information.\n7. The system shall allow customers to provide feedback on purchased goods and services.\n8. The system shall allow customers to contact support through a helpline for inquiries and assistance.\n",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  billing_details\n  account_status\n}\nentity Product {\n  product_id <<key>>\n  product_name\n  product_description\n  product_price\n  stock_quantity\n  product_status\n}\nentity Service {\n  service_id <<key>>\n  service_name\n  service_description\n  service_price\n  service_status\n  repair_type\n}\nentity ShoppingCart {\n  cart_id <<key>>\n  customer_id <<foreign>>\n  cart_status <<derived>>\n}\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  total_amount\n  order_status\n  order_type\n}\nentity Feedback {\n  feedback_id <<key>>\n  product_id <<foreign>>\n  service_id <<foreign>>\n  feedback_content\n  feedback_date\n}\nrelationship PLACES_ORDER {\n payment_amount\n payment_date\n}\nrelationship INCLUDES_PRODUCT {\n  quantity\n  item_price\n  item_status\n}\nrelationship ADDS_TO_CART {\n}\nrelationship CONTAINS {\n}\nrelationship REQUESTS_SERVICE{\n payment_amount\n payment_date\n}\nrelationship GIVES_FEEDBACK {\n}\nCustomer -1- PLACES_ORDER\nPLACES_ORDER -N- Order\nOrder -1- INCLUDES_PRODUCT\nINCLUDES_PRODUCT -N- Product\nCustomer -1- ADDS_TO_CART\nADDS_TO_CART -1- ShoppingCart\nShoppingCart -1- CONTAINS\nCONTAINS -N- Product\nCustomer -1- REQUESTS_SERVICE\nREQUESTS_SERVICE -N- Service\nCustomer -1- GIVES_FEEDBACK\nGIVES_FEEDBACK -N- Feedback\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for the Clinic Management System:\n1. The system shall allow for patient registration.\n2. The system shall manage patient information, including personal details, medical history, and contact information.\n3. The system shall support appointment scheduling for patients.\n4. The system shall send appointment reminders to patients and staff.\n5. The system shall generate bills based on services provided.\n6. The system shall track payment statuses for each patient.\n7. The system shall facilitate staff collaboration and communication.\n8. The system shall generate reports and analytics based on patient data, appointments, and billing information.\n",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  date_of_birth\n  email\n  password\n  phone\n  address\n  medical_history\n  contact_information\n  patient_status\n}\n\nentity Appointment {\n  appointment_id <<key>>\n  patient_id <<foreign>>\n  staff_id <<foreign>>\n  appointment_date\n  appointment_time\n  appointment_status\n  reminder_status\n}\n\nentity Billing {\n  bill_id <<key>>\n  patient_id <<foreign>>\n  appointment_id <<foreign>>\n  services_provided\n  total_amount\n  payment_status\n  bill_status\n}\n\nentity Staff {\n  staff_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  staff_status\n}\n\nentity Report {\n  report_id <<key>>\n  report_type\n  report_content\n  generated_date\n  report_status <<derived>>\n}\n\nrelationship REGISTERS_PATIENT {\n}\nrelationship SCHEDULES_APPOINTMENT {\n}\nrelationship GENERATES_BILL {\n}\nrelationship COMMUNICATES_WITH {\n  message_content\n  message_date\n  message_status\n}\nrelationship GENERATES_REPORT {\n}\n\nREGISTERS_PATIENT -1- Staff\nREGISTERS_PATIENT -N- Patient\n\nSCHEDULES_APPOINTMENT -1- Patient\nSCHEDULES_APPOINTMENT -N- Appointment\n\nGENERATES_BILL -1- Appointment\nGENERATES_BILL -1- Billing\n\nCOMMUNICATES_WITH -1- Staff\nCOMMUNICATES_WITH -N- Staff\n\nGENERATES_REPORT -1- Billing\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Give ERD. Functional Requirements for LawKeeper - Law Firm Management System:\n1. The system shall allow lawyers to create, update, and manage case files.\n2. The system shall allow lawyers to create and assign tasks related to cases.\n3. The system shall allow lawyers to access and manage legal references and research materials.\n4. The system shall allow lawyers to send case updates to clients.\n5. The system shall help users monitor and manage critical case deadlines.\n6. The system shall track billable hours for each client.\n7. The system shall allow clients and lawyers to review billing details.\n8. The system shall allow clients to receive updates about their cases.\n9. The system shall allow clients to review payment transactions.\n10. The system shall allow clients to file new cases.\n11. The system shall allow clients to share case-related documents.\n",
        "output": "@startchen\n\nentity Lawyer {\n  lawyer_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n}\nentity Client {\n  client_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n}\nentity Case {\n  case_id <<key>>\n  client_id <<foreign>>\n  lawyer_id <<foreign>>\n  case_title\n  case_description\n  case_status\n  case_deadline\n  start_date\n  end_date\n  research_material <<multi>>\n}\nentity Task {\n  task_id <<key>>\n  case_id <<foreign>>\n  task_name\n  task_description\n  due_date\n  assigned_to\n  task_status\n}\nentity Billing {\n  bill_id <<key>>\n  client_id <<foreign>>\n  case_id <<foreign>>\n  hours_billed\n  billing_amount\n  payment_status\n}\nrelationship MANAGES_CASE {\n}\nrelationship HAS_TASK {\n}\nrelationship COMMUNICATES_WITH {\n  communication_date\n  message_content\n  communication_status\n}\nrelationship TRACKS_BILLABLE_HOURS {\n}\nrelationship FILES_CASE {\n}\nLawyer -1- MANAGES_CASE\nMANAGES_CASE -N- Case\nClient -1- FILES_CASE\nFILES_CASE -N- Case\nCase -1- HAS_TASK\nHAS_TASK -N- Task\nLawyer -1- COMMUNICATES_WITH\nCOMMUNICATES_WITH -N- Client\nBilling -1-TRACKS_BILLABLE_HOURS \nTRACKS_BILLABLE_HOURS -N- Case\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for the Online Shopping System:\n1. The system shall allow customers to browse products.\n2. The system shall allow customers to add items to their shopping cart.\n3. The system shall allow customers to complete the checkout process.\n4. The system shall allow customers to create an account.\n5. The system shall allow customers to manage their profile.\n6. The system shall allow customers to view order history.\n7. The system shall support secure payment processing.\n8. The system shall provide order tracking functionality.\n9. The system shall allow administrators to manage product listings.\n10. The system shall allow administrators to view sales reports.\n11. The system shall allow administrators to process customer inquiries.\n12. The system shall integrate with a payment gateway for processing payments.\n",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  account_status\n}\n\nentity Product {\n  product_id <<key>>\n  product_name\n  product_description\n  product_price\n  stock_quantity\n  product_status\n}\n\nentity ShoppingCart {\n  cart_id <<key>>\n  customer_id <<foreign>>\n  cart_status <<derived>>\n}\n\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  total_amount\n  order_status\n}\n\nentity Administrator {\n  admin_id <<key>>\n  name\n  email\n  password\n  phone\n  admin_status\n}\n\nentity Inquiry {\n  inquiry_id <<key>>\n  customer_id <<foreign>>\n  inquiry_date\n  inquiry_content\n  inquiry_status\n}\n\nrelationship ADDS_TO_CART {\n}\nrelationship CONTAINS {\n}\nrelationship PLACES_ORDER {\n}\nrelationship INCLUDES_PRODUCT {\n}\nrelationship MANAGES_PRODUCTS {\n}\nrelationship HANDLES_INQUIRY {\n}\n\nPLACES_ORDER -1- Customer\nPLACES_ORDER -N- Order\n\nINCLUDES_PRODUCT -1- Order\nINCLUDES_PRODUCT -N- Product\n\nADDS_TO_CART -1- Customer\nADDS_TO_CART -1- ShoppingCart\n\nCONTAINS -1- ShoppingCart\nCONTAINS -N- Product\n\nMANAGES_PRODUCTS -1- Administrator\nMANAGES_PRODUCTS -N- Product\n\nHANDLES_INQUIRY -1- Administrator\nHANDLES_INQUIRY -N- Inquiry\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system.\n Functional Requirements for the ATM System:\n1. The system must check the validity of the inserted ATM card.\n2. The system must validate the PIN number entered by the customer.\n3. The system must ensure that no more than $250 is dispensed against any ATM card within a 24-hour period.\n4. The system must be written in C++.\n5. The system must communicate with the bank using 256-bit encryption.\n6. The system must validate an ATM card in three seconds or less.\n7. The system must validate a PIN in three seconds or less.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  phone\n  address\n  customer_status\n}\n\nentity ATMCard {\n  card_id <<key>>\n  customer_id <<foreign>>\n  card_number\n  expiry_date\n  pin <<encrypted>>\n  daily_limit <<derived>>\n  card_status\n}\n\nentity Transaction {\n  transaction_id <<key>>\n  card_id <<foreign>>\n  transaction_date\n  transaction_time\n  transaction_amount\n  transaction_type\n  transaction_status\n}\n\nentity Account {\n  account_id <<key>>\n  customer_id <<foreign>>\n  account_number\n  account_type\n  account_balance\n  account_status\n}\n\nentity ATM {\n  atm_id <<key>>\n  location\n  encryption_method\n  atm_status\n}\n\nrelationship OWNS_CARD {\n}\nrelationship USES_CARD {\n}\nrelationship PERFORMS_TRANSACTION {\n}\nrelationship LINKED_TO {\n}\n\nOWNS_CARD -1- Customer\nOWNS_CARD -N- ATMCard\n\nUSES_CARD -N- Transaction\nUSES_CARD -1- ATMCard\n\nPERFORMS_TRANSACTION -1- ATM\nPERFORMS_TRANSACTION -N- Transaction\n\nLINKED_TO -1- Customer\nLINKED_TO -N- Account\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. \n Functional Requirements for the Hotel Management System:\n1. The system must allow guests to check-in and check-out of the hotel.\n2. The system must provide room booking functionality for guests.\n3. The system must support room service requests for guests.\n4. The system must generate invoices detailing guest stays and charges.\n5. The system must allow staff to manage room availability, view guest information, and process payments.",
        "output": "@startchen\n\nentity Guest {\n  guest_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  guest_status\n}\n\nentity Room {\n  room_id <<key>>\n  room_number\n  room_type\n  room_rate\n  availability_status\n  room_status\n}\n\nentity Booking {\n  booking_id <<key>>\n  guest_id <<foreign>>\n  room_id <<foreign>>\n  check_in_date\n  check_out_date\n  booking_status\n}\n\nentity RoomService {\n  service_id <<key>>\n  booking_id <<foreign>>\n  service_date\n  service_description\n  service_charge\n  service_status\n}\n\nentity Invoice {\n  invoice_id <<key>>\n  booking_id <<foreign>>\n  issue_date\n  total_amount\n  payment_status\n  invoice_status\n}\n\nentity Staff {\n  staff_id <<key>>\n  name\n  role\n  email\n  password\n  phone\n  staff_status\n}\n\nrelationship ALLOCATES_ROOM {\n}\nrelationship RESERVES_ROOM {\n}\nrelationship REQUESTS_SERVICE {\n}\nrelationship GENERATES_INVOICE {\n}\nrelationship MANAGES_BOOKING {\n}\nrelationship MAINTAINS_ROOM {\n}\n\nRESERVES_ROOM -1- Guest\nRESERVES_ROOM -N- Booking\n\nALLOCATES_ROOM -1- Booking\nALLOCATES_ROOM -N- Room\n\nREQUESTS_SERVICE -1- Booking\nREQUESTS_SERVICE -N- RoomService\n\nGENERATES_INVOICE -1- Booking\nGENERATES_INVOICE -1- Invoice\n\nMANAGES_BOOKING -1- Staff\nMANAGES_BOOKING -N- Booking\n\nMAINTAINS_ROOM -1- Staff\nMAINTAINS_ROOM -N- Room\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for the ASU Registration System:\n1. Professors indicate which courses they will teach online.\n2. A course catalog can be printed.\n3. Students must be able to select up to four courses for the upcoming semester online.\n4. The system must enforce a maximum of 10 students and a minimum of 3 students per course.\n5. After registration, the system must send information to the billing system.\n6. Professors must be able to obtain course rosters online.\n7. Students must be able to add or drop classes online.",
        "output": "@startchen\n\nentity Professor {\n  professor_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  professor_status\n}\n\nentity Student {\n  student_id <<key>>\n  name{\n  Fname\n  Lname\n}\n  email\n  password\n  phone\n  address\n  semester\n  credits_attended\n  credits_remaining\n  gpa\n  student_status\n}\n\nentity Course {\n  course_id <<key>>\n  course_name\n  credit_hours\n  course_description\n  max_students <<derived>>\n  min_students <<derived>>\n  course_status\n}\n\nentity Registration {\n  registration_id <<key>>\n  student_id <<foreign>>\n  course_id <<foreign>>\n  registration_date\n  registration_status\n}\n\nentity Billing {\n  billing_id <<key>>\n  student_id <<foreign>>\n  total_amount\n  billing_date\n  payment_status\n  billing_status\n}\n\nrelationship TEACHES_COURSE {\n}\nrelationship REGISTERS_FOR_COURSE {\n}\nrelationship GENERATES_BILLING {\n}\nrelationship RELATES_TO_COURSE {\n}\n\nTEACHES_COURSE -1- Professor\nTEACHES_COURSE -N- Course\n\nREGISTERS_FOR_COURSE -1- Student\nREGISTERS_FOR_COURSE -N- Registration\n\nGENERATES_BILLING -1- Registration\nGENERATES_BILLING -1- Billing\n\nRELATES_TO_COURSE -1- Registration\nRELATES_TO_COURSE -1- Course\n\n@endchen"          
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for the University Information System:\n1. The system must manage details of faculties and institutes, including their names and addresses.\n2. Each faculty is led by a dean, who must have their details managed by the system.\n3. The system must manage employee information, including social security numbers, names, and e-mail addresses.\n4. The system must distinguish between research personnel and administrative personnel.\n5. Research associates must be assigned to one or more institutes, and their field of study must be recorded.\n6. The system must track research projects, including names, starting and end dates, and assigned hours for research associates.\n7. Research associates involved in teaching are considered lecturers, and the system must track course details such as unique ID, course name, and weekly duration in hours.",
        "output": "@startchen\n\nentity Employee {\n  employee_id <<key>>\n  name\n  email\n  password\n  phone\n  employee_status\n}\n\nentity ServEmp {\n  service_role_description\n}\n\nentity AdminEmp {\n  admin_role_description\n}\n\nEmployee ->- o { ServEmp, AdminEmp }\n\nentity Student {\n  student_id <<key>>\n  name\n  date_of_birth\n  email\n  password\n  phone\n  address\n  matriculation_status\n  enrollment_status\n}\n\nentity Course {\n  course_id <<key>>\n  course_name\n  course_description\n  credits\n  semester\n  course_status\n}\n\nentity LectureHall {\n  hall_id <<key>>\n  hall_name\n  capacity\n  resources_available\n  hall_status\n}\n\nentity Certificate {\n  certificate_id <<key>>\n  student_id <<foreign>>\n  issued_by <<foreign>>\n  issue_date\n  certificate_type\n  certificate_status\n}\n\nentity Notification {\n  notification_id <<key>>\n  student_id <<foreign>>\n  notification_date\n  notification_content\n  notification_status\n}\n\nrelationship MANAGES_DATA {\n}\nrelationship ENROLLS_IN {\n  enrollment_date\n  enrollment_status\n}\nrelationship ISSUES_CERTIFICATE {\n}\nrelationship CREATES_COURSE {\n}\nrelationship RESERVES_HALL {\n}\nrelationship SENDS_NOTIFICATION {\n}\n\nMANAGES_DATA -1- ServEmp\nMANAGES_DATA -N- Student\n\nENROLLS_IN -1- Student\nENROLLS_IN -N- Course\n\nISSUES_CERTIFICATE -1- Employee\nISSUES_CERTIFICATE -N- Certificate\n\nCREATES_COURSE -1- AdminEmp\nCREATES_COURSE -N- Course\n\nRESERVES_HALL -1- Course\nRESERVES_HALL -1- LectureHall\n\nSENDS_NOTIFICATION -1- Certificate\nSENDS_NOTIFICATION -1- Notification\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for Legal Eagle Case Management System:\n1. The system must support the creation of legal cases and allow updates to case status.\n2. The system must provide clients with the ability to file cases and receive updates on case status.\n3. The system must generate reports and analytics based on case data for legal professionals.\n4. The system must allow legal research to be performed within the system.\n5. The system must support document management for legal cases, allowing legal professionals to store and access case-related documents.\n6. The system must integrate voice commands for key functions such as case creation, updates, filing, and notifications.",
        "output": "@startchen\n\nentity LegalProfessional {\n  professional_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n  role\n}\nentity Client {\n  client_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n}\nentity Case {\n  case_id <<key>>\n  client_id <<foreign>>\n  assigned_to <<foreign>>\n  case_title\n  case_description\n  case_status\n  creation_date\n  last_update\n  documents <<multi>>\n  updates <<multi>>\n}\nentity LegalResearch {\n  research_id <<key>>\n  case_id <<foreign>>\n  research_topic\n  findings\n  research_date\n  research_status\n}\nrelationship MANAGES_CASE {\n}\nrelationship FILES_CASE {\n}\nrelationship COMMUNICATES_WITH {\n  communication_date\n  communication_type\n  message_content\n  communication_status\n}\nrelationship PERFORMS_RESEARCH {\n}\nLegalProfessional -1- MANAGES_CASE\nMANAGES_CASE -N- Case\nClient -1- FILES_CASE\nFILES_CASE -N- Case\nLegalProfessional -1- COMMUNICATES_WITH\nCOMMUNICATES_WITH -N- Client\nLegalProfessional -1- PERFORMS_RESEARCH\nPERFORMS_RESEARCH -N- LegalResearch\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for TimeCraft Parcel Management System:\n1. The system must allow users (senders and receivers) to track parcels in real-time.\n2. The system must provide users with the ability to report rough handling issues.\n3. Delivery companies must be able to update the status of parcels in transit.\n4. Users must receive real-time updates about parcel status and delivery.\n5. The system must allow senders to schedule parcel pickups.\n6. Delivery companies must be able to manage parcel delivery routes efficiently.\n7. Delivery companies must have control over various delivery options.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  customer_status\n}\n\nentity Parcel {\n  parcel_id <<key>>\n  sender_id <<foreign>>\n  receiver_id <<foreign>>\n  weight\n  dimensions\n  status\n  tracking_number\n  dispatch_date\n  delivery_date\n  parcel_status <<derived>>\n}\n\nentity DeliveryCompany {\n  company_id <<key>>\n  company_name\n  contact_number\n  company_status\n}\n\nentity DeliveryAgent {\n  agent_id <<key>>\n  company_id <<foreign>>\n  name\n  email\n  password\n  phone\n  agent_status\n}\n\nentity HandlingIssue {\n  issue_id <<key>>\n  parcel_id <<foreign>>\n  reported_by\n  issue_description\n  issue_date\n  resolution_status\n}\n\nentity ControlCenter {\n  center_id <<key>>\n  location\n  capacity <<derived>>\n  resources_available\n  center_status\n}\n\nrelationship SENDS_PARCEL {\n  location\n  status\n  timestamp\n}\nrelationship RECEIVES_PARCEL {\n  location\n  status\n  timestamp\n}\nrelationship MANAGES_PARCEL {\n}\nrelationship HAS_AGENT {\n}\nrelationship ASSIGNED_TO {\n}\nrelationship REPORTS_ISSUE {\n}\nrelationship LOCATED_AT {\n}\n\nSENDS_PARCEL -1- Customer\nSENDS_PARCEL -N- Parcel\n\nRECEIVES_PARCEL -1- Customer\nRECEIVES_PARCEL -N- Parcel\n\nMANAGES_PARCEL -1- DeliveryCompany\nMANAGES_PARCEL -N- Parcel\n\nHAS_AGENT -1- DeliveryCompany\nHAS_AGENT -N- DeliveryAgent\n\nASSIGNED_TO -1- DeliveryAgent\nASSIGNED_TO -N- Parcel\n\nREPORTS_ISSUE -1- Customer\nREPORTS_ISSUE -N- HandlingIssue\n\nLOCATED_AT -N- Parcel\nLOCATED_AT -1- ControlCenter\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for Employee Management System (EMS):\n1. The system must allow HR teams to manage employee information.\n2. The system must track employee attendance in real-time.\n3. The system must support salary management functionality.\n4. The system must enable HR teams to generate automated reports.\n5. The system must allow employees to view their attendance records.",
        "output": "@startchen\n\nentity Employee {\n  employee_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  department_id <<foreign>>\n  designation\n  join_date\n  employee_status\n}\n\nentity Department {\n  department_id <<key>>\n  department_name\n  manager_id <<foreign>>\n  department_status\n}\n\nentity Attendance {\n  attendance_id <<key>>\n  employee_id <<foreign>>\n  attendance_date\n  check_in_time\n  check_out_time\n  attendance_status\n}\n\nentity Salary {\n  salary_id <<key>>\n  employee_id <<foreign>>\n  basic_pay\n  bonuses\n  deductions\n  net_pay <<derived>>\n  payment_date\n  salary_status\n}\n\nentity Report {\n  report_id <<key>>\n  generated_by <<foreign>>\n  report_type\n  report_date\n  report_content\n  report_status\n}\n\nrelationship BELONGS_TO {\n}\nrelationship RECORDS_ATTENDANCE {\n}\nrelationship HAS_SALARY {\n}\nrelationship CREATES_REPORT {\n}\n\nBELONGS_TO -N- Employee\nBELONGS_TO -1- Department\n\nRECORDS_ATTENDANCE -1- Employee\nRECORDS_ATTENDANCE -N- Attendance\n\nHAS_SALARY -1- Employee\nHAS_SALARY -1- Salary\n\nCREATES_REPORT -1- Department\nCREATES_REPORT -N- Report\n\n@endchen" 
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for RoboCop Crime Information System:\n1. The system must allow law enforcement agents to manage user accounts.\n2. The system must provide crime-related notifications to users.\n3. The system must handle FIR (First Information Reports).\n4. The system must provide information about the nearest police station.\n5. The system must display crime statistics.\n6. The system must provide access to a comprehensive crime database.\n7. The system must manage criminal records.\n8. The system must allow searching for criminal records.\n9. The system must support community safety forums for public participation.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  user_type\n}\nentity FIR {\n  fir_id <<key>>\n  user_id <<foreign>>\n  police_station_id <<foreign>>\n  crime_date\n  crime_location\n  crime_type\n  fir_status\n  fir_details\n}\nentity PoliceStation {\n  station_id <<key>>\n  station_name\n  station_location\n  contact_number\n  station_status\n  community_forum <<multi>>\n}\nentity Crime {\n  crime_id <<key>>\n  fir_id <<foreign>>\n  crime_description\n  crime_date\n  crime_type\n  crime_status\n}\nentity Criminal {\n  criminal_id <<key>>\n  name\n  alias\n  date_of_birth\n  crime_history <<multi>>\n  criminal_status\n}\nrelationship CREATES_FIR {\n}\nrelationship ASSIGNED_TO {\n}\nrelationship DOCUMENTS_CRIME {\n}\nrelationship MANAGES_RECORD {\n}\nUser -1- CREATES_FIR\nCREATES_FIR -N- FIR\nPoliceStation -1- ASSIGNED_TO\nASSIGNED_TO -N- FIR\nFIR -1- DOCUMENTS_CRIME\nDOCUMENTS_CRIME -N- Crime\nPoliceStation -1- MANAGES_RECORD\nMANAGES_RECORD -N- Criminal\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for Anywhere Grocery Store Management System:\n1. The system must allow store managers to manage inventory effectively.\n2. The system must support sales processing at the point of sale.\n3. The system must provide supplier management tools for store managers.\n4. The system must handle customer service requests.\n5. The system must support online shopping functionality for customers.\n6. The system must allow customers to track their orders.\n7. The system must enable store managers to view sales reports.\n8. The system must allow suppliers to provide stock to the store.\n9. The system must handle order delivery processes.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n}\nentity StoreManager {\n  manager_id <<key>>\n  name\n  email\n  password\n  contact_info\n  address\n}\nentity Product {\n  product_id <<key>>\n  product_name\n  product_description\n  category\n  price\n  stock_quantity\n  reorder_level\n  product_status\n  supplier_name\n}\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  total_amount\n  order_status\n}\nentity Inventory {\n  inventory_id <<key>>\n  product_id <<foreign>>\n  store_manager_id <<foreign>>\n  stock_level\n  last_updated\n  inventory_status <<derived>>\n}\nentity Sale {\n  sale_id <<key>>\n  customer_id <<foreign>>\n  sale_date\n  total_amount\n  sale_status\n}\nentity Payment {\n  payment_id <<key>>\n  order_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_method\n  payment_status\n}\nrelationship PLACES_ORDER {\n  delivery_address\n  delivery_date\n  delivery_status\n}\nrelationship INCLUDES_PRODUCT {\n}\nrelationship MANAGES_INVENTORY {\n}\nrelationship HAS_PAYMENT {\n}\nrelationship RECORDS_SALE {\n}\nrelationship MANAGES_PRODUCT {\n}\nCustomer -1- PLACES_ORDER\nPLACES_ORDER -N- Order\nOrder -1- INCLUDES_PRODUCT\nINCLUDES_PRODUCT -N- Product\nStoreManager -1- MANAGES_INVENTORY\nMANAGES_INVENTORY -1- Inventory\nOrder -1- HAS_PAYMENT\nHAS_PAYMENT -1- Payment\nPayment -1- RECORDS_SALE\nRECORDS_SALE -1- Sale\nInventory -1- MANAGES_PRODUCT\nMANAGES_PRODUCT -N- Product\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for Gym Management System:\n1. The system must allow members to register.\n2. The system must provide members with access to class schedules.\n3. The system must track attendance using biometric or card-based methods.\n4. The system must support payment processing for members.\n5. The system must enable gym administrators to manage inventory in real-time.\n6. The system must allow communication between members and staff.\n7. The system must allow trainers to access class assignments.\n8. The system must facilitate automated payment processing.\n9. The system must provide real-time updates on inventory management.",
        "output": "@startchen\n\nentity Member {\n  member_id <<key>>\n  name\n  email\n  phone\n  address\n  membership_type\n  membership_status\n  join_date\n}\n\nentity Trainer {\n  trainer_id <<key>>\n  name\n  email\n  phone\n  specialization\n  trainer_status\n}\n\nentity Class {\n  class_id <<key>>\n  class_name\n  schedule\n  duration\n  capacity\n  class_status\n}\n\nentity Attendance {\n  attendance_id <<key>>\n  member_id <<foreign>>\n  class_id <<foreign>>\n  attendance_date\n  check_in_time\n  attendance_status\n}\n\nentity Payment {\n  payment_id <<key>>\n  member_id <<foreign>>\n  payment_date\n  amount\n  payment_method\n  payment_status\n}\n\nrelationship REGISTERS_FOR_CLASS {\n}\nrelationship ASSIGNED_TO_CLASS {\n}\nrelationship TRACKS_ATTENDANCE {\n}\nrelationship PROCESSES_PAYMENT {\n}\nrelationship COMMUNICATES_WITH {\n  message_content\n  message_date\n  communication_status\n}\n\nREGISTERS_FOR_CLASS -1- Member\nREGISTERS_FOR_CLASS -N- Class\n\nASSIGNED_TO_CLASS -1- Trainer\nASSIGNED_TO_CLASS -N- Class\n\nTRACKS_ATTENDANCE -1- Member\nTRACKS_ATTENDANCE -N- Attendance\n\nPROCESSES_PAYMENT -1- Member\nPROCESSES_PAYMENT -N- Payment\n\nCOMMUNICATES_WITH -N- Member\nCOMMUNICATES_WITH -N- Trainer\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for Time Table Generating Management System:\n1. The system must allow administrators to enroll students.\n2. The system must enable administrators to allocate courses to students.\n3. The system must enable administrators to allocate courses to faculty members.\n4. The system must generate optimized timetables automatically.\n5. The system must allocate lecture halls based on the generated timetable.\n6. The system must generate reports detailing courses and schedules for both students and faculty.\n7. The system must allow faculty members to input their time preferences.\n8. The system must allow students to view their course schedules.",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  enrollment_date\n  student_status\n}\nentity Faculty {\n  faculty_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  preferred_time_slots <<multi>>\n  faculty_status\n}\nentity Course {\n  course_id <<key>>\n  course_name\n  course_description\n  department\n  credits\n}\nentity LectureHall {\n  hall_id <<key>>\n  hall_name\n  capacity\n  resources_available\n  hall_status\n}\nentity Timetable {\n  timetable_id <<key>>\n  generated_date\n  semester\n  timetable_status\n}\nentity Lecture {\n  lecture_id <<key>>\n  timetable_id <<foreign>>\n  course_id <<foreign>>\n  faculty_id <<foreign>>\n  hall_id <<foreign>>\n  lecture_date\n  lecture_time\n  duration\n  lecture_status\n}\nrelationship ENROLLS_IN {\n}\nrelationship TEACHES_COURSE {\n}\nrelationship HAS_LECTURE {\n}\nrelationship ALLOCATES_HALL {\n}\nrelationship INCLUDES_LECTURE {\n}\nStudent -1- ENROLLS_IN\nENROLLS_IN -N- Course\nFaculty -1- TEACHES_COURSE\nTEACHES_COURSE -N- Course\nCourse -1- HAS_LECTURE\nHAS_LECTURE -N- Lecture\nLectureHall -1- ALLOCATES_HALL\nALLOCATES_HALL -1- Lecture\nTimetable -1- INCLUDES_LECTURE\nINCLUDES_LECTURE -N- Lecture\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for Cricket Stadium Management System:\n1. The system must allow fans to buy tickets.\n2. The system must provide access to event information for fans.\n3. The system must send updates about events to fans.\n4. The system must enable sponsors to explore sponsorship opportunities.\n5. The system must support sponsors in engaging with the cricket community.",
        "output": "@startchen\n\nentity Fan {\n  fan_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  fan_status\n}\n\nentity Event {\n  event_id <<key>>\n  event_name\n  event_date\n  match_schedule\n  team_lineups <<multi>>\n  event_status\n}\n\nentity Ticket {\n  ticket_id <<key>>\n  event_id <<foreign>>\n  seat_number\n  price\n  availability_status\n  purchase_status\n}\n\nentity Sponsor {\n  sponsor_id <<key>>\n  name\n  email\n  phone\n  sponsorship_details\n  sponsor_status\n}\n\nentity Sponsorship {\n  sponsorship_id <<key>>\n  sponsor_id <<foreign>>\n  event_id <<foreign>>\n  sponsorship_amount\n  ROI_metrics\n  sponsorship_status\n}\n\nrelationship BOOKS_TICKET {\n  booking_date\n  payment_status\n}\nrelationship HAS_TICKET {\n}\nrelationship PROVIDES_SPONSORSHIP {\n}\nrelationship SPONSORS_EVENT {\n}\nrelationship TRACKS_ROI {\n}\n\nBOOKS_TICKET -1- Fan\nBOOKS_TICKET -N- Ticket\n\nHAS_TICKET -1- Event\nHAS_TICKET -N- Ticket\n\nPROVIDES_SPONSORSHIP -1- Sponsor\nPROVIDES_SPONSORSHIP -N- Sponsorship\n\nSPONSORS_EVENT -1- Sponsorship\nSPONSORS_EVENT -1- Event\n\nTRACKS_ROI -1- Sponsor\nTRACKS_ROI -N- Sponsorship\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for E-Commerce System:\n1. The system must allow customers to log in.\n2. The system must enable customers to purchase tech goods.\n3. The system must enable customers to purchase tech services.\n4. The system must allow customers to track orders.\n5. The system must allow customers to provide feedback.\n6. The system must provide a customer helpline for assistance.\n7. The system must provide a catalog of products for browsing.",
        "output": "@startchen\n\nentity Customer {\n  customer_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n  billing_details\n  account_status\n}\nentity Product {\n  product_id <<key>>\n  product_name\n  product_description\n  product_price\n  stock_quantity\n  product_status\n}\nentity Service {\n  service_id <<key>>\n  service_name\n  service_description\n  service_price\n  service_status\n  repair_type\n}\nentity ShoppingCart {\n  cart_id <<key>>\n  customer_id <<foreign>>\n  cart_status <<derived>>\n}\nentity Order {\n  order_id <<key>>\n  customer_id <<foreign>>\n  order_date\n  total_amount\n  order_status\n  order_type\n}\nentity Feedback {\n  feedback_id <<key>>\n  product_id <<foreign>>\n  service_id <<foreign>>\n  feedback_content\n  feedback_date\n}\nrelationship PLACES_ORDER {\n payment_amount\n payment_date\n}\nrelationship INCLUDES_PRODUCT {\n  quantity\n  item_price\n  item_status\n}\nrelationship ADDS_TO_CART {\n}\nrelationship CONTAINS {\n}\nrelationship REQUESTS_SERVICE{\n payment_amount\n payment_date\n}\nrelationship GIVES_FEEDBACK {\n}\nCustomer -1- PLACES_ORDER\nPLACES_ORDER -N- Order\nOrder -1- INCLUDES_PRODUCT\nINCLUDES_PRODUCT -N- Product\nCustomer -1- ADDS_TO_CART\nADDS_TO_CART -1- ShoppingCart\nShoppingCart -1- CONTAINS\nCONTAINS -N- Product\nCustomer -1- REQUESTS_SERVICE\nREQUESTS_SERVICE -N- Service\nCustomer -1- GIVES_FEEDBACK\nGIVES_FEEDBACK -N- Feedback\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for Clinisync System:\n1. The system must allow patients to register.\n2. The system must enable staff to manage patient information.\n3. The system must allow patients to schedule appointments.\n4. The system must handle billing operations.\n5. The system must generate reports for the clinic.\n6. The system must support managing invoicing for patient transactions.",
        "output": "@startchen\n\nentity Patient {\n  patient_id <<key>>\n  name\n  date_of_birth\n  email\n  password\n  phone\n  address\n  medical_history\n  contact_information\n  patient_status\n}\n\nentity Appointment {\n  appointment_id <<key>>\n  patient_id <<foreign>>\n  staff_id <<foreign>>\n  appointment_date\n  appointment_time\n  appointment_status\n  reminder_status\n}\n\nentity Billing {\n  bill_id <<key>>\n  patient_id <<foreign>>\n  appointment_id <<foreign>>\n  services_provided\n  total_amount\n  payment_status\n  bill_status\n}\n\nentity Staff {\n  staff_id <<key>>\n  name\n  email\n  password\n  phone\n  department\n  staff_status\n}\n\nentity Report {\n  report_id <<key>>\n  report_type\n  report_content\n  generated_date\n  report_status <<derived>>\n}\n\nrelationship REGISTERS_PATIENT {\n}\nrelationship SCHEDULES_APPOINTMENT {\n}\nrelationship GENERATES_BILL {\n}\nrelationship COMMUNICATES_WITH {\n  message_content\n  message_date\n  message_status\n}\nrelationship GENERATES_REPORT {\n}\n\nREGISTERS_PATIENT -1- Staff\nREGISTERS_PATIENT -N- Patient\n\nSCHEDULES_APPOINTMENT -1- Patient\nSCHEDULES_APPOINTMENT -N- Appointment\n\nGENERATES_BILL -1- Appointment\nGENERATES_BILL -1- Billing\n\nCOMMUNICATES_WITH -1- Staff\nCOMMUNICATES_WITH -N- Staff\n\nGENERATES_REPORT -1- Billing\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Given the requirements, generate a ERD for this system. Functional Requirements for LawKeeper System:\n1. The system must allow lawyers to access and manage client files.\n2. The system must enable lawyers to track billable hours.\n3. The system must allow lawyers to organize case files.\n4. The system must support managing appointments for lawyers.\n5. The system must track case progress for clients and lawyers.\n6. The system must provide clients with updates on case progress.\n7. The system must allow clients to access essential case documents.\n8. The system must allow clients to view billable hours.\n9. The system must support clients in conducting transactions.\n10. The system must process payments through an external payment gateway.",
        "output": "@startchen\n\nentity Lawyer {\n  lawyer_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n}\nentity Client {\n  client_id <<key>>\n  name\n  email\n  password\n  phone\n  address\n}\nentity Case {\n  case_id <<key>>\n  client_id <<foreign>>\n  lawyer_id <<foreign>>\n  case_title\n  case_description\n  case_status\n  case_deadline\n  start_date\n  end_date\n  research_material <<multi>>\n}\nentity Task {\n  task_id <<key>>\n  case_id <<foreign>>\n  task_name\n  task_description\n  due_date\n  assigned_to\n  task_status\n}\nentity Billing {\n  bill_id <<key>>\n  client_id <<foreign>>\n  case_id <<foreign>>\n  hours_billed\n  billing_amount\n  payment_status\n}\nrelationship MANAGES_CASE {\n}\nrelationship HAS_TASK {\n}\nrelationship COMMUNICATES_WITH {\n  communication_date\n  message_content\n  communication_status\n}\nrelationship TRACKS_BILLABLE_HOURS {\n}\nrelationship FILES_CASE {\n}\nLawyer -1- MANAGES_CASE\nMANAGES_CASE -N- Case\nClient -1- FILES_CASE\nFILES_CASE -N- Case\nCase -1- HAS_TASK\nHAS_TASK -N- Task\nLawyer -1- COMMUNICATES_WITH\nCOMMUNICATES_WITH -N- Client\nBilling -1-TRACKS_BILLABLE_HOURS \nTRACKS_BILLABLE_HOURS -N- Case\n\n@endchen"
    },
    {
        "input": "Generate a ERD. Functional Requirements for Real Estate Management System (REMS):\n1. The system must allow property managers to manage property listings.\n2. The system must enable property managers to track properties.\n3. The system must handle property sales for property managers.\n4. The system must handle property rentals for property managers.\n5. The system must handle property leasing for property managers.\n6. The system must generate compliance reports.\n7. The system must analyze market data for informed decisions.\n8. The system must allow clients to perform transactions related to properties.\n9. The system must allow clients to view property details.\n10. The system must integrate with an external financial system for transaction processing.",
        "output": "@startchen\n\nentity Property {\n  property_id <<key>>\n  property_name\n  property_type\n  location\n  size\n  price\n  availability_status\n  property_status\n}\n\nentity Client {\n  client_id <<key>>\n  name\n  email\n  phone\n  address\n  preferences <<multi>>\n  client_status\n}\n\nentity Transaction {\n  transaction_id <<key>>\n  property_id <<foreign>>\n  client_id <<foreign>>\n  transaction_date\n  transaction_type\n  amount\n  payment_method\n  transaction_status\n}\n\nentity LeaseAgreement {\n  lease_id <<key>>\n  property_id <<foreign>>\n  client_id <<foreign>>\n  lease_start_date\n  lease_end_date\n  terms_and_conditions\n  lease_status\n}\n\nentity PropertyManager {\n  manager_id <<key>>\n  name\n  email\n  phone\n  role\n  manager_status\n}\n\nentity Report {\n  report_id <<key>>\n  generated_by <<foreign>>\n  report_type\n  report_date\n  report_content\n  report_status\n}\n\nrelationship LISTS_PROPERTY {\n}\nrelationship BUYS_PROPERTY {\n}\nrelationship HAS_TRANSACTION {\n}\nrelationship LEASES_PROPERTY {\n}\nrelationship GENERATES_REPORT {\n}\n\nLISTS_PROPERTY -1- PropertyManager\nLISTS_PROPERTY -N- Property\n\nBUYS_PROPERTY -1- Client\nBUYS_PROPERTY -N- Property\n\nHAS_TRANSACTION -1- Property\nHAS_TRANSACTION -N- Transaction\n\nLEASES_PROPERTY -1- Client\nLEASES_PROPERTY -N- LeaseAgreement\n\nGENERATES_REPORT -1- PropertyManager\nGENERATES_REPORT -N- Report\n\n@endchen"
    },
    {
        "input": "Generate a ERD. Functional Requirements for EventEase Management System:\n1. The system must allow attendees to register for events.\n2. The system must enable attendees to purchase tickets online.\n3. The system must provide event organizers with an event dashboard.\n4. The system must send event updates to attendees.\n5. The system must provide performance metrics for organizers to evaluate event success.\n6. The system must manage event logistics for organizers (e.g., speakers, venues, attendees).\n7. The system must monitor event progress.\n8. The system must allow sponsors to promote branding during events.\n9. The system must ensure secure payment processing through an external payment system.",
        "output": "@startchen\n\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  organization_name\n}\nentity Event {\n  event_id <<key>>\n  organizer_id <<foreign>>\n  event_name\n  event_description\n  event_date\n  venue_id <<foreign>>\n  event_status\n  speakers <<multi>>\n}\nentity Venue {\n  venue_id <<key>>\n  venue_name\n  location\n  capacity\n  venue_status\n}\nentity Ticket {\n  ticket_id <<key>>\n  event_id <<foreign>>\n  ticket_type\n  price\n  availability_status\n  ticket_status\n}\nentity Attendee {\n  attendee_id <<key>>\n  name\n  email\n  phone\n  attendee_status\n}\nentity Payment {\n  payment_id <<key>>\n  ticket_id <<foreign>>\n  attendee_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_method\n  payment_status\n}\nrelationship ORGANIZES_EVENT {\n}\nrelationship HOSTS_EVENT {\n}\nrelationship SELLS_TICKET {\n  total_tickets_sold\n  total_revenue\n  demographics_data <<multi>>\n}\nrelationship PURCHASES_TICKET {\n}\nrelationship HAS_PAYMENT {\n}\nOrganizer -1- ORGANIZES_EVENT\nORGANIZES_EVENT -N- Event\nVenue -1- HOSTS_EVENT\nHOSTS_EVENT -N- Event\nEvent -1- SELLS_TICKET\nSELLS_TICKET -N- Ticket\nAttendee -1- PURCHASES_TICKET\nPURCHASES_TICKET -N- Ticket\nTicket -1- HAS_PAYMENT \nHAS_PAYMENT -1- Payment\n\n@endchen"
    },
    {
        "input": "Generate a ERD. Functional Requirements for EventEase Management System:\n1. The system must allow attendees to register for events.\n2. The system must enable attendees to purchase tickets.\n3. The system must provide organizers with a centralized event dashboard.\n4. The system must send event updates to attendees.\n5. The system must display performance metrics for event organizers.\n6. The system must allow organizers to manage event logistics.\n7. The system must monitor the progress of events.\n8. The system must allow sponsors to promote their branding during events.\n9. The system must integrate with a payment system to handle transactions securely.",
        "output":  "@startchen\n\nentity Organizer {\n  organizer_id <<key>>\n  name\n  email\n  password\n  phone\n  organization_name\n}\nentity Event {\n  event_id <<key>>\n  organizer_id <<foreign>>\n  event_name\n  event_description\n  event_date\n  venue_name\n  venue_location\n  speakers <<multi>>\n}\nentity Ticket {\n  ticket_id <<key>>\n  event_id <<foreign>>\n  ticket_type\n  price\n  availability_status\n  ticket_status\n}\nentity Attendee {\n  attendee_id <<key>>\n  name\n  email\n  phone\n  attendee_status\n}\nentity Payment {\n  payment_id <<key>>\n  ticket_id <<foreign>>\n  attendee_id <<foreign>>\n  payment_date\n  payment_amount\n  payment_method\n  payment_status\n}\nrelationship ORGANIZES_EVENT {\n}\nrelationship SELLS_TICKET {\n  total_tickets_sold\n  total_revenue\n  demographics_data <<multi>>\n}\nrelationship PURCHASES_TICKET {\n}\nrelationship HAS_PAYMENT {\n}\nOrganizer -1- ORGANIZES_EVENT\nORGANIZES_EVENT -N- Event\nEvent -1- SELLS_TICKET\nSELLS_TICKET -N- Ticket\nAttendee -1- PURCHASES_TICKET\nPURCHASES_TICKET -N- Ticket\nTicket -1- HAS_PAYMENT \nHAS_PAYMENT -1- Payment\n\n@endchen"
    },
    {
        "input": "Generate a ERD. Functional Requirements for Online Learning Management System (OLMS):\n1. The system must allow instructors to create courses.\n2. The system must allow instructors to enroll students.\n3. The system must allow instructors to assess students.\n4. The system must allow instructors to track student progress.\n5. The system must provide communication tools like chat for both instructors and students.\n6. The system must allow instructors to deliver course content.\n7. The system must allow students to take assessments.",
        "output": "@startchen\n\nentity Student {\n  student_id <<key>>\n  name\n  email\n  password\n  phone\n  enrollment_date\n  student_status\n}\nentity Instructor {\n  instructor_id <<key>>\n  name\n  email\n  password\n  phone\n  specialization\n  instructor_status\n}\nentity Course {\n  course_id <<key>>\n  course_name\n  course_description\n  credit_hours\n  start_date\n  end_date\n  course_status\n  course_content <<multi>>\n}\nentity Assessment {\n  assessment_id <<key>>\n  course_id <<foreign>>\n  assessment_name\n  assessment_type\n  total_marks\n  assessment_status\n}\nrelationship TEACHES_COURSE {\n}\nrelationship ENROLLS_IN {\n  enrollment_date\n  enrollment_status\n}\nrelationship HAS_ASSESSMENT {\n}\nrelationship SUBMITS {\n  submission_date\n  marks_obtained\n  submission_status\n}\nrelationship COMMUNICATES_WITH {\n  message_content\n  message_date\n  communication_status\n}\nInstructor -1- TEACHES_COURSE\nTEACHES_COURSE -N- Course\nStudent -1- ENROLLS_IN\nENROLLS_IN -N- Course\nCourse -1- HAS_ASSESSMENT\nHAS_ASSESSMENT -N- Assessment\nStudent -1- SUBMITS\nSUBMITS -N- Assessment\nInstructor -N- COMMUNICATES_WITH\nCOMMUNICATES_WITH -N- Student\n\n@endchen"
    },
    {
        "input": "Generate a ERD. Functional Requirements for Crypto Exchange System:\n1. The system must allow users to exchange cryptocurrencies.\n2. The system must enable users to perform trading.\n3. The system must allow users to view market trends.\n4. The system must update market trends using external market data from sources like Binance and Kraken.",
        "output": "@startchen\n\nentity User {\n  user_id <<key>>\n  name\n  email\n  password\n  phone\n  registration_date\n  account_status\n}\nentity Wallet {\n  wallet_id <<key>>\n  user_id <<foreign>>\n  balance <<multi>>\n  wallet_status\n}\nentity Currency {\n  currency_id <<key>>\n  currency_name\n  symbol\n  currency_type\n  currency_status\n}\nentity Trade {\n  trade_id <<key>>\n  user_id <<foreign>>\n  trade_type\n  currency_id <<foreign>>\n  amount\n  trade_date\n  trade_status\n}\nentity ExchangeRate {\n  rate_id <<key>>\n  currency_from_id <<foreign>>\n  currency_to_id <<foreign>>\n  exchange_rate\n  rate_date\n  rate_status\n}\nentity MarketTrend {\n  trend_id <<key>>\n  currency_id <<foreign>>\n  trend_date\n  price\n  volume\n  source_name\n  source_url\n  trend_status\n}\nrelationship OWNS_WALLET {\n}\nrelationship PERFORMS_TRADE {\n}\nrelationship CONTAINS_CURRENCY {\n}\nrelationship UPDATES_RATE {\n}\nrelationship SETS_TRENDS {\n}\nUser -1- OWNS_WALLET\nOWNS_WALLET -1- Wallet\nUser -1- PERFORMS_TRADE\nPERFORMS_TRADE -N- Trade\nWallet -1- CONTAINS_CURRENCY\nCONTAINS_CURRENCY -N- Currency\nExchangeRate -1- UPDATES_RATE \nUPDATES_RATE -N- Currency\nCurrency -1- SETS_TRENDS\nSETS_TRENDS -N- MarketTrend\n\n@endchen"
    },
    {
        "input": "Create an ER diagram for this system. The system must organize data into departments, each having a unique name, a unique number, and a designated employee as the manager. The system must record the start date of the manager's tenure. Departments may have multiple locations and control projects, each with a unique name, unique number, and location. The system should store employee details, including name, Social Security number, address, salary, gender, and birth date. Each employee must be assigned to one department but may work on multiple projects, regardless of departmental control. The system must track the number of hours an employee works on each project weekly and maintain information about each employee's direct supervisor. Additionally, the system should manage dependent details for employees, including each dependent's first name, gender, birth date, and relationship to the employee for insurance purposes.",
        "output": "@startchen\nentity Department {\n    name <<key>>\n    number\n    start_date\n    locations\n}\n\nentity Employee {\n    ssn <<key>>\n    name\n    address\n    salary\n    sex\n    birth_date\n    supervisor_ssn <<FK>>\n    department_number <<FK>>\n}\n\nentity Project {\n    name <<key>>\n    number\n    location\n    department_number\n}\n\nentity Dependent {\n    id <<key>>\n    first_name\n    sex\n    birth_date\n    relationship\n    employee_ssn <<FK>>\n}\n\nentity Supervisor {\n    ssn <<key>>\n    name\n}\n\nrelationship manages {\n}\n\nrelationship controls {\n}\n\nrelationship works_on {\n}\n\nrelationship has {\n}\n\nrelationship supervises {\n}\n\n' Relationships\nDepartment -1- manages\nmanages -N- Employee\nDepartment -1- controls\ncontrols -N- Project\nEmployee -1- works_on\nworks_on -N- Project\nEmployee -1- has\nhas -N- Dependent\nSupervisor -1- supervises\nsupervises -N- Employee\n\n@endchen"
    },
    {
        "input": "Give me an ER diagram for this system. The system must track student enrollments, grades, and academic details for a university. It must include entities and relationships for the following: COLLEGE, which represents the university's organizational structure. Each college should have a unique name, main office location, phone number, and a designated faculty member as the dean. Colleges must manage multiple academic departments. DEPARTMENT should have a unique name, code, main office location, phone number, and a faculty member as chair, with a recorded start date of tenure. Departments must offer courses and manage instructors and students. COURSE entities should include a unique name, code, academic level, credit hours, and a description, and they must be managed by departments. INSTRUCTOR records must include a unique identifier, name, office location, phone number, rank, and their primary department assignment. STUDENT entities must have a unique identifier, name (first, middle, last), address, phone number, major code, and date of birth. Each student must be associated with one primary department, with grades tracked for completed sections. SECTION entities must represent course offerings, including a unique identifier, section number, semester, year, classroom details, and schedule. Each section must be linked to one course and one instructor and have a minimum of five students. The system must support many-to-many relationships between STUDENT and SECTION, with grades recorded for each student-section relationship. Historical and current section data must be stored for comprehensive academic tracking.",
        "output": "@startchen\nentity College {\n    CName <<key>>\n    COffice\n    CPhone\n}\n\nentity Faculty {\n    FacultyId <<key>>\n    FacultyName\n}\n\nentity Dean {\n    Id <<key>>\n    Name\n    FacultyId <<FK>>\n}\n\nentity Department {\n    DName <<key>>\n    DCode <<key>>\n    DOffice\n    DPhone\n    CStartDate\n    DeanId <<FK>>\n}\n\nentity Course {\n    CoName <<key>>\n    CCode <<key>>\n    Level\n    Credits\n    CDesc\n}\n\nentity Instructor {\n    Id <<key>>\n    IName\n    IOffice\n    IPhone\n    Rank\n    DepartmentCode <<FK>>\n}\n\nentity Student {\n    Sid <<key>>\n    Name {\n        FName\n        MName\n        LName\n    }\n    Addr\n    Phone\n    Major\n    DoB\n    DepartmentCode <<FK>>\n}\n\nentity Section {\n    SecId <<key>>\n    SecNo\n    Sem\n    Year\n    CRoom\n    DaysTime\n    grade\n}\n\nrelationship administers {\n}\n\nrelationship offers {\n}\n\nrelationship teaches {\n}\n\nrelationship employs {\n}\n\nrelationship enrolls {\n}\n\nrelationship has {\n}\n\nrelationship supervises {\n}\n\n' Relationships\nCollege -1- administers\nadministers -N- Department\nDepartment -1- employs\nemploys -N- Faculty\nDepartment -1- has\nhas -N- Course\nDepartment -1- employs\nemploys -N- Instructor\nInstructor -1- teaches\nteaches -N- Section\nCourse -1- has\nhas -N- Section\nStudent -N- enrolls\nenrolls -N- Section\nDean -1- supervises\nsupervises -N- Department\n\n@endchen"
    },
    {
        "input": "Design an ER schema for keeping track of votes in the U.S. House of Representatives during the current two-year congressional session. The database must maintain information about each U.S. STATE, including its name and region (e.g., 'Northeast', 'Midwest', 'Southeast', 'Southwest', 'West'). Each CONGRESS_PERSON must be described by their name, the district they represent, the start date of their tenure, and their political party affiliation ('Republican', 'Democrat', 'Independent', 'Other'). The database must record information about each BILL, including its name, the date of the vote, its outcome ('Yes' or 'No'), and the sponsor(s) of the bill (the congressperson(s) who proposed it). Additionally, the database must track how each congressperson voted on each bill, with voting options including 'Yes', 'No', 'Abstain', or 'Absent'.",        
        "output": "@startchen\nentity State {\n    Name <<key>>\n    Region {\n        ' Domains\n        Northeast\n        Midwest\n        Southeast\n        Southwest\n        West\n    }\n}\n\nentity CongressPerson {\n    Name <<key>>\n    District\n    Start_date\n    Party {\n        ' Domains\n        Republican\n        Democrat\n        Independent\n        Other\n    }\n}\n\nentity Bill {\n    Bill_name <<key>>\n    Date_of_vote\n    Passed_or_failed {\n        ' Domains\n        Yes\n        No\n    }\n    Sponsor <<FK>>\n}\n\nentity Vote {\n    VoteID <<key>>\n    CongressPerson_Name <<FK>>\n    Bill_Name <<FK>>\n    Vote {\n        ' Domains\n        Yes\n        No\n        Abstain\n        Absent\n    }\n}\n\nrelationship administers{\n}\n\nrelationship sponsors {\n}\n\nrelationship votes_on {\n}\n\nrelationship relates_to {\n}\n\n' Relationships\nState -1- administers\nadministers -N- CongressPerson\nCongressPerson -N- sponsors\nsponsors -1- Bill\nCongressPerson -N- votes_on\nvotes_on -N- Vote\nVote -N- relates_to\nrelates_to -1- Bill\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to keep track of teams and games in a sports league. The database must record information about each team and its players. Not all players on a team will participate in every game, so the database must track which players participate in each game for each team. It must also record the positions played by each participating player in each game and the result of the game.",
        "output": "@startchen\nentity Team {\n    TeamID <<key>>\n    TeamName\n}\n\nentity Player {\n    PlayerID <<key>>\n    PlayerName\n    TeamID <<FK>>\n}\n\nentity Game {\n    GameID <<key>>\n    Date\n    Opponent\n    Result\n}\n\nentity Participation {\n    ParticipationID <<key>>\n    PlayerID <<FK>>\n    GameID <<FK>>\n    PositionPlayed\n}\n\nrelationship has {\n}\n\nrelationship plays_in {\n}\n\nrelationship participates_in {\n}\n\nrelationship involves {\n}\n\n' Relationships\nTeam -1- has\nhas -N- Player\nPlayer -N- plays_in\nplays_in -N- Game\nPlayer -N- participates_in\nparticipates_in -N- Participation\nGame -1- involves\ninvolves -N- Participation\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage a MAIL_ORDER system where employees take orders for parts from customers. The database must store information about employees, including a unique employee number, first and last name, and Zip Code. It must track customers, with each customer identified by a unique customer number, first and last name, and Zip Code. The database must maintain details about parts sold by the company, including a unique part number, part name, price, and quantity in stock. Orders placed by customers must be tracked with a unique order number, and each order must record the employee who took the order, the specified quantities of one or more parts, the date of receipt, the expected ship date, and the actual ship date.",    
        "output": "@startchen\nentity Company {\n    CompanyID <<key>>\n    CompanyName\n    Address\n    ZipCode\n}\n\nentity Employee {\n    EmployeeID <<key>>\n    FirstName\n    LastName\n    ZipCode\n    CompanyID <<FK>>\n}\n\nentity Customer {\n    CustomerID <<key>>\n    FirstName\n    LastName\n    ZipCode\n    CompanyID <<FK>>\n}\n\nentity Part {\n    PartNumber <<key>>\n    PartName\n    Price\n    QuantityInStock\n}\n\nentity Order {\n    OrderNumber <<key>>\n    OrderDate\n    ExpectedShipDate\n    ActualShipDate\n    EmployeeID <<FK>>\n    CustomerID <<FK>>\n}\n\nentity OrderDetail {\n    OrderDetailID <<key>>\n    OrderNumber <<FK>>\n    PartNumber <<FK>>\n    Quantity\n}\n\nrelationship employs {\n}\n\nrelationship serves {\n}\n\nrelationship takes {\n}\n\nrelationship places {\n}\n\nrelationship contains {\n}\n\nrelationship included_in {\n}\n\n' Relationships\nCompany -1- employs\nemploys -N- Employee\nCompany -1- serves\nserves -N- Customer\nEmployee -1- takes\ntakes -N- Order\nCustomer -1- places\nplaces -N- Order\nOrder -1- contains\ncontains -N- OrderDetail\nPart -1- included_in\nincluded_in -N- OrderDetail\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage data about the movie industry. The database must track information about movies, including the title, year of release, length in minutes, production company, and classification under one or more genres (e.g., horror, action, drama). Each movie must be associated with one or more directors and one or more actors, have a plot outline, and may include zero or more quotable quotes spoken by specific actors appearing in the movie. Actors must be identified by their name and date of birth, and the database must record the movies they appear in and their roles in those movies. Directors must also be identified by their name and date of birth, and the database must track the movies they direct. Directors may also act in movies, including those they direct. Production companies must be identified by their name and address, and the database must record the movies they produce.",
        "output": "@startchen\nentity Movie {\n    Title <<key>>\n    YearOfRelease\n    LengthInMinutes\n    PlotOutline\n}\n\nentity Genre {\n    GenreName <<key>>\n}\n\nentity Actor {\n    ActorName <<key>>\n    DateOfBirth\n}\n\nentity Director {\n    DirectorName <<key>>\n    DateOfBirth\n}\n\nentity ProductionCompany {\n    CompanyName <<key>>\n    Address\n}\n\nentity Quote {\n    QuoteID <<key>>\n    QuoteText\n}\n\nentity Role {\n    RoleID <<key>>\n    RoleName\n    ActorName <<FK>>\n    MovieTitle <<FK>>\n}\n\nrelationship belongs_to {\n}\n\nrelationship acts_in {\n}\n\nrelationship directs {\n}\n\nrelationship produces {\n}\n\nrelationship has {\n}\n\nrelationship spoken_by {\n}\n\nrelationship features {\n}\n\nrelationship plays {\n}\n\n' Relationships\nMovie -1- belongs_to\nbelongs_to -N- Genre\nMovie -N- acts_in\nacts_in -N- Actor\nMovie -N- acts_in\nacts_in -N- Director\nMovie -N- directs\ndirects -N- Director\nProductionCompany -1- produces\nproduces -N- Movie\nMovie -1- has\nhas -N- Quote\nQuote -N- spoken_by\nspoken_by -1- Actor\nActor -N- plays\nplays -N- Role\nMovie -N- features\nfeatures -N- Role\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage the CONFERENCE_REVIEW process, where researchers submit research papers for consideration, and reviewers evaluate them. The database must record the following details: Authors of papers must be uniquely identified by their email ID, with their first and last names also stored. Each paper must have a unique identifier, a title, an abstract, and the name of the electronic file containing the paper. Papers can have multiple authors, with one author designated as the contact author. Reviewers must be uniquely identified by their email address, and their first name, last name, phone number, affiliation, and topics of interest must be recorded. Each paper must be assigned between two and four reviewers. Reviewers must rate each assigned paper on a scale of 1 to 10 in four categories: technical merit, readability, originality, and relevance to the conference. The database must also store each reviewer's overall recommendation for each paper. Each review must include two types of written comments: one visible only to the review committee and the other as feedback for the author(s).",
        "output": "@startchen\nentity Author {\n    EmailID <<key>>\n    FirstName\n    LastName\n}\n\nentity Paper {\n    PaperID <<key>>\n    Title\n    Abstract\n    FileName\n    ContactAuthorID <<FK>>\n}\n\nentity Reviewer {\n    EmailID <<key>>\n    FirstName\n    LastName\n    PhoneNumber\n    Affiliation\n    TopicsOfInterest\n}\n\nentity Review {\n    ReviewID <<key>>\n    PaperID <<FK>>\n    ReviewerID <<FK>>\n    TechnicalMeritRating\n    ReadabilityRating\n    OriginalityRating\n    RelevanceRating\n    OverallRecommendation\n    CommitteeComments\n    AuthorFeedback\n}\n\nrelationship has {\n}\n\nrelationship submits {\n}\n\nrelationship rates {\n}\n\nrelationship assigned_to {\n}\n\nrelationship reviews {\n}\n\n' Relationships\nAuthor -N- submits\nsubmits -1- Paper\nPaper -N- assigned_to\nassigned_to -N- Reviewer\nReviewer -N- reviews\nreviews -1- Review\nReview -1- rates\nrates -1- Paper\n\n@endchen"
    },
    {
        "input": "Design an EER schema for a database to organize Olympic facilities for the summer Olympics. The database must manage information about sports complexes, which can be classified as either one-sport or multisport types. Multisport complexes must include designated areas for each sport with location indicators (e.g., center, NE corner). Each complex must store its location, chief organizing individual, total occupied area, and other relevant attributes. The database must track a series of events held in each complex, with details such as the planned date, duration, number of participants, number of officials, and additional relevant information. A roster of all officials must be maintained, along with the list of events each official is involved in. The database must also record information about equipment required for events (e.g., goal posts, poles, parallel bars) and for maintenance purposes. Both one-sport and multisport facilities must track the number of facilities needed and an approximate budget for each type.",        
        "output": "@startchen\nentity SportsComplex {\n    ComplexID <<key>>\n    Location\n    ChiefOrganizingIndividual\n    TotalOccupiedArea\n    NumberOfFacilities\n    ApproximateBudget\n}\n\nentity OneSportComplex {\n}\n\nentity MultiSportComplex {\n    AreaID <<key>>\n    SportType\n    LocationIndicator\n}\n\nentity Event {\n    EventID <<key>>\n    PlannedDate\n    Duration\n    NumberOfParticipants\n    NumberOfOfficials\n}\n\nentity Official {\n    OfficialID <<key>>\n    Name\n    Role\n}\n\nentity Equipment {\n    EquipmentID <<key>>\n    EquipmentType\n}\n\nentity Roster {\n    RosterID <<key>>\n}\n\nrelationship hosts {\n}\n\nrelationship involves {\n}\n\nrelationship requires {\n}\n\nrelationship listed_in {\n}\n\n' Relationships\nSportsComplex -1- hosts\nhosts -N- Event\nEvent -N- involves\ninvolves -1- Official\nMultiSportComplex -1- requires\nrequires -N- Equipment\nOneSportComplex -1- requires\nrequires -N- Equipment\nOfficial -N- listed_in\nlisted_in -1- Roster\n\n' Specialization\nSportsComplex ->- OneSportComplex\nSportsComplex ->- MultiSportComplex\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage the Georgia Tech Library (GTL) system effectively. The database must track members, books, borrowing activities, and the catalog. The library serves approximately 16,000 members and holds 100,000 titles with 250,000 volumes, with an average of 2.5 copies per book. The database must track book availability, including how many copies are in the library or out on loan, with approximately 10% of the books on loan at any given time. Books must be uniquely identified by their ISBN to differentiate editions or bindings of the same title. The catalog must organize books by author, title, and subject area, providing detailed descriptions for reference. Certain items, such as rare books, maps, or reference materials, must be designated as non-lendable and tracked separately. A wishlist of books for acquisition, including rare or out-of-print editions, must also be maintained. Members can borrow up to five books for 21 days, with a one-week grace period before reminders are sent. Faculty members must have extended borrowing privileges, allowing three-month loans with a two-week grace period. Membership requires an application with personal details such as SSN, addresses, and phone numbers. Members receive a card valid for four years, with renewal notices sent one month before expiry. Faculty members must have their data automatically integrated from employee records, with cards sent to their campus address. The system must identify active and inactive members based on borrowing behavior and track top borrowers to analyze borrowing trends. Approximately 5% of members must receive reminders for overdue books, and a similar percentage of overdue books must be flagged as lost or unreturned. The database must differentiate between lendable and non-lendable books, maintain borrowing history, and track books of interest for acquisition. It must also manage librarian roles, including the chief librarian, reference librarians, check-out staff, and assistants, to streamline library operations efficiently.",        
        "output": "@startchen\nentity Member {\n    MemberID <<key>>\n    SSN\n    FirstName\n    LastName\n    CampusAddress\n    HomeAddress\n    PhoneNumber\n    MembershipType\n    CardExpirationDate\n    IsActive\n}\n\nentity Book {\n    ISBN <<key>>\n    Title\n    Author\n    SubjectArea\n    Description\n    CanBeLent\n    IsRare\n}\n\nentity Loan {\n    LoanID <<key>>\n    MemberID <<FK>>\n    ISBN <<FK>>\n    CheckoutDate\n    DueDate\n    ReturnDate\n    IsOverdue\n}\n\nentity Librarian {\n    LibrarianID <<key>>\n    Name\n    Role\n}\n\nentity Catalog {\n    CatalogID <<key>>\n    ISBN <<FK>>\n    Title\n    Author\n    SubjectArea\n    Description\n}\n\nentity Reminder {\n    ReminderID <<key>>\n    MemberID <<FK>>\n    NoticeDate\n    RenewalDate\n}\n\nrelationship borrows {\n}\n\nrelationship manages {\n}\n\nrelationship issues {\n}\n\nrelationship has {\n}\n\nrelationship includes {\n}\n\n' Relationships\nMember -N- borrows\nborrows -N- Loan\nLibrarian -N- manages\nmanages -N- Catalog\nCatalog -1- has\nhas -N- Book\nMember -N- issues\nissues -1- Reminder\nLoan -1- includes\nincludes -(1,5)- Book\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage information for an art museum based on the following requirements: The museum's collection consists of ART_OBJECTS, each identified by a unique ID number, with details such as Artist (if known), Year (created, if known), Title, and Description. ART_OBJECTS are categorized by type into PAINTING, SCULPTURE, STATUE, and OTHER. A PAINTING must include its Paint_type (e.g., oil, watercolor), material it is Drawn_on (e.g., paper, canvas, wood), and Style (e.g., modern, abstract). SCULPTURES and STATUES must include the Material (e.g., wood, stone), Height, Weight, and Style. ART_OBJECTS in the OTHER category must include their Type (e.g., print, photo) and Style. ART_OBJECTS are further categorized as either PERMANENT_COLLECTION or BORROWED. For PERMANENT_COLLECTION items, the database must capture Date_acquired, Status (on display, on loan, or stored), and Cost. For BORROWED items, the database must track the Collection from which they were borrowed, as well as Date_borrowed and Date_returned. Each ART_OBJECT must include information about its country or culture of Origin (e.g., Italian, Egyptian) and Epoch (e.g., Renaissance, Modern). If known, the database must store ARTIST information, including Name (unique), DateBorn, DateDied (if deceased), Country_of_origin, Epoch, Main_style, and Description. The museum organizes EXHIBITIONS, each identified by a unique Name, with Start_date, End_date, and the ART_OBJECTS displayed during the exhibition. Additionally, the database must track information about other COLLECTIONS the museum interacts with, including their Name (unique), Type (e.g., museum, personal), Description, Address, Phone, and current Contact_person.",        
        "output": "@startchen\n\nentity ART_OBJECT {\n  Id_no <<key>>\n  Artist\n  Year\n  Title\n  Description\n  Country_or_Culture\n  Epoch\n}\nentity PAINTING {\n  Paint_type\n  Drawn_on\n  Style\n}\nentity SCULPTURE {\n  Material\n  Height\n  Weight\n  Style\n}\nentity STATUE {\n  Material\n  Height\n  Weight\n  Style\n}\nentity PERMANENT_COLLECTION {\n  Date_acquired\n  Status\n  Cost\n}\nentity ARTIST <<weak>>{\n  Name <<key>>\n  DateBorn\n  Date_died\n  Country_of_origin\n  Epoch\n  Main_style\n  Description\n}\nentity EXHIBITION {\n  Name <<key>>\n  Start_date\n  End_date\n}\nentity COLLECTION {\n  Name <<key>>\n  Type\n  Description\n  Address\n  Phone\n  Contact_person\n}\nrelationship CREATED_BY <<identifying>> {\n}\nrelationship DISPLAYED_IN {\n}\nrelationship PART_OF {\n}\nrelationship BORROWED_FROM {\n  Date_borrowed\n  Date_returned\n}\nrelationship IS_A {\n}\nARTIST -1- CREATED_BY\nCREATED_BY -N- ART_OBJECT\nART_OBJECT -N- DISPLAYED_IN\nDISPLAYED_IN -1- EXHIBITION\nART_OBJECT -N- PART_OF\nPART_OF -1- PERMANENT_COLLECTION\nART_OBJECT -N- BORROWED_FROM\nBORROWED_FROM -1- COLLECTION\nART_OBJECT -1- IS_A\nIS_A -1- PAINTING\nIS_A -1- SCULPTURE\nIS_A -1- STATUE\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a small-private-airport database to manage information about airplanes, their owners, airport employees, and pilots based on the following requirements: Each AIRPLANE must have a registration number [Reg#], belong to a particular plane type [OF_TYPE], and be stored in a specific hangar [STORED_IN]. Each PLANE_TYPE must include a model number [Model], capacity [Capacity], and weight [Weight]. Each HANGAR must have a number [Number], capacity [Capacity], and location [Location]. The database must track the OWNERs of each airplane [OWNS] and the EMPLOYEEs who maintain the planes [MAINTAIN]. The OWNS relationship must relate an AIRPLANE to an OWNER, capturing the purchase date [Pdate]. The MAINTAIN relationship must relate an EMPLOYEE to service records [SERVICE]. Each airplane must be associated with multiple service records [PLANE_SERVICE], where each SERVICE record includes maintenance date [Date], hours worked [Hours], and type of work performed [Work_code]. SERVICE must be represented as a weak entity type, identified by the airplane's registration number [Reg#]. Owners can be either PERSONs or CORPORATIONs, requiring the OWNER entity type to be a union category comprising PERSON and CORPORATION entities. Pilots [PILOT] and employees [EMPLOYEE] must be subclasses of PERSON. PILOT entities must have attributes such as license number [Lic_num] and restrictions [Restr], while EMPLOYEE entities must have attributes for salary [Salary] and shift worked [Shift]. All PERSON entities must include attributes such as Social Security number [Ssn], name [Name], address [Address], and phone number [Phone]. CORPORATION entities must include attributes for name [Name], address [Address], and phone number [Phone]. The database must track the types of planes each pilot is authorized to fly [FLIES] and the types of planes each employee is qualified to maintain [WORKS_ON].",        
        "output": "@startchen\n\nentity AIRPLANE {\n    Reg <<key>>\n    OF_TYPE\n    STORED_IN\n}\n\nentity PLANE_TYPE {\n    Model <<key>>\n    Capacity\n    Weight\n}\n\nentity HANGAR {\n    Number <<key>>\n    Capacity\n    Location\n}\n\nentity OWNER {\n}\n\nentity CORPORATION {\n    Name <<key>>\n    Address\n    Phone\n}\n\nentity PERSON {\n    Ssn <<key>>\n    Name\n    Address\n    Phone\n}\n\nentity EMPLOYEE {\n    Salary\n    Shift\n}\n\nentity PILOT {\n    Lic_num <<key>>\n    Restr\n}\n\nentity SERVICE {\n    Date\n    Hours\n    Work_code\n}\n\nOWNER ->- o { PERSON, CORPORATION }\nPERSON =>= d { EMPLOYEE, PILOT }\n\nrelationship OWNS {\n    Pdate\n}\nrelationship MAINTAIN {\n}\nrelationship PLANE_SERVICE {\n}\nrelationship FLIES {\n}\nrelationship WORKS_ON {\n}\nrelationship STORED_IN {\n}\nrelationship OF_TYPE {\n}\n\nAIRPLANE -N- OWNS\nOWNS -1- OWNER\n\nEMPLOYEE -N- MAINTAIN\nMAINTAIN -1- SERVICE\n\nAIRPLANE -N- PLANE_SERVICE\nPLANE_SERVICE -1- SERVICE\n\nPILOT -N- FLIES\nFLIES -1- PLANE_TYPE\n\nEMPLOYEE -N- WORKS_ON\nWORKS_ON -1- PLANE_TYPE\n\nAIRPLANE -N- STORED_IN\nSTORED_IN -1- HANGAR\n\nAIRPLANE -1- OF_TYPE\nOF_TYPE -1- PLANE_TYPE\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage the game of chess with the following requirements: The game must track two players, each assigned a color (black or white) at the start of the game. The game is played on an 8 × 8 board. Each player starts with a set of pieces, including a king, a queen, two rooks, two bishops, two knights, and eight pawns. Each piece must have its initial position recorded and be associated with a specific player. The database must maintain the legal moves for each piece based on the state of the game. While legal moves do not need to be fully detailed, the following must be accounted for: pieces may move to empty squares or capture an opposing piece. Captured pieces must be removed from the board. If a pawn moves to the last row, it must be promoted to another piece (queen, rook, bishop, or knight), and the new piece must be recorded. The database must also manage the state of the board and track changes as the game progresses.",
        "output": "@startchen\n\nentity GAME {\n    Id <<key>>\n    Status\n}\nentity PLAYER {\n    Id <<key>>\n    Color\n}\n\nentity BOARD {\n    Dimensions\n}\n\nentity PIECE {\n    Type\n    Initial_position\n}\n\nentity KING {\n}\n\nentity QUEEN {\n}\n\nentity ROOK {\n}\n\nentity BISHOP {\n}\n\nentity KNIGHT {\n}\n\nentity PAWN {\n}\n\nPIECE ->- o { KING, QUEEN, ROOK, BISHOP, KNIGHT, PAWN }\n\nrelationship HAS {\n}\nrelationship PLAYS {\n}\nrelationship MOVES {\n}\nrelationship CONTAINS {\n}\n\nGAME -1- HAS\nHAS -2- PLAYER\nPLAYER -1- PLAYS\nPLAYS -N- PIECE\nPLAYER -N- MOVES\nMOVES -1- PIECE\nGAME -1- HAS\nHAS -N- PIECE\nGAME -1- CONTAINS\nCONTAINS -1- BOARD\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage a GRADE_BOOK system with the following requirements: The database must track students, each identified by a unique identifier, first name, last name, and email address. Instructors must be associated with the courses they teach each term. Each course must be identified by a course number, section number, and term. Students must be enrolled in courses, and the database must record their enrollment. Each course must have grading components, each defined by maximum points and weights, with the weights totaling 100. The database must enable instructors to record the points earned by each student in each grading component for the courses they teach.",        
        "output": "@startchen\n\nentity STUDENT {\n    StudentID <<key>>\n    FirstName\n    LastName\n    Email\n}\n\nentity INSTRUCTOR {\n    InstructorID <<key>>\n    FirstName\n    LastName\n}\n\nentity COURSE {\n    CourseNumber <<key>>\n    SectionNumber <<key>>\n    Term\n}\n\nentity GRADING_COMPONENT {\n    ComponentName <<key>>\n    MaxPoints\n    Weight\n}\n\nentity GRADE {\n    PointsEarned\n}\n\nrelationship ENROLLED_IN {\n}\n\nrelationship TEACHES {\n}\n\nrelationship HAS_COMPONENT {\n}\n\nrelationship RECORDS {\n}\n\nrelationship Is_Assigned {\n}\n\nrelationship HAS {\n}\n\nSTUDENT -N- ENROLLED_IN\nENROLLED_IN -1- COURSE\nINSTRUCTOR -N- TEACHES\nTEACHES -1- COURSE\nCOURSE -N- HAS_COMPONENT\nHAS_COMPONENT -1- GRADING_COMPONENT\nINSTRUCTOR -N- RECORDS\nRECORDS -N- GRADE\nSTUDENT -1- Is_Assigned\nIs_Assigned -N- GRADE\nGRADE -1- HAS\nHAS -N- GRADING_COMPONENT\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage an online auction system with the following requirements: The database must track members, each identified by a unique member number, email address, name, password, home address, and phone number. Members can be either buyers or sellers. Buyers must have a shipping address recorded, while sellers must have a bank account number and routing number recorded. Items placed for sale by sellers must be identified by a unique item number assigned by the system and include attributes such as item title, description, starting bid price, bidding increment, start date, and end date of the auction. Items must be categorized based on a fixed classification hierarchy (e.g., COMPUTER → HARDWARE → MODEM). Buyers must be able to make bids on items they are interested in, with each bid recording the bid price and time. The database must determine the highest bid at the end of the auction to declare the winner and facilitate the transaction between the buyer and seller. Buyers and sellers must be able to record feedback on completed transactions, including a rating (1–10) and a comment.",        
        "output": "@startchen\n\nentity MEMBER {\n    MemberID <<key>>\n    Email\n    Name\n    Password\n    Address\n    Phone\n}\n\nentity BUYER {\n    ShippingAddress\n}\n\nentity SELLER {\n    BankAccountNumber\n    RoutingNumber\n}\n\nentity ITEM {\n    ItemNumber <<key>>\n    Title\n    Description\n    StartingBid\n    BiddingIncrement\n    StartDate\n    EndDate\n}\n\nentity BID {\n    BidPrice\n    BidTime\n}\n\nentity CATEGORY {\n    Name <<key>>\n}\n\nentity FEEDBACK {\n    Rating\n    Comment\n}\n\nMEMBER ->- o { BUYER, SELLER }\n\nrelationship PLACED_BY {\n}\nrelationship MAKES {\n}\nrelationship HAS {\n}\nrelationship RECEIVES {\n}\n\nSELLER -1- PLACED_BY\nPLACED_BY -N- ITEM\nBUYER -N- MAKES\nMAKES -1- BID\nITEM -N- HAS\nHAS -1- CATEGORY\nBUYER -N- RECEIVES\nRECEIVES -1- FEEDBACK\nSELLER -N- RECEIVES\nRECEIVES -1- FEEDBACK\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database system to manage a baseball organization with the following requirements: The database must track personnel involved in the league, including players, coaches, managers, and umpires, each identified by a unique personnel ID. Personnel must also include attributes such as first name, last name, date of birth, and place of birth. Players must have additional attributes such as batting orientation (left, right, or switch) and lifetime batting average (BA). A subset of players, called pitchers, must also include a lifetime earned run average (ERA). Teams must be uniquely identified by their names and described by the city they are located in, as well as the division and league in which they play (e.g., Central division of the American League). Each team must have one manager, a number of coaches, and a roster of players. The database must track games played between two teams, designating one as the home team and the other as the visiting team, with the date of the game recorded. The score for each team, including runs, hits, and errors, must be recorded, and the team with the most runs must be declared the winner. For each finished game, the winning pitcher, losing pitcher, and, if applicable, the save pitcher must be recorded. The database must also track the number of hits (singles, doubles, triples, and home runs) obtained by each player in each game.", 
        "output": "@startchen\n\nentity PERSONNEL {\n    PersonnelID <<key>>\n    FirstName\n    LastName\n    DateOfBirth\n    PlaceOfBirth\n}\n\nentity PLAYER {\n    BattingOrientation\n    LifetimeBA\n}\n\nentity PITCHER {\n    LifetimeERA\n}\n\nentity COACH {\n    Specialty\n}\n\nentity MANAGER {\n}\n\nentity UMPIRE {\n    ExperienceLevel\n}\n\nentity TEAM {\n    TeamName <<key>>\n    City\n    Division\n    League\n}\n\nentity GAME {\n    GameDate <<key>>\n    HomeScore\n    HomeHits\n    HomeErrors\n    VisitorScore\n    VisitorHits\n    VisitorErrors\n    WinningPitcherID\n    LosingPitcherID\n    SavePitcherID\n}\n\nentity STATS {\n    Singles\n    Doubles\n    Triples\n    HomeRuns\n}\n\nPERSONNEL ->- o { PLAYER, COACH, MANAGER, UMPIRE }\nPLAYER ->- o { PITCHER }\n\nrelationship PLAYS_FOR {\n}\nrelationship HAS_MANAGER {\n}\nrelationship HAS_COACH {\n}\nrelationship PARTICIPATES_IN {\n}\nrelationship RECORDED_IN {\n}\nrelationship OFFICIATES {\n}\n\nPITCHER -N- PLAYS_FOR\nPLAYS_FOR -1- TEAM\n\nPLAYER -N- PLAYS_FOR\nPLAYS_FOR -1- TEAM\n\nTEAM -1- HAS_MANAGER\nHAS_MANAGER -1- MANAGER\n\nTEAM -1- HAS_COACH\nHAS_COACH -N- COACH\n\nPLAYER -N- RECORDED_IN\nRECORDED_IN -1- STATS\n\nTEAM -2- PARTICIPATES_IN\nPARTICIPATES_IN -1- GAME\n\nUMPIRE -N- OFFICIATES\nOFFICIATES -N- GAME\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage a hostel management system with the following requirements: The system must handle student registration and room allocation, with each student providing details such as student ID, name, contact information, department, year of study, and gender. Each student must be assigned a room based on availability. Rooms must be categorized by room number, block, floor, capacity, and type (single, double, triple occupancy). A student can occupy only one room at a time, but multiple students may share a room if its capacity allows. The system must store the date of room allocation and generate a unique room assignment ID to track occupancy history. Rooms must belong to specific blocks within the hostel (e.g., Block A, Block B), and their status must be maintained, indicating whether they are vacant, occupied, or under maintenance. Staff members, identified by staff ID, name, role, and contact information, must be assigned to handle room maintenance requests. The system must track hostel fees for students, with monthly charges based on the room type. Fee details must include the amount, due date, and payment status (paid, pending, overdue). Payments must be recorded with a payment ID, payment date, amount paid, and method of payment (cash, card, online transfer). The system must also track penalties for late payments and generate invoices. Visitor management must allow students to register visitors, with visitor details such as visitor ID, name, contact information, and the date and time of their visit. Each visitor must be linked to a specific student, and their entry and exit must be recorded. Students must be able to file complaints for room maintenance or other issues, with each complaint assigned a unique complaint ID, description, date filed, and status (open, in progress, resolved). Maintenance staff members must be assigned to handle complaints, and the system must track maintenance requests, including the staff assigned, completion date, and maintenance details. Finally, the system must generate reports on room occupancy, student payment statuses, and maintenance requests, with options to filter reports by block, student, or date range.",        
        "output": "@startchen\n\nentity STUDENT {\n    StudentID <<key>>\n    Name\n    ContactDetails\n    Department\n    YearOfStudy\n    Gender\n}\n\nentity ROOM {\n    RoomNumber <<key>>\n    Block\n    Floor\n    Capacity\n    Type\n    Status\n}\n\nentity ROOM_ASSIGNMENT {\n    AssignmentID <<key>>\n    AllocationDate\n}\n\nentity STAFF {\n    StaffID <<key>>\n    Name\n    Role\n    ContactInformation\n}\n\nentity FEE {\n    FeeID <<key>>\n    Amount\n    DueDate\n    PaymentStatus\n}\n\nentity PAYMENT {\n    PaymentID <<key>>\n    PaymentDate\n    AmountPaid\n    MethodOfPayment\n}\n\nentity VISITOR {\n    VisitorID <<key>>\n    Name\n    ContactDetails\n    VisitDateTime\n}\n\nentity COMPLAINT {\n    ComplaintID <<key>>\n    Description\n    DateFiled\n    Status\n}\n\nentity MAINTENANCE_REQUEST {\n    RequestID <<key>>\n    CompletionDate\n    MaintenanceDetails\n}\n\nentity REPORT {\n    ReportID <<key>>\n    Type\n    FilterCriteria\n}\n\nrelationship ASSIGNED_TO {\n}\nrelationship ALLOCATES {\n}\nrelationship MANAGES {\n}\nrelationship MAKES {\n}\nrelationship VISITS {\n}\nrelationship FILES {\n}\nrelationship RESOLVES {\n}\nrelationship GENERATES {\n}\nrelationship IS_CHARGED {\n}\n\nROOM_ASSIGNMENT -1- ASSIGNED_TO\nASSIGNED_TO -1- STUDENT\n\nSTAFF -N- MANAGES\nMANAGES -1- ROOM\n\nROOM -1- ALLOCATES\nALLOCATES -(1,N)- ROOM_ASSIGNMENT\n\nSTUDENT -1- MAKES\nMAKES -1- PAYMENT\n\nSTUDENT -1- VISITS\nVISITS -N- VISITOR\n\nSTUDENT -N- FILES\nFILES -N- COMPLAINT\n\nCOMPLAINT -N- RESOLVES\nRESOLVES -1- MAINTENANCE_REQUEST\n\nSTAFF -1- MANAGES\nMANAGES -N- MAINTENANCE_REQUEST\n\nROOM -N- GENERATES\nGENERATES -1- REPORT\n\nSTUDENT -1- IS_CHARGED\nIS_CHARGED -1- FEE\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a software house management system to manage employees, projects, clients, and resources with the following requirements: The system must manage employees, including software engineers, project managers, QA testers, designers, and other roles. Each employee must have an employee ID, name, email, contact number, position, department (e.g., Development, QA, HR), date of joining, salary, and availability (active, on leave). Employees can be assigned to multiple projects simultaneously, with their role in each project (developer, tester, manager, etc.) recorded. The system must manage clients who provide projects, including client ID, company name, contact person, email, and phone number. Clients can have multiple projects, each with a project ID, name, description, start date, end date, budget, and status (active, completed, on hold). Payments from clients must be tracked with a payment ID, payment date, amount, and payment method (bank transfer, credit card, etc.). Projects must be tracked with a project ID, name, description, and deadline, along with their start date, end date, milestones, and budget. Milestones must have a milestone ID, description, start date, end date, and status (in progress, completed). Employees must be assigned specific roles in projects, and hours worked by employees on each project must be recorded. Tasks within projects must be tracked, including task ID, description, priority (low, medium, high), assigned employee, deadline, and status (pending, in progress, completed). The system must log time spent on each task and manage task dependencies. The system must manage resources such as software licenses, hardware, and office supplies, with each resource having a resource ID, name, type (software, hardware), purchase date, cost, and assigned department. Resources must be allocated to employees or projects, with their status (in use, available, damaged) and inventory levels tracked. Reports must be generated on project progress, employee performance, resource allocation, client payments, and project financials (e.g., total expenditure vs. budget). Notifications must alert managers about approaching deadlines and overdue client payments. The system must handle employee payroll, storing details like salary, bonuses, deductions, and pay dates, and tracking payroll status (paid, pending) for each employee.",        
        "output": "@startchen\n\nentity EMPLOYEE {\n    EmployeeID <<key>>\n    Name\n    Email\n    ContactNumber\n    Position\n    Department\n    DateOfJoining\n    Salary\n    Availability\n}\n\nentity CLIENT {\n    ClientID <<key>>\n    CompanyName\n    ContactPerson\n    Email\n    PhoneNumber\n}\n\nentity PROJECT {\n    ProjectID <<key>>\n    Name\n    Description\n    StartDate\n    EndDate\n    Budget\n    Status\n}\n\nentity MILESTONE {\n    MilestoneID <<key>>\n    Description\n    StartDate\n    EndDate\n    Status\n}\n\nentity TASK {\n    TaskID <<key>>\n    Description\n    Priority\n    AssignedEmployee\n    Deadline\n    Status\n}\n\nentity RESOURCE {\n    ResourceID <<key>>\n    Name\n    Type\n    PurchaseDate\n    Cost\n    AssignedDepartment\n    Status\n}\n\nentity PAYMENT {\n    PaymentID <<key>>\n    PaymentDate\n    Amount\n    PaymentMethod\n}\n\nentity PAYROLL {\n    PayrollID <<key>>\n    Salary\n    Bonus\n    Deductions\n    PayDate\n    Status\n}\n\nrelationship ASSIGNED_TO {\n}\nrelationship MAINTAINS {\n}\nrelationship ASSIGNED {\n}\nrelationship PAYS {\n}\nrelationship TRACKS {\n}\nrelationship ALLOCATED {\n}\nrelationship IS_DIVIDED {\n}\nrelationship HAS {\n}\n\nEMPLOYEE -N- ASSIGNED_TO\nASSIGNED_TO -1- PROJECT\n\nCLIENT -1- MAINTAINS\nMAINTAINS -N- PROJECT\n\nCLIENT -N- PAYS\nPAYS -1- PAYMENT\n\nPROJECT -N- TRACKS\nTRACKS -1- MILESTONE\n\nTASK -N- IS_DIVIDED\nIS_DIVIDED -1- PROJECT\n\nPROJECT -N- ALLOCATED\nALLOCATED -N- RESOURCE\n\nEMPLOYEE -1- HAS\nHAS -1- PAYROLL\n\nEMPLOYEE -1- ALLOCATED\nALLOCATED -N- RESOURCE\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage final year projects for university students, covering all phases from proposal submission to final evaluation. The system must manage students, faculty, projects, committees, and evaluations with the following requirements: Students can submit project proposals individually or in groups of 2-4 members, with group information including group ID and leader. Student details such as ID, name, email, and department must be recorded. Proposals must include proposal ID, title, description, submission date, and status. Projects must have attributes like project ID, title, description, start and end dates, and status (ongoing, completed, or rejected). Faculty members or external mentors must supervise projects, with their roles and details tracked. Committees must be identified by a committee ID and consist of faculty members assigned specific roles (chairperson, evaluator, observer). Committees must evaluate projects and provide feedback or request changes, with evaluations including progress reports and final assessments. Evaluations must track report submissions, feedback, and scores, with final scores broken into components such as innovation, technical accuracy, and presentation. Projects must be divided into milestones with milestone ID, name, due date, and status, and tasks under milestones must be assigned to group members and monitored for progress. Supervisors must oversee tasks and milestones to ensure timely completion. The system must manage project-related documents (e.g., proposals, reports, code), with each document tagged by document ID, title, and type. Resource requirements like software, hardware, and budgets must be tracked. Reports must be generated on project progress, student performance, and evaluations, and alerts must notify students and supervisors of approaching deadlines. Committees must assign grades after final evaluations, with grades stored by evaluation ID, total score, and grade breakdowns. The system must also track grade histories for supervisors to analyze student performance trends.",        
        "output": "@startchen\nentity STUDENT {\n  StudentID <<key>>\n  Name\n  Email\n  Department\n  DegreeProgram\n  YearOfStudy\n  GroupID <<FK>>\n}\nentity GROUP {\n  GroupID <<key>>\n  LeaderID <<FK>>\n}\nentity PROPOSAL {\n  ProposalID <<key>>\n  Title\n  Description\n  SubmissionDate\n  Status\n  GroupID <<FK>>\n}\nentity PROJECT {\n  ProjectID <<key>>\n  Title\n  Description\n  StartDate\n  EndDate\n  Status\n  SupervisorID <<FK>>\n}\nentity SUPERVISOR {\n  SupervisorID <<key>>\n  Name\n  Department\n  Email\n  Designation\n}\nentity MENTOR {\n  MentorID <<key>>\n  Name\n  Company\n  Email\n  Role\n}\nentity COMMITTEE {\n  CommitteeID <<key>>\n  DateOfEvaluation\n}\nentity COMMITTEE_MEMBER {\n  CommitteeMemberID <<key>>\n  CommitteeRole\n  CommitteeID <<FK>>\n  FacultyID <<FK>>\n}\nentity EVALUATION {\n  EvaluationID <<key>>\n  Feedback\n  Score\n  Comments\n  ProjectID <<FK>>\n}\nentity PROGRESS_REPORT {\n  ReportID <<key>>\n  SubmissionDate\n  Feedback\n  Status\n  ProjectID <<FK>>\n}\nentity MILESTONE {\n  MilestoneID <<key>>\n  Name\n  DueDate\n  Status\n  ProjectID <<FK>>\n}\nentity TASK {\n  TaskID <<key>>\n  Description\n  AssignedGroupMembers\n  StartDate\n  EndDate\n  CompletionStatus\n  MilestoneID <<FK>>\n}\nentity DOCUMENT {\n  DocumentID <<key>>\n  Title\n  UploadDate\n  FileType\n  ProjectID <<FK>>\n}\nentity RESOURCE {\n  ResourceID <<key>>\n  Name\n  Quantity\n  Cost\n  ProjectID <<FK>>\n}\nentity GRADE {\n  GradeID <<key>>\n  Component\n  Score\n  FinalGrade\n  EvaluationID <<FK>>\n}\nrelationship BELONGS_TO {\n}\nrelationship SUBMITS {\n}\nrelationship OVERSEEN_BY {\n}\nrelationship INVOLVES {\n}\nrelationship COMMITTEE_INCLUDES {\n}\nrelationship ASSESSES {\n}\nrelationship DIVIDED_INTO {\n}\nrelationship CONTAINS {\n}\nrelationship REQUIRES {\n}\nrelationship EVALUATED_BY {\n}\nrelationship HAS {\n}\nrelationship IS_ASSIGNED {\n}\nrelationship INCLUDES {\n}\n\nSTUDENT -N- BELONGS_TO\nBELONGS_TO -1- GROUP\n\nGROUP -1- SUBMITS\nSUBMITS -N- PROPOSAL\n\nPROJECT -1- HAS\nHAS -1- PROPOSAL\nPROJECT -N- OVERSEEN_BY\nOVERSEEN_BY -1- SUPERVISOR\nPROJECT -1- INVOLVES\nINVOLVES -N- MENTOR\nCOMMITTEE -N- COMMITTEE_INCLUDES\nCOMMITTEE_INCLUDES -N- COMMITTEE_MEMBER\nCOMMITTEE -N- ASSESSES\nASSESSES -N- EVALUATION\nPROJECT -1- DIVIDED_INTO\nDIVIDED_INTO -N- MILESTONE\nMILESTONE -1- HAS\nHAS -N- TASK\nPROJECT -1- CONTAINS\nCONTAINS -N- DOCUMENT\nPROJECT -1- REQUIRES\nREQUIRES -N- RESOURCE\nPROJECT -N- EVALUATED_BY\nEVALUATED_BY -1- EVALUATION\nGRADE -1- INCLUDES\nINCLUDES -N- EVALUATION\nPROJECT -1- IS_ASSIGNED\nIS_ASSIGNED -1- GRADE\nPROJECT -1- HAS\nHAS -N- PROGRESS_REPORT\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage students, faculty, academic activities, and roles within an institution. The database must handle the following requirements: Student Management must include storing student details such as student ID, name, email, contact details, department, program, and year of study. Students must be enrolled in multiple courses, and the system must track course enrollments, grades, and attendance. Each student must be assigned a faculty advisor to guide them academically. Faculty Management must include storing faculty details such as faculty ID, name, email, department, designation (professor, lecturer), and courses taught. Faculty members must be responsible for teaching courses, advising students, and evaluating student performance through grades and assessments. Course Management must include defining courses with attributes such as course ID, name, description, credits, and semester offered. Each course must be taught by one or more faculty members and attended by a group of students. The system must track course schedules, assignments, exams, and final grades. Department Management must include tracking departments within the institution (e.g., Computer Science, Mathematics), with each department having a head responsible for overseeing faculty and academic activities. Departments must manage both students and faculty within their academic programs. The system must generate reports on student performance, faculty workload, course enrollments, and department statistics. Academic administrators must be able to monitor student progress, faculty assignments, and overall department performance.",        
        "output": "@startchen\n\nentity STUDENT {\n    StudentID <<key>>\n    Name\n    Email\n    ContactDetails\n    Department\n    Program\n    YearOfStudy\n}\n\nentity FACULTY {\n    FacultyID <<key>>\n    Name\n    Email\n    Department\n    Designation\n}\n\nentity COURSE {\n    CourseID <<key>>\n    Name\n    Description\n    Credits\n    SemesterOffered\n}\n\nentity DEPARTMENT {\n    DepartmentID <<key>>\n    Name\n    HeadOfDepartment\n}\n\nrelationship ENROLLED_IN {\n}\nrelationship TAUGHT_BY {\n}\nrelationship GUIDED_BY {\n}\nrelationship BELONGS_TO {\n}\nrelationship CONTAINS {\n}\n\nSTUDENT -N- ENROLLED_IN\nENROLLED_IN -1- COURSE\n\nCOURSE -N- TAUGHT_BY\nTAUGHT_BY -1- FACULTY\n\nSTUDENT -1- GUIDED_BY\nGUIDED_BY -N- FACULTY\n\nSTUDENT -N- BELONGS_TO\nBELONGS_TO -1- DEPARTMENT\n\nFACULTY -N- BELONGS_TO\nBELONGS_TO -1- DEPARTMENT\n\nDEPARTMENT -1- CONTAINS\nCONTAINS -N- COURSE\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage patients, doctors, staff, and medical resources within a hospital with the following requirements: Patient Management must include storing patient details such as patient ID, name, date of birth, contact information, and medical history. The system must track appointments, diagnoses, treatments, and prescriptions for each patient. Patients must be categorized as inpatients (admitted) or outpatients, with admission details (room, ward, doctor assigned) and discharge summaries recorded. Doctor Management must include storing doctor details such as doctor ID, name, specialization, contact details, and availability. Doctors must be responsible for diagnosing and treating patients, with the system tracking patient-doctor assignments, treatment plans, and prescriptions. The system must also manage surgery schedules and details for surgeries performed by doctors. Staff Management must include details such as staff ID, name, role, department, and shift schedules for nurses, technicians, and administrative staff. Staff must be assigned to tasks such as patient care, performing tests, or handling administrative duties. Appointment and Scheduling must allow patients to schedule appointments with doctors, recording details such as appointment ID, date, time, and doctor assigned. The system must manage doctor schedules to prevent conflicts and ensure effective patient care. Treatment and Billing must record treatment plans, including medications, tests, and procedures prescribed by doctors. The system must generate invoices for treatments, medications, and services, with invoice details such as billing ID, date, amount, and payment status. Medical Records and Reports must maintain medical records for each patient, including treatment history, lab results, and diagnostic reports. The system must generate reports on patient admissions, treatment outcomes, and resource utilization within the hospital.",        
        "output": "@startchen\n\nentity PATIENT {\n    PatientID <<key>>\n    Name\n    DateOfBirth\n    ContactInformation\n    MedicalHistory\n}\n\nentity INPATIENT {\n    PatientID <<FK>>\n    AdmissionID <<FK>>\n}\n\nentity OUTPATIENT {\n    PatientID <<FK>>\n}\n\nentity DOCTOR {\n    DoctorID <<key>>\n    Name\n    Specialization\n    ContactDetails\n    Availability\n}\n\nentity STAFF {\n    StaffID <<key>>\n    Name\n    Role\n    Department\n    ShiftSchedule\n}\n\nentity APPOINTMENT {\n    AppointmentID <<key>>\n    Date\n    Time\n    DoctorID <<FK>>\n    PatientID <<FK>>\n}\n\nentity TREATMENT {\n    TreatmentID <<key>>\n    Medications\n    Tests\n    Procedures\n    DoctorID <<FK>>\n    PatientID <<FK>>\n}\n\nentity INVOICE {\n    BillingID <<key>>\n    Date\n    Amount\n    PaymentStatus\n    PatientID <<FK>>\n}\n\nentity MEDICAL_RECORD {\n    RecordID <<key>>\n    TreatmentHistory\n    LabResults\n    DiagnosticReports\n    PatientID <<FK>>\n}\n\nentity ADMISSION {\n    AdmissionID <<key>>\n    Room\n    Ward\n    AdmissionDate\n    DischargeSummary\n    PatientID <<FK>>\n}\n\nentity SURGERY {\n    SurgeryID <<key>>\n    SurgeryDate\n    SurgeryDetails\n    DoctorID <<FK>>\n    PatientID <<FK>>\n}\n\nentity TASK {\n    TaskID <<key>>\n    Type\n}\n\nrelationship HAS { \n}\nrelationship IS_ADMITTED {\n}\nrelationship ASSIGNED_TO { \n}\nrelationship SCHEDULED_FOR {\n}\nrelationship TREATED_WITH { \n}\nrelationship PAYS {\n}\nrelationship PERFORMS {\n}\nrelationship ASSIST {\n}\nrelationship COVERS {\n}\nrelationship BOOKS {\n}\nrelationship PRESCRIBES {\n}\n\nPATIENT =>= d {INPATIENT, OUTPATIENT}\n\nPATIENT -1- BOOKS\nBOOKS -N- APPOINTMENT\n\nPATIENT -1- TREATED_WITH\nTREATED_WITH -N- TREATMENT\n\nPATIENT -1- PAYS\nPAYS -N- INVOICE\n\nPATIENT -1- HAS\nHAS -N- MEDICAL_RECORD\n\nINPATIENT -1- IS_ADMITTED\nIS_ADMITTED -1- ADMISSION\n\nDOCTOR -1- SCHEDULED_FOR\nSCHEDULED_FOR -N- APPOINTMENT\n\nDOCTOR -1- PRESCRIBES\nPRESCRIBES -N- TREATMENT\n\nTREATMENT -1- COVERS\nCOVERS -1- INVOICE\n\nDOCTOR -1- PERFORMS\nPERFORMS -N- SURGERY\n\nSTAFF -1- ASSIGNED_TO\nASSIGNED_TO -N- TASK\n\nSTAFF -N- ASSIST\nASSIST -1- DOCTOR\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage the operations of a shopping mall, covering tenants (shops), employees, visitors, and services provided within the mall with the following requirements: Shop/Tenant Management must track shops with details such as shop ID, shop name, type of business (e.g., retail, food), floor number, rental amount, and lease period. Each shop must have an associated owner or manager, with details such as owner name, contact information, and contract details. The system must track rental payments made by shops and generate invoices for shop owners. Employee Management must track mall employees, including security personnel, maintenance staff, and management staff. Employees must have attributes such as employee ID, name, position, shift schedule, assigned duties, and the zone of the mall they are assigned to (e.g., parking, food court). Attendance and performance must be monitored for employees. Visitor Management must track visitors, recording daily visitor counts, entry and exit times, and analyzing visitor trends during special events or promotions. Parking Management must manage parking facilities, tracking parking slots by slot ID, floor, availability, and type (e.g., standard, VIP). Visitors must be issued parking tickets, with details such as parking fees and duration of stay. Event and Promotion Management must track events hosted in the mall with event ID, event name, date, location, and organizer details. Promotions run by shops must be tracked with promotion details, duration, and participating stores. Maintenance and Facility Management must manage maintenance requests from shops or employees, recording request ID, description, date reported, status (open, in progress, resolved), and staff assigned. Facilities such as elevators and air conditioning must be tracked for regular servicing. Financial Management must track the mall's financial operations, including rental income, maintenance costs, and utility bills. The system must generate financial reports on earnings, operational expenses, and rental payments, and provide insights into the mall’s financial health.",        
        "output": "@startchen\n\nentity SHOP {\n    ShopID <<key>>\n    ShopName\n    BusinessType\n    FloorNumber\n    RentalAmount\n    LeasePeriod\n    OwnerID <<FK>>\n}\n\nentity SHOP_OWNER {\n    OwnerID <<key>>\n    Name\n    ContactInformation\n    ContractDetails\n}\n\nentity INVOICE {\n    InvoiceID <<key>>\n    Date\n    Amount\n    Status\n    ShopID <<FK>>\n}\n\nentity EMPLOYEE {\n    EmployeeID <<key>>\n    Name\n    Position\n    ShiftSchedule\n    AssignedDuties\n    ZoneID <<FK>>\n    Attendance\n    Performance\n}\n\nentity VISITOR {\n    VisitorID <<key>>\n    EntryTime\n    ExitTime\n}\n\nentity PARKING_SLOT {\n    SlotID <<key>>\n    Floor\n    Availability\n    Type\n}\n\nentity PARKING_TICKET {\n    TicketID <<key>>\n    IssueTime\n    ParkingFee\n    SlotID <<FK>>\n    VisitorID <<FK>>\n}\n\nentity EVENT {\n    EventID <<key>>\n    EventName\n    Date\n    Location\n    OrganizerDetails\n}\n\nentity PROMOTION {\n    PromotionID <<key>>\n    Details\n    Duration\n    ParticipatingStores\n}\n\nentity MAINTENANCE_REQUEST {\n    RequestID <<key>>\n    Description\n    DateReported\n    Status\n    AssignedStaffID <<FK>>\n}\n\nentity FACILITY {\n    FacilityID <<key>>\n    Name\n    ServiceDate\n    Status\n}\n\nentity FINANCIAL_RECORD {\n    RecordID <<key>>\n    RentalIncome\n    MaintenanceCost\n    UtilityBills\n}\n\nentity ZONE {\n    ZoneID <<key>>\n    Name\n    Location\n}\n\nrelationship OWNS {\n}\nrelationship MANAGES {\n}\nrelationship VISITS {\n}\nrelationship INCLUDES {\n}\nrelationship IS_ASSIGNED {\n}\nrelationship HOSTS {\n}\nrelationship RUNS {\n}\nrelationship REQUESTS {\n}\nrelationship MAINTAINS {\n}\nrelationship TRACKS {\n}\nrelationship INVOICES {\n}\nrelationship PAYS {\n}\nrelationship IS_ISSUED {\n}\n\nSHOP_OWNER -1- OWNS\nOWNS -1- SHOP\n\nSHOP_OWNER -1- PAYS\nPAYS -N- INVOICE\n\nFINANCIAL_RECORD -1- TRACKS\nTRACKS -N- INVOICE\n\nSHOP -1- RUNS\nRUNS -N- PROMOTION\n\nEMPLOYEE -N- MANAGES\nMANAGES -1- ZONE\n\nVISITOR -1- VISITS\nVISITS -N- SHOP\n\nVISITOR -1- IS_ISSUED\nIS_ISSUED -1- PARKING_TICKET\n\nPARKING_SLOT -1- IS_ASSIGNED\nIS_ASSIGNED -1- PARKING_TICKET\n\nEVENT -N- HOSTS\nHOSTS -1- SHOP\n\nSHOP -1- REQUESTS\nREQUESTS -N- MAINTENANCE_REQUEST\n\nMAINTENANCE_REQUEST -1- INCLUDES\nINCLUDES -(1,N)- FACILITY\n\nFACILITY -1- MAINTAINS\nMAINTAINS -N- EMPLOYEE\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage firefighters, equipment, emergency responses, and fire stations with the following requirements: Firefighter Management must include tracking firefighter details such as ID, rank, certifications, and shift schedules. Firefighters must be assigned to response teams for emergencies, including fires, accidents, and natural disasters. Incident Management must log emergency incidents with details such as location, type of emergency, response time, and the response teams assigned. Equipment Management must track fire trucks, protective gear, and other firefighting tools, including their condition, availability, and maintenance schedules, ensuring timely upkeep. Fire Station Management must oversee fire stations, recording details such as station location, personnel assignments, and equipment inventory. Training and Certification Management must track firefighter training programs and certifications to ensure skill readiness. Reporting must include generating insights on emergency response times, equipment usage, and firefighter performance for post-incident analysis and operational improvements. Financial Management must track budget allocation for equipment and training expenses to ensure efficient resource usage.",        
        "output": "@startchen\n\nentity FIREFIGHTER {\n    FirefighterID <<key>>\n    Rank\n    Certifications\n    ShiftSchedule\n}\n\nentity RESPONSE_TEAM {\n    TeamID <<key>>\n    Type\n    AssignedFirefighters\n}\n\nentity INCIDENT {\n    IncidentID <<key>>\n    Location\n    EmergencyType\n    ResponseTime\n}\n\nentity EQUIPMENT {\n    EquipmentID <<key>>\n    Type\n    Condition\n    Availability\n    MaintenanceDate\n    AssignedStationID <<FK>>\n}\n\nentity FIRE_STATION {\n    StationID <<key>>\n    Location\n    PersonnelCount\n    EquipmentInventory\n}\n\nentity TRAINING_PROGRAM {\n    ProgramID <<key>>\n    Name\n    Description\n    Duration\n}\n\nentity FINANCIAL_RECORD {\n    RecordID <<key>>\n    BudgetAllocation\n    EquipmentExpense\n    TrainingExpense\n}\n\nrelationship ASSIGNED_TO {\n}\nrelationship RESPONDS_TO {\n}\nrelationship USES {\n}\nrelationship USED_IN {\n}\nrelationship MANAGES {\n}\nrelationship UNDERGOES {\n}\nrelationship TRACKS {\n}\nrelationship INCLUDES {\n}\nrelationship HAS {\n}\n\nFIREFIGHTER -N- ASSIGNED_TO\nASSIGNED_TO -1- RESPONSE_TEAM\n\nRESPONSE_TEAM -1- RESPONDS_TO\nRESPONDS_TO -N- INCIDENT\n\nFIREFIGHTER -N- USES\nUSES -N- EQUIPMENT\n\nEQUIPMENT -N- MANAGES\nMANAGES -1- FIRE_STATION\n\nEQUIPMENT -N- USED_IN\nUSED_IN -1- INCIDENT\n\nFIREFIGHTER -N- UNDERGOES\nUNDERGOES -1- TRAINING_PROGRAM\n\nFINANCIAL_RECORD -1- INCLUDES\nINCLUDES -N- EQUIPMENT\n\nFINANCIAL_RECORD -1- INCLUDES\nINCLUDES -N- TRAINING_PROGRAM\n\nFIRE_STATION -1- TRACKS\nTRACKS -N- FINANCIAL_RECORD\n\nFIRE_STATION -1- HAS\nHAS -N- FIREFIGHTER\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage a mobile application that allows users to create, organize, and manage personal notes with the following requirements: User Management must include tracking user accounts with a unique ID, registration details, and login credentials. Each user must be able to create multiple notes. Note Management must include attributes for notes such as note ID, title, content, optional tags for categorization, creation date, and last modified date. Notes must be organized into folders for better structure. The system must support features like searching notes, sorting notes by date or title, and pinning important notes for quick access. Reminder Management must allow users to set reminders for specific notes, with the app sending notifications when reminders are due. Sync and Backup Management must ensure syncing across devices so users can access their notes on multiple platforms. Users must also be able to back up their data to the cloud to prevent loss of notes. Activity Tracking must log user activities, such as note creation, edits, and folder organization. The system must provide a recycle bin for deleted notes, allowing users to restore notes within a specific time frame.",        
        "output": "@startchen\n\nentity USER {\n    UserID <<key>>\n    Username\n    Password\n    Email\n}\n\nentity NOTE {\n    NoteID <<key>>\n    Title\n    Content\n    Tags\n    CreatedDate\n    LastModifiedDate\n}\n\nentity FOLDER {\n    FolderID <<key>>\n    Name\n    Description\n}\n\nentity REMINDER {\n    ReminderID <<key>>\n    ReminderDateTime\n    NotificationStatus\n}\n\nentity DEVICE {\n    DeviceID <<key>>\n    DeviceType\n    LastSyncDate\n}\n\nentity CLOUD_BACKUP {\n    BackupID <<key>>\n    BackupDate\n    Status\n}\n\nentity ACTIVITY_LOG {\n    LogID <<key>>\n    ActivityType\n    ActivityDate\n}\n\nrelationship CREATES {\n}\n\nrelationship CONTAINS {\n}\n\nrelationship SETS {\n}\n\nrelationship HAS {\n}\n\nrelationship BACKS_UP {\n}\n\nrelationship LOGGED_BY {\n}\n\nrelationship STORES {\n}\n\nrelationship ORGANIZES {\n}\n\nrelationship STORED_IN {\n}\n\nUSER -1- CREATES\nCREATES -N- NOTE\n\nUSER -1- ORGANIZES\nORGANIZES -N- FOLDER\n\nFOLDER -1- CONTAINS\nCONTAINS -N- NOTE\n\nUSER -1- SETS\nSETS -N- REMINDER\n\nNOTE -1- STORED_IN\nSTORED_IN -(1,N)- DEVICE\n\nUSER -1- BACKS_UP\nBACKS_UP -N- NOTE\n\nCLOUD_BACKUP -1- STORES\nSTORES -N- NOTE\n\nACTIVITY_LOG -N- LOGGED_BY\nLOGGED_BY -1- USER\n\nNOTE -1- HAS\nHAS -1- REMINDER\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage the production and operations of a cloth manufacturing factory with the following requirements: Raw Material Management must include tracking raw materials such as cotton, polyester, and dyes, with details like material ID, supplier information, purchase orders, and inventory levels. Production Process Management must track production batches, including batch ID, fabric type, quantity produced, production start and end dates, and machinery used. Machinery Management must monitor machinery usage, maintenance schedules, and operator assignments to ensure efficient workflow. Quality Control Management must record inspections, defects, and quality metrics for each production batch to maintain production standards. Finished Goods Inventory Management must track finished products, including stock levels, sales orders, and shipping logistics. Reporting must include generating insights on production efficiency, material usage, quality control metrics, and inventory levels to support performance analysis and informed decision-making.",        
        "output": "@startchen\n\nentity RAW_MATERIAL {\n    MaterialID <<key>>\n    MaterialType\n    SupplierID <<FK>>\n    PurchaseOrderID <<FK>>\n    InventoryLevel\n}\n\nentity SUPPLIER {\n    SupplierID <<key>>\n    SupplierName\n    ContactInfo\n}\n\nentity PRODUCTION_BATCH {\n    BatchID <<key>>\n    FabricType\n    QuantityProduced\n    ProductionDate\n}\n\nentity MACHINE {\n    MachineID <<key>>\n    MachineType\n    MaintenanceSchedule\n    OperatorID <<FK>>\n}\n\nentity OPERATOR {\n    OperatorID <<key>>\n    OperatorName\n    Shift\n}\n\nentity QUALITY_CONTROL {\n    InspectionID <<key>>\n    BatchID <<FK>>\n    Defects\n    QualityMetrics\n}\n\nentity FINISHED_GOOD {\n    GoodID <<key>>\n    ProductType\n    StockLevel\n    SalesOrderID <<FK>>\n}\n\nentity SALES_ORDER {\n    SalesOrderID <<key>>\n    OrderDate\n    Quantity\n}\n\nentity SHIPPING_LOGISTICS {\n    ShippingID <<key>>\n    GoodID <<FK>>\n    ShippingDate\n    Status\n}\n\nrelationship PRODUCES {\n}\nrelationship TRACKS {\n}\nrelationship ASSIGNED_TO {\n}\nrelationship INSPECTS {\n}\nrelationship CONTAINS {\n}\nrelationship RECORDS {\n}\nrelationship PROVIDES {\n}\nrelationship USES {\n}\n\nSUPPLIER -1- PROVIDES\nPROVIDES -N- RAW_MATERIAL\n\nPRODUCTION_BATCH -1- TRACKS\nTRACKS -N- RAW_MATERIAL\n\nMACHINE -1- USES\nUSES -N- PRODUCTION_BATCH\n\nMACHINE -1- PRODUCES\nPRODUCES -N- FINISHED_GOOD\n\nMACHINE -1- ASSIGNED_TO\nASSIGNED_TO -N- OPERATOR\n\nOPERATOR -1- INSPECTS\nINSPECTS -N- QUALITY_CONTROL\n\nFINISHED_GOOD -N- CONTAINS\nCONTAINS -1- SALES_ORDER\n\nFINISHED_GOOD -1- RECORDS\nRECORDS -1- SHIPPING_LOGISTICS\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage the operations of a disaster management company with the following requirements: Team Management must track emergency response teams, including details such as team member ID, name, role, contact information, and certifications (e.g., first aid, search and rescue). Disaster Response Plan Management must include tracking response plans for various emergencies, with attributes such as plan ID, type of disaster, location, specific procedures, assigned personnel, and contact points for local authorities and agencies. Resource Inventory Management must monitor supplies and equipment, tracking each item by inventory ID, quantity, location, and expiration dates for perishable items. Training Management must document training programs for personnel, including training schedules, attendee lists, and evaluation results to ensure adequate preparation. Reporting must generate insights on past disaster responses, resource usage, and team performance to support continuous improvement and effective planning for future emergencies.",        
        "output": "@startchen\n\nentity MEMBER {\n    MemberID <<key>>\n    Name\n    Role\n    ContactInfo\n    Certification\n}\n\nentity EMERGENCY_RESPONSE_TEAM {\n    TeamID <<key>>\n    TeamName\n    MemberID <<FK>>\n}\n\nentity EMERGENCY {\n    EmergencyID <<key>>\n    EmergencyType\n    Location\n    Date\n    Severity\n}\n\nentity DISASTER_RESPONSE_PLAN {\n    PlanID <<key>>\n    DisasterType\n    Location\n    ContactPoints\n}\n\nentity RESOURCE {\n    ResourceID <<key>>\n    ResourceType\n    Quantity\n    Location\n    ExpirationDate\n}\n\nentity RESOURCE_INVENTORY {\n    InventoryID <<key>>\n    ItemType\n    Quantity\n    Location\n    ExpirationDate\n}\n\nentity TRAINING_PROGRAM {\n    TrainingID <<key>>\n    Schedule\n    AttendeeList\n    EvaluationResults\n}\n\nentity REPORT {\n    ReportID <<key>>\n    EmergencyID <<FK>>\n    ResponseDate\n    ResourceUsage\n    TeamPerformance\n}\n\nrelationship ASSIGNED_TO {\n}\nrelationship HAS {\n}\nrelationship TRACKS {\n}\nrelationship TRAINS {\n}\nrelationship CONTAINS {\n}\nrelationship INCLUDES {\n}\nrelationship RESPONDS_TO {\n}\nrelationship ASSOCIATED_WITH {\n}\n\nEMERGENCY_RESPONSE_TEAM -1- CONTAINS\nCONTAINS -N- MEMBER\n\nDISASTER_RESPONSE_PLAN -1- INCLUDES\nINCLUDES -N- RESOURCE_INVENTORY\n\nDISASTER_RESPONSE_PLAN -N- ASSIGNED_TO\nASSIGNED_TO -N- MEMBER\n\nEMERGENCY -N- RESPONDS_TO\nRESPONDS_TO -1- EMERGENCY_RESPONSE_TEAM\n\nEMERGENCY -1- TRACKS\nTRACKS -1- REPORT\n\nTRAINING_PROGRAM -1- TRAINS\nTRAINS -N- MEMBER\n\nRESOURCE_INVENTORY -1- HAS\nHAS -N- RESOURCE\n\nDISASTER_RESPONSE_PLAN -1- ASSOCIATED_WITH\nASSOCIATED_WITH -1- EMERGENCY\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage a Car Rental System with the following requirements: Customer Management must track customer details such as customer ID, name, contact information, and driver's license details. Vehicle Management must include tracking a fleet of vehicles, with details such as car ID, make and model, license plate, status (available, rented, in maintenance), and rental price per day. Customers must be able to browse available cars based on criteria such as car type (SUV, sedan, etc.), availability, and price. Rental Process Management must handle car rentals, including selecting rental periods, calculating total rental costs (based on daily rates and additional fees like insurance or GPS), and generating rental agreements. Rental agreements must outline terms such as pickup and drop-off locations, dates, conditions, fuel policy (full-to-full, pre-purchase), mileage limits, and any required security deposits. Return Process Management must assess car conditions upon return, track mileage, and record any damages. Feedback Management must allow customers to provide feedback and ratings based on their rental experience. Reporting must generate insights on vehicle usage, customer satisfaction, and financial performance, supporting management in optimizing the fleet and improving services.",        
        "output": "@startchen\n\nentity CUSTOMER {\n  CustomerID <<key>>\n  Name\n  ContactInfo\n  DriversLicense\n}\n\nentity CAR {\n  CarID <<key>>\n  Make\n  Model\n  LicensePlate\n  Status\n  DailyRentalPrice\n}\n\nentity RENTAL_DETAILS {\n  RentalID <<key>>\n  RentalStartDate\n  RentalEndDate\n  TotalCost\n  PickupLocation\n  DropoffLocation\n  FuelPolicy\n  MileageLimit\n  SecurityDeposit\n  CustomerID <<FK>>\n  CarID <<FK>>\n}\n\nentity RENTAL_AGREEMENT {\n  AgreementID <<key>>\n  TermsAndConditions\n  RentalID <<FK>>\n}\n\nentity RETURN_DETAILS {\n  ReturnID <<key>>\n  ReturnDate\n  CarCondition\n  Mileage\n  Damages\n  RentalID <<FK>>\n}\n\nentity FEEDBACK {\n  FeedbackID <<key>>\n  Rating\n  Comments\n  CustomerID <<FK>>\n}\n\nrelationship RENTS {\n}\nrelationship INCLUDES { \n}\nrelationship RETURNED_BY { \n}\nrelationship PROVIDES_FEEDBACK { \n}\nrelationship ASSOCIATED_WITH {\n}\n\nCUSTOMER -N- RENTS\nRENTS -1- CAR\n\nRENTAL_DETAILS -1- INCLUDES\nINCLUDES -1- RENTAL_AGREEMENT\n\nRENTAL_DETAILS -1- INCLUDES\nINCLUDES -1- RETURN_DETAILS\n\nRETURN_DETAILS -1- RETURNED_BY\nRETURNED_BY -1- CUSTOMER\n\nCUSTOMER -N- PROVIDES_FEEDBACK\nPROVIDES_FEEDBACK -1- FEEDBACK\n\nCAR -1- ASSOCIATED_WITH\nASSOCIATED_WITH -N- RENTAL_DETAILS\n\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage a Package Tracking System with the following requirements: Package Management must include assigning a unique tracking ID to each package and linking it to sender and recipient details, such as names, addresses, and contact information. Transit Tracking must monitor packages through various stages, including pickup, in transit, customs clearance (if applicable), and delivery, with each stage logged by timestamp, location, and status updates (e.g., out for delivery, delayed, delivered). Real-Time Updates must allow customers to view the package’s journey via a mobile app or web portal. Logistics personnel must update the package’s status and location at checkpoints, and the system must send automated notifications for significant updates, such as successful delivery or delays. Warehouse Management must track packages stored at distribution centers, including expected delivery timelines. Delivery Confirmation must capture the recipient’s signature (digitally or physically) upon delivery to confirm receipt. Feedback Management must allow customers to provide feedback on their delivery experience. Reporting must generate insights on delivery performance, customer satisfaction, and package transit times to help logistics companies improve operations and service quality.",        
        "output": "@startchen\nentity SENDER {\n  SenderID <<key>>\n  Name\n  Address\n  ContactInfo\n}\n\nentity RECIPIENT {\n  RecipientID <<key>>\n  Name\n  Address\n  ContactInfo\n}\n\nentity PACKAGE {\n  TrackingID <<key>>\n  Weight\n  Dimensions\n  Status\n  DispatchDate\n  ExpectedDeliveryDate\n  SenderID <<FK>>\n  RecipientID <<FK>>\n}\n\nentity TRANSIT_LOG {\n  LogID <<key>>\n  Timestamp\n  Location\n  StatusUpdate\n  TrackingID <<FK>>\n}\n\nentity WAREHOUSE {\n  WarehouseID <<key>>\n  Location\n  Capacity\n}\n\nentity DELIVERY {\n  DeliveryID <<key>>\n  DeliveryDate\n  RecipientSignature\n  TrackingID <<FK>>\n}\n\nentity FEEDBACK {\n  FeedbackID <<key>>\n  Rating\n  Comments\n  RecipientID <<FK>>\n}\n\nrelationship SENDS {\n}\nrelationship RECEIVES {\n}\nrelationship TRACKED_BY {\n}\nrelationship STORED_AT {\n}\nrelationship CONFIRMED_BY {\n}\nrelationship PROVIDES_FEEDBACK {\n}\n\nSENDER -1- SENDS\nSENDS -N- PACKAGE\n\nRECIPIENT -1- RECEIVES\nRECEIVES -N- PACKAGE\n\nPACKAGE -N- TRACKED_BY\nTRACKED_BY -1- TRANSIT_LOG\n\nPACKAGE -N- STORED_AT\nSTORED_AT -1- WAREHOUSE\n\nPACKAGE -1- CONFIRMED_BY\nCONFIRMED_BY -1- DELIVERY\n\nRECIPIENT -1- PROVIDES_FEEDBACK\nPROVIDES_FEEDBACK -N- FEEDBACK\n@endchen"
    },
    {
        "input": "Design an ER schema for a database to manage a Snack and Grocery Shop Management System with the following requirements: Product and Inventory Management must register products with attributes such as product ID, name, brand, category (snacks, groceries, beverages), price, stock quantity, and expiration date for perishables. The system must track stock levels and alert managers about low inventory or expiring items. Automatic restocking must be configurable with reorder levels, generating purchase orders for suppliers, and updating inventory upon delivery. Sales and Order Management must process in-store purchases through a point-of-sale (POS) system, recording details such as products sold, payment method, and receipt. For online orders, the system must allow customers to choose delivery or in-store pickup, track order status, and store order IDs, customer details, and transaction data. Loyalty rewards for repeat customers must also be supported. Supplier and Customer Management must store supplier information, including supplier ID, contact details, and products supplied. Purchase orders must track ordered items, quantities, delivery status, and costs. Customer profiles must include customer ID, contact details, and order history to enable personalized promotions and loyalty program management. Customers must earn points redeemable for discounts based on purchase habits. Reporting, Analytics, and Promotions must generate detailed sales reports covering performance trends, top-selling items, and low performers. Analytics on seasonal demand and profit margins must guide inventory and pricing strategies. The system must support creating and tracking time-based discounts and promotions to enhance customer engagement and drive sales. Financial and Payment Management must support various payment methods, ensuring smooth transactions and tracking revenue, expenses, and profits. Refunds and exchanges must be managed seamlessly, updating inventory and customer records. Financial reports must help store owners make informed decisions for efficient financial management.",        
        "output": "@startchen\n\nentity PRODUCT {\n  ProductID <<key>>\n  Name\n  Brand\n  Category\n  Price\n  StockQuantity\n  ExpirationDate\n}\n\nentity INVENTORY {\n  InventoryID <<key>>\n  ProductID <<FK>>\n  ReorderLevel\n  StockLevel\n}\n\nentity SUPPLIER {\n  SupplierID <<key>>\n  Name\n  ContactInfo\n  ProductsSupplied\n}\n\nentity CUSTOMER {\n  CustomerID <<key>>\n  Name\n  ContactInfo\n  LoyaltyPoints\n}\n\nentity ORDER {\n  OrderID <<key>>\n  OrderDate\n  TotalAmount\n  PaymentMethod\n  CustomerID <<FK>>\n}\n\nentity ORDER_DETAILS {\n  OrderDetailsID <<key>>\n  OrderID <<FK>>\n  ProductID <<FK>>\n  Quantity\n  Price\n}\n\nentity PURCHASE_ORDER {\n  PurchaseOrderID <<key>>\n  SupplierID <<FK>>\n  OrderDate\n  Status\n  TotalCost\n}\n\nentity PROMOTION {\n  PromotionID <<key>>\n  Name\n  StartDate\n  EndDate\n  DiscountPercentage\n}\n\nrelationship SUPPLIES {\n}\nrelationship PURCHASED_BY {\n}\nrelationship INCLUDES {\n}\nrelationship BELONGS_TO {\n}\nrelationship MANAGES {\n}\nrelationship APPLIES_TO {\n}\nrelationship CONTAINS {\n}\n\nSUPPLIER -1- SUPPLIES\nSUPPLIES -N- PRODUCT\n\nCUSTOMER -1- PURCHASED_BY\nPURCHASED_BY -N- ORDER\n\nORDER -1- INCLUDES\nINCLUDES -N- ORDER_DETAILS\n\nORDER_DETAILS -N- CONTAINS\nCONTAINS -1- PRODUCT\n\nPRODUCT -N- BELONGS_TO\nBELONGS_TO -1- INVENTORY\n\nPRODUCT -N- APPLIES_TO\nAPPLIES_TO -1- PROMOTION\n\nSUPPLIER -N- MANAGES\nMANAGES -1- PURCHASE_ORDER\n@endchen"
    },
    {
        "input": "Create a usecase diagram for this system. Healthcare service has huge demand these days as it really helps in managing a hospital or a medical office. The scope of healthcare service systems is increasing each day and it is true for the entire world. Some of these solutions include improved awareness about healthcare services and health policies. The objective of this system is to provide medical assistance to people instantly with the help of technology. This system eradicates the cultural sensitivity that prevails in many hospitals and improves the quality of medical assistance. The captivating features of this system are online doctors, medicines at doorstep, and bulletin of awareness. The users can also navigate and choose among various insurance schemes that are displayed.\n\nThe primary objectives of Webmed healthcare system are to enable all citizens to receive healthcare services whenever needed, and to deliver health services that are cost-effective and meet pre-established standards of quality. The main functions of this system deal with finance, health A-Z, resources, drugs and supplements, news and experts, payment and feedback. Register function allows the patients or the caregivers to register on the website. Login function allows the patients to access the website. Financing focuses on the purchase of insurance. Health A-Z displays all the diseases along with their symptoms. Resources function consists of the sub-functions including symptoms checker, health calculator, find a doctor based on the geographical location of the patient, insurance guide, and ambulance providence. Drugs and supplements include online medicine delivery, where people could shop for medicines online. News and experts function is to provide health awareness and threats that are prevailing. This function also gives information regarding counselling programs and blood donation camps. The payment function is to reimburse providers for services delivered. The feedback function collects user reviews for the website.",
        "output": "@startuml\nleft to right direction\n\nactor ServiceProvider\nactor User\n\nrectangle System {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Use Facilities\" as UC3\n    usecase \"Access Finance\" as UC4\n    usecase \"Access Health A-Z\" as UC5\n    usecase \"Use Resources\" as UC6\n    usecase \"Do Payment\" as UC7\n    usecase \"Give Feedback\" as UC8\n    usecase \"Logout\" as UC9\n    usecase \"Access News And Experts\" as UC10\n    usecase \"Get Drugs And Supplements\" as UC11\n}\n\nServiceProvider --> UC6\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC9\nUser --> UC7\nUser --> UC6\nUser --> UC10\nUser --> UC11\nUser --> UC5\nUser --> UC4\n\n\n\n\nUC7 --> UC8 : <<extend>>\n@enduml"   
    },
    {
        "input": "Create a usecase diagram for this system. The Online Examination System is a web-based application that allows students to take exams online. The system consists of the following functions: User Registration, Exam Creation, Exam Taking, Result Generation, and Exam Analysis. User Registration – This function allows students to create an account on the online examination system. Exam Creation – This function allows teachers to create exams and set questions. Exam Taking – This function allows students to take exams online. Result Generation – This function generates results for the exams taken by students. Exam Analysis – This function provides analysis of the exams taken by students. The main goal of the system is to provide a platform for students to take exams online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Teacher\n\nrectangle Online_Examination_System {\n    usecase \"Register\" as UC1\n    usecase \"Create Exam\" as UC2\n    usecase \"Take Exam\" as UC3\n    usecase \"Generate Result\" as UC4\n    usecase \"Analyze Exam\" as UC5\n}\n\nStudent --> UC1\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\n\nTeacher --> UC2\n\nUC3 --> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Create a usecase diagram for this system. The Online Voting System is a web-based application that allows citizens to vote online. The system consists of the following functions: Voter Registration, Candidate Registration, Voting, Result Generation, and Voter Analysis. Voter Registration – This function allows citizens to register as voters in the online voting system. Candidate Registration – This function allows candidates to register for elections. Voting – This function allows voters to cast their votes online. Result Generation – This function generates results for the elections. Voter Analysis – This function provides analysis of the votes cast by voters. The main goal of the system is to provide a platform for citizens to vote online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Citizen\nactor Candidate\n\nrectangle Online_Voting_System {\n    usecase \"Register as Voter\" as UC1\n    usecase \"Register as Candidate\" as UC2\n    usecase \"Cast Vote\" as UC3\n    usecase \"Generate Result\" as UC4\n    usecase \"Analyze Votes\" as UC5\n}\n\nCitizen --> UC1\nCitizen --> UC3\nCitizen --> UC4\nCitizen --> UC5\n\nCandidate --> UC2\n\nUC3 --> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Give me a use case diagram for this E-Ticketing System for Buses. In this case study, a software package to automate the manual procedures of reserving a bus ticket is made through Software Maintenance and Development Center (SMDC) Travels. Specifically, the objectives of this case study consist of providing a web-based bus ticket reservation function where a customer can buy a bus ticket through the online system without a need to queue up at the counter to purchase a bus ticket, enabling customers to check the availability and types of buses online. Customer can check the time departure for every Indian Tourist Centre (ITC) bus through the system, easing bus ticket payment by obtaining a bank pin after payments is made to the various designated banks, the ability of customers to cancel their reservation, admin user privileges in updating and cancelling payment, route and vehicle records.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Manager\n\nrectangle Bus_E-Ticketing_System {\n    usecase \"Registration\" as UC1\n    usecase \"Make Reservation\" as UC2\n    usecase \"Cancellation\" as UC3\n    usecase \"Do Payment\" as UC4\n    usecase \"Check Status\" as UC5\n    usecase \"Edit Profile\" as UC6\n    usecase \"Delete Account\" as UC7\n    usecase \"Manage Transactions\" as UC8\n    usecase \"Update Routes\" as UC9\n    usecase \"Update Bus Schedules\" as UC10\n    usecase \"Update Vehicle Records\" as UC11\n    usecase \"Update User Credentials\" as UC12\n    usecase \"Manage Account\" as UC13\n    usecase \"Generate Reports\" as UC14\n}\n\nCustomer --> UC1\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC13\nCustomer --> UC2\n\nManager --> UC8\nManager --> UC9\nManager --> UC10\nManager --> UC11\nManager --> UC14\n\nactor Admin <<secondary>>\n\nAdmin --> UC10\nAdmin --> UC12\nAdmin --> UC7\n\nUC4 --> UC3 : <<extend>>\nUC13 --> UC7 : <<extend>>\nUC13 --> UC6 : <<extend>>\n@enduml"    
    },
    {
        "input": "The Weather Monitoring System allows people to directly check the weather status online. The functionalities are Weather Status, Live Updating, Alert, Graphical Representation, Future Prediction and Weekly Analysis. Weather Status – With this function, temperature, humidity, rainfall, pressure and dew point are measured using sensors. Live Updating – Data are live updated to be viewed by the user. Alert – This functionality provides tips and alerts to the user on certain weather conditions. Graphical Representation – Plotting of graphs based on variations in temperature for easier analysis. Future Prediction – This functionality helps in predicting the weather for the next few days. WeeklyAnalysis – Displaying the average, the highest and lowest temperature of the week. The final goal is to provide detailed weather conditions for the user based on his/her location. Give me a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Weather_Monitoring_System {\n    usecase \"Check Weather Status\" as UC1\n    usecase \"Live Update\" as UC2\n    usecase \"Get Alerts\" as UC3\n    usecase \"Generate Graphical Representation\" as UC4\n    usecase \"Predict Future Weather\" as UC5\n    usecase \"Weekly Analysis\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\n\nUC1 --> UC2 : <<extend>>\nUC4 --> UC5 : <<extend>>\n@enduml"
    },
    {
        "input": "The Online Shopping System is a web-based application that allows customers to purchase products online. The system consists of the following functions: User Registration, Product Catalog, Shopping Cart, Payment Gateway, Order History, and Customer Support. User Registration – This function allows users to create an account on the website. Product Catalog – This function displays all the products available for purchase. Shopping Cart – This function allows users to add products to their cart. Payment Gateway – This function allows users to make payments for their purchases. Order History – This function displays the user's past orders. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient and user-friendly platform for customers to shop online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Shopping_System {\n    usecase \"Register\" as UC1\n    usecase \"View Products\" as UC2\n    usecase \"Add To Cart\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"View Order History\" as UC5\n    usecase \"Contact Support\" as UC6\n    usecase \"Provide Support\" as UC7\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n\nSupport --> UC7\nUC6 --> UC7 : <<include>>\n@enduml"
    },
    {
        "input": "The Library Management System is a software application that helps in maintaining a library. The system consists of the following functions: User Registration, Book Catalog, Borrowing Books, Returning Books, Renewing Books, and Late Fee Calculation. User Registration – This function allows users to create an account in the library system. Book Catalog – This function displays all the books available in the library. Borrowing Books – This function allows users to borrow books from the library. Returning Books – This function allows users to return books to the library. Renewing Books – This function allows users to renew the borrowed books. Late Fee Calculation – This function calculates the late fee for books returned after the due date. The main goal of the system is to provide an efficient and organized way of managing library operations. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Librarian\nactor User\n\nrectangle Library_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"View Books\" as UC2\n    usecase \"Borrow Book\" as UC3\n    usecase \"Return Book\" as UC4\n    usecase \"Renew Book\" as UC5\n    usecase \"Calculate Late Fee\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\n\nLibrarian -right-> UC6\n\nUC5 --> UC6 : <<include>>\n@enduml"
            
    },
    {
        "input": "Citizens in every district face the difficulty with the issuing of government certificates like birth/death certificates, income and caste certificates, old age and widow pensions, etc. This can be done with e-Province. This case study demonstrates how to make the government services available to the citizens in a convenient, efficient, and transparent manner, by enabling it simply by reliable access over the Internet. The main objective is to bring the public services closer to the citizens. To fulfill the vision of providing an easy and convenient service to the citizens through remote access primarily through Common Service Centre (CSCs), the e-Province project is created. This case study aims to develop a State Portal (SP) to provide all the citizens of the respective province to access the services under a single interface mechanism in the form of the Portal. The various modules in the e-Province project are an Admin module that creates, updates, deactivates the users and performs various other tasks. A Login module that allows the users to login with their unique Application number with approved status. A User module that allows the approved users to register for the respective certificates. A User Profile module that creates the pre-requisite information of the user that needs to be stored in the database. The Certificate module contains the required forms that are to be filled with the information of the users. Give me a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Citizen\nactor Admin\n\nrectangle E-Province {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Apply for Certificate\" as UC3\n    usecase \"Issue Certificate\" as UC4\n    usecase \"Manage User Profile\" as UC5\n    usecase \"View User Profile\" as UC6\n    usecase \"Deactivate User\" as UC7\n}\n\nCitizen --> UC1\nCitizen --> UC2\nCitizen --> UC3\nCitizen --> UC5\n\nAdmin --> UC4\nAdmin --> UC6\nAdmin --> UC5\n\nUC5 --> UC7 : <<extend>>\n@enduml"  
    },

    {
        "input": "The Online Banking System is a web-based application that allows customers to perform banking transactions online. The system consists of the following functions: User Registration, Account Management, Fund Transfer, Bill Payment, Transaction History, and Customer Support. User Registration – This function allows users to create an account on the online banking system. Account Management – This function allows users to view and manage their accounts. Fund Transfer – This function allows users to transfer funds between accounts. Bill Payment – This function allows users to pay bills online. Transaction History – This function displays the user's transaction history. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a secure and convenient platform for customers to perform banking transactions online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Banking_System {\n    usecase \"Register\" as UC1\n    usecase \"Manage Account\" as UC2\n    usecase \"Transfer Funds\" as UC3\n    usecase \"Pay Bills\" as UC4\n    usecase \"View Transaction History\" as UC5\n    usecase \"Contact Support\" as UC6\n    usecase \"Provide Support\" as UC7\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n\nSupport --> UC7\nUC6 --> UC7 : <<include>>\n\nUC3 --> UC4 : <<extend>>\n@enduml"    
    },
    {
        "input": "Give me usecase diagram for this. Maintaining the authentic documents physically in a single location is considered to be a challenging task. Thus, digitizing documents enables centralized storage of all the physical documents, enabling easy retrieval from anywhere at any time. It also prevents the troubles caused by missing any of those physical certificates. This can be achieved through the DigiDocLocker which is a platform for issuance and verification of documents and certificates in a digital format, thereby eliminating the use of physical documents. DigiDocLocker aims at benefiting all the citizens of the country by providing access to authentic documents/certificates such as driving licence, vehicle registration, and academic mark sheets in digital format from the original issuers of these certificates. DigiDocLocker has the following functionalities:\ni. A Registration module allows the users to register and a Login module that allows the authorized users.\nii. An Upload Document module allows the users to upload documents such as driving licence, vehicle registration, academic mark sheet, and other relevant documents in various file formats.\niii. A Profile module displays the complete profile of the user as available in the database.\niv. An Issuer module displays the certificate issuers’ names and the number of documents issued to the user by the issuer. For example, the Income Tax Department, Government of India has provided PAN Verification Records to Indian citizens via DigiLocker.\nv. A Requester module displays the requesters’ names and the number of documents requested from the user by the requesters. For example, citizens applying through Union Public Service Commission (UPSC)'s Online Recruitment Application (ORA) can upload documents through DigiDocLocker as well.",
        "output": "@startuml\nleft to right direction\n\nactor Citizen\nactor \"Requester (Eg: UPSC)\" as Requester\nactor \"Issuer (Eg: Income Tax Department)\" as Issuer\n\nrectangle DigiDocLocker {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Request Document\" as UC3\n    usecase \"Upload Document\" as UC4\n    usecase \"View Profile\" as UC5\n    usecase \"Issue Document\" as UC6\n}\n\nCitizen --> UC1\nCitizen --> UC2\nCitizen --> UC4\nCitizen --> UC5\n\nRequester --> UC3\nRequester --> UC2\nIssuer --> UC2\nIssuer --> UC6\n@enduml"  
    },
    {
        "input": "Various new small scale and medium scale sellers face difficulties to reach out to the customers and sell their products along with other competing products in the market. This increases their overall cost, thus reducing their profit or even causing loss. E-Retail is an online marketplace application case study where small and medium scale sellers can list, showcase, advertise, and sell their products directly to the customers without any physical store. E-Retail aims in providing a dynamic platform for all small and medium scale sellers to reach out and sell their products directly to all range of customers at a competing price without the need of any physical store. This enables the sellers to eliminate the cost of rent or maintenance of a physical store and to minimize other related costs. It also aims in promoting direct communication between the seller and customer, hence providing a trusted relationship between them. New sellers can easily authenticate and sign up to the portal and sell their products in the portal. The application offers separate login for sellers and customers, where the sellers and customers can sign in and start using the application. Customers can view all the products available from various sellers and buy those products. It also facilitates online payments for purchasing the products. Customers can rate or give a review for the product and seller. Customers can also report a seller for any violations in delivery or if the product does not meet the specified requirement. Customers can also view the contact information and the rating of the seller before buying the product. Give a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Seller\nactor Customer\n\nrectangle E-Retail {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"List Products\" as UC3\n    usecase \"View Products\" as UC4\n    usecase \"Buy Products\" as UC5\n    usecase \"Rate Product\" as UC6\n    usecase \"Report Seller\" as UC7\n    usecase \"View Seller Information\" as UC8\n    usecase \"Make Payment\" as UC9\n}\n\nSeller --> UC1\nSeller --> UC2\nSeller --> UC3\nSeller --> UC4\n\nCustomer --> UC2\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\nCustomer --> UC8\n\nUC5 --> UC6 : <<extend>>\nUC5 --> UC9 : <<include>>\n@enduml"            
    },
    {
        "input": "The Online Food Ordering System is a web-based application that allows customers to order food online. The system consists of the following functions: User Registration, Restaurant Selection, Menu Browsing, Order Placement, Payment Gateway, Order Tracking, and Customer Support. User Registration – This function allows users to create an account on the online food ordering system. Restaurant Selection – This function allows users to select a restaurant from which they want to order food. Menu Browsing – This function allows users to browse the menu of the selected restaurant. Order Placement – This function allows users to place an order for food. Payment Gateway – This function allows users to make payments for their orders. Order Tracking – This function allows users to track the status of their orders. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to order food online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Food_Ordering_System {\n    usecase \"Register\" as UC1\n    usecase \"Select Restaurant\" as UC2\n    usecase \"Browse Menu\" as UC3\n    usecase \"Place Order\" as UC4\n    usecase \"Make Payment\" as UC5\n    usecase \"Track Order\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC4 --> UC5 : <<include>>\n@enduml"          
        
    },
    {
        "input": "The Online Movie Ticket Booking System is a web-based application that allows customers to book movie tickets online. The system consists of the following functions: User Registration, Movie Selection, Seat Selection, Payment Gateway, Ticket Confirmation, Ticket Cancellation, and Customer Support. User Registration – This function allows users to create an account on the online movie ticket booking system. Movie Selection – This function allows users to select a movie for which they want to book tickets. Seat Selection – This function allows users to select seats for the selected movie. Payment Gateway – This function allows users to make payments for their ticket bookings. Ticket Confirmation – This function confirms the booking of tickets. Ticket Cancellation – This function allows users to cancel their ticket bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to book movie tickets online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Movie_Ticket_Booking_System {\n    usecase \"Register\" as UC1\n    usecase \"Select Movie\" as UC2\n    usecase \"Select Seats\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Confirm Ticket\" as UC5\n    usecase \"Cancel Ticket\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC5 --> UC6 : <<extend>>\n@enduml"       
    },
    {
        "input": "The Online Hotel Booking System is a web-based application that allows customers to book hotel rooms online. The system consists of the following functions: User Registration, Hotel Selection, Room Selection, Payment Gateway, Booking Confirmation, Booking Cancellation, and Customer Support. User Registration – This function allows users to create an account on the online hotel booking system. Hotel Selection – This function allows users to select a hotel for which they want to book rooms. Room Selection – This function allows users to select rooms in the selected hotel. Payment Gateway – This function allows users to make payments for their room bookings. Booking Confirmation – This function confirms the booking of rooms. Booking Cancellation – This function allows users to cancel their room bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to book hotel rooms online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Hotel_Booking_System {\n    usecase \"Register\" as UC1\n    usecase \"Select Hotel\" as UC2\n    usecase \"Select Room\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Confirm Booking\" as UC5\n    usecase \"Cancel Booking\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC5 --> UC6 : <<extend>>\n@enduml"
    },
    {
        "input": "The Online Flight Booking System is a web-based application that allows customers to book flight tickets online. The system consists of the following functions: User Registration, Flight Selection, Seat Selection, Payment Gateway, Ticket Confirmation, Ticket Cancellation, and Customer Support. User Registration – This function allows users to create an account on the online flight booking system. Flight Selection – This function allows users to select a flight for which they want to book tickets. Seat Selection – This function allows users to select seats for the selected flight. Payment Gateway – This function allows users to make payments for their ticket bookings. Ticket Confirmation – This function confirms the booking of tickets. Ticket Cancellation – This function allows users to cancel their ticket bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a convenient platform for customers to book flight tickets online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Flight_Booking_System {\n    usecase \"Register\" as UC1\n    usecase \"Select Flight\" as UC2\n    usecase \"Select Seats\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Confirm Ticket\" as UC5\n    usecase \"Cancel Ticket\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC5 --> UC6 : <<extend>>\n@enduml"
    },
    {
        "input": "The Online Event Management System is a web-based application that allows users to manage events online. The system consists of the following functions: User Registration, Event Creation, Event Promotion, Ticket Booking, Payment Gateway, Event Tracking, and Customer Support. User Registration – This function allows users to create an account on the online event management system. Event Creation – This function allows users to create events and manage event details. Event Promotion – This function allows users to promote events to attract attendees. Ticket Booking – This function allows users to book tickets for events. Payment Gateway – This function allows users to make payments for ticket bookings. Event Tracking – This function allows users to track the status of events and ticket bookings. Customer Support – This function allows users to contact customer support for any queries or issues. The main goal of the system is to provide a platform for users to manage and promote events online. Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor \"Customer Support\" as Support\n\nrectangle Online_Event_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"Create Event\" as UC2\n    usecase \"Promote Event\" as UC3\n    usecase \"Book Ticket\" as UC4\n    usecase \"Make Payment\" as UC5\n    usecase \"Track Event\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC4 --> UC5 : <<include>>\n@enduml"
    },
    {
        "input": "Give use case diagram for this. The need for law and enforcement in a country with a high population like India is salient. Lawyers play a major role in maintaining most of their data as hard copies. This project is mainly designed for lawyers to make their work more easy and efficient. It is a responsive web application that would provide lawyers with various services that would help them to maintain their documents. The services include a logbook that has details about the cases along with a calendar. The lawyers can also upload and save documents related to their case. It contains formats of model forms and links to online filing. It also provides quick references of common cases and detailed information about laws through e-books. Information about the judicial exams for lawyers is also made available. Furthermore, the web application contains news updates for lawyers, blogs and feedback. This case study will serve as a small hand tool for lawyers to maintain the soft copies of their data.",
        "output": "@startuml\nleft to right direction\n\nactor Lawyer\nactor Admin\n\nrectangle Law_Enforcement_System {\n    usecase \"Register\" as UC1\n    usecase \"View Case details and logs\" as UC2\n    usecase \"Add case\" as UC3\n    usecase \"Update details\" as UC4\n    usecase \"Criminal\" as UC5\n    usecase \"Civil\" as UC6\n    usecase \"Filing online\" as UC7\n    usecase \"Download Model Forms\" as UC8\n    usecase \"Display Links\" as UC9\n    usecase \"Display Forms\" as UC10\n    usecase \"Quick references\" as UC11\n    usecase \"Books\" as UC12\n    usecase \"Add feedback\" as UC13\n    usecase \"View Blogs and news updates\" as UC14\n    usecase \"Download\" as UC15\n    usecase \"Upload Documents\" as UC16\n    usecase \"Update Logs\" as UC17\n    usecase \"Update Calendar\" as UC18\n    usecase \"Set reminders\" as UC19\n}\n\nLawyer --> UC1\nLawyer --> UC2\nLawyer --> UC3\nLawyer --> UC7\nLawyer --> UC8\nLawyer --> UC13\nLawyer --> UC14\n\nUC3 --> UC4 : <<include>>\nUC4 --> UC5 : <<extend>>\nUC4 --> UC6 : <<extend>>\nUC7 --> UC9 : <<extend>>\nUC8 --> UC10 : <<include>>\nUC8 --> UC11 : <<extend>>\nUC11 --> UC12 : <<extend>>\n\nAdmin --> UC16\nAdmin --> UC17\nAdmin --> UC18\nAdmin --> UC19\n\nUC16 --> UC15 : <<extend>>\nUC19 --> UC18 : <<include>>\n@enduml"  
    },
    {
        "input": "This case study is helpful to people who forget their mobile phones at home as a part of their busy daily routines. Keeping tick of essentials in this fast-paced life sometimes turns out to be quite demanding. People sometimes forget their phones at home. What if we need to make an important call and we don’t remember the contact number? Sometimes our phones just get disappeared and the scariest part is when the phone is put on silent mode. We sometimes want to lock our phones when they aren’t around us. Need to know the exact location of your phone? Therein comes the use of ‘My Helper’. The solutions to all the problems stated above can be solved easily and very quickly if you have the application ‘My Helper’ pre-installed on your phone and you have completed configuring the app. All you need to do is just send an SMS to your mobile number from any phone that you have access to…and there goes your problem solved. The scope of this system is increasing every day across the entire world where everything is happening at the speed of a Formula 1 Car on a race track. The objective of this system is to provide help to people facing these types of problems instantly with the help of advanced technology. The alluring features of this system are Remote Access without the Internet, Track your phone through an SMS, HassleFree as no OTP and ID PASSWORD is required and an SMS can help you change the sound profile of your phone (silent to normal) without Internet. The system is user friendly and the application will be available to even basic smartphones. Give me a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle My_Helper {\n    usecase \"Send SMS\" as UC1\n    usecase \"Track Phone\" as UC2\n    usecase \"Lock Phone\" as UC3\n    usecase \"Change Sound Profile\" as UC4\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\n\nUC1 --> UC4 : <<extend>>\n@enduml"  
    },
    {
        "input": "Create a use case diagram for this system. The all in one COVID-19 management system simplifies the entire process of decreasing the virus load in the community by digitalization. It includes tracking and treating COVID-19 patients and monitoring the spread of the virus. It aims to assist healthcare organizations and governments to assess patient risk profiles and provide awareness to common people by connecting them with virtual care capabilities. With the current epidemiological situation of COVID-19, there is a high demand to reduce contact between persons and digitize the whole process. This will effectively reduce the infection rate, help the common people and empower medical professionals across the world to help more patients through telemedicine and virtual care.",
        "output": "@startuml\nleft to right direction\n\nactor Healthcare_Organization\nactor Government\nactor Patient\n\nrectangle COVID-19_Management_System {\n    usecase \"Track COVID-19 Patients\" as UC1\n    usecase \"Treat COVID-19 Patients\" as UC2\n    usecase \"Monitor Virus Spread\" as UC3\n    usecase \"Assess Patient Risk\" as UC4\n    usecase \"Provide Awareness\" as UC5\n    usecase \"Connect with Virtual Care\" as UC6\n    usecase \"Buy Medicines\" as UC7\n}\n\nHealthcare_Organization --> UC1\nHealthcare_Organization --> UC2\nHealthcare_Organization --> UC4\nHealthcare_Organization --> UC6\n\nGovernment --> UC3\nGovernment --> UC4\nGovernment --> UC5\n\nPatient --> UC1\nPatient --> UC7\nPatient --> UC6\n\nUC4 --> UC6 : <<extend>>\n@enduml"  
    },
    {
        "input": "Give a use case diagram for this. Most of the car owners do not know whether their car is at risk and needs to be serviced. This considerably increases the risk of malfunctioning of major parts of a car such as the braking system and engine which lead to accidents. Car Care is a multi-brand car service and maintenance application that maintains the date at which the specific part of a car is installed and notifies the expiry date of the parts of the car for both the driver and authorized service centre, so that the car can be serviced. This application enables car owners and service centres to separately login and enter their cars information. After issuing the car, the service centre employee enters the estimated expiry dates of parts of the car in this app. This application notifies the car owners and service centres when the expiry date for parts of the car is reached. Then the service centre employee contacts the owner of a car about service, once the owner accepts service request, the service centre employee picks up the car from home, this saves the time for owner of car. And then service centre employee examines the entire car and prepares the list of the damaged parts of the car and send it to the owner of the car through this app, once the owner selects the damaged parts to be serviced, the employee services the owner selected parts and updates the information about changed parts in the app so that the car can be service again on the expiry date of changed parts. Thus, this application helps in exchanging information between car owners and service centres. This application also enables the online payment for the services.",
        "output": "@startuml\nleft to right direction\n\nactor Car_Owner\nactor Service_Centre\n\nrectangle Car_Care {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Enter Car Information\" as UC3\n    usecase \"Enter Expiry Dates\" as UC4\n    usecase \"Notify Expiry\" as UC5\n    usecase \"Accept Service Request\" as UC6\n    usecase \"Pick Up Car\" as UC7\n    usecase \"Examine Car\" as UC8\n    usecase \"Prepare List\" as UC9\n    usecase \"Select Damaged Parts\" as UC10\n    usecase \"Service Parts\" as UC11\n    usecase \"Update Information\" as UC12\n    usecase \"Make Payment\" as UC13\n}\n\nCar_Owner --> UC1\nCar_Owner --> UC2\nCar_Owner --> UC3\nCar_Owner --> UC5\nCar_Owner --> UC6\nCar_Owner --> UC10\nCar_Owner --> UC13\n\nService_Centre --> UC2\nService_Centre --> UC4\nService_Centre --> UC7\nService_Centre --> UC8\nService_Centre --> UC9\nService_Centre --> UC11\nService_Centre --> UC12\n\nUC6 --> UC7 : <<extend>>\nUC9 --> UC10 : <<include>>\nUC11 --> UC12 : <<extend>>\n@enduml"          
    },
    {
        "input": "Public Distribution System (PDS) is an Indian food security system. It is established by the Government of India under the Ministry of Consumer Affairs, Food, and Public Distribution and managed jointly with state governments in India. The traditional PDS is used to distribute grocery items to India’s poor who are valid ration cardholders. The validity and the allocation of the ration cards are monitored by the state governments. A ration cardholder should be given 35 kg of food grain as per the norms of PDS. However, there are concerns about the efficiency of the distribution process. In order to make it efficient and improve the current system of PDS, we are implementing e-Ration Shop. Here, we are going to make a website for shopping purposes. Using this website ration cardholder can order his/her grocery items from the PDS online. The main reason for using this website is to make this process computerized and to remove the drawbacks of the present way of issuing products based on the ration card. The main drawback in the current system is that the PDS has been criticized for its urban bias and its failure to serve the poorer sections of the population effectively. Also, many retail shopkeepers have a large number of bogus cards to sell food grains in the open market. Many PDS dealers resort to malpractice since they acquire less Salary so, by this project we are solving this problem too. Most of the time, users do not get their rightful entitlement in terms of quantity. What’s meant for them or the farm produce procured by the PDS is diverted to the open market. So in order to avoid all these drawbacks, we are going to use the e-Ration Shop which will help us to avoid the corruption in PDS if not eradicate it. The various importance of the proposed case study is every shop’s geo-location will be located on the map, all the information regarding shop and shopkeeper respective to the ration card and region, shop opening and closing details will be available, stock provided based on category, retailers can add, edit, delete and update their shop’s other items also, retailers can advertise their shops, stock availability will be notified on regular basis, product delivery feature, complaint forum for complaints by users, easy payment system by PayTM, COD etc., admin and moderator features for government and shopkeepers and authentication system by Aadhaar number and One-Time Pin (OTP). Generate a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor \"Ration_Cardholder (Customer)\" as Ration_Cardholder\nactor \"Retailer (Shopkeeper)\" as Retailer\nactor Admin\nactor Moderator\n\nrectangle E-Ration_Shop {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Order Grocery Items\" as UC3\n    usecase \"View Shop Details\" as UC4\n    usecase \"View Stock\" as UC5\n    usecase \"Manage Stock\" as UC6\n    usecase \"Advertise Shop\" as UC7\n    usecase \"Notify Stock Availability\" as UC8\n    usecase \"Deliver Products\" as UC9\n    usecase \"Complaint Forum\" as UC10\n    usecase \"Make Payment\" as UC11\n    usecase \"Manage Users\" as UC12\n    usecase \"Monitor System Usage\" as UC13\n    usecase \"Approve Retailer Applications\" as UC14\n    usecase \"Generate Reports\" as UC15\n    usecase \"Manage Content\" as UC16\n    usecase \"Review Complaints\" as UC17\n    usecase \"Authentication with Aadhaar and OTP\" as UC18\n}\n\nRation_Cardholder --> UC1\nRation_Cardholder --> UC2\nRation_Cardholder --> UC3\nRation_Cardholder --> UC4\nRation_Cardholder --> UC5\nRation_Cardholder --> UC10\nRation_Cardholder --> UC11\n\nRetailer --> UC4\nRetailer --> UC6\nRetailer --> UC7\nRetailer --> UC9\n\nAdmin --> UC12\nAdmin --> UC13\nAdmin --> UC14\nAdmin --> UC15\nAdmin --> UC18\n\nModerator --> UC16\nModerator --> UC17\n\nUC3 --> UC9 : <<extend>>\nUC5 --> UC8 : <<extend>>\n@enduml"          
    },
    {
        "input": "The ‘Textile Management System’ case study is designed to monitor all the processes in a textile manufacturing industry. There are various processes such as order receiving, purchase of raw materials, classification of raw materials, production of goods and selling the products. The main aim of this system is to ensure the reliability of data and to ease the process of manufacturing and transportation of garments and raw materials. This system ensures that the hardships prevailing in the manual systems are overridden by reducing the errors in data handling. The major functionalities are customer registration, sampling, stock checking, purchasing and processing of raw materials, production of garments, product checking and clearance, shipment, billing and report generation. Generate a use case diagram for this.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Manufacturer\n\nrectangle Textile_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"Sample Products\" as UC2\n    usecase \"Check Stock\" as UC3\n    usecase \"Purchase Raw Materials\" as UC4\n    usecase \"Process Raw Materials\" as UC5\n    usecase \"Produce Garments\" as UC6\n    usecase \"Check Products\" as UC7\n    usecase \"Clearance of Products\" as UC8\n    usecase \"Ship Products\" as UC9\n    usecase \"Generate Bill\" as UC10\n    usecase \"Generate Reports\" as UC11\n    usecase \"Order Garments\" as UC12\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC12\n\nManufacturer --> UC3\nManufacturer --> UC4\nManufacturer --> UC5\nManufacturer --> UC6\nManufacturer --> UC7\nManufacturer --> UC8\nManufacturer --> UC9\nManufacturer --> UC10\nManufacturer --> UC11\n\nUC7 --> UC8 : <<extend>>\n@enduml"          
    },
    {
        "input": "Create a use case diagram for a hotel reservation system. The system allows customers to book rooms online, check room availability, and make payments. The hotel management can add or update room details, view reservations, and generate reports. The system also includes a customer support feature to assist users with their queries and issues.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor HotelManager\nactor \"Customer Support\" as Support\n\nrectangle Hotel_Reservation_System {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Search Rooms\" as UC3\n    usecase \"Book Room\" as UC4\n    usecase \"Make Payment\" as UC5\n    usecase \"View Reservation\" as UC6\n    usecase \"Manage Room Details\" as UC7\n    usecase \"Generate Report\" as UC8\n    usecase \"Contact Support\" as UC9\n    usecase \"Provide Support\" as UC10\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC9\n\nHotelManager --> UC7\nHotelManager --> UC8\n\nSupport --> UC10\nUC9 --> UC10 : <<include>>\n@enduml"
    },
    {
        "input": "Create a use case diagram for a Learning Management System. The Learning Management System (LMS) is designed as a comprehensive platform that facilitates educational interactions between students and instructors. For students, it offers the ability to register, enroll in courses, submit assignments, and access their grades in a structured and accessible manner. On the other hand, instructors are provided with tools to design courses, manage student assignments, and grade submissions with efficiency.\n Additionally, the system fosters collaboration and communication through integrated discussion forums, allowing participants to engage in course-related discussions. A feedback mechanism also exists, enabling students to share their learning experiences, providing insights that instructors can use to improve their courses. The LMS aims to streamline the educational process, bringing convenience to both teaching and learning.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Instructor\n\nrectangle Learning_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"Enroll in Course\" as UC2\n    usecase \"Submit Assignment\" as UC3\n    usecase \"View Grades\" as UC4\n    usecase \"Create Course\" as UC5\n    usecase \"Manage Assignments\" as UC6\n    usecase \"Grade Submissions\" as UC7\n    usecase \"Join Discussion Forum\" as UC8\n    usecase \"Provide Feedback\" as UC9\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC8\nStudent --> UC9\n\nInstructor --> UC5\nInstructor --> UC6\nInstructor --> UC7\n@enduml"
    },
    {
        "input": "Create a use case diagram for an inventory management system. The system tracks inventory levels, orders, and deliveries. Store managers can view inventory levels, reorder products, and manage suppliers. The system also generates reports on product usage and reorder history.",
        "output": "@startuml\nleft to right direction\n\nactor StoreManager\nactor Supplier\n\nrectangle Inventory_Management_System {\n    usecase \"View Inventory\" as UC1\n    usecase \"Reorder Product\" as UC2\n    usecase \"Manage Suppliers\" as UC3\n    usecase \"Track Deliveries\" as UC4\n    usecase \"Generate Reports\" as UC5\n}\n\nStoreManager --> UC1\nStoreManager --> UC2\nStoreManager --> UC3\nStoreManager --> UC5\n\nSupplier --> UC4\n@enduml"
    },
    {
        "input": "Create a use case diagram for an online examination system. The system allows students to register, take exams, and view their scores. Instructors can create exams, grade submissions, and view results. The system also provides a feedback mechanism for students to rate their exams.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Instructor\n\nrectangle Online_Examination_System {\n    usecase \"Register\" as UC1\n    usecase \"Take Exam\" as UC2\n    usecase \"View Scores\" as UC3\n    usecase \"Create Exam\" as UC4\n    usecase \"Grade Submissions\" as UC5\n    usecase \"View Results\" as UC6\n    usecase \"Provide Feedback\" as UC7\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC7\n\nInstructor --> UC4\nInstructor --> UC5\nInstructor --> UC6\n@enduml"
    },
    {
        "input": "Create a use case diagram for an e-library system. The system allows users to browse e-books, borrow e-books, and return them. Librarians can manage the collection of e-books and issue reminders for overdue e-books. The system also allows users to leave reviews for the e-books.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Librarian\n\nrectangle E-Library_System {\n    usecase \"Browse E-books\" as UC1\n    usecase \"Borrow E-book\" as UC2\n    usecase \"Return E-book\" as UC3\n    usecase \"Leave Review\" as UC4\n    usecase \"Manage Collection\" as UC5\n    usecase \"Issue Reminders\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\n\nLibrarian --> UC5\nLibrarian --> UC6\n@enduml"
    },
    {
        "input": "Design a use case diagram for a gym management system that caters to both users and trainers. Users will have the ability to sign up and become members of the gym, allowing them to book sessions with their preferred schedules and track their fitness journey over time. They can monitor their progress and track improvements through personalized dashboards. To maintain membership, users can manage their payments seamlessly through the integrated payment gateway, ensuring that all fees are handled efficiently. Trainers, on the other hand, can set up workout plans tailored to their clients’ needs, manage their schedules, and closely monitor the progress of each client. The system is built to facilitate smooth communication between users and trainers while managing the operational side of the gym effectively.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Trainer\n\nrectangle Gym_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"Book Session\" as UC2\n    usecase \"Track Progress\" as UC3\n    usecase \"Create Workout Plan\" as UC4\n    usecase \"Manage Schedule\" as UC5\n    usecase \"Track Client Progress\" as UC6\n    usecase \"Make Payment\" as UC7\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC7\n\nTrainer --> UC4\nTrainer --> UC5\nTrainer --> UC6\n@enduml"
    },
    {
        "input": "Design a use case diagram for a warehouse management system that handles the complex operations of managing inventory, shipments, and employee schedules. The system monitors stock levels in real-time, tracking shipments and deliveries to ensure that stock data is always accurate. Warehouse managers are given the ability to manage the entire stock lifecycle — adding, removing, and updating items as needed through a consolidated 'Manage Stock' function. Additionally, managers can generate detailed operational reports and oversee employee scheduling to align resources with demand. The system's inventory optimization feature ensures that stock is dynamically adjusted based on real-time demand patterns, maintaining an efficient flow of goods through the warehouse.",
        "output": "@startuml\nleft to right direction\n\nactor WarehouseManager\nactor Employee\n\nrectangle Warehouse_Management_System {\n    usecase \"Track Stock\" as UC1\n    usecase \"Manage Shipments\" as UC2\n    usecase \"Manage Deliveries\" as UC3\n    usecase \"Manage Stock\" as UC4\n    usecase \"Generate Reports\" as UC5\n    usecase \"Manage Employee Schedule\" as UC6\n    usecase \"Optimize Inventory\" as UC7\n}\n\nWarehouseManager --> UC1\nWarehouseManager --> UC4\nWarehouseManager --> UC5\nWarehouseManager --> UC6\nWarehouseManager --> UC7\n\nEmployee --> UC2\nEmployee --> UC3\n@enduml"
    },
    {
        "input": "Design a use case diagram for a hospital management system that facilitates interactions between patients and healthcare providers. The system allows patients to manage their healthcare by offering features such as booking appointments with available doctors and viewing their medical records for ongoing treatments. When patients visit the hospital, they are able to pay for the services they have used through the system's billing module, which generates invoices for medical services. After consultations, doctors prescribe medications to patients, and these prescriptions are delivered electronically to ensure quick access. Doctors can also efficiently manage patient records, keeping them up-to-date with relevant information, and have the ability to schedule follow-up appointments with patients, ensuring continuity of care. Furthermore, the system enables healthcare providers to issue prescriptions electronically, minimizing paperwork and streamlining the patient’s treatment process.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Doctor\n\nrectangle Hospital_Management_System {\n    usecase \"Book Appointment\" as UC1\n    usecase \"View Medical Records\" as UC2\n    usecase \"Receive Prescription\" as UC3\n    usecase \"Manage Patient Records\" as UC4\n    usecase \"Schedule Appointments\" as UC5\n    usecase \"Prescribe Medications\" as UC6\n    usecase \"Generate Bill\" as UC7\n}\n\nPatient --> UC1\nPatient --> UC2\nPatient --> UC3\nPatient --> UC7\n\nDoctor --> UC4\nDoctor --> UC5\nDoctor --> UC6\n@enduml"
    },
    {
        "input": "Design a use case diagram for a banking system that caters to both customers and bank employees. Customers can perform various transactions such as depositing money, withdrawing money, transferring funds, and checking their account balance. They can also apply for loans and view their transaction history. Bank employees have access to additional features such as managing customer accounts, approving loan applications, and generating reports. The system is designed to provide a seamless banking experience for customers while enabling efficient operations for bank employees.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor BankEmployee\n\nrectangle Banking_System {\n    usecase \"Deposit Money\" as UC1\n    usecase \"Withdraw Money\" as UC2\n    usecase \"Transfer Funds\" as UC3\n    usecase \"Check Balance\" as UC4\n    usecase \"Apply for Loan\" as UC5\n    usecase \"View Transaction History\" as UC6\n    usecase \"Manage Accounts\" as UC7\n    usecase \"Approve Loan Applications\" as UC8\n    usecase \"Generate Reports\" as UC9\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n\nBankEmployee --> UC7\nBankEmployee --> UC8\nBankEmployee --> UC9\n@enduml"
    },
    {
        "input": "Design a use case diagram for a car rental system that allows customers to rent cars and manage their bookings. Customers can search for available cars, select the desired car, and make a reservation. They can also view their booking history and cancel bookings if needed. The system provides a seamless experience for customers to rent cars for their travel needs. Additionally, the system allows car rental agencies to manage their fleet, track bookings, and generate reports on rental activity.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor CarRentalAgency\n\nrectangle Car_Rental_System {\n    usecase \"Search Cars\" as UC1\n    usecase \"Select Car\" as UC2\n    usecase \"Make Reservation\" as UC3\n    usecase \"View Booking History\" as UC4\n    usecase \"Cancel Booking\" as UC5\n    usecase \"Manage Fleet\" as UC6\n    usecase \"Track Bookings\" as UC7\n    usecase \"Generate Reports\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\n\nCarRentalAgency --> UC6\nCarRentalAgency --> UC7\nCarRentalAgency --> UC8\n@enduml"
    },
    {
        "input": "Design a use case diagram for a Final Year Project (FYP) management system that supports the complex workflow of managing final year projects. The system allows students to submit their project proposals for approval and upload progress reports at various stages of the project. Throughout the process, they can track the evaluation status of their work to ensure timely feedback and meet deadlines. Supervisors play a crucial role by reviewing student submissions, providing detailed feedback, and setting important project deadlines, ensuring that students stay on track. Additionally, panel members are responsible for evaluating projects during key milestones, offering scores, and submitting comments to guide students towards successful project completion. The system also empowers the FYP committee to oversee the entire process by assigning panel members to each project, approving or rejecting proposals based on academic standards, and ensuring the overall quality of the projects being submitted. A built-in communication feature enables seamless interaction between students, supervisors, and panel members, fostering collaboration and guidance throughout the project lifecycle.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Supervisor\nactor Panel_Member\nactor FYP_Committee\n\nrectangle FYP_Management_System {\n    usecase \"Submit Proposal\" as UC1\n    usecase \"Upload Progress Report\" as UC2\n    usecase \"Track Evaluation Status\" as UC3\n    usecase \"Review Submissions\" as UC4\n    usecase \"Provide Feedback\" as UC5\n    usecase \"Set Project Deadlines\" as UC6\n    usecase \"Monitor Progress\" as UC7\n    usecase \"Evaluate Projects\" as UC8\n    usecase \"Assign Panel Members\" as UC9\n    usecase \"Approve Proposals\" as UC10\n    usecase \"Ensure Academic Standards\" as UC11\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\n\nSupervisor --> UC4\nSupervisor --> UC5\nSupervisor --> UC6\nSupervisor --> UC7\n\nPanel_Member --> UC4\nPanel_Member --> UC8\n\nFYP_Committee --> UC9\nFYP_Committee --> UC10\nFYP_Committee --> UC11\n\nUC4 --> UC5 : <<extend>>\n@enduml"
    },
    {
        "input": "Create a use case diagram for a Volunteer Management System that facilitates the organization of non-profit activities, ensuring smooth coordination among all participants. Volunteers have the ability to express interest in events by signing up through the system, while also being able to track their involvement across different activities. They are required to update their availability to make sure their participation aligns with ongoing or future events. Additionally, tasks are assigned based on specific criteria, ensuring that responsibilities are distributed according to both the availability and expertise of individuals involved. This system also keeps a detailed record of the time each participant dedicates to the organization, which is useful for tracking overall engagement. Events are scheduled in advance, and once all necessary arrangements have been made, including the approval of volunteer rosters, key individuals monitor the success and effectiveness of the event. An integrated reporting mechanism allows for the evaluation of participation and impact, helping ensure that the organization can continually refine its volunteer efforts.",
        "output": "@startuml\nleft to right direction\n\nactor Volunteer\nactor Coordinator\nactor Event_Manager\n\nrectangle Volunteer_Management_System {\n    usecase \"Sign Up for Event\" as UC1\n    usecase \"View Assigned Tasks\" as UC2\n    usecase \"Track Participation Hours\" as UC3\n    usecase \"Update Availability\" as UC4\n    usecase \"Assign Tasks\" as UC5\n    usecase \"Track Volunteer Participation\" as UC6\n    usecase \"Schedule Events\" as UC7\n    usecase \"Approve Volunteer Rosters\" as UC8\n    usecase \"Monitor Event Success\" as UC9\n    usecase \"Generate Reports\" as UC10\n}\n\nVolunteer --> UC1\nVolunteer --> UC2\nVolunteer --> UC3\nVolunteer --> UC4\n\nCoordinator --> UC5\nCoordinator --> UC6\n\nEvent_Manager --> UC7\nEvent_Manager --> UC8\nEvent_Manager --> UC9\nEvent_Manager --> UC10\n\nUC6 --> UC10 : <<include>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for a company's hiring system, for a fictional company called TechHire Solutions, which streamlines the recruitment process from initial candidate interest to final hiring decisions. Candidates who wish to apply for positions at TechHire Solutions must first submit their applications, which include resumes and cover letters. Once submitted, the system scans the resumes for relevant skills, experience, and qualifications, automatically filtering out those who don't meet the basic criteria. The shortlisted candidates are then moved forward in the process, where they are scheduled for various interview rounds, including technical assessments and HR interviews. Throughout this process, interviewers are able to log their feedback and ratings after each round, which contributes to the final decision-making. Finally, the system assists in selecting the most qualified candidates based on the gathered feedback, and an offer letter is generated for the chosen candidates. The system also tracks the overall hiring status, ensuring transparency and consistency across all stages of the recruitment cycle.",
        "output": "@startuml\nleft to right direction\n\nactor Candidate\nactor Recruiter\nactor Interviewer\n\nrectangle Hiring_System_TechHire_Solutions {\n    usecase \"Submit Application\" as UC1\n    usecase \"Scan Resume\" as UC2\n    usecase \"Shortlist Candidates\" as UC3\n    usecase \"Schedule Interviews\" as UC4\n    usecase \"Provide Interview Feedback\" as UC5\n    usecase \"Select Candidates\" as UC6\n    usecase \"Generate Offer Letter\" as UC7\n    usecase \"Track Hiring Status\" as UC8\n}\n\nCandidate --> UC1\n\nRecruiter --> UC2\nRecruiter --> UC3\nRecruiter --> UC4\nRecruiter --> UC6\nRecruiter --> UC7\nRecruiter --> UC8\n\nInterviewer --> UC5\n@enduml"
    },
    {
        "input": "Design a use case diagram for GitHub Universe 2023 Management System. The system is designed to manage the complex lifecycle of GitHub Universe, the annual flagship event, from sponsor engagement to event scheduling and participant interaction. The system allows sponsors to submit proposals and review their benefits, while the organizers handle sponsor onboarding, tracking branding throughout the event, and managing overall event schedules. Participants can register, sign up for keynotes and workshops, and give feedback about the sessions they attend. For speakers, the system enables them to schedule and present their technical talks. Real-time notifications keep all users updated about the latest event information. Organizers will also be able to monitor attendance and generate reports based on user feedback and overall event metrics.",
        "output": "@startuml\nleft to right direction\n\nactor Participant\nactor Sponsor\nactor Organizer\nactor Speaker\n\nrectangle GitHub_Universe_Management_System {\n    usecase \"Register for Event\" as UC1\n    usecase \"Sign Up for Sessions\" as UC2\n    usecase \"Manage Sponsor Onboarding\" as UC3\n    usecase \"Track Sponsor Branding\" as UC4\n    usecase \"Manage Event Schedule\" as UC5\n    usecase \"Send Real-Time Updates\" as UC6\n    usecase \"Submit Session Feedback\" as UC7\n    usecase \"Give Tech-Talks\" as UC8\n    usecase \"Generate Reports\" as UC9\n    usecase \"Monitor Attendance\" as UC10\n    usecase \"Submit Sponsorship Proposal\" as UC11\n    usecase \"Review Sponsorship Benefits\" as UC12\n}\n\nParticipant --> UC1\nParticipant --> UC2\nParticipant --> UC7\n\nSponsor --> UC11\nSponsor --> UC4\n\nOrganizer --> UC5\nOrganizer --> UC6\nOrganizer --> UC9\nOrganizer --> UC10\nOrganizer --> UC3\nOrganizer --> UC4\n\nSpeaker --> UC8\n@enduml"
    },
    {
        "input": "Design a use case diagram for a university course registration system that simplifies the process of enrolling in courses and managing academic schedules. Students can search for available courses, add them to their course list, and register for the upcoming semester. The system also allows students to drop courses if needed and view their academic history. Professors can view the list of enrolled students, assign grades, and provide feedback on assignments. The system ensures that students and professors can easily manage their academic responsibilities and stay informed about course-related activities.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Professor\n\nrectangle Course_Registration_System {\n    usecase \"Search Courses\" as UC1\n    usecase \"Add Course\" as UC2\n    usecase \"Register for Semester\" as UC3\n    usecase \"Drop Course\" as UC4\n    usecase \"View Academic History\" as UC5\n    usecase \"View Enrolled Students\" as UC6\n    usecase \"Assign Grades\" as UC7\n    usecase \"Provide Feedback\" as UC8\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\n\nProfessor --> UC6\nProfessor --> UC7\nProfessor --> UC8\n@enduml"
    },
    {
        "input": "Design a use case diagram for a social media platform that connects users through shared interests and activities. Users can create profiles, post content, and interact with other users through comments and likes. The platform also offers group features, allowing users to join communities and participate in group discussions. Additionally, users can send private messages to each other and receive notifications about new activities on the platform. The system aims to foster a sense of community and engagement among its users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Social_Media_Platform {\n    usecase \"Create Profile\" as UC1\n    usecase \"Post Content\" as UC2\n    usecase \"Interact with Users\" as UC3\n    usecase \"Join Groups\" as UC4\n    usecase \"Participate in Discussions\" as UC5\n    usecase \"Send Messages\" as UC6\n    usecase \"Receive Notifications\" as UC7\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n@enduml"
    },
    {
        "input": "Design a use case diagram for a social networking platform like Facebook. The platform allows individuals to shape their online identity by creating personalized profiles, which serve as the foundation for user engagement. Users can build meaningful connections by sending and accepting friend requests, gradually expanding their network. Beyond mere connections, users are provided with tools to express themselves by sharing life moments, thoughts, and experiences through posts, which may include text, photos, or videos. These updates can then be engaged with by other users, creating a vibrant interaction space. Users are notified in real-time about interactions, such as reactions to their posts or new connections. Additionally, the platform enables private conversations through messaging, allowing users to stay in touch and share media directly. The platform also offers a space for business users, who can create pages for their ventures, post updates, and manage advertisements targeted at their audience. Moderators ensure a safe environment by monitoring content, while administrators manage platform-wide activities, including enforcing community guidelines.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Moderator\nactor Admin\n\nrectangle Facebook_System {\n    usecase \"Create Profile\" as UC1\n    usecase \"Manage Friends\" as UC2\n    usecase \"Share Life Moments\" as UC3\n    usecase \"Post Content\" as UC4\n    usecase \"Engage with Posts\" as UC5\n    usecase \"Send Private Messages\" as UC6\n    usecase \"Receive Notifications\" as UC7\n    usecase \"Create Business Page\" as UC8\n    usecase \"Manage Advertisements\" as UC9\n    usecase \"Monitor and Moderate Content\" as UC10\n    usecase \"Enforce Community Guidelines\" as UC11\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\n\nModerator --> UC10\n\nAdmin --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for a blood donation app that connects donors, recipients, and blood banks, helping people in emergencies or for regular donations. The app allows users to register as donors, find donors in urgent situations based on blood type and location, and post blood requests. Donors are notified of blood requests and can donate blood. Recipients can find nearby hospitals, while blood banks organize donation drives and track blood availability to ensure sufficient supply. The app aims to simplify the blood donation process and improve access to life-saving resources for those in need.",
        "output": "@startuml\nleft to right direction\n\nactor Donor\nactor Recipient\nactor BloodBank\n\nrectangle Blood_Donation_App {\n    usecase \"Register as Donor\" as UC1\n    usecase \"Find Blood Donor\" as UC2\n    usecase \"Post Blood Request\" as UC3\n    usecase \"Receive Notifications\" as UC4\n    usecase \"Locate Nearby Hospitals\" as UC5\n    usecase \"Organize Blood Donation Drives\" as UC6\n    usecase \"Track Blood Availability\" as UC7\n    usecase \"Donate Blood\" as UC8\n}\n\nDonor --> UC1\nDonor --> UC8\nDonor --> UC4\nRecipient --> UC2\nRecipient --> UC3\nRecipient --> UC5\nRecipient --> UC4\nBloodBank --> UC6\nBloodBank --> UC7\n@enduml"
    },
    {
        "input": "Design a use case diagram for a ride-sharing platform like Uber. The platform connects drivers and passengers, enabling them to request rides, track their location, and pay for services. Passengers can view available drivers, request rides to specific destinations, and rate drivers based on their experience. Drivers, on the other hand, can accept ride requests, navigate to the passenger's location, and provide a safe and efficient ride. The platform also includes features for customer support, allowing users to report issues and receive assistance when needed.",
        "output": "@startuml\nleft to right direction\n\nactor Passenger\nactor Driver\nactor CustomerSupport\n\nrectangle Ride_Sharing_Platform {\n    usecase \"Request Ride\" as UC1\n    usecase \"Track Location\" as UC2\n    usecase \"Pay for Service\" as UC3\n    usecase \"Rate Driver\" as UC4\n    usecase \"Accept Ride Request\" as UC5\n    usecase \"Navigate to Location\" as UC6\n    usecase \"Provide Ride\" as UC7\n    usecase \"Resolve Issues\" as UC8\n    usecase \"Provide Assistance\" as UC9\n}\n\nPassenger --> UC1\nPassenger --> UC2\nPassenger --> UC3\nPassenger --> UC4\n\nDriver --> UC5\nDriver --> UC6\nDriver --> UC7\n\nCustomerSupport --> UC8\nCustomerSupport --> UC9\n@enduml"
    },
    {
        "input": "Design a use case diagram for a food delivery platform like DoorDash. The platform connects customers with restaurants, allowing them to order food for delivery or pickup. Customers can browse restaurant menus, place orders, and track the status of their deliveries. Restaurants can receive orders, prepare food, and notify customers when their orders are ready. Delivery drivers can accept delivery requests, pick up orders, and deliver them to customers. The platform also includes features for customer support, enabling users to report issues and receive assistance.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Restaurant\nactor Driver\nactor CustomerSupport\n\nrectangle Food_Delivery_Platform {\n    usecase \"Browse Menus\" as UC1\n    usecase \"Place Order\" as UC2\n    usecase \"Track Delivery\" as UC3\n    usecase \"Receive Orders\" as UC4\n    usecase \"Prepare Food\" as UC5\n    usecase \"Notify Order Ready\" as UC6\n    usecase \"Accept Delivery Request\" as UC7\n    usecase \"Pick Up Order\" as UC8\n    usecase \"Deliver Order\" as UC9\n    usecase \"Resolve Issues\" as UC10\n    usecase \"Provide Assistance\" as UC11\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\n\nRestaurant --> UC4\nRestaurant --> UC5\nRestaurant --> UC6\n\nDriver --> UC7\nDriver --> UC8\nDriver --> UC9\n\nCustomerSupport --> UC10\nCustomerSupport --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for a job finder app specifically designed to support women's career aspirations, called **SheWorks**. The app focuses on helping women find jobs that align with their skills and needs, such as flexible working hours, remote work opportunities, and women-centric organizations. SheWorks allows users to create profiles and upload their resumes, where they can search and apply for job listings that cater to their preferences. The app not only supports job seekers but also empowers employers to list vacancies that are more inclusive, offering features like mentorship programs or leadership roles for women. The platform integrates resume scanning and recommendation algorithms to match users with relevant job opportunities. Employers can shortlist candidates based on their profiles, and users can schedule interviews directly through the app. Notifications are sent to keep users informed of job updates, interview calls, and feedback. Additionally, the app promotes career development by offering workshops, events, and networking opportunities to encourage women in their professional growth.",
        "output": "@startuml\nleft to right direction\n\nactor Job_Seeker\nactor Employer\nactor Mentor\n\nrectangle SheWorks_App {\n    usecase \"Create Profile\" as UC1\n    usecase \"Upload Resume\" as UC2\n    usecase \"Search for Jobs\" as UC3\n    usecase \"Apply for Job\" as UC4\n    usecase \"Receive Notifications\" as UC5\n    usecase \"Schedule Interview\" as UC6\n    usecase \"Attend Workshops\" as UC7\n    usecase \"Participate in Networking Events\" as UC8\n    usecase \"Shortlist Candidates\" as UC9\n    usecase \"Post Job Vacancies\" as UC10\n    usecase \"Offer Mentorship\" as UC11\n    usecase \"Receive Job Recommendations\" as UC12\n}\n\nJob_Seeker --> UC1\nJob_Seeker --> UC2\nJob_Seeker --> UC3\nJob_Seeker --> UC4\nJob_Seeker --> UC6\nJob_Seeker --> UC5\nJob_Seeker --> UC7\nJob_Seeker --> UC8\nJob_Seeker --> UC12\n\nEmployer --> UC9\nEmployer --> UC10\n\nMentor --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for a web app developed to manage a large-scale hackathon event. The app streamlines the organization of the event, allowing participants to register, form teams, and submit their projects. It also facilitates communication between participants, mentors, and organizers by providing features like chat rooms, notifications, and announcements. For organizers, the app includes features to manage event schedules, monitor team progress, and coordinate judging rounds. Mentors can offer guidance through dedicated channels, review project progress, and provide feedback. Judges can evaluate projects, score submissions, and provide feedback directly through the app. Additionally, sponsors have the option to submit branding materials, contribute prizes, and track the visibility of their sponsorships throughout the event. The platform ensures a smooth flow of communication, event updates, and project tracking, making the hackathon experience efficient for all involved.",
        "output": "@startuml\nleft to right direction\n\nactor Participant\nactor Organizer\nactor Mentor\nactor Judge\nactor Sponsor\n\nrectangle Hackathon_Management_System {\n    usecase \"Register for Event\" as UC1\n    usecase \"Form Team\" as UC2\n    usecase \"Submit Project\" as UC3\n    usecase \"Chat with Team\" as UC4\n    usecase \"Receive Notifications\" as UC5\n    usecase \"View Event Schedule\" as UC6\n    usecase \"Provide Mentorship\" as UC7\n    usecase \"Review Project Progress\" as UC8\n    usecase \"Evaluate Projects\" as UC9\n    usecase \"Score Submissions\" as UC10\n    usecase \"Manage Judging Rounds\" as UC11\n    usecase \"Submit Sponsorship Materials\" as UC12\n    usecase \"Track Sponsorship Visibility\" as UC13\n    usecase \"Coordinate Announcements\" as UC14\n}\n\nParticipant --> UC1\nParticipant --> UC2\nParticipant --> UC3\nParticipant --> UC4\nParticipant --> UC5\nParticipant --> UC6\n\nOrganizer --> UC6\nOrganizer --> UC14\nOrganizer --> UC11\nOrganizer --> UC8\n\nMentor --> UC7\nMentor --> UC8\n\nJudge --> UC9\nJudge --> UC10\n\nSponsor --> UC12\nSponsor --> UC13\n@enduml"
    },
    {
        "input": "Design a use case diagram for a seminar management system. The system aims to manage every aspect of a large seminar, from organizing the venue to managing guest speakers and attendees. The platform allows organizers to schedule events, allocate the auditorium for sessions, and track audience attendance. It also supports guest speaker management, where the system handles speaker invitations, biographies, and session assignments. Audience members can register for the seminar, book seats, and receive notifications about upcoming sessions. Real-time updates about speaker schedules and session changes are provided to both attendees and organizers. The platform also offers a feedback mechanism for audience members to evaluate sessions. Sponsors and partners can promote their brands through the platform, ensuring visibility during the event. Additionally, the system supports guest list management, session timings, and overall event coordination to ensure smooth operations.",
        "output": "@startuml\nleft to right direction\n\nactor Audience\nactor Organizer\nactor Guest_Speaker\nactor Sponsor\n\nrectangle Seminar_Management_System {\n    usecase \"Register for Seminar\" as UC1\n    usecase \"Book Seat\" as UC2\n    usecase \"Receive Notifications\" as UC3\n    usecase \"View Session Schedule\" as UC4\n    usecase \"Submit Feedback\" as UC5\n    usecase \"Manage Auditorium Allocation\" as UC6\n    usecase \"Manage Speaker Sessions\" as UC7\n    usecase \"Invite Guest Speakers\" as UC8\n    usecase \"Track Attendance\" as UC9\n    usecase \"Coordinate Event Timings\" as UC10\n    usecase \"Promote Sponsor Branding\" as UC11\n    usecase \"Manage Seminar Session Content\" as UC12\n}\n\nAudience --> UC1\nAudience --> UC2\nAudience --> UC3\nAudience --> UC4\nAudience --> UC5\n\nOrganizer --> UC6\nOrganizer --> UC7\nOrganizer --> UC8\nOrganizer --> UC9\nOrganizer --> UC10\n\nGuest_Speaker --> UC7\nGuest_Speaker --> UC12\n\nSponsor --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for a project management system that supports the planning, execution, and monitoring of projects. The system allows project managers to create project plans, assign tasks to team members, and track progress. Team members can view their assigned tasks, update task statuses, and communicate with other team members. The system also includes features for generating reports, monitoring project timelines, and identifying potential risks. Stakeholders can access project information, review progress reports, and provide feedback on project deliverables. The platform aims to streamline project management processes and improve collaboration among team members.",
        "output": "@startuml\nleft to right direction\n\nactor ProjectManager\nactor TeamMember\nactor Stakeholder\n\n rectangle Project_Management_System {\n    usecase \"Create Project Plan\" as UC1\n    usecase \"Assign Tasks\" as UC2\n    usecase \"Track Progress\" as UC3\n    usecase \"View Assigned Tasks\" as UC4\n    usecase \"Update Task Status\" as UC5\n    usecase \"Communicate with Team\" as UC6\n    usecase \"Generate Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Risks\" as UC9\n    usecase \"Access Project Information\" as UC10\n    usecase \"Review Progress Reports\" as UC11\n    usecase \"Provide Feedback\" as UC12\n}\n\nProjectManager --> UC1\nProjectManager --> UC2\nProjectManager --> UC3\nProjectManager --> UC7\nProjectManager --> UC8\nProjectManager --> UC9\n\nTeamMember --> UC4\nTeamMember --> UC5\nTeamMember --> UC6\n\nStakeholder --> UC10\nStakeholder --> UC11\nStakeholder --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a customer relationship management (CRM) system that helps businesses manage interactions with customers and potential customers. The system allows sales teams to track leads, manage customer accounts, and analyze sales data. Marketing teams can create targeted campaigns, track customer engagement, and generate reports on campaign performance. Customer support teams can log customer inquiries, resolve issues, and provide feedback on customer satisfaction. The system aims to improve customer relationships, increase sales, and enhance overall customer experience.",
        "output": "@startuml\nleft to right direction\n\nactor SalesTeam\nactor MarketingTeam\nactor CustomerSupport\n\nrectangle CRM_System {\n    usecase \"Track Leads\" as UC1\n    usecase \"Manage Customer Accounts\" as UC2\n    usecase \"Analyze Sales Data\" as UC3\n    usecase \"Create Campaigns\" as UC4\n    usecase \"Track Customer Engagement\" as UC5\n    usecase \"Generate Reports\" as UC6\n    usecase \"Log Customer Inquiries\" as UC7\n    usecase \"Resolve Issues\" as UC8\n    usecase \"Provide Feedback\" as UC9\n}\n\nSalesTeam --> UC1\nSalesTeam --> UC2\nSalesTeam --> UC3\n\nMarketingTeam --> UC4\nMarketingTeam --> UC5\nMarketingTeam --> UC6\n\nCustomerSupport --> UC7\nCustomerSupport --> UC8\nCustomerSupport --> UC9\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a content management system (CMS) that allows users to create, manage, and publish digital content. The system supports content creation, editing, and collaboration among users. Users can upload media files, organize content into categories, and schedule content publication. The system also includes features for content approval, version control, and content analytics. Administrators can manage user permissions, monitor content performance, and ensure the security of the system. The platform aims to streamline content management processes and improve content delivery to users.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Administrator\n\nrectangle Content_Management_System {\n    usecase \"Create Content\" as UC1\n    usecase \"Edit Content\" as UC2\n    usecase \"Collaborate on Content\" as UC3\n    usecase \"Upload Media Files\" as UC4\n    usecase \"Organize Content\" as UC5\n    usecase \"Schedule Publication\" as UC6\n    usecase \"Approve Content\" as UC7\n    usecase \"Version Control\" as UC8\n    usecase \"Analyze Content\" as UC9\n    usecase \"Manage Permissions\" as UC10\n    usecase \"Monitor Performance\" as UC11\n    usecase \"Ensure Security\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC8\n\nAdministrator --> UC7\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a learning management system (LMS) that supports online education and training. The system allows instructors to create courses, upload learning materials, and assess student performance. Students can enroll in courses, access course content, and submit assignments. The system includes features for quizzes, discussions, and grading. Administrators can manage user accounts, monitor course enrollment, and generate reports on student progress. The platform aims to provide a seamless learning experience for students and instructors.",
        "output": "@startuml\nleft to right direction\n\nactor Instructor\nactor Student\nactor Administrator\n\nrectangle Learning_Management_System {\n    usecase \"Create Courses\" as UC1\n    usecase \"Upload Learning Materials\" as UC2\n    usecase \"Assess Student Performance\" as UC3\n    usecase \"Enroll in Courses\" as UC4\n    usecase \"Access Course Content\" as UC5\n    usecase \"Submit Assignments\" as UC6\n    usecase \"Take Quizzes\" as UC7\n    usecase \"Participate in Discussions\" as UC8\n    usecase \"Grade Assignments\" as UC9\n    usecase \"Manage User Accounts\" as UC10\n    usecase \"Monitor Course Enrollment\" as UC11\n    usecase \"Generate Reports\" as UC12\n}\n\nInstructor --> UC1\nInstructor --> UC2\nInstructor --> UC3\nInstructor --> UC9\n\nStudent --> UC4\nStudent --> UC5\nStudent --> UC6\nStudent --> UC7\nStudent --> UC8\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a project tracking system that helps teams manage tasks, deadlines, and progress on projects. The system allows team members to create tasks, assign tasks to team members, and set deadlines for completion. Team members can update task statuses, track progress, and communicate with other team members. The system includes features for generating reports, monitoring project timelines, and identifying bottlenecks. Project managers can oversee project progress, allocate resources, and ensure project milestones are met. The platform aims to improve project efficiency, collaboration, and communication among team members.",
        "output": "@startuml\nleft to right direction\n\nactor TeamMember\nactor ProjectManager\n\nrectangle Project_Tracking_System {\n    usecase \"Create Tasks\" as UC1\n    usecase \"Assign Tasks\" as UC2\n    usecase \"Set Deadlines\" as UC3\n    usecase \"Update Task Status\" as UC4\n    usecase \"Track Progress\" as UC5\n    usecase \"Communicate with Team\" as UC6\n    usecase \"Generate Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Bottlenecks\" as UC9\n    usecase \"Oversee Project Progress\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Milestones\" as UC12\n}\n\nTeamMember --> UC1\nTeamMember --> UC2\nTeamMember --> UC3\nTeamMember --> UC4\nTeamMember --> UC5\nTeamMember --> UC6\nTeamMember --> UC7\n\nProjectManager --> UC8\nProjectManager --> UC9\nProjectManager --> UC10\nProjectManager --> UC11\nProjectManager --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a task management system that helps individuals organize and track their tasks. The system allows users to create tasks, set priorities, and deadlines for completion. Users can update task statuses, track progress, and categorize tasks based on different criteria. The system includes features for generating task lists, setting reminders, and organizing tasks into projects. Users can also share tasks with collaborators, assign tasks to team members, and receive notifications about task updates. The platform aims to improve task management efficiency and help users stay organized.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Collaborator\n\nrectangle Task_Management_System {\n    usecase \"Create Tasks\" as UC1\n    usecase \"Set Priorities\" as UC2\n    usecase \"Set Deadlines\" as UC3\n    usecase \"Update Task Status\" as UC4\n    usecase \"Track Progress\" as UC5\n    usecase \"Categorize Tasks\" as UC6\n    usecase \"Generate Task Lists\" as UC7\n    usecase \"Set Reminders\" as UC8\n    usecase \"Organize Tasks\" as UC9\n    usecase \"Share Tasks\" as UC10\n    usecase \"Assign Tasks\" as UC11\n    usecase \"Receive Notifications\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\n\nCollaborator --> UC10\nCollaborator --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for a bug tracking system that helps software development teams manage and resolve software defects. The system allows developers to log bugs, assign bugs to team members, and track bug fixes. Team members can update bug statuses, prioritize bugs, and communicate with other team members about bug resolutions. The system includes features for generating bug reports, monitoring bug resolution timelines, and identifying recurring bugs. Project managers can oversee bug resolution progress, allocate resources to fix bugs, and ensure software quality standards are met. The platform aims to improve software quality, collaboration, and communication among team members.",
        "output": "@startuml\nleft to right direction\n\nactor Developer\nactor ProjectManager\n\nrectangle Bug_Tracking_System {\n    usecase \"Log Bugs\" as UC1\n    usecase \"Assign Bugs\" as UC2\n    usecase \"Track Bug Fixes\" as UC3\n    usecase \"Update Bug Status\" as UC4\n    usecase \"Prioritize Bugs\" as UC5\n    usecase \"Communicate with Team\" as UC6\n    usecase \"Generate Bug Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Recurring Bugs\" as UC9\n    usecase \"Oversee Bug Resolution\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Software Quality\" as UC12\n}\n\nDeveloper --> UC1\nDeveloper --> UC2\nDeveloper --> UC3\nDeveloper --> UC4\nDeveloper --> UC5\nDeveloper --> UC6\nDeveloper --> UC7\n\nProjectManager --> UC8\nProjectManager --> UC9\nProjectManager --> UC10\nProjectManager --> UC11\nProjectManager --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a customer support system that helps businesses manage customer inquiries, issues, and feedback. The system allows customer support agents to log customer inquiries, assign tickets to agents, and track ticket resolutions. Agents can update ticket statuses, prioritize tickets, and communicate with customers about issue resolutions. The system includes features for generating support reports, monitoring ticket resolution timelines, and identifying recurring issues. Managers can oversee ticket resolution progress, allocate resources to resolve issues, and ensure customer satisfaction standards are met. The platform aims to improve customer support efficiency, collaboration, and communication among support agents.",
        "output": "@startuml\nleft to right direction\n\nactor CustomerSupportAgent\nactor Manager\n\nrectangle Customer_Support_System {\n    usecase \"Log Customer Inquiries\" as UC1\n    usecase \"Assign Tickets\" as UC2\n    usecase \"Track Ticket Resolutions\" as UC3\n    usecase \"Update Ticket Status\" as UC4\n    usecase \"Prioritize Tickets\" as UC5\n    usecase \"Communicate with Customers\" as UC6\n    usecase \"Generate Support Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Recurring Issues\" as UC9\n    usecase \"Oversee Ticket Resolution\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Customer Satisfaction\" as UC12\n}\n\nCustomerSupportAgent --> UC1\nCustomerSupportAgent --> UC2\nCustomerSupportAgent --> UC3\nCustomerSupportAgent --> UC4\nCustomerSupportAgent --> UC5\nCustomerSupportAgent --> UC6\nCustomerSupportAgent --> UC7\n\nManager --> UC8\nManager --> UC9\nManager --> UC10\nManager --> UC11\nManager --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a help desk system that assists users in resolving technical issues and inquiries. The system allows users to log help desk tickets, assign tickets to support agents, and track ticket resolutions. Support agents can update ticket statuses, prioritize tickets, and communicate with users about issue resolutions. The system includes features for generating help desk reports, monitoring ticket resolution timelines, and identifying recurring issues. Managers can oversee ticket resolution progress, allocate resources to resolve issues, and ensure service level agreements are met. The platform aims to improve help desk efficiency, collaboration, and communication between users and support agents.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor SupportAgent\nactor Manager\n\nrectangle Help_Desk_System {\n    usecase \"Log Help Desk Tickets\" as UC1\n    usecase \"Assign Tickets\" as UC2\n    usecase \"Track Ticket Resolutions\" as UC3\n    usecase \"Update Ticket Status\" as UC4\n    usecase \"Prioritize Tickets\" as UC5\n    usecase \"Communicate with Users\" as UC6\n    usecase \"Generate Help Desk Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Recurring Issues\" as UC9\n    usecase \"Oversee Ticket Resolution\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Service Level Agreements\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nSupportAgent --> UC3\nSupportAgent --> UC4\nSupportAgent --> UC5\nSupportAgent --> UC6\nSupportAgent --> UC7\n\nManager --> UC8\nManager --> UC9\nManager --> UC10\nManager --> UC11\nManager --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a library management system that helps librarians manage library resources, patrons, and circulation activities. The system allows librarians to catalog books, manage patron accounts, and track book loans. Patrons can search for books, check out books, and renew book loans. The system includes features for generating library reports, monitoring book circulation, and identifying overdue books. Administrators can oversee library operations, allocate resources, and ensure library policies are enforced. The platform aims to improve library efficiency, patron services, and resource management.",
        "output": "@startuml\nleft to right direction\n\nactor Librarian\nactor Patron\nactor Administrator\n\nrectangle Library_Management_System {\n    usecase \"Catalog Books\" as UC1\n    usecase \"Manage Patron Accounts\" as UC2\n    usecase \"Track Book Loans\" as UC3\n    usecase \"Search for Books\" as UC4\n    usecase \"Check Out Books\" as UC5\n    usecase \"Renew Book Loans\" as UC6\n    usecase \"Generate Library Reports\" as UC7\n    usecase \"Monitor Book Circulation\" as UC8\n    usecase \"Identify Overdue Books\" as UC9\n    usecase \"Oversee Library Operations\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Enforce Library Policies\" as UC12\n}\n\nLibrarian --> UC1\nLibrarian --> UC2\nLibrarian --> UC3\nLibrarian --> UC7\nLibrarian --> UC8\nLibrarian --> UC9\n\nPatron --> UC4\nPatron --> UC5\nPatron --> UC6\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for a hotel management system that helps hotel staff manage guest reservations, room assignments, and hotel services. The system allows hotel staff to create guest reservations, assign rooms, and track guest check-ins and check-outs. Guests can book rooms, request services, and provide feedback on their stay. The system includes features for generating hotel reports, monitoring room availability, and identifying guest preferences. Managers can oversee hotel operations, allocate resources, and ensure guest satisfaction. The platform aims to improve hotel efficiency, guest services, and room management.",
        "output": "@startuml\nleft to right direction\n\nactor HotelStaff\nactor Guest\nactor Manager\n\nrectangle Hotel_Management_System {\n    usecase \"Create Guest Reservations\" as UC1\n    usecase \"Assign Rooms\" as UC2\n    usecase \"Track Check-Ins and Check-Outs\" as UC3\n    usecase \"Book Rooms\" as UC4\n    usecase \"Request Services\" as UC5\n    usecase \"Provide Feedback\" as UC6\n    usecase \"Generate Hotel Reports\" as UC7\n    usecase \"Monitor Room Availability\" as UC8\n    usecase \"Identify Guest Preferences\" as UC9\n    usecase \"Oversee Hotel Operations\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Guest Satisfaction\" as UC12\n}\n\nHotelStaff --> UC1\nHotelStaff --> UC2\nHotelStaff --> UC3\nHotelStaff --> UC7\nHotelStaff --> UC8\nHotelStaff --> UC9\n\nGuest --> UC4\nGuest --> UC5\nGuest --> UC6\n\nManager --> UC10\nManager --> UC11\nManager --> UC12\n@enduml"
    },
    {
        "input": "Draw a use case diagram for this system. The Prime Minister of India has announced a new scheme of National Health ID on August 15, 2020. According to this proposal, every Indian will get a unique Health ID based on their mobile number or Aadhaar number. The National Health ID will be a repository of all health-related information of a person. According to the National Health Authority (NHA), every patient who wishes to have their health records available digitally must start by creating a Health ID. Each Health ID will be linked to a health data consent manager – such as the National Digital Health Mission (NDHM) which will be used to seek the patient’s consent and allow for seamless flow of health information from the Personal Health Records module. This Health ID prevents various insurance frauds committed by several health agencies, hospitals including both doctors and patients. This will reduce the paper works and help patients easily maintain their health records. It can be used for further diagnosis. Children who are born after the implementation of the National Health ID will have all their medications recorded including the vaccines, etc.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor HealthAuthority\nactor HealthDataConsentManager\n\nrectangle National_Health_ID_System {\n    usecase \"Create Health ID\" as UC1\n    usecase \"Seek Patient's Consent\" as UC2\n    usecase \"Maintain Health Records\" as UC3\n    usecase \"Use for Patient Diagnosis\" as UC4\n    usecase \"Record Medications\" as UC5\n}\n\nPatient --> UC1\nPatient --> UC3\n\nHealthDataConsentManager --> UC2\nHealthAuthority --> UC5\nHealthAuthority --> UC4\n@enduml"      
    },
    {
        "input": "Design a use case diagram. Amidst this pandemic period, students are being educated through online education platforms on smartphones and other similar devices. Many underprivileged children are unable to get access to such devices. Also, the people who are willing to help aren’t able to reach the needy due to lockdown. The ultimate aim of this system is to help such children by giving the collected devices from the people who were willing to help them. This system requests the donors to enter the details regarding the device they are willing to donate. It also requests the address details of the donor in order to reach them. On successful entry of such details, the user has to wait for the approval of the device. The admin has to verify the details of the device and assign it to a pickup executive for collection. This system also allows the volunteers to join the team. So that they could be helped by picking up the devices in their locality.",
        "output": "@startuml\nleft to right direction\n\nactor Donor\nactor Admin\nactor Volunteer\n\nrectangle Device_Donation_System {\n    usecase \"Enter Device Details\" as UC1\n    usecase \"Enter Address Details\" as UC2\n    usecase \"Wait for Approval\" as UC3\n    usecase \"Verify Device Details\" as UC4\n    usecase \"Assign Pickup Executive\" as UC5\n    usecase \"Join a Team\" as UC6\n}\n\nDonor --> UC1\nDonor --> UC2\nDonor --> UC3\n\nAdmin --> UC4\nAdmin --> UC5\n\nVolunteer --> UC6\n@enduml"            
    },
    {
        "input": "Design a use case diagram for a car rental system that allows users to rent cars for short periods of time. The system allows users to search for available cars, select a car for rental, and make a reservation. Users can specify the rental duration, pick-up location, and drop-off location. The system includes features for generating rental agreements, tracking rental durations, and processing payments. Administrators can manage car listings, monitor reservations, and ensure the availability of cars for rental. The platform aims to provide a convenient and efficient car rental experience for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Administrator\n\nrectangle Car_Rental_System {\n    usecase \"Search for Available Cars\" as UC1\n    usecase \"Select Car for Rental\" as UC2\n    usecase \"Make Reservation\" as UC3\n    usecase \"Specify Rental Duration\" as UC4\n    usecase \"Specify Pick&Drop Location\" as UC5\n    usecase \"Generate Rental Agreements\" as UC7\n    usecase \"Track Rental Durations\" as UC8\n    usecase \"Process Payments\" as UC9\n    usecase \"Manage Car Listings\" as UC10\n    usecase \"Monitor Reservations\" as UC11\n    usecase \"Confirm Car Availability\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nAdministrator --> UC7\nAdministrator --> UC8\nAdministrator --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"   
    },
    {
        "input": "Draw a use case diagram for this. College magazines provide an authoritative, recognizable and artistic platform of expression to the student body. However, paperback college magazines narrow the scope for a more extensive audience and are lavish of important resources like paper, especially when the magazines are printed seasonally on campus year after year. Consequently, many students may not be able to make it to the print media of the college. To subdue these shortcomings, an online college magazine system can be developed. This system will enable students of the college to liberally generate content for and about the college. Anyone in any part of the world can read and rate articles being published in the online magazine. Resource usage is much more minimal, but the experience is as efficient as in paperback magazines. With the help of this software, they will be able to read, write, draft, edit and publish all forms of content like articles, essays, op-eds, photography, poetry, etc. Selected students and faculty can regularly write and post articles for the magazine. Contributors (like alumni) can write for the magazine occasionally. Guests or readers can read, comment on and rate articles. Guests can also act as contributors if interested. Moderators will review articles before publishing to decide the pertinence of content. Articles will be organized based on categories appropriate to the workflow of the college. Thus, the implementation of this system will benefit all members of the college by providing consistent campus-related news and also by improving the literary and technical insight of faculty and students who write for the magazine.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Guest\nactor Moderator\n\nUser <|-- Student\nUser <|-- Faculty\nUser <|-- Contributor\n\nrectangle Online_College_Magazine_System {\n    usecase \"Manage Articles\" as UC1\n    usecase \"Rate Articles\" as UC2\n    usecase \"Comment on Articles\" as UC3\n    usecase \"Organize Articles\" as UC4\n    usecase \"Generate Content\" as UC5\n    usecase \"Review Articles\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\n\nGuest --> UC2\nGuest --> UC3\nGuest --> UC5\n\nModerator --> UC6\n@enduml"          
    },
    {
        "input": "Give use case diagram for this case study. Rules and regulations are paramount to all aspects of life. Certain proponents have asserted that crime which is a violation against laws of the society, is integral to the human nature and hence the society can never be completely free from it. In the existing system, all work is done on papers, so it is very difficult to secure crime reports data. This system needs more manpower to track the records of crimes and it lacks security. Modern society is characterized by increasing levels of risk posed by internal and external security threats. This poses the importance to develop an automated crime management system to keep a record of the crime and the criminals involved. The proposed crime bureau is a database system in which the police keeps the record of criminals who have been arrested, to be arrested, or escaped and the complaints. This will help the police department in enhanced management of information. The main entities in the whole process include; the petitioner (the person who files a First Incident Report (FIR)), victim, accused or criminal, case and investigating officer. The proposed crime record management system can overcome all the limitations of the existing system. This system provides proper security and reduces the manual work. This project helps to maintain a database through which the entire crime activities in the state can be monitored.",
        "output": "@startuml\nleft to right direction\n\nactor Petitioner\nactor Victim\nactor Accused\nactor InvestigatingOfficer\n\nrectangle Crime_Record_Management_System {\n    usecase \"File FIR\" as UC1\n    usecase \"Record Complaints\" as UC2\n    usecase \"Track Criminals\" as UC3\n    usecase \"Manage Cases\" as UC4\n    usecase \"Monitor Crime Activities\" as UC5\n}\n\nPetitioner --> UC1\nVictim --> UC2\nAccused --> UC3\nInvestigatingOfficer --> UC4\nInvestigatingOfficer --> UC5\n@enduml"
    },
    {
        "input": "Design use case diagram for this system. In our modern metropolitan city, people don’t follow the traffic rules. The outcome of it is unfortunate. In India, 64.4% of the total deaths are accounted by road accidents. As the automobiles get revolutionized the number of vehicles keep increasing. Conventional traffic signals are not efficient and strict. Smart traffic system aims in minimizing the risks of accidents by precautionary taking actions on people who violate the traffic rules. Cameras to monitor the roads with high traffic levels in order to facilitate the traffic signal. Helmet and seat belt detection using image processing to warn the drivers. Details of the driver are submitted to the traffic police, when he/she violates the law more than two times via the number plate which is captured by cameras. Street lights are operated based on the population density on road at night, thereby saving electricity. License will be cancelled as penalty, if the law is violated. Details of the driver will be passed on to successive signals on account of speeding. Automated traffic lights regulate the traffic flow in order to avoid congestions.",
        "output": "@startuml\nleft to right direction\n\nactor TrafficPolice\n\nrectangle Smart_Traffic_System {\n    usecase \"Monitor Roads\" as UC1\n    usecase \"Detect Helmet/Seat Belt\" as UC2\n    usecase \"Submit Driver Violations\" as UC3\n    usecase \"Operate Street Lights\" as UC4\n    usecase \"Cancel License\" as UC5\n    usecase \"Regulate Traffic Lights\" as UC6\n}\n\nUC2 --> UC3 : <<extend>>\n\nTrafficPolice --> UC1\nTrafficPolice --> UC2\nTrafficPolice --> UC3\nTrafficPolice --> UC5\nUC3 --> UC5 :<<include>>\n\nUC1 --> UC4 : <<include>>\nUC1 --> UC6 : <<include>>\n@enduml"          
    },
    {
        "input": "Job seekers work hard to gain the right skills and knowledge to give them an edge over others in the role they seek. However, at times, despite their best efforts, one may find it difficult to move a step closer to this sought-after job. Hence a platform for listing out the availability of jobs irrespective of the field is required. Furthermore, a job site serves a dual purpose. On one hand, it lists out the availability of jobs to candidates, and on the other, it serves as a database of registered candidate’s profiles for companies to shortlist. The objective is to develop a software solution to predict the availability of jobs based on location, sectors, package, platform, interest and eligibility. As it is important to keep the candidates engaged during their job search, it is important to provide facets on the above-mentioned criteria so that they can narrow down to the jobs of their choice.",
        "output": "@startuml\nleft to right direction\n\nactor JobSeeker\nactor Company\n\nrectangle Job_Portal_System {\n    usecase \"See Available Job Listings\" as UC1\n    usecase \"See Job Availability Predictions\" as UC2\n    usecase \"Search Jobs by Filters\" as UC3\n    usecase \"Register Profile\" as UC4\n    usecase \"Shortlist Candidates\" as UC5\n    usecase \"Post Job Listings\" as UC6\n    usecase \"Apply for Job\" as UC7\n}\n\nJobSeeker --> UC1\nJobSeeker --> UC2\nJobSeeker --> UC3\nJobSeeker --> UC4\nJobSeeker --> UC7\n\nCompany --> UC4\nCompany --> UC5\nCompany --> UC6\n@enduml"          
    },
    {
        "input": "Coronavirus pandemic is spreading in large numbers. Experts suggest that social distancing has been used for a long time as one of the methods to reduce the spike in diseases and infectious illnesses. In India alone, the cases have sharply spiked up in the past two weeks, which has led to imposing even tougher measures. By identifying ‘hotspots’, necessary mapping can help deal with the problem of community transmission, i.e., when cases start spreading within the population in such a way that people don’t know how they were exposed to the contagion. This is known as ‘Stage 3’ of an outbreak. The Aarogya Setu app, which is a coronavirus tracker of sorts works on the basis of contact tracing and can help a user identify possible coronavirus ‘hotspot’ around his or her area. It can help people stay safe and adopt necessary precautions in some areas where there are cases and accordingly, help stop or prevent community transmission to an extent. On the basis of geotagging, it can also alert a specific user about their proximity to a nearby infection case or hotspot. The app also helps users self-identify their risk and monitor their health assessment, considering the times when it can get difficult (and most of all, is not particularly safe to step out and visit health clinics). Aarogya Setu app also helps people identify the symptoms, alert them about the best safety precautions and other relevant information concerning the spread of COVID-19. While this is a noble initiative, the app also lists down basic quarantine measures for those who are considered to be in the ‘high-risk’ category. It can also help people, who have had a travel history self-quarantine and prevent any risk of transmission. I want a use case diagram for this.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Aarogya_Setu_App {\n    usecase \"Identify Hotspots\" as UC1\n    usecase \"Contact Tracing\" as UC2\n    usecase \"Check Proximity to Infection\" as UC3\n    usecase \"Self-Identify Risk\" as UC4\n    usecase \"Monitor Health Assessment\" as UC5\n    usecase \"Identify Symptoms\" as UC6\n    usecase \"Receive Safety Precautions Alerts\" as UC7\n    usecase \"Access Quarantine Measures List\" as UC8\n    usecase \"Get Self-Quarantine Help\" as UC9\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\n@enduml"          
    },


    {
        "input": "Create a use case diagram for a wedding planner system that helps couples plan and organize their wedding events. The system allows couples to create wedding budgets, select venues, and hire vendors for services like catering, photography, and entertainment. Couples can manage guest lists, send invitations, and track RSVPs. The system includes features for creating wedding timelines, managing seating arrangements, and coordinating event logistics. Wedding planners can oversee the planning process, communicate with vendors, and ensure that all aspects of the wedding are executed smoothly. The platform aims to streamline wedding planning processes and create memorable experiences for couples and their guests.",
        "output": "@startuml\nleft to right direction\n\nactor Couple\nactor WeddingPlanner\n\nrectangle Wedding_Planner_System {\n    usecase \"Create Wedding Budget\" as UC1\n    usecase \"Select Venues\" as UC2\n    usecase \"Hire Vendors\" as UC3\n    usecase \"Manage Guest Lists\" as UC4\n    usecase \"Send Invitations\" as UC5\n    usecase \"Track RSVPs\" as UC6\n    usecase \"Create Wedding Timelines\" as UC7\n    usecase \"Manage Seating Arrangements\" as UC8\n    usecase \"Coordinate Event Logistics\" as UC9\n    usecase \"Oversee Planning Process\" as UC10\n    usecase \"Communicate with Vendors\" as UC11\n    usecase \"Ensure Smooth Execution\" as UC12\n}\n\nCouple --> UC1\nCouple --> UC2\nCouple --> UC3\nCouple --> UC4\nCouple --> UC5\nCouple --> UC6\nCouple --> UC7\nCouple --> UC8\nCouple --> UC9\n\nWeddingPlanner --> UC10\nWeddingPlanner --> UC11\nWeddingPlanner --> UC12\n@enduml"

    },
    {
        "input": "Create a use case diagram for an arcade management system that helps arcade owners manage games, tickets, and customer interactions. The system allows arcade owners to add new games, set game prices, and track game usage. Customers can purchase tickets, play games, and redeem tickets for prizes. The system includes features for managing customer accounts, tracking ticket balances, and generating reports on game popularity. Arcade owners can oversee arcade operations, allocate resources, and ensure customer satisfaction. The platform aims to provide a fun and engaging experience for arcade customers.",
        "output": "@startuml\nleft to right direction\n\nactor ArcadeOwner\nactor Customer\n\nrectangle Arcade_Management_System {\n    usecase \"Add New Games\" as UC1\n    usecase \"Set Game Prices\" as UC2\n    usecase \"Track Game Usage\" as UC3\n    usecase \"Purchase Tickets\" as UC4\n    usecase \"Play Games\" as UC5\n    usecase \"Redeem Tickets\" as UC6\n    usecase \"Manage Customer Accounts\" as UC7\n    usecase \"Track Ticket Balances\" as UC8\n    usecase \"Generate Reports\" as UC9\n    usecase \"Oversee Arcade Operations\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Customer Satisfaction\" as UC12\n}\n\nArcadeOwner --> UC1\nArcadeOwner --> UC2\nArcadeOwner --> UC3\nArcadeOwner --> UC7\nArcadeOwner --> UC8\nArcadeOwner --> UC9\nArcadeOwner --> UC10\nArcadeOwner --> UC11\nArcadeOwner --> UC12\n\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n@enduml"
    },
    {
        "input": "Create a use case diagram for a mobile application that helps blind people navigate and explore their surroundings. The application uses GPS technology to provide audio directions, location information, and points of interest to users. Blind users can search for nearby places, plan routes, and receive real-time updates on their location. The application includes features for setting preferences, saving favorite locations, and accessing emergency services. The platform aims to improve the independence and mobility of blind individuals in urban environments.",
        "output": "@startuml\nleft to right direction\n\nactor BlindUser\n\nrectangle Blind_Navigation_App {\n    usecase \"Get Audio Directions\" as UC1\n    usecase \"Search for Nearby Places\" as UC2\n    usecase \"Plan Routes\" as UC3\n    usecase \"Receive Real-Time Updates\" as UC4\n    usecase \"Set Preferences\" as UC5\n    usecase \"Save Favorite Locations\" as UC6\n    usecase \"Access Emergency Services\" as UC7\n}\n\nBlindUser --> UC1\nBlindUser --> UC2\nBlindUser --> UC3\nBlindUser --> UC4\nBlindUser --> UC5\nBlindUser --> UC6\nBlindUser --> UC7\n@enduml"

    },
    {
        "input": "Create a use case diagram for a mobile application that translates sign language gestures into text and speech. The application uses image recognition technology to interpret hand movements and gestures made by users. Deaf users can communicate with hearing individuals by signing words and phrases, which are then converted into text or spoken words. The application includes features for customizing sign language dictionaries, saving common phrases, and adjusting translation settings. The platform aims to bridge the communication gap between deaf and hearing individuals.",
        "output": "@startuml\nleft to right direction\n\nactor DeafUser\nactor HearingUser\n\nrectangle Sign_Language_Translator_App {\n    usecase \"Translate Sign Language Gestures\" as UC1\n    usecase \"Communicate with Hearing Users\" as UC2\n    usecase \"Convert Gestures to Text\" as UC3\n    usecase \"Convert Gestures to Speech\" as UC4\n    usecase \"Customize Dictionaries\" as UC5\n    usecase \"Save Common Phrases\" as UC6\n    usecase \"Adjust Translation Settings\" as UC7\n}\n\nDeafUser --> UC1\nDeafUser --> UC2\nDeafUser --> UC3\nDeafUser --> UC4\nDeafUser --> UC5\nDeafUser --> UC6\nDeafUser --> UC7\n\nHearingUser --> UC2\n@enduml"
    },
    {
        "input": "Create a use case diagram for a glacier melting prediction system that helps scientists monitor and analyze the melting of glaciers due to climate change. The system uses satellite imagery, weather data, and historical records to predict the rate of glacier melting and its impact on sea levels. Scientists can input data, run simulations, and visualize the results of glacier melting predictions. The system includes features for generating reports, sharing data with other researchers, and identifying trends in glacier melting patterns. The platform aims to provide valuable insights into the effects of climate change on glaciers and the environment.",
        "output": "@startuml\nleft to right direction\n\nactor Scientist\n\nrectangle Glacier_Melting_Prediction_System {\n    usecase \"Input Data\" as UC1\n    usecase \"Run Simulations\" as UC2\n    usecase \"Visualize Results\" as UC3\n    usecase \"Generate Reports\" as UC4\n    usecase \"Share Data\" as UC5\n    usecase \"Identify Trends\" as UC6\n}\n\nScientist --> UC1\nScientist --> UC2\nScientist --> UC3\nScientist --> UC4\nScientist --> UC5\nScientist --> UC6\n@enduml"
    },
    {
        "input": "Create a use case diagram for an air quality monitoring system that helps environmental agencies track and analyze air pollution levels in urban areas. The system uses sensors, weather data, and pollution sources to measure air quality parameters such as particulate matter, ozone, and nitrogen dioxide. Environmental agencies can monitor real-time air quality data, set pollution thresholds, and issue alerts for high pollution levels. The system includes features for generating air quality reports, mapping pollution sources, and identifying trends in air pollution patterns. The platform aims to improve air quality monitoring and management in urban environments.",
        "output": "@startuml\nleft to right direction\n\nactor EnvironmentalAgency\n\nrectangle Air_Quality_Monitoring_System {\n    usecase \"Monitor Air Quality Data\" as UC1\n    usecase \"Set Pollution Thresholds\" as UC2\n    usecase \"Issue Pollution Alerts\" as UC3\n    usecase \"Generate Reports\" as UC4\n    usecase \"Map Pollution Sources\" as UC5\n    usecase \"Identify Trends\" as UC6\n}\n\nEnvironmentalAgency --> UC1\nEnvironmentalAgency --> UC2\nEnvironmentalAgency --> UC3\nEnvironmentalAgency --> UC4\nEnvironmentalAgency --> UC5\nEnvironmentalAgency --> UC6\n@enduml"
    },
    {
        "input": "Create a use case diagram for a diagramming tool that helps software engineers create UML diagrams, flowcharts, and other visual representations of software systems. The tool provides a user-friendly interface for designing diagrams, adding shapes and connectors, and customizing visual elements. Software engineers can collaborate on diagrams, share diagrams with team members, and export diagrams in various formats. The tool includes features for version control, diagram templates, and integration with other software development tools. The platform aims to streamline the diagramming process and enhance communication among software development teams.",
        "output": "@startuml\nleft to right direction\n\nactor SoftwareEngineer\nactor TeamMember\n\nrectangle Diagramming_Tool {\n    usecase \"Create UML Diagrams\" as UC1\n    usecase \"Create Flowcharts\" as UC2\n    usecase \"Customize Visual Elements\" as UC3\n    usecase \"Collaborate on Diagrams\" as UC4\n    usecase \"Share Diagrams\" as UC5\n    usecase \"Export Diagrams\" as UC6\n    usecase \"Version Control\" as UC7\n    usecase \"Diagram Templates\" as UC8\n    usecase \"Integrate with Other Tools\" as UC9\n}\n\nSoftwareEngineer --> UC1\nSoftwareEngineer --> UC2\nSoftwareEngineer --> UC3\nSoftwareEngineer --> UC4\nSoftwareEngineer --> UC5\nSoftwareEngineer --> UC6\nSoftwareEngineer --> UC7\nSoftwareEngineer --> UC8\nSoftwareEngineer --> UC9\n\nTeamMember --> UC4\nTeamMember --> UC5\nTeamMember --> UC6\n@enduml"
    },
    {
        "input": "Create a use case diagram for a fitness application that helps users track their workouts, set fitness goals, and monitor their progress. The application allows users to log exercises, track calories burned, and create personalized workout plans. Users can set fitness goals, view workout summaries, and receive notifications for workout reminders. The application includes features for tracking nutrition, logging meals, and calculating daily calorie intake. Users can monitor their nutrition intake, view meal summaries, and receive alerts for meal planning. The platform aims to promote healthy lifestyles, improve fitness habits, and enhance user well-being.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Fitness_Application {\n    usecase \"Log Exercises\" as UC1\n    usecase \"Track Calories Burned\" as UC2\n    usecase \"Create Workout Plans\" as UC3\n    usecase \"Set Fitness Goals\" as UC4\n    usecase \"View Workout Summaries\" as UC5\n    usecase \"Receive Workout Reminders\" as UC6\n    usecase \"Track Nutrition\" as UC7\n    usecase \"Log Meals\" as UC8\n    usecase \"Calculate Calorie Intake\" as UC9\n    usecase \"Monitor Nutrition Intake\" as UC10\n    usecase \"View Meal Summaries\" as UC11\n    usecase \"Receive Meal Planning Alerts\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\n@enduml"
    },
    {
        "input": "Create a use case diagram for a hostel finding application that helps students search for and book hostel accommodations near their educational institutions. The application allows students to search for hostels based on location, price, and amenities. Students can view hostel details, check availability, and book rooms online. The application includes features for filtering search results, viewing hostel reviews, and comparing hostel options. Students can manage bookings, receive booking confirmations, and access directions to hostels. The platform aims to simplify the process of finding and booking hostel accommodations for students.",
        "output": "@startuml\nleft to right direction\n\nactor Student\n\nrectangle Hostel_Finding_Application {\n    usecase \"Search Hostels\" as UC1\n    usecase \"Book Hostel Accommodations\" as UC2\n    usecase \"Filter Search Results\" as UC3\n    usecase \"View Hostel Reviews\" as UC4\n    usecase \"Compare Hostel Options\" as UC5\n    usecase \"Manage Bookings\" as UC6\n    usecase \"Receive Booking Confirmations\" as UC7\n    usecase \"Access Directions to Hostels\" as UC8\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\nStudent --> UC6\nStudent --> UC7\nStudent --> UC8\n@enduml"
    },
    {
        "input": "Create a use case diagram for a messaging application that allows users to send text messages, photos, videos, and voice messages to their contacts. The application supports group chats, message encryption, and multimedia sharing. Users can create chat groups, add or remove participants, and customize chat settings. The application includes features for sending notifications, archiving messages, and blocking contacts. Users can manage message storage, view message histories, and receive message alerts. The platform aims to facilitate communication and collaboration among users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Messaging_Application {\n    usecase \"Send Text Messages\" as UC1\n    usecase \"Send Photos\" as UC2\n    usecase \"Send Videos\" as UC3\n    usecase \"Send Voice Messages\" as UC4\n    usecase \"Support Group Chats\" as UC5\n    usecase \"Encrypt Messages\" as UC6\n    usecase \"Share Multimedia\" as UC7\n    usecase \"Create Chat Groups\" as UC8\n    usecase \"Add/Remove Participants\" as UC9\n    usecase \"Customize Chat Settings\" as UC10\n    usecase \"Send Notifications\" as UC11\n    usecase \"Archive Messages\" as UC12\n    usecase \"Block Contacts\" as UC13\n    usecase \"Manage Message Storage\" as UC14\n    usecase \"View Message Histories\" as UC15\n    usecase \"Receive Message Alerts\" as UC16\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\nUser --> UC16\n@enduml"
    },
    {
        "input": "Create a use case diagram for a social media application that allows users to share photos, videos, and messages with their friends. The application supports multimedia sharing, chat messaging, and story posting. Users can create posts, view stories, and send direct messages to contacts. The application includes features for adding friends, following users, and commenting on posts. Users can manage privacy settings, view activity feeds, and receive notifications for new content. The platform aims to connect users and facilitate social interactions.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Social_Media_Application {\n    usecase \"Share Photos\" as UC1\n    usecase \"Share Videos\" as UC2\n    usecase \"Share Messages\" as UC3\n    usecase \"Support Multimedia Sharing\" as UC4\n    usecase \"Support Chat Messaging\" as UC5\n    usecase \"Support Story Posting\" as UC6\n    usecase \"Create Posts\" as UC7\n    usecase \"View Stories\" as UC8\n    usecase \"Send Direct Messages\" as UC9\n    usecase \"Add Friends\" as UC10\n    usecase \"Follow Users\" as UC11\n    usecase \"Comment on Posts\" as UC12\n    usecase \"Manage Privacy Settings\" as UC13\n    usecase \"View Activity Feeds\" as UC14\n    usecase \"Receive Notifications\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I need a use case diagram for a logo design application that helps users create custom logos for their businesses, websites, and products. The application provides a user-friendly interface for designing logos, selecting colors, and adding text and graphics. Users can customize logo templates, save logo designs, and download logos in various formats. The application includes features for sharing logos on social media, collaborating on logo projects, and accessing design tools. Users can manage logo projects, view design histories, and receive design suggestions. The platform aims to empower users to create professional and visually appealing logos.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Logo_Design_Application {\n    usecase \"Create Custom Logos\" as UC1\n    usecase \"Select Colors\" as UC2\n    usecase \"Add Text and Graphics\" as UC3\n    usecase \"Customize Logo Templates\" as UC4\n    usecase \"Save Logo Designs\" as UC5\n    usecase \"Download Logos\" as UC6\n    usecase \"Share Logos\" as UC7\n    usecase \"Collaborate on Projects\" as UC8\n    usecase \"Access Design Tools\" as UC9\n    usecase \"Manage Logo Projects\" as UC10\n    usecase \"View Design Histories\" as UC11\n    usecase \"Receive Design Suggestions\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\n@enduml"
    },
    {
        "input": "Create a use case diagram for an e-commerce named Daraz platform that allows users to browse products, add items to their cart, and make purchases online. The platform supports product categories, search filters, and product recommendations. Users can create accounts, view order histories, and track order shipments. The platform includes features for processing payments, managing inventory, and generating sales reports. Administrators can add new products, update product listings, and monitor user activity. The platform aims to provide a seamless and secure online shopping experience for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Administrator\n\nrectangle Daraz_E-Commerce_Platform {\n    usecase \"Browse Products\" as UC1\n    usecase \"Add Items to Cart\" as UC2\n    usecase \"Make Purchases\" as UC3\n    usecase \"Support Product Categories\" as UC4\n    usecase \"Support Search Filters\" as UC5\n    usecase \"Provide Product Recommendations\" as UC6\n    usecase \"Create Accounts\" as UC7\n    usecase \"View Order Histories\" as UC8\n    usecase \"Track Order Shipments\" as UC9\n    usecase \"Process Payments\" as UC10\n    usecase \"Manage Inventory\" as UC11\n    usecase \"Generate Sales Reports\" as UC12\n    usecase \"Add New Products\" as UC13\n    usecase \"Update Product Listings\" as UC14\n    usecase \"Monitor User Activity\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\n\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Create a use case diagram for a bidding application that allows users to participate in online auctions, place bids on items, and win auctions. The application supports auction categories, bid notifications, and auction countdowns. Users can create accounts, view auction listings, and place bids on items. The application includes features for tracking bid histories, managing auction wins, and receiving auction alerts. Users can manage auction activities, view auction results, and receive payment instructions. The platform aims to provide an engaging and competitive bidding experience for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Bidding_Application {\n    usecase \"Participate in Online Auctions\" as UC1\n    usecase \"Place Bids on Items\" as UC2\n    usecase \"Win Auctions\" as UC3\n    usecase \"Support Auction Categories\" as UC4\n    usecase \"Provide Bid Notifications\" as UC5\n    usecase \"Include Auction Countdowns\" as UC6\n    usecase \"Create Accounts\" as UC7\n    usecase \"View Auction Listings\" as UC8\n    usecase \"Track Bid Histories\" as UC9\n    usecase \"Manage Auction Wins\" as UC10\n    usecase \"Receive Auction Alerts\" as UC11\n    usecase \"Manage Auction Activities\" as UC12\n    usecase \"View Auction Results\" as UC13\n    usecase \"Receive Payment Instructions\" as UC14\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\n@enduml"
    },
    {
        "input": "Create a use case diagram for a house-helper/maid finding application that helps users find and hire domestic helpers for household chores. The application allows users to search for helpers based on services, availability, and ratings. Users can view helper profiles, request services, and schedule appointments. The application includes features for managing bookings, tracking service histories, and providing feedback on helpers. Users can manage helper preferences, view service summaries, and receive notifications for service reminders. The platform aims to simplify the process of finding and hiring domestic helpers for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle House_Helper_Finding_Application {\n    usecase \"Search for Helpers\" as UC1\n    usecase \"Hire Domestic Helpers\" as UC2\n    usecase \"View Helper Profiles\" as UC3\n    usecase \"Request Services\" as UC4\n    usecase \"Schedule Appointments\" as UC5\n    usecase \"Manage Bookings\" as UC6\n    usecase \"Track Service Histories\" as UC7\n    usecase \"Provide Feedback on Helpers\" as UC8\n    usecase \"Manage Helper Preferences\" as UC9\n    usecase \"View Service Summaries\" as UC10\n    usecase \"Receive Service Reminders\" as UC11\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\n@enduml"
    },
    {
        "input": "I want a use case diagram for a pharmaceutical supply chain management system that helps pharmaceutical companies manage the production, distribution, and sales of pharmaceutical products. The system allows companies to track inventory, manage orders, and monitor shipments. Companies can input production data, generate purchase orders, and track product deliveries. The system includes features for managing suppliers, tracking sales data, and generating reports on product performance. Administrators can oversee supply chain operations, allocate resources, and ensure product quality. The platform aims to streamline pharmaceutical supply chain processes and improve product distribution.",
        "output": "@startuml\nleft to right direction\n\nactor PharmaceuticalCompany\nactor Administrator\n\nrectangle Pharmaceutical_Supply_Chain_Management_System {\n    usecase \"Track Inventory\" as UC1\n    usecase \"Manage Orders\" as UC2\n    usecase \"Monitor Shipments\" as UC3\n    usecase \"Input Production Data\" as UC4\n    usecase \"Generate Purchase Orders\" as UC5\n    usecase \"Track Product Deliveries\" as UC6\n    usecase \"Manage Suppliers\" as UC7\n    usecase \"Track Sales Data\" as UC8\n    usecase \"Generate Reports\" as UC9\n    usecase \"Oversee Operations\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Product Quality\" as UC12\n}\n\nPharmaceuticalCompany --> UC1\nPharmaceuticalCompany --> UC2\nPharmaceuticalCompany --> UC3\nPharmaceuticalCompany --> UC4\nPharmaceuticalCompany --> UC5\nPharmaceuticalCompany --> UC6\nPharmaceuticalCompany --> UC7\nPharmaceuticalCompany --> UC8\nPharmaceuticalCompany --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "I want a use case diagram for a learn how to code application that helps users learn programming languages, practice coding exercises, and build software projects. The application provides interactive coding tutorials, code editors, and project templates. Users can create accounts, view coding lessons, and complete coding challenges. The application includes features for tracking coding progress, managing code repositories, and sharing code snippets. Users can manage coding preferences, view project histories, and receive coding tips and suggestions. The platform aims to empower users to develop coding skills and build software projects.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Learn_How_to_Code_Application {\n    usecase \"Learn Programming Languages\" as UC1\n    usecase \"Practice Coding Exercises\" as UC2\n    usecase \"Build Software Projects\" as UC3\n    usecase \"Provide Coding Tutorials\" as UC4\n    usecase \"Support Code Editors\" as UC5\n    usecase \"Include Project Templates\" as UC6\n    usecase \"Create Accounts\" as UC7\n    usecase \"View Coding Lessons\" as UC8\n    usecase \"Complete Coding Challenges\" as UC9\n    usecase \"Track Coding Progress\" as UC10\n    usecase \"Manage Code Repositories\" as UC11\n    usecase \"Share Code Snippets\" as UC12\n    usecase \"Manage Coding Preferences\" as UC13\n    usecase \"View Project Histories\" as UC14\n    usecase \"Receive Coding Tips\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a data visualization application that helps users create visual representations of data, analyze trends, and present insights. The application provides data import tools, chart templates, and customization options. Users can import data sets, create charts, and customize chart styles. The application includes features for saving visualizations, sharing data insights, and exporting charts in various formats. Users can manage data sources, view visualization histories, and receive data analysis suggestions. The platform aims to simplify the process of data visualization and enhance data-driven decision-making.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Data_Visualization_Application {\n    usecase \"Create Visual Representations\" as UC1\n    usecase \"Analyze Trends\" as UC2\n    usecase \"Present Insights\" as UC3\n    usecase \"Provide Data Import Tools\" as UC4\n    usecase \"Support Chart Templates\" as UC5\n    usecase \"Include Customization Options\" as UC6\n    usecase \"Import Data Sets\" as UC7\n    usecase \"Create Charts\" as UC8\n    usecase \"Customize Chart Styles\" as UC9\n    usecase \"Save Visualizations\" as UC10\n    usecase \"Share Data Insights\" as UC11\n    usecase \"Export Charts\" as UC12\n    usecase \"Manage Data Sources\" as UC13\n    usecase \"View Visualization Histories\" as UC14\n    usecase \"Receive Data Analysis Suggestions\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a matchmaking application named 'Find the one', that helps users find compatible partners, build relationships, and connect with like-minded individuals. The application provides user profiles, matching algorithms, and chat messaging features. Users can create profiles, view partner suggestions, and send messages to potential matches. The application includes features for tracking relationship statuses, managing connections, and receiving relationship advice. Users can manage privacy settings, view relationship histories, and receive notifications for new matches. The platform aims to facilitate meaningful connections and foster healthy relationships among users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Find_the_One_Matchmaking_Application {\n    usecase \"Find Compatible Partners\" as UC1\n    usecase \"Build Relationships\" as UC2\n    usecase \"Connect with Like-Minded Individuals\" as UC3\n    usecase \"Provide User Profiles\" as UC4\n    usecase \"Support Matching Algorithms\" as UC5\n    usecase \"Include Chat Messaging Features\" as UC6\n    usecase \"Create Profiles\" as UC7\n    usecase \"View Partner Suggestions\" as UC8\n    usecase \"Send Messages\" as UC9\n    usecase \"Track Relationship Statuses\" as UC10\n    usecase \"Manage Connections\" as UC11\n    usecase \"Receive Relationship Advice\" as UC12\n    usecase \"Manage Privacy Settings\" as UC13\n    usecase \"View Relationship Histories\" as UC14\n    usecase \"Receive New Match Notifications\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a food delivery application named 'FoodPanda' that allows users to order food from restaurants, track deliveries, and provide feedback on food quality. The application supports restaurant listings, menu browsing, and order customization. Users can create accounts, browse menus, and place orders for delivery. The application includes features for tracking order statuses, managing delivery addresses, and rating food items. Users can manage payment methods, view order histories, and receive notifications for order updates. The platform aims to provide a convenient and reliable food delivery service for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle FoodPanda_Food_Delivery_Application {\n    usecase \"Order Food from Restaurants\" as UC1\n    usecase \"Track Deliveries\" as UC2\n    usecase \"Provide Feedback on Food Quality\" as UC3\n    usecase \"Support Restaurant Listings\" as UC4\n    usecase \"Support Menu Browsing\" as UC5\n    usecase \"Support Order Customization\" as UC6\n    usecase \"Create Accounts\" as UC7\n    usecase \"Browse Menus\" as UC8\n    usecase \"Place Orders for Delivery\" as UC9\n    usecase \"Track Order Statuses\" as UC10\n    usecase \"Manage Delivery Addresses\" as UC11\n    usecase \"Rate Food Items\" as UC12\n    usecase \"Manage Payment Methods\" as UC13\n    usecase \"View Order Histories\" as UC14\n    usecase \"Receive Order Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a web vulnerability scanner that helps hackers identify security vulnerabilities in web applications and websites. The scanner uses automated tools, manual testing, and security checks to detect common vulnerabilities such as SQL injection, cross-site scripting, and insecure configurations. Hackers can input target URLs, run scans, and analyze scan results for potential vulnerabilities. The scanner includes features for generating vulnerability reports, exploiting security flaws, and providing recommendations for remediation. Hackers can manage scan settings, view scan histories, and receive alerts for critical vulnerabilities. The platform aims to assist hackers in identifying and exploiting security weaknesses in web applications.",
        "output": "@startuml\nleft to right direction\n\nactor Hacker\n\nrectangle Web_Vulnerability_Scanner {\n    usecase \"Identify Security Vulnerabilities\" as UC1\n    usecase \"Detect Common Vulnerabilities\" as UC2\n    usecase \"Run Scans\" as UC3\n    usecase \"Analyze Scan Results\" as UC4\n    usecase \"Generate Reports\" as UC5\n    usecase \"Exploit Security Flaws\" as UC6\n    usecase \"Get Recommendations\" as UC7\n    usecase \"Manage Scan Settings\" as UC8\n    usecase \"View Scan Histories\" as UC9\n    usecase \"Receive Alerts\" as UC10\n}\n\nHacker --> UC1\nHacker --> UC2\nHacker --> UC3\nHacker --> UC4\nHacker --> UC5\nHacker --> UC6\nHacker --> UC7\nHacker --> UC8\nHacker --> UC9\nHacker --> UC10\n@enduml"
    },
    {
        "input": "I want a use case diagram for a course management system that helps students enroll in courses, view course materials, and submit assignments. The system allows instructors to create courses, upload course materials, and grade assignments. Students can search for courses, enroll in courses, and access course materials online. The system includes features for tracking student progress, managing course schedules, and generating course reports. Instructors can monitor student performance, provide feedback on assignments, and communicate with students. The platform aims to facilitate online learning and improve course management processes.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Instructor\n\nrectangle Course_Management_System {\n    usecase \"Enroll in Courses\" as UC1\n    usecase \"View Course Materials\" as UC2\n    usecase \"Submit Assignments\" as UC3\n    usecase \"Create Courses\" as UC4\n    usecase \"Upload Course Materials\" as UC5\n    usecase \"Grade Assignments\" as UC6\n    usecase \"Search for Courses\" as UC7\n    usecase \"Access Course Materials\" as UC8\n    usecase \"Track Student Progress\" as UC9\n    usecase \"Manage Course Schedules\" as UC10\n    usecase \"Generate Course Reports\" as UC11\n    usecase \"Monitor Student Performance\" as UC12\n    usecase \"Provide Feedback on Assignments\" as UC13\n    usecase \"Communicate with Students\" as UC14\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC7\nStudent --> UC8\nStudent --> UC9\nStudent --> UC10\nStudent --> UC11\n\nInstructor --> UC4\nInstructor --> UC5\nInstructor --> UC6\nInstructor --> UC12\nInstructor --> UC13\nInstructor --> UC14\n@enduml"
    },
    {
        "input": "I want a use case diagram for a video streaming application that allows users to watch videos, create playlists, and share content with friends. The application supports video categories, search filters, and video recommendations. Users can create accounts, watch videos, and like or dislike videos. The application includes features for creating playlists, sharing videos on social media, and commenting on videos. Users can manage video preferences, view video histories, and receive notifications for new content. The platform aims to provide an engaging and personalized video streaming experience for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Video_Streaming_Application {\n    usecase \"Watch Videos\" as UC1\n    usecase \"Create Playlists\" as UC2\n    usecase \"Share Content\" as UC3\n    usecase \"Support Video Categories\" as UC4\n    usecase \"Support Search Filters\" as UC5\n    usecase \"Provide Video Recommendations\" as UC6\n    usecase \"Create Accounts\" as UC7\n    usecase \"Like/Dislike Videos\" as UC8\n    usecase \"Share Videos on Social Media\" as UC9\n    usecase \"Comment on Videos\" as UC10\n    usecase \"Manage Video Preferences\" as UC11\n    usecase \"View Video Histories\" as UC12\n    usecase \"Receive New Content Notifications\" as UC13\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\n@enduml"
    },
    {
        "input": "I want a use case diagram for a zoo management system that helps zookeepers manage animals, exhibits, and visitor information. The system allows zookeepers to input animal data, track feeding schedules, and monitor animal health. Visitors can view exhibit information, purchase tickets, and attend animal shows. The system includes features for managing exhibit maintenance, tracking visitor attendance, and generating reports on animal populations. Administrators can oversee zoo operations, allocate resources, and ensure visitor safety. The platform aims to streamline zoo management processes and enhance visitor experiences.",
        "output": "@startuml\nleft to right direction\n\nactor Zookeeper\nactor Visitor\nactor Administrator \n\nrectangle Zoo_Management_System {\n    usecase \"Manage Animals\" as UC1\n    usecase \"Manage Exhibits\" as UC2\n    usecase \"Manage Visitor Information\" as UC3\n    usecase \"Input Animal Data\" as UC4\n    usecase \"Track Feeding Schedules\" as UC5\n    usecase \"Monitor Animal Health\" as UC6\n    usecase \"View Exhibit Information\" as UC7\n    usecase \"Purchase Tickets\" as UC8\n    usecase \"Attend Animal Shows\" as UC9\n    usecase \"Manage Exhibit Maintenance\" as UC10\n    usecase \"Track Visitor Attendance\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Visitor Safety\" as UC15\n}\n\nZookeeper --> UC1\nZookeeper --> UC2\nZookeeper --> UC3\nZookeeper --> UC4\nZookeeper --> UC5\nZookeeper --> UC6\n\nVisitor --> UC7\nVisitor --> UC8\nVisitor --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a welcome party planner application that helps event organizers plan and manage welcome parties for new employees. The application allows organizers to create party schedules, invite guests, and coordinate party activities. New employees can view party details, RSVP to events, and participate in party games. The application includes features for managing party budgets, tracking guest attendance, and providing event feedback. Organizers can manage party themes, view party histories, and receive notifications for party updates. The platform aims to create a welcoming and engaging experience for new employees.",
        "output": "@startuml\nleft to right direction\n\nactor Organizer\nactor NewEmployee\n\nrectangle Welcome_Party_Planner_Application {\n    usecase \"Plan Welcome Parties\" as UC1\n    usecase \"Manage Party Schedules\" as UC2\n    usecase \"Invite Guests\" as UC3\n    usecase \"Coordinate Party Activities\" as UC4\n    usecase \"View Party Details\" as UC5\n    usecase \"RSVP to Events\" as UC6\n    usecase \"Participate in Party Games\" as UC7\n    usecase \"Manage Party Budgets\" as UC8\n    usecase \"Track Guest Attendance\" as UC9\n    usecase \"Provide Event Feedback\" as UC10\n    usecase \"Manage Party Themes\" as UC11\n    usecase \"View Party Histories\" as UC12\n    usecase \"Receive Party Updates\" as UC13\n}\n\nOrganizer --> UC1\nOrganizer --> UC2\nOrganizer --> UC3\nOrganizer --> UC4\nOrganizer --> UC8\nOrganizer --> UC9\nOrganizer --> UC10\nOrganizer --> UC11\nOrganizer --> UC12\nOrganizer --> UC13\n\nNewEmployee --> UC5\nNewEmployee --> UC6\nNewEmployee --> UC7\n@enduml"
    },
    {
        "input": "I want a use case diagram for a trip planner application that helps users plan and organize trips, create itineraries, and share travel experiences. The application allows users to search for destinations, book accommodations, and arrange transportation. Users can create trip plans, view trip details, and add activities to their itineraries. The application includes features for managing trip budgets, tracking travel expenses, and sharing trip photos. Users can manage travel preferences, view trip histories, and receive notifications for trip updates. The platform aims to simplify the trip planning process and enhance travel experiences for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Trip_Planner_Application {\n    usecase \"Plan Trips\" as UC1\n    usecase \"Organize Itineraries\" as UC2\n    usecase \"Share Travel Experiences\" as UC3\n    usecase \"Search Destinations\" as UC4\n    usecase \"Book Accommodations\" as UC5\n    usecase \"Arrange Transportation\" as UC6\n    usecase \"Create Trip Plans\" as UC7\n    usecase \"View Trip Details\" as UC8\n    usecase \"Add Activities to Itineraries\" as UC9\n    usecase \"Manage Trip Budgets\" as UC10\n    usecase \"Track Travel Expenses\" as UC11\n    usecase \"Share Trip Photos\" as UC12\n    usecase \"Manage Travel Preferences\" as UC13\n    usecase \"View Trip Histories\" as UC14\n    usecase \"Receive Trip Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a cafe management system that helps cafe owners manage orders, track inventory, and analyze sales data. The system allows cafe owners to input menu items, process orders, and manage customer payments. Customers can view menu options, place orders, and pay for purchases. The system includes features for tracking inventory levels, managing supplier relationships, and generating reports on sales performance. Administrators can oversee cafe operations, allocate resources, and ensure customer satisfaction. The platform aims to streamline cafe management processes and improve customer service.",
        "output": "@startuml\nleft to right direction\n\nactor CafeOwner\nactor Customer\nactor Administrator \n\nrectangle Cafe_Management_System {\n    usecase \"Manage Orders\" as UC1\n    usecase \"Track Inventory\" as UC2\n    usecase \"Analyze Sales Data\" as UC3\n    usecase \"Input Menu Items\" as UC4\n    usecase \"Process Orders\" as UC5\n    usecase \"Manage Customer Payments\" as UC6\n    usecase \"View Menu Options\" as UC7\n    usecase \"Place Orders\" as UC8\n    usecase \"Pay for Purchases\" as UC9\n    usecase \"Track Inventory Levels\" as UC10\n    usecase \"Manage Supplier Relationships\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Customer Satisfaction\" as UC15\n}\n\nCafeOwner --> UC1\nCafeOwner --> UC2\nCafeOwner --> UC3\nCafeOwner --> UC4\nCafeOwner --> UC5\nCafeOwner --> UC6\n\nCustomer --> UC7\nCustomer --> UC8\nCustomer --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a crime management system that helps law enforcement agencies manage criminal cases, track suspects, and analyze crime data. The system allows investigators to input case details, gather evidence, and identify suspects. Officers can search for criminal records, issue warrants, and make arrests. The system includes features for tracking case progress, managing evidence storage, and generating reports on crime trends. Administrators can oversee law enforcement operations, allocate resources, and ensure public safety. The platform aims to streamline crime management processes and improve crime prevention efforts.",
        "output": "@startuml\nleft to right direction\n\nactor Investigator\nactor Officer\nactor Administrator \n\nrectangle Crime_Management_System {\n    usecase \"Manage Criminal Cases\" as UC1\n    usecase \"Track Suspects\" as UC2\n    usecase \"Analyze Crime Data\" as UC3\n    usecase \"Input Case Details\" as UC4\n    usecase \"Gather Evidence\" as UC5\n    usecase \"Identify Suspects\" as UC6\n    usecase \"Search Criminal Records\" as UC7\n    usecase \"Issue Warrants\" as UC8\n    usecase \"Make Arrests\" as UC9\n    usecase \"Track Case Progress\" as UC10\n    usecase \"Manage Evidence Storage\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Public Safety\" as UC15\n}\n\nInvestigator --> UC1\nInvestigator --> UC2\nInvestigator --> UC3\nInvestigator --> UC4\nInvestigator --> UC5\nInvestigator --> UC6\n\nOfficer --> UC7\nOfficer --> UC8\nOfficer --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a country's intelligence agency that helps intelligence officers manage national security threats, track suspects, and analyze intelligence data. The system allows officers to input threat details, gather intelligence, and identify suspects. Officers can search for criminal records, issue warrants, and make arrests. The system includes features for tracking threat levels, managing intelligence storage, and generating reports on security trends. Administrators can oversee intelligence operations, allocate resources, and ensure national security. The platform aims to streamline intelligence management processes and improve security efforts.",
        "output": "@startuml\nleft to right direction\n\nactor IntelligenceOfficer\nactor Administrator \n\nrectangle Intelligence_Agency_System {\n    usecase \"Manage National Security Threats\" as UC1\n    usecase \"Track Suspects\" as UC2\n    usecase \"Analyze Intelligence Data\" as UC3\n    usecase \"Input Threat Details\" as UC4\n    usecase \"Gather Intelligence\" as UC5\n    usecase \"Identify Suspects\" as UC6\n    usecase \"Search Criminal Records\" as UC7\n    usecase \"Issue Warrants\" as UC8\n    usecase \"Make Arrests\" as UC9\n    usecase \"Track Threat Levels\" as UC10\n    usecase \"Manage Intelligence Storage\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure National Security\" as UC15\n}\n\nIntelligenceOfficer --> UC1\nIntelligenceOfficer --> UC2\nIntelligenceOfficer --> UC3\nIntelligenceOfficer --> UC4\nIntelligenceOfficer --> UC5\nIntelligenceOfficer --> UC6\n\nAdministrator --> UC7\nAdministrator --> UC8\nAdministrator --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a protest management system that helps protest organizers manage demonstrations, track participants, and analyze protest data. The system allows organizers to input protest details, gather information, and identify participants. Officers can monitor protest activities, issue permits, and ensure public safety. The system includes features for tracking protest progress, managing protest locations, and generating reports on protest trends. Administrators can oversee protest operations, allocate resources, and ensure peaceful demonstrations. The platform aims to streamline protest management processes and improve protest coordination efforts.",
        "output": "@startuml\nleft to right direction\n\nactor Organizer\nactor Officer\nactor Administrator \n\nrectangle Protest_Management_System {\n    usecase \"Manage Demonstrations\" as UC1\n    usecase \"Track Participants\" as UC2\n    usecase \"Analyze Protest Data\" as UC3\n    usecase \"Input Protest Details\" as UC4\n    usecase \"Gather Information\" as UC5\n    usecase \"Identify Participants\" as UC6\n    usecase \"Monitor Protest Activities\" as UC7\n    usecase \"Issue Permits\" as UC8\n    usecase \"Ensure Public Safety\" as UC9\n    usecase \"Track Protest Progress\" as UC10\n    usecase \"Manage Protest Locations\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Peaceful Demonstrations\" as UC15\n}\n\nOrganizer --> UC1\nOrganizer --> UC2\nOrganizer --> UC3\nOrganizer --> UC4\nOrganizer --> UC5\nOrganizer --> UC6\n\nOfficer --> UC7\nOfficer --> UC8\nOfficer --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a boycott management system that helps activists organize boycotts, track supporters, and analyze boycott data. The system allows activists to input boycott details, gather information, and identify supporters. Officers can monitor boycott activities, issue statements, and ensure public safety. The system includes features for tracking boycott progress, managing boycott locations, and generating reports on boycott trends. Administrators can oversee boycott operations, allocate resources, and ensure peaceful demonstrations. The platform aims to streamline boycott management processes and improve boycott coordination efforts.",
        "output": "@startuml\nleft to right direction\n\nactor Activist\nactor Officer\nactor Administrator \n\nrectangle Boycott_Management_System {\n    usecase \"Organize Boycotts\" as UC1\n    usecase \"Track Supporters\" as UC2\n    usecase \"Analyze Boycott Data\" as UC3\n    usecase \"Input Boycott Details\" as UC4\n    usecase \"Gather Information\" as UC5\n    usecase \"Identify Supporters\" as UC6\n    usecase \"Monitor Boycott Activities\" as UC7\n    usecase \"Issue Statements\" as UC8\n    usecase \"Ensure Public Safety\" as UC9\n    usecase \"Track Boycott Progress\" as UC10\n    usecase \"Manage Boycott Locations\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Peaceful Demonstrations\" as UC15\n}\n\nActivist --> UC1\nActivist --> UC2\nActivist --> UC3\nActivist --> UC4\nActivist --> UC5\nActivist --> UC6\n\nOfficer --> UC7\nOfficer --> UC8\nOfficer --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a disaster management system that helps emergency responders manage disasters, track victims, and analyze disaster data. The system allows responders to input disaster details, gather information, and identify victims. Officers can monitor disaster activities, issue alerts, and ensure public safety. The system includes features for tracking disaster progress, managing disaster locations, and generating reports on disaster trends. Administrators can oversee disaster operations, allocate resources, and ensure timely responses. The platform aims to streamline disaster management processes and improve disaster response efforts.",
        "output": "@startuml\nleft to right direction\n\nactor Responder\nactor Officer\nactor Administrator \n\nrectangle Disaster_Management_System {\n    usecase \"Manage Disasters\" as UC1\n    usecase \"Track Victims\" as UC2\n    usecase \"Analyze Disaster Data\" as UC3\n    usecase \"Input Disaster Details\" as UC4\n    usecase \"Gather Information\" as UC5\n    usecase \"Identify Victims\" as UC6\n    usecase \"Monitor Disaster Activities\" as UC7\n    usecase \"Issue Alerts\" as UC8\n    usecase \"Ensure Public Safety\" as UC9\n    usecase \"Track Disaster Progress\" as UC10\n    usecase \"Manage Disaster Locations\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Timely Responses\" as UC15\n}\n\nResponder --> UC1\nResponder --> UC2\nResponder --> UC3\nResponder --> UC4\nResponder --> UC5\nResponder --> UC6\n\nOfficer --> UC7\nOfficer --> UC8\nOfficer --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a disaster recovery system that helps organizations recover from disasters, restore operations, and minimize downtime. The system allows organizations to input disaster recovery plans, activate recovery procedures, and restore critical systems. IT staff can monitor recovery progress, test backup systems, and ensure data integrity. The system includes features for tracking recovery timelines, managing recovery resources, and generating reports on recovery performance. Administrators can oversee recovery operations, allocate resources, and ensure business continuity. The platform aims to streamline disaster recovery processes and improve organizational resilience.",
        "output": "@startuml\nleft to right direction\n\nactor Organization\nactor ITStaff\nactor Administrator \n\nrectangle Disaster_Recovery_System {\n    usecase \"Recover from Disasters\" as UC1\n    usecase \"Restore Operations\" as UC2\n    usecase \"Minimize Downtime\" as UC3\n    usecase \"Input Recovery Plans\" as UC4\n    usecase \"Activate Recovery Procedures\" as UC5\n    usecase \"Restore Critical Systems\" as UC6\n    usecase \"Monitor Recovery Progress\" as UC7\n    usecase \"Test Backup Systems\" as UC8\n    usecase \"Ensure Data Integrity\" as UC9\n    usecase \"Track Recovery Timelines\" as UC10\n    usecase \"Manage Recovery Resources\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Business Continuity\" as UC15\n}\n\nOrganization --> UC1\nOrganization --> UC2\nOrganization --> UC3\nOrganization --> UC4\nOrganization --> UC5\nOrganization --> UC6\n\nITStaff --> UC7\nITStaff --> UC8\nITStaff --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a calculator application that helps users perform basic arithmetic operations such as addition, subtraction, multiplication, and division. The application provides a user-friendly interface with buttons for numbers and operators. Users can input numerical values, select operators, and view calculation results. The application includes features for clearing input, performing multiple operations, and saving calculation history. Users can customize calculator settings, view calculation logs, and receive notifications for calculation errors. The platform aims to provide a convenient and efficient calculator tool for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Calculator_Application {\n    usecase \"Perform Addition\" as UC1\n    usecase \"Perform Subtraction\" as UC2\n    usecase \"Perform Multiplication\" as UC3\n    usecase \"Perform Division\" as UC4\n    usecase \"Provide User-Friendly Interface\" as UC5\n    usecase \"Input Numerical Values\" as UC6\n    usecase \"Select Operators\" as UC7\n    usecase \"View Calculation Results\" as UC8\n    usecase \"Clear Input\" as UC9\n    usecase \"Perform Multiple Operations\" as UC10\n    usecase \"Save Calculation History\" as UC11\n    usecase \"Customize Calculator Settings\" as UC12\n    usecase \"View Calculation Logs\" as UC13\n    usecase \"Receive Calculation Error Notifications\" as UC14\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a code repository platform that helps developers manage source code, collaborate on projects, and track code changes. The platform provides version control tools, code review features, and project management capabilities. Developers can create repositories, commit code changes, and merge code branches. The platform includes features for tracking code histories, managing project issues, and automating code testing. Developers can manage code access permissions, view project wikis, and receive notifications for code updates. The platform aims to streamline code collaboration and improve software development processes.",
        "output": "@startuml\nleft to right direction\n\nactor Developer\n\nrectangle Code_Repository_Platform {\n    usecase \"Manage Source Code\" as UC1\n    usecase \"Collaborate on Projects\" as UC2\n    usecase \"Track Code Changes\" as UC3\n    usecase \"Provide Version Control Tools\" as UC4\n    usecase \"Support Code Review Features\" as UC5\n    usecase \"Include Project Management Capabilities\" as UC6\n    usecase \"Create Repositories\" as UC7\n    usecase \"Commit Code Changes\" as UC8\n    usecase \"Merge Code Branches\" as UC9\n    usecase \"Track Code Histories\" as UC10\n    usecase \"Manage Project Issues\" as UC11\n    usecase \"Automate Code Testing\" as UC12\n    usecase \"Manage Code Access Permissions\" as UC13\n    usecase \"View Project Wikis\" as UC14\n    usecase \"Receive Code Update Notifications\" as UC15\n}\n\nDeveloper --> UC1\nDeveloper --> UC2\nDeveloper --> UC3\nDeveloper --> UC4\nDeveloper --> UC5\nDeveloper --> UC6\nDeveloper --> UC7\nDeveloper --> UC8\nDeveloper --> UC9\nDeveloper --> UC10\nDeveloper --> UC11\nDeveloper --> UC12\nDeveloper --> UC13\nDeveloper --> UC14\nDeveloper --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a meeting scheduler application that helps users schedule meetings, invite participants, and manage meeting details. The application provides calendar integration, availability checks, and reminder notifications. Users can create meeting requests, send invitations, and set meeting agendas. The application includes features for tracking meeting schedules, managing participant responses, and generating meeting reports. Users can customize meeting settings, view meeting histories, and receive notifications for upcoming meetings. The platform aims to streamline meeting scheduling processes and improve communication among participants.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Meeting_Scheduler_Application {\n    usecase \"Schedule Meetings\" as UC1\n    usecase \"Invite Participants\" as UC2\n    usecase \"Manage Meeting Details\" as UC3\n    usecase \"Provide Calendar Integration\" as UC4\n    usecase \"Support Availability Checks\" as UC5\n    usecase \"Send Reminder Notifications\" as UC6\n    usecase \"Create Meeting Requests\" as UC7\n    usecase \"Send Invitations\" as UC8\n    usecase \"Set Meeting Agendas\" as UC9\n    usecase \"Track Meeting Schedules\" as UC10\n    usecase \"Manage Participant Responses\" as UC11\n    usecase \"Generate Meeting Reports\" as UC12\n    usecase \"Customize Meeting Settings\" as UC13\n    usecase \"View Meeting Histories\" as UC14\n    usecase \"Receive Meeting Notifications\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I need a use case diagram for a webinar platform that helps users host webinars, engage with attendees, and analyze webinar data. The platform provides webinar creation tools, interactive features, and audience engagement options. Hosts can schedule webinars, invite participants, and present webinar content. The platform includes features for tracking attendee interactions, managing webinar recordings, and generating analytics reports. Hosts can customize webinar settings, view webinar histories, and receive notifications for upcoming webinars. The platform aims to facilitate online events and enhance audience engagement.",
        "output": "@startuml\nleft to right direction\n\nactor Host\n\nrectangle Webinar_Platform {\n    usecase \"Host Webinars\" as UC1\n    usecase \"Engage with Attendees\" as UC2\n    usecase \"Analyze Webinar Data\" as UC3\n    usecase \"Provide Webinar Creation Tools\" as UC4\n    usecase \"Support Interactive Features\" as UC5\n    usecase \"Offer Audience Engagement Options\" as UC6\n    usecase \"Schedule Webinars\" as UC7\n    usecase \"Invite Participants\" as UC8\n    usecase \"Present Webinar Content\" as UC9\n    usecase \"Track Attendee Interactions\" as UC10\n    usecase \"Manage Webinar Recordings\" as UC11\n    usecase \"Generate Analytics Reports\" as UC12\n    usecase \"Customize Webinar Settings\" as UC13\n    usecase \"View Webinar Histories\" as UC14\n    usecase \"Receive Webinar Notifications\" as UC15\n}\n\nHost --> UC1\nHost --> UC2\nHost --> UC3\nHost --> UC4\nHost --> UC5\nHost --> UC6\nHost --> UC7\nHost --> UC8\nHost --> UC9\nHost --> UC10\nHost --> UC11\nHost --> UC12\nHost --> UC13\nHost --> UC14\nHost --> UC15\n@enduml"
    },
    {
        "input": "I need a use case diagram for a video conferencing application named 'Zoom' that helps users host virtual meetings, collaborate with team members, and communicate with clients. The application provides video and audio conferencing tools, screen sharing features, and chat messaging options. Users can schedule meetings, invite participants, and join virtual rooms. The application includes features for recording meetings, managing meeting settings, and generating meeting reports. Users can customize meeting backgrounds, view meeting histories, and receive notifications for upcoming meetings. The platform aims to facilitate remote communication and improve virtual collaboration.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Zoom_Video_Conferencing_Application {\n    usecase \"Host Virtual Meetings\" as UC1\n    usecase \"Collaborate with Team Members\" as UC2\n    usecase \"Communicate with Clients\" as UC3\n    usecase \"Provide Video Conferencing Tools\" as UC4\n    usecase \"Offer Screen Sharing Features\" as UC5\n    usecase \"Support Chat Messaging Options\" as UC6\n    usecase \"Schedule Meetings\" as UC7\n    usecase \"Invite Participants\" as UC8\n    usecase \"Join Virtual Rooms\" as UC9\n    usecase \"Record Meetings\" as UC10\n    usecase \"Manage Meeting Settings\" as UC11\n    usecase \"Generate Meeting Reports\" as UC12\n    usecase \"Customize Meeting Backgrounds\" as UC13\n    usecase \"View Meeting Histories\" as UC14\n    usecase \"Receive Meeting Notifications\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for a team collaboration platform named 'Slack' that helps users communicate, share files, and collaborate on projects. The platform provides messaging channels, file sharing options, and project management tools. Users can create channels, send messages, and share documents with team members. The platform includes features for tracking project progress, managing team tasks, and generating productivity reports. Users can customize notification settings, view message histories, and receive alerts for important updates. The platform aims to streamline team communication and enhance collaboration among users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Slack_Team_Collaboration_Platform {\n    usecase \"Communicate\" as UC1\n    usecase \"Share Files\" as UC2\n    usecase \"Collaborate on Projects\" as UC3\n    usecase \"Provide Messaging Channels\" as UC4\n    usecase \"Offer File Sharing Options\" as UC5\n    usecase \"Support Project Management Tools\" as UC6\n    usecase \"Create Channels\" as UC7\n    usecase \"Send Messages\" as UC8\n    usecase \"Share Documents\" as UC9\n    usecase \"Track Project Progress\" as UC10\n    usecase \"Manage Team Tasks\" as UC11\n    usecase \"Generate Productivity Reports\" as UC12\n    usecase \"Customize Notification Settings\" as UC13\n    usecase \"View Message Histories\" as UC14\n    usecase \"Receive Alerts\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Create a use case diagram for a project management tool named 'Trello' that helps users organize tasks, track project progress, and collaborate with team members. The platform provides task boards, task cards, and project timelines. Users can create task boards, add task cards, and assign tasks to team members. The platform includes features for tracking task statuses, managing project deadlines, and generating progress reports on projects. Users can customize task labels, view task histories, and receive notifications for task updates. The platform aims to streamline task management and improve project coordination among users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Trello_Project_Management_Tool {\n    usecase \"Organize Tasks\" as UC1\n    usecase \"Track Project Progress\" as UC2\n    usecase \"Collaborate with Team Members\" as UC3\n    usecase \"Provide Task Boards\" as UC4\n    usecase \"Offer Task Cards\" as UC5\n    usecase \"Support Project Timelines\" as UC6\n    usecase \"Create Task Boards\" as UC7\n    usecase \"Add Task Cards\" as UC8\n    usecase \"Assign Tasks\" as UC9\n    usecase \"Track Task Statuses\" as UC10\n    usecase \"Manage Project Deadlines\" as UC11\n    usecase \"Generate Progress Reports\" as UC12\n    usecase \"Customize Task Labels\" as UC13\n    usecase \"View Task Histories\" as UC14\n    usecase \"Receive Task Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a celebrity news and events platform that helps users stay updated on celebrity news, events, and entertainment industry trends. The platform provides news articles, event listings, and celebrity profiles. Users can read news articles, view event schedules, and explore celebrity profiles. The platform includes features for tracking trending topics, managing event registrations, and generating reports on celebrity engagements. Users can customize news preferences, view event histories, and receive notifications for upcoming events. The platform aims to provide a comprehensive and engaging platform for celebrity enthusiasts.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Celebrity_News_and_Events_Platform {\n    usecase \"Stay Updated on Celebrity News\" as UC1\n    usecase \"Explore Celebrity Profiles\" as UC2\n    usecase \"View Event Schedules\" as UC3\n    usecase \"Provide News Articles\" as UC4\n    usecase \"Offer Event Listings\" as UC5\n    usecase \"Support Celebrity Profiles\" as UC6\n    usecase \"Read News Articles\" as UC7\n    usecase \"View Event Schedules\" as UC8\n    usecase \"Explore Celebrity Profiles\" as UC9\n    usecase \"Track Trending Topics\" as UC10\n    usecase \"Manage Event Registrations\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize News Preferences\" as UC13\n    usecase \"View Event Histories\" as UC14\n    usecase \"Receive Event Notifications\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a tech-talk platform that helps users engage in tech discussions, share knowledge, and collaborate on tech projects. The platform provides discussion forums, knowledge sharing tools, and project management features. Users can participate in tech discussions, share tech resources, and collaborate on tech projects. The platform includes features for tracking tech trends, managing project tasks, and generating reports on tech innovations. Users can customize discussion preferences, view project histories, and receive notifications for tech updates. The platform aims to create a vibrant tech community and foster collaboration among tech enthusiasts.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Tech_Talk_Platform {\n    usecase \"Engage in Tech Discussions\" as UC1\n    usecase \"Share Knowledge\" as UC2\n    usecase \"Collaborate on Tech Projects\" as UC3\n    usecase \"Provide Discussion Forums\" as UC4\n    usecase \"Offer Knowledge Sharing Tools\" as UC5\n    usecase \"Support Project Management Features\" as UC6\n    usecase \"Participate in Tech Discussions\" as UC7\n    usecase \"Share Tech Resources\" as UC8\n    usecase \"Collaborate on Tech Projects\" as UC9\n    usecase \"Track Tech Trends\" as UC10\n    usecase \"Manage Project Tasks\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Discussion Preferences\" as UC13\n    usecase \"View Project Histories\" as UC14\n    usecase \"Receive Tech Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a babysitter management system that helps parents find babysitters, schedule babysitting sessions, and track babysitter activities. The system allows parents to search for available babysitters, book babysitting appointments, and communicate with babysitters. Babysitters can view babysitting requests, accept appointments, and provide care for children. The system includes features for tracking babysitting schedules, managing payment transactions, and generating reports on babysitter performance. Parents can customize babysitting preferences, view babysitter histories, and receive notifications for babysitting updates. The platform aims to provide a reliable and convenient solution for parents to manage babysitting needs.",
        "output": "@startuml\nleft to right direction\n\nactor Parent\nactor Babysitter\n\nrectangle Babysitter_Management_System {\n    usecase \"Find Babysitters\" as UC1\n    usecase \"Schedule Babysitting Sessions\" as UC2\n    usecase \"Track Babysitter Activities\" as UC3\n    usecase \"Search for Available Babysitters\" as UC4\n    usecase \"Book Babysitting Appointments\" as UC5\n    usecase \"Communicate with Babysitters\" as UC6\n    usecase \"View Babysitting Requests\" as UC7\n    usecase \"Accept Appointments\" as UC8\n    usecase \"Provide Care for Children\" as UC9\n    usecase \"Track Babysitting Schedules\" as UC10\n    usecase \"Manage Payment Transactions\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Babysitting Preferences\" as UC13\n    usecase \"View Babysitter Histories\" as UC14\n    usecase \"Receive Babysitting Updates\" as UC15\n}\n\nParent --> UC1\nParent --> UC2\nParent --> UC3\nParent --> UC4\nParent --> UC5\nParent --> UC6\n\nBabysitter --> UC7\nBabysitter --> UC8\nBabysitter --> UC9\n\nParent --> UC10\nParent --> UC11\nParent --> UC12\nParent --> UC13\nParent --> UC14\nParent --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for a WhatsApp sticker maker application that helps users create custom stickers, share stickers with friends, and manage sticker collections. The application allows users to design stickers, import images, and add text to stickers. Users can save stickers to collections, share stickers in chats, and download sticker packs. The application includes features for editing sticker designs, managing sticker categories, and generating reports on sticker usage. Users can customize sticker settings, view sticker histories, and receive notifications for sticker updates. The platform aims to provide a fun and creative tool for users to express themselves through stickers.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle WhatsApp_Sticker_Maker_Application {\n    usecase \"Create Custom Stickers\" as UC1\n    usecase \"Share Stickers with Friends\" as UC2\n    usecase \"Manage Sticker Collections\" as UC3\n    usecase \"Design Stickers\" as UC4\n    usecase \"Import Images\" as UC5\n    usecase \"Add Text to Stickers\" as UC6\n    usecase \"Save Stickers to Collections\" as UC7\n    usecase \"Share Stickers in Chats\" as UC8\n    usecase \"Download Sticker Packs\" as UC9\n    usecase \"Edit Sticker Designs\" as UC10\n    usecase \"Manage Sticker Categories\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Sticker Settings\" as UC13\n    usecase \"View Sticker Histories\" as UC14\n    usecase \"Receive Sticker Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for an AI-based slides/presentation maker that helps users create professional presentations, design slides, and analyze presentation data. The platform provides templates, design tools, and data visualization options. Users can create slides, add content, and customize slide layouts. The platform includes features for tracking presentation progress, managing slide transitions, and generating reports on presentation engagement. Users can customize presentation settings, view presentation histories, and receive notifications for presentation updates. The platform aims to streamline presentation creation and enhance visual communication.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle AI_Based_Slides_Presentation_Maker {\n    usecase \"Create Professional Presentations\" as UC1\n    usecase \"Design Slides\" as UC2\n    usecase \"Analyze Presentation Data\" as UC3\n    usecase \"Provide Templates\" as UC4\n    usecase \"Offer Design Tools\" as UC5\n    usecase \"Support Data Visualization Options\" as UC6\n    usecase \"Create Slides\" as UC7\n    usecase \"Add Content\" as UC8\n    usecase \"Customize Slide Layouts\" as UC9\n    usecase \"Track Presentation Progress\" as UC10\n    usecase \"Manage Slide Transitions\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Presentation Settings\" as UC13\n    usecase \"View Presentation Histories\" as UC14\n    usecase \"Receive Presentation Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for an AI-based resume builder that helps users create professional resumes, design resume templates, and analyze resume data. The platform provides resume templates, design tools, and data visualization options. Users can create resumes, add content, and customize resume layouts. The platform includes features for tracking resume progress, managing resume sections, and generating reports on resume engagement. Users can customize resume settings, view resume histories, and receive notifications for resume updates. The platform aims to streamline resume creation and enhance job application processes.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle AI_Based_Resume_Builder {\n    usecase \"Create Professional Resumes\" as UC1\n    usecase \"Design Resume Templates\" as UC2\n    usecase \"Analyze Resume Data\" as UC3\n    usecase \"Provide Resume Templates\" as UC4\n    usecase \"Offer Design Tools\" as UC5\n    usecase \"Support Data Visualization Options\" as UC6\n    usecase \"Create Resumes\" as UC7\n    usecase \"Add Content\" as UC8\n    usecase \"Customize Resume Layouts\" as UC9\n    usecase \"Track Resume Progress\" as UC10\n    usecase \"Manage Resume Sections\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Resume Settings\" as UC13\n    usecase \"View Resume Histories\" as UC14\n    usecase \"Receive Resume Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "I want a use case diagram for an AI-based chatbot that helps users interact with automated responses, provide information, and analyze user queries. The platform provides chatbot templates, design tools, and data visualization options. Users can chat with the chatbot, ask questions, and receive answers. The platform includes features for tracking chatbot interactions, managing user queries, and generating reports on chatbot performance. Users can customize chatbot settings, view chatbot histories, and receive notifications for chatbot updates. The platform aims to streamline user interactions and enhance customer support processes.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle AI_Based_Chatbot {\n    usecase \"Interact with Automated Responses\" as UC1\n    usecase \"Provide Information\" as UC2\n    usecase \"Analyze User Queries\" as UC3\n    usecase \"Provide Chatbot Templates\" as UC4\n    usecase \"Offer Design Tools\" as UC5\n    usecase \"Support Data Visualization Options\" as UC6\n    usecase \"Chat with Chatbot\" as UC7\n    usecase \"Ask Questions\" as UC8\n    usecase \"Receive Answers\" as UC9\n    usecase \"Track Chatbot Interactions\" as UC10\n    usecase \"Manage User Queries\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Chatbot Settings\" as UC13\n    usecase \"View Chatbot Histories\" as UC14\n    usecase \"Receive Chatbot Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Give a use case diagram for a VR-based training platform that helps users engage in virtual training sessions, learn new skills, and analyze training data. The platform provides VR training modules, interactive simulations, and progress tracking tools. Users can participate in VR training sessions, complete skill challenges, and receive feedback on performance. The platform includes features for tracking training progress, managing skill assessments, and generating reports on training outcomes. Users can customize training settings, view training histories, and receive notifications for training updates. The platform aims to provide an immersive and effective training experience for users.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle VR_Based_Training_Platform {\n    usecase \"Engage in Virtual Training Sessions\" as UC1\n    usecase \"Learn New Skills\" as UC2\n    usecase \"Analyze Training Data\" as UC3\n    usecase \"Provide VR Training Modules\" as UC4\n    usecase \"Offer Interactive Simulations\" as UC5\n    usecase \"Support Progress Tracking Tools\" as UC6\n    usecase \"Participate in VR Training Sessions\" as UC7\n    usecase \"Complete Skill Challenges\" as UC8\n    usecase \"Receive Feedback on Performance\" as UC9\n    usecase \"Track Training Progress\" as UC10\n    usecase \"Manage Skill Assessments\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Training Settings\" as UC13\n    usecase \"View Training Histories\" as UC14\n    usecase \"Receive Training Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Give a use case diagram for a VR-based social platform named 'Connexus' that helps introverts connect with like-minded individuals, engage in virtual social activities, and analyze social interactions. The platform provides VR social spaces, interactive games, and privacy settings. Users can create virtual avatars, join social events, and interact with other users. The platform includes features for tracking social connections, managing privacy preferences, and generating reports on social engagements. Users can customize social settings, view social histories, and receive notifications for social updates. The platform aims to provide a safe and inclusive space for introverts to socialize and build connections.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Connexus_VR_Social_Platform {\n    usecase \"Connect with Like-Minded Individuals\" as UC1\n    usecase \"Engage in Virtual Social Activities\" as UC2\n    usecase \"Analyze Social Interactions\" as UC3\n    usecase \"Provide VR Social Spaces\" as UC4\n    usecase \"Offer Interactive Games\" as UC5\n    usecase \"Support Privacy Settings\" as UC6\n    usecase \"Create Virtual Avatars\" as UC7\n    usecase \"Join Social Events\" as UC8\n    usecase \"Interact with Other Users\" as UC9\n    usecase \"Track Social Connections\" as UC10\n    usecase \"Manage Privacy Preferences\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Social Settings\" as UC13\n    usecase \"View Social Histories\" as UC14\n    usecase \"Receive Social Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Give a use case diagram for a VR-based public speaking app that helps users overcome stage fright, practice public speaking, and analyze speaking performance. The platform provides VR speaking environments, speech coaching tools, and audience feedback options. Users can practice speeches, receive coaching tips, and improve speaking skills. The platform includes features for tracking speaking progress, managing speech evaluations, and generating reports on speaking performance. Users can customize speaking settings, view speaking histories, and receive notifications for speaking updates. The platform aims to provide a supportive and effective tool for users to enhance their public speaking abilities.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle VR_Based_Public_Speaking_App {\n    usecase \"Overcome Stage Fright\" as UC1\n    usecase \"Practice Public Speaking\" as UC2\n    usecase \"Analyze Speaking Performance\" as UC3\n    usecase \"Provide VR Speaking Environments\" as UC4\n    usecase \"Offer Speech Coaching Tools\" as UC5\n    usecase \"Support Audience Feedback Options\" as UC6\n    usecase \"Practice Speeches\" as UC7\n    usecase \"Receive Coaching Tips\" as UC8\n    usecase \"Improve Speaking Skills\" as UC9\n    usecase \"Track Speaking Progress\" as UC10\n    usecase \"Manage Speech Evaluations\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Speaking Settings\" as UC13\n    usecase \"View Speaking Histories\" as UC14\n    usecase \"Receive Speaking Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Give a use case diagram for a VR-based physiotherapy app that helps users perform physical therapy exercises, track progress, and analyze rehabilitation data. The platform provides VR exercise routines, motion tracking tools, and progress monitoring features. Users can follow guided exercises, monitor movements, and improve physical mobility. The platform includes features for tracking exercise progress, managing rehabilitation goals, and generating reports on rehabilitation outcomes. Users can customize exercise settings, view exercise histories, and receive notifications for exercise updates. The platform aims to provide an interactive and effective tool for users to recover from injuries and improve physical well-being.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle VR_Based_Physiotherapy_App {\n    usecase \"Perform Physical Therapy Exercises\" as UC1\n    usecase \"Track Progress\" as UC2\n    usecase \"Analyze Rehabilitation Data\" as UC3\n    usecase \"Provide VR Exercise Routines\" as UC4\n    usecase \"Offer Motion Tracking Tools\" as UC5\n    usecase \"Support Progress Monitoring Features\" as UC6\n    usecase \"Follow Guided Exercises\" as UC7\n    usecase \"Monitor Movements\" as UC8\n    usecase \"Improve Physical Mobility\" as UC9\n    usecase \"Track Exercise Progress\" as UC10\n    usecase \"Manage Rehabilitation Goals\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Exercise Settings\" as UC13\n    usecase \"View Exercise Histories\" as UC14\n    usecase \"Receive Exercise Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Give a use case diagram for a Salah Tracker app that helps users track their daily prayers, set prayer reminders, and analyze prayer habits. The app provides prayer tracking tools, reminder notifications, and prayer statistics. Users can log their daily prayers, receive reminders for prayer times, and view prayer history. The app includes features for tracking prayer progress, managing prayer goals, and generating reports on prayer habits. Users can customize prayer settings, view prayer histories, and receive notifications for prayer updates. The app aims to help users maintain consistent prayer habits and improve their spiritual well-being.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Salah_Tracker_App {\n    usecase \"Track Daily Prayers\" as UC1\n    usecase \"Set Prayer Reminders\" as UC2\n    usecase \"Analyze Prayer Habits\" as UC3\n    usecase \"Provide Prayer Tracking Tools\" as UC4\n    usecase \"Offer Reminder Notifications\" as UC5\n    usecase \"Support Prayer Statistics\" as UC6\n    usecase \"Log Daily Prayers\" as UC7\n    usecase \"Receive Reminders for Prayer Times\" as UC8\n    usecase \"View Prayer History\" as UC9\n    usecase \"Track Prayer Progress\" as UC10\n    usecase \"Manage Prayer Goals\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Prayer Settings\" as UC13\n    usecase \"View Prayer Histories\" as UC14\n    usecase \"Receive Prayer Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {    
        "input": "Design a use case diagram for an online pharmacy system. The traditional method of going to a physical store, selecting medicines, and making purchases often consumes a lot of time and energy. In case of exchanges or returns, the customer needs to revisit the store, adding to the inconvenience. The Online Pharmacy platform offers a streamlined solution where customers can easily select required medicines and place orders with a single click. To use the system, the customer first creates an account, providing essential details like name, address, and identification number. Once logged in, the customer can track the status of their order in real-time. The primary goal of this platform is to ensure access to medicines for all users while allowing the admin to manage supplier information and updates efficiently.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Admin\n\nrectangle Online_Pharmacy_System {\n    usecase \"Create Account\" as UC1\n    usecase \"Select Medicines\" as UC2\n    usecase \"Place Order\" as UC3\n    usecase \"View Order Status\" as UC4\n    usecase \"Manage Supplier Information\" as UC5\n    usecase \"Provide Supplier Details\" as UC6\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\n\nAdmin --> UC5\nAdmin --> UC6\n@enduml"
    },
    {
        "input": "Design a use case diagram for a health equity management system that aims to address healthcare disparities and ensure equitable medical interventions for all patients. The system targets a wide range of users including patients, caretakers, healthcare providers, medical professionals, and government officials. One of the core functionalities of the system is patient classification based on social determinants such as economic status, health insurance, demographics, and hereditary health conditions. The system ensures that each patient receives appropriate and equitable treatment based on their classification. Patients can input their health information into the system, which is cross-verified with their public health records and data from healthcare providers. Another key feature is the notification system that alerts patients to relevant medical events and health schemes. Personal health tracking is available for patients to monitor their medical history. Healthcare providers use the system to plan health worker activity according to the needs of their patients, while the government can access the data to implement intervention schemes and improve public health outcomes. Overall, the system facilitates the registration of patients, classification of social and medical data, and collaboration between healthcare providers and government for equitable healthcare distribution.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Caretaker\nactor Healthcare_Provider\nactor Medical_Professional\nactor Government_Official\n\nrectangle Health_Equity_Management_System {\n    usecase \"Register and Upload Social and Medical Data\" as UC1\n    usecase \"Classify Patients Based on Social Determinants\" as UC2\n    usecase \"Track Personal Health\" as UC3\n    usecase \"Plan Health Worker Activity\" as UC4\n    usecase \"Notify Relevant Medical Events\" as UC5\n    usecase \"Access and Analyze Health Data\" as UC6\n    usecase \"Implement Intervention Schemes\" as UC7\n}\n\nPatient --> UC1\nPatient --> UC3\nPatient --> UC5\n\nCaretaker --> UC3\n\nHealthcare_Provider --> UC4\nHealthcare_Provider --> UC6\n\nMedical_Professional --> UC6\n\nGovernment_Official --> UC6\nGovernment_Official --> UC7\n\nUC1 --> UC2 : <<include>>\n@enduml"
    },
    {
        "input": "This case study primarily focuses on developing a health equity management application aimed at addressing healthcare disparities across different classes of patients. The application targets various users, including patients, caretakers, healthcare providers, medical professionals, and government officials. A critical feature of the system is classifying patients based on social determinants such as economic status, health insurance, medical allowances, age, disability type, and hereditary conditions. The goal is to ensure that every patient receives appropriate medical intervention and equitable treatment. Patients can input health data, which is corroborated with public health records and data from healthcare providers. The system also notifies patients of relevant medical events, health schemes, and provides personal health-tracking functionalities. Additionally, healthcare providers can plan and schedule health worker activities based on patient needs. The data is analyzed by the government to implement intervention schemes and eliminate health discrepancies. The application ensures seamless collaboration between patients, healthcare providers, and government authorities to extend healthcare services without disparities. Design a use case diagram for this case study.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Caretaker\nactor Healthcare_Provider\nactor Medical_Professional\nactor Government_Official\n\nrectangle Health_Equity_Management_System {\n    usecase \"Register and Upload Social and Medical Data\" as UC1\n    usecase \"Classify Patients Based on Social Determinants\" as UC2\n    usecase \"Track Personal Health\" as UC3\n    usecase \"Plan Health Worker Activity\" as UC4\n    usecase \"Notify Relevant Medical Events\" as UC5\n    usecase \"Access and Analyze Health Data\" as UC6\n    usecase \"Implement Intervention Schemes\" as UC7\n}\n\nPatient --> UC1\nPatient --> UC3\nPatient --> UC5\n\nCaretaker --> UC3\n\nHealthcare_Provider --> UC4\nHealthcare_Provider --> UC6\n\nMedical_Professional --> UC6\n\nGovernment_Official --> UC6\nGovernment_Official --> UC7\n\nUC1 --> UC2 : <<include>>\n@enduml"
    },
    {
        "input": "e-Med is a comprehensive personal medical assistant designed to help individuals manage their healthcare routines. It assists users in maintaining their medicine intake schedules by sending reminders for timely consumption and notifies users when they need to restock their medications. In addition to this, e-Med facilitates the scheduling of regular appointments with family doctors, either monthly or yearly, to ensure consistent medical follow-up. One of the standout features of the tool is the emergency button, which can immediately contact individuals listed in the user's emergency contact list during critical situations. The tool also enables users to keep a record of their medical history, such as blood sugar levels and blood pressure, through the Medical Notes feature. This makes e-Med an essential tool for individuals of all ages, particularly those managing ongoing health conditions, helping them maintain a healthy lifestyle with ease and reliability. Design a use case diagram for the e-Med system.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Doctor <<secondary>>\nactor Emergency_Contact <<secondary>>\n\nrectangle e-Med_System {\n    usecase \"Set Medicine Intake Schedule\" as UC1\n    usecase \"Receive Medicine Restock Notifications\" as UC2\n    usecase \"Schedule Appointments\" as UC3\n    usecase \"Press Emergency Button\" as UC4\n    usecase \"Contact Emergency Contacts\" as UC5\n    usecase \"Record Medical History\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC6\n\nEmergency_Contact --> UC5\nDoctor --> UC3\n@enduml"
    },
    {
        "input": "Health is wealth. Health plays a major role in everyone’s life. People consume unhealthy food and ruin their diet. Some medication results in side effects. This application benefits people with rich nutrients to improve their health. The application provides recommendations of nutrients they need. Users can provide their daily diet cycle and get good recommendations to improve it. They can also provide their medical reports to get nutrients according to their medical state. The user also gets the privilege to enter the disease name and get the nutrient benefit for fighting that disease. Users can ping professional nutritionists for more clarification. Users are authenticated and recommendation is provided by a trained machine learning model. Design a use case diagram for this application.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Nutritionist <<secondary>>\n\nrectangle Health_Application {\n    usecase \"Provide Daily Diet Cycle\" as UC1\n    usecase \"Get Nutrient Recommendations\" as UC2\n    usecase \"Upload Medical Reports\" as UC3\n    usecase \"Receive Medical-based Nutrient Suggestions\" as UC4\n    usecase \"Enter Disease Information\" as UC5\n    usecase \"Get Disease-based Nutrient Benefits\" as UC6\n    usecase \"Contact Nutritionist\" as UC7\n    usecase \"Authenticate User\" as UC8\n    usecase \"Receive ML-based Nutrient Recommendations\" as UC9\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\n\nNutritionist --> UC7\n@enduml"
    },
    {
        "input": "The Health Tracker application is designed to help users monitor their health and fitness goals. Users can input their daily food intake, exercise routines, and water consumption to track their progress. The app provides personalized recommendations based on the user's health data and goals. Users can set reminders for meals, workouts, and hydration to stay on track. The app also offers a social feature where users can connect with friends and share their achievements. The Health Tracker aims to promote a healthy lifestyle and provide users with the tools they need to reach their fitness goals. Design a use case diagram for the Health Tracker application.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Friend <<secondary>>\n\nrectangle Health_Tracker_Application {\n    usecase \"Input Daily Food Intake\" as UC1\n    usecase \"Track Exercise Routines\" as UC2\n    usecase \"Monitor Water Consumption\" as UC3\n    usecase \"Receive Personalized Recommendations\" as UC4\n    usecase \"Set Reminders\" as UC5\n    usecase \"Connect with Friends\" as UC6\n    usecase \"Share Achievements\" as UC7\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nFriend --> UC6\n@enduml"
    },
    {
        "input": "The FitnessPal application is designed to help users achieve their fitness goals by providing personalized workout plans and nutrition recommendations. Users can input their fitness preferences, dietary restrictions, and health goals to receive tailored suggestions. The app tracks users' progress, sets reminders for workouts and meals, and offers a variety of exercise routines and recipes. Users can connect with fitness trainers and nutritionists for additional guidance and support. The FitnessPal app aims to empower users to lead a healthy and active lifestyle. Design a use case diagram for the FitnessPal application.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Fitness_Trainer <<secondary>>\nactor Nutritionist <<secondary>>\n\nrectangle FitnessPal_Application {\n    usecase \"Input Fitness Preferences\" as UC1\n    usecase \"Provide Dietary Restrictions\" as UC2\n    usecase \"Set Health Goals\" as UC3\n    usecase \"Receive Personalized Suggestions\" as UC4\n    usecase \"Track Progress\" as UC5\n    usecase \"Set Reminders\" as UC6\n    usecase \"Access Exercise Routines\" as UC7\n    usecase \"Explore Recipes\" as UC8\n    usecase \"Connect with Fitness Trainers\" as UC9\n    usecase \"Consult Nutritionists\" as UC10\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\n\nFitness_Trainer --> UC9\nNutritionist --> UC10\n@enduml"
    },
    {
        "input": "The first phase of a person’s life is confined mainly by education and training. Hence, counselling is an important aspect for the students of the current technological generation as an individual counsellor may remain in contact with all individual students as well as parents. Student Counselling Management System will simplify the process and reduce the manual paperwork. It is used to smoothen the work of each counsellor who is facing problems currently, and making complete atomization of manual process to computerized system. The main objective of the Student Counselling Management System is to design a system to rationalize the admission to particular courses in a university/institution. Through this system, the student will be able to register for counselling if he is eligible. If the student is qualifying the criteria then he will get the information regarding the colleges and the universities in which he can apply. The main features are online admission, report generation based on student’s merit list and keeping track of counselling procedures and finally publishing results. A student can also get the information regarding how many seats have been booked and vacant seats available in the institution. Design a use case diagram for the Student Counselling Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Counsellor\n\nrectangle Student_Counselling_Management_System {\n    usecase \"Register for Counselling\" as UC1\n    usecase \"Check Eligibility Criteria\" as UC2\n    usecase \"View College Information\" as UC3\n    usecase \"Track Counselling Procedures\" as UC4\n    usecase \"Generate Reports\" as UC5\n    usecase \"Monitor Seat Availability\" as UC6\n    usecase \"Publish Results\" as UC7\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC6\nStudent --> UC7\n\nCounsellor --> UC4\nCounsellor --> UC5\n@enduml"
    },
    {
        "input": "A visa is a document issued by a country giving a certain individual permission to enter a country for a given period of time for certain purposes. It is received after several verifications through offline mode. It requires the applicant to go to the Passport Verification Centre for the verification of documents. Sometimes even the cost of getting the visa will be high as there may be middlemen involved in it. It takes anywhere from two weeks to two months to receive the visa if applied in offline mode. With the use of an online visa processing system, the middlemen entry in getting the visa gets reduced and the process of application of visa becomes easier. The overall aim of the system is that the applicant can apply for the visa from anywhere and at any time. The applicant can apply for the visa and submit it online. It provides more flexibility to the applicant compared to the existing system. There are certain types of visas that the applicant can apply for such as employment visa, study visa, resident visa, H1 visa, business visa, etc. People who apply for the visa for work, education, etc will be benefitted a lot from this system. The applicant should register by providing a valid email and a password. The applicant has to log in to apply for the visa. The credentials are checked for correctness and the applicant is allowed to log in. Once the applicant logs in, he/she will be shown the application form which asks the applicant to provide the necessary details and asks him/her to attach the necessary documents. It also provides a list of visas to choose from. He/she can also view the details of fair to visa for each country. The applicant can view, modify and delete the details applied. The system will have a provision for the administrator to view the details of what types of visas are required by the applicant. The administrator will also be able to update and delete the details of the applicants. The administrator will have a facility to interact with the Visa Consultant Officer. The Visa Consultant Officer can be able to view and check the document proofs (valid passport, Demand Draft Visa Fee I-20 form, letter of admission, aid letter, etc.) submitted by the applicant and can be able to view the purpose of application of visa. He/She has the authority to accept/reject the visa application applied by the applicant. Design a use case diagram for the Online Visa Processing System.",
        "output": "@startuml\nleft to right direction\n\nactor Applicant\nactor Administrator\nactor Visa_Consultant_Officer\n\nrectangle Online_Visa_Processing_System {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Apply for Visa\" as UC3\n    usecase \"Submit Documents\" as UC4\n    usecase \"Select Visa Type\" as UC5\n    usecase \"View/Modify Application\" as UC6\n    usecase \"Delete Application\" as UC7\n    usecase \"Check Visa Status\" as UC8\n    usecase \"Update Applicant Details\" as UC9\n    usecase \"Interact with Visa Consultant Officer\" as UC10\n    usecase \"Approve/Reject Application\" as UC11\n    usecase \"View Visa Details\" as UC12\n    usecase \"View Document Proofs\" as UC13\n}\n\nApplicant --> UC1\nApplicant --> UC2\nApplicant --> UC3\nApplicant --> UC4\nApplicant --> UC5\nApplicant --> UC6\nApplicant --> UC7\nApplicant --> UC8\n\nAdministrator --> UC9\nAdministrator --> UC10\nAdministrator --> UC11\n\nVisa_Consultant_Officer --> UC10\nVisa_Consultant_Officer --> UC12\nVisa_Consultant_Officer --> UC13\n@enduml"
    },
    {
        "input": "Placement provides the opportunity for the students to gain specific subject skills as well as real work employability skills. Placement Offices play a crucial role in providing students the necessary training and various opportunities where the students can effectively evidence their various skills and abilities on their resume. Hence, the Automation of Placement office provides a more smooth placement process for both the companies and the students. This system mainly focuses on flows between the company’s activity, Registration, Resumes, Users, Skills, and Their Training. Hence, the system comprises five modules, namely, User module, Company module, Admin module, Registration module, and Training module. Design a use case diagram for the Automation of Placement Office.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Company\nactor Admin\n\nrectangle Placement_Automation_System {\n    usecase \"Register as Student\" as UC1\n    usecase \"Register as Company\" as UC2\n    usecase \"Upload Resume\" as UC3\n    usecase \"View Available Skills Training\" as UC4\n    usecase \"Enroll in Training\" as UC5\n    usecase \"Post Job Opportunity\" as UC6\n    usecase \"Manage Placement Drives\" as UC7\n    usecase \"View Registered Companies\" as UC8\n    usecase \"Track Placement Status\" as UC9\n    usecase \"Manage Student Training Records\" as UC10\n}\n\nStudent --> UC1\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\nStudent --> UC9\n\nCompany --> UC2\nCompany --> UC6\nCompany --> UC8\n\nAdmin --> UC7\nAdmin --> UC10\n@enduml"
    },
    {
        "input": "In India, 1 out of 4 farmers own a smartphone. But they don’t use it optimally for insights on farming based on real-time data – such as weather, soil conditions, market conditions, labour availability etcetera, which can allow them to make data-driven decisions to get the best possible results. Current technologies that solve such issues are either paid services or inaccurate. They also tend to be more complex making it really hard for anyone to understand and interpret. An application if developed should primarily aim at reducing the risks, reducing the costs, improving yield, and most importantly, easy for anyone to interpret. Design a use case diagram for the Farming Insights Application.",
        "output": "@startuml\nleft to right direction\n\nactor Farmer\nactor Data_Provider <<secondary>>\nactor Market_Agent <<secondary>>\n\nrectangle Farming_Insights_Application {\n    usecase \"Get Real-Time Weather Insights\" as UC1\n    usecase \"Receive Soil Condition Alerts\" as UC2\n    usecase \"Track Market Trends\" as UC3\n    usecase \"Access Labour Availability Info\" as UC4\n    usecase \"Get Farming Recommendations\" as UC5\n    usecase \"Make Data-Driven Decisions\" as UC6\n}\n\nFarmer --> UC1\nFarmer --> UC2\nFarmer --> UC3\nFarmer --> UC4\nFarmer --> UC5\n\nUC5 --> UC6 : <<include>>\nData_Provider --> UC1\nData_Provider --> UC2\n\nMarket_Agent --> UC3\n@enduml"
    },
    {
        "input": "This system is useful in the road transport and highways field (Ministry of Road Transport and Highways). Green rides is a technical solution for the general public to guide them to a less polluted path while travelling, to know about the traffic jam, identification of accident-prone spots, meals-on-wheel, the establishment of drive-mode applications. This app consists of a Google map view on the main screen. A user can select the source to destination path which then will be processed to give a number of routes to reach the destination from source with amount of traffic at various locations in that path along with current pollution status in that route (which updates overtime). If there exists a traffic jam, a user can blow a horn to all users within a specific radius. According to his current location in the form of a small notification which the persons in the specified radius will receive. The accidents that occurred at specific spots will be reported by the user to the concerned authority who will do the rescue operations and hence the accident-prone areas will be categorized based on the number of accidents taking place and a notification appears for the user to drive slow and safe when they are in that particular location. The road authority admin checks the system often. Meals-on-wheel provides information about hotels and restaurants which are available in the chosen route so that the user can place the order as per the available menu at a particular eating place including time of service so that one need not wait at the restaurant for placing the order. Drive-mode helps to minimize the risks of accidents while attending mobile phones during driving. This module would send an SMS to the caller that the particular person is driving when the geo-coordinates show the mobile shifting of the driver is beyond some specified speed limit (say, 20 kmph). Before start of the journey, this module can be turned on. The feedback feature allows the user to give feedbacks about the accuracy in the traffic and pollution levels in a given area. Design a use case diagram for the Green Rides Application.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor \"Road Authority Admin\" as Admin\nactor \"Hotel/Restaurant\" as Restaurant\n\nrectangle Green_Rides_App {\n    usecase \"Select Route\" as UC1\n    usecase \"View Traffic and Pollution Levels\" as UC2\n    usecase \"Receive Notifications for Traffic Jams\" as UC3\n    usecase \"Report Accident Spots\" as UC4\n    usecase \"Use Meals-on-Wheel Service\" as UC5\n    usecase \"Activate Drive Mode\" as UC6\n    usecase \"Provide Feedback\" as UC7\n    usecase \"Track Accident-Prone Areas\" as UC8\n    usecase \"Monitor Road Conditions\" as UC9\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nAdmin --> UC9\nAdmin --> UC8\n\nRestaurant --> UC5\n@enduml"
    },
    {
        "input": "To provide an online platform to manage the buying, selling and storage of artistic creations provided by creators/other platforms or auctions and to organize events to exhibit these products. The system is a gallery having art pieces with its description, price and other information and the order activity, payment activity, order update activity and so on. The objective is to provide an online platform through which museums and art galleries can make use of to exhibit their collections in times of unavailable street galleries. Like in times of pandemic also people need not bother not going to a museum or art gallery instead they can have online art shopping and art exhibits. The system should be immune to any chances of misuse and unauthorized reproduction of works of arts and designs. There will be two types of users accessing the system: Admin (Creators/authority of the art displayed) and Customer (One who looks to buy the art). The main features provided for the admin are that they will be able to update, add, delete, input price, description and information about an art (stock availability), generate report of gallery and that for the customers are that they will be able to order (Payment), delete order, view end-user projected art particulars. Design a use case diagram for the Art Gallery Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Admin\n\nrectangle Art_Gallery_Management_System {\n    usecase \"Browse Art\" as UC1\n    usecase \"View Art Details\" as UC2\n    usecase \"Place Order\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Cancel Order\" as UC5\n    usecase \"Manage Art\" as UC6\n    usecase \"Update Art Details\" as UC7\n    usecase \"Generate Gallery Report\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\n\nAdmin --> UC6\nAdmin --> UC7\nAdmin --> UC8\n@enduml"
    },
    {
        "input": "The students in our college have a lot of unnecessary goods lying around, whereas many other people might be benefitted from those things. So I would like to put forward a website that can be used to sell or trade the goods with someone who needs them. It proves to be extremely useful in cases like buying and trading second-hand books or study materials among students and faculties. Initially, the website can exclusively only be accessed by the students within the PSG Tech College campus. Later on, if expected demands are met, it shall be expanded to other colleges. The sellers are given special accounts in which they are rated based on their previous records with which the buyers can choose their seller. Design a use case diagram for the College Trade Platform.",
        "output": "@startuml\nleft to right direction\n\nactor Student\n\nrectangle College_Trade_Platform {\n    usecase \"Register\" as UC1\n    usecase \"Post Items for Sale/Trade\" as UC2\n    usecase \"Search for Goods\" as UC3\n    usecase \"Rate Sellers\" as UC4\n    usecase \"Buy/Trade Items\" as UC5\n    usecase \"Access Seller Ratings\" as UC6\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC5\nStudent --> UC4\nStudent --> UC6\n@enduml"
    },
    {
        "input": "Online learning is a part of many institution’s course offerings around the world. The scope of online quiz systems increased in this pandemic situation. The objective of the system is to maintain and improve the education rate by conducting quizzes (exams). The system acts as a bridge between student and teacher to gain knowledge and monitor it by the institution (admin). This system provides teachers to know about the students in remote education. The delightful features of the system are online teachers, remote tests, auto evaluation and feedback from students. Admin is responsible for the registration of both teachers and students. Teachers define the number of questions, time of the quiz, schedule for the quiz and they can edit it. At the end of a quiz, students can see the correct answers and their performance. Design a use case diagram for the Online Quiz System.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Teacher\nactor Admin\n\nrectangle Online_Quiz_System {\n    usecase \"Register Students and Teachers\" as UC1\n    usecase \"Create Quiz\" as UC2\n    usecase \"Schedule Quiz\" as UC3\n    usecase \"Edit Quiz\" as UC4\n    usecase \"Take Quiz\" as UC5\n    usecase \"Auto Evaluation\" as UC6\n    usecase \"View Correct Answers\" as UC7\n    usecase \"Provide Feedback\" as UC8\n}\n\nAdmin --> UC1\n\nTeacher --> UC2\nTeacher --> UC3\nTeacher --> UC4\nTeacher --> UC6\n\nStudent --> UC5\nStudent --> UC7\nStudent --> UC8\n\nUC5 --> UC6 : <<include>>\n@enduml"
    },
    {
        "input": "The book bank management is a software in which a member can register themselves and then he can borrow books from the book bank or the members can buy the books from the book bank. A Book Bank lends books and magazines to members, who are registered in the system. It mainly concentrates on providing the book for authorized members only. A member can reserve a book or magazine that is not currently available in the book bank, so that when it is returned or purchased by the book bank, that person is notified. The book bank can easily create, replace and delete information about the titles, members and reservations from the system. The main issue of the system is that only registered members can lend the book from the book bank. In the case of lending, we should maintain the database for the status and issue of the book and also we have to calculate the fine amount with respect to the due date. We should maintain the book according to the department, genres, and year of study. Another main issue of the system is that if the user takes the book and misplaces it on another shelf, then we have the chip of bar scanner to scan the books and indicate to the admin that the book has been replaced. All the above issues will be satisfied by developing the software as a user-friendly system. The main functionality of the system is that User Authentication, Book storing, Book retrieval, Book for buying, Stock Updating, Due fine, E-books, Payment, Book maintenance, Sales report, User records and Sorting. The software is developed to satisfy the needs according to the members. The software will be very useful in the area of institutions, libraries and for general citizens. The software is developed to act as a useful interface for the users to easily access books. Design a use case diagram for the Book Bank Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Member\nactor Admin\n\nrectangle Book_Bank_Management_System {\n    usecase \"User Authentication\" as UC1\n    usecase \"Borrow Books\" as UC2\n    usecase \"Buy Books\" as UC3\n    usecase \"Reserve Books\" as UC4\n    usecase \"Return Books\" as UC5\n    usecase \"Update Stock\" as UC6\n    usecase \"Calculate Due Fine\" as UC7\n    usecase \"Track Misplaced Books\" as UC8\n    usecase \"Manage Book Titles\" as UC9\n    usecase \"Generate Sales Reports\" as UC10\n    usecase \"Manage User Records\" as UC11\n    usecase \"Handle Payments\" as UC12\n}\n\nMember --> UC1\nMember --> UC2\nMember --> UC3\nMember --> UC4\nMember --> UC5\nMember --> UC7\n\nAdmin --> UC6\nAdmin --> UC7\nAdmin --> UC8\nAdmin --> UC9\nAdmin --> UC10\nAdmin --> UC11\nAdmin --> UC12\n\nUC2 --> UC7 : <<extend>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for Mega Associates website. Mega Associates is an evolving architectural firm that is facing fierce competition. The competitors have a modern, well-built website that is pulling some of the firm’s clients towards themselves. In order to avoid a situation like this and to retain all the firm’s clients and attract new ones, a refreshing website is needed. The website of the firm should include the major projects of the firm, a brief on all the available departments and collaborations, recent news with respect to the firm, the firm’s insights, the history of the firm, mail or chat feature, and career opportunities with regard to the firm.",
        "output": "@startuml\nleft to right direction\n\nactor Client\nactor Job_Seeker\nactor Administrator\n\nrectangle Mega_Associates_Website {\n    usecase \"View Major Projects\" as UC1\n    usecase \"Explore Departments & Collaborations\" as UC2\n    usecase \"Read Recent News\" as UC3\n    usecase \"Explore Firm Insights\" as UC4\n    usecase \"Learn Firm History\" as UC5\n    usecase \"Contact via Mail or Chat\" as UC6\n    usecase \"View Career Opportunities\" as UC7\n    usecase \"Manage Website Content\" as UC8\n}\n\nClient --> UC1\nClient --> UC2\nClient --> UC3\nClient --> UC4\nClient --> UC5\nClient --> UC6\n\nJob_Seeker --> UC7\n\nAdministrator --> UC8\n@enduml"
    },
    {
        "input": "The policies and guidelines for startups vary from state to state. Also, startups related to a particular domain are emphasized in particular areas. The people with startup ideas at different levels of implementation have to approach different firms or individuals for investment who are in their nearest business circles, if not in the same state. All of these factors will adversely impact the opportunities for startups. Startup Meet is a platform for people to privately approach firms or angel investors with their ideas implemented at different levels for funding and mentorship. Additionally, government policies and loan schemes of different states can be known and applied through the platform. If investors or mentors are interested in the idea, a virtual presentation can be given. Profiles for investors and entrepreneurs will showcase what each party is looking for. Entrepreneurs can request investors or mentors from different states for submitting their ideas. Once accepted, an abstract can be sent. If the investors like it, they can call for a presentation. The mentors also provide guidance. The government loans and policies can be viewed and applied for through the portal. Startup Meet is a comprehensive platform for people involved in startups. Design a use case diagram for the Startup Meet System.",
        "output": "@startuml\nleft to right direction\n\nactor Entrepreneur\nactor Investor\nactor Mentor\nactor Government_Agency <<secondary>>\n\nrectangle Startup_Meet_System {\n    usecase \"Create Startup Profile\" as UC1\n    usecase \"Request Funding\" as UC2\n    usecase \"Submit Abstract\" as UC3\n    usecase \"Give Virtual Presentation\" as UC4\n    usecase \"Apply for Government Loans\" as UC5\n    usecase \"View Government Policies\" as UC6\n    usecase \"Provide Mentorship\" as UC7\n    usecase \"Review Startup Ideas\" as UC8\n    usecase \"Accept Investment Proposal\" as UC9\n}\n\nEntrepreneur --> UC1\nEntrepreneur --> UC2\nEntrepreneur --> UC3\nEntrepreneur --> UC4\nEntrepreneur --> UC5\nEntrepreneur --> UC6\n\nInvestor --> UC8\nInvestor --> UC9\nInvestor --> UC4\n\nMentor --> UC7\nMentor --> UC8\n\nGovernment_Agency --> UC5\nGovernment_Agency --> UC6\n@enduml"
    },
    {
        "input": "The Video Suggestion System is used in social networking platforms such as YouTube and Facebook. The ultimate aim of this system is to suggest videos to the users based on factors such as trending topics, user preferences, similar viewing patterns, and search results. The Video Suggestion System helps users by offering relevant content without the need for manual searching. It plays a crucial role in the entertainment sector by enhancing user engagement. The system operates by collecting user activity data, processing it, generating a dataset based on these interactions, and finally suggesting videos when users refresh their page or request recommendations. Design a use case diagram for the Video Suggestion System.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Data_Processor <<secondary>>\n\nrectangle Video_Suggestion_System {\n    usecase \"Collect User Activity\" as UC1\n    usecase \"Process User Data\" as UC2\n    usecase \"Generate Video Dataset\" as UC3\n    usecase \"Suggest Videos\" as UC4\n    usecase \"Refresh and Update Suggestions\" as UC5\n}\n\nUser --> UC4\nUser --> UC5\n\nData_Processor --> UC1\nData_Processor --> UC2\nData_Processor --> UC3\n\nUC1 --> UC2 : <<include>>\nUC2 --> UC3 : <<include>>\nUC3 --> UC4 : <<include>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for a library management system. Following are the functional requirements of the library management system:\n1. Any library member should be able to search books by their title, author, subject category as well by the publication date.\n2. Each book will have a unique identification number and other details including a rack number which will help to physically locate the book.\n3. There could be more than one copy of a book, and library members should be able to check-out and reserve any copy. We will call each copy of a book, a book item.\n4. The library management system should be able to retrieve information like who took a particular book or what are the books checked-out by a specific library member.\n5. There should be a maximum limit (5) on how many books a member can check-out.\n6. There should be a maximum limit (10) on how many days a member can keep a book.\n7. The system should be able to collect fines for books returned after the due date.\n8. Members should be able to reserve books that are not currently available.\n9. The system should be able to send notifications whenever the reserved books become available, as well as when the book is not returned within the due date.\n10. Each book and member card will have a unique barcode.\n11. The system will be able to read barcodes from books and members’ library cards.",
        "output": "@startuml\nleft to right direction\n\nactor Library_Member\nactor Librarian\n\nrectangle Library_Management_System {\n    usecase \"Search Books\" as UC1\n    usecase \"Check-out Book\" as UC2\n    usecase \"Reserve Book\" as UC3\n    usecase \"Retrieve Book Information\" as UC4\n    usecase \"Return Book\" as UC5\n    usecase \"Collect Fines\" as UC6\n    usecase \"Send Notifications\" as UC7\n}\n\nLibrary_Member --> UC1\nLibrary_Member --> UC2\nLibrary_Member --> UC3\nLibrary_Member --> UC5\nLibrary_Member --> UC6\n\nLibrarian --> UC6\nLibrarian --> UC4\n\nUC5 --> UC7 : <<extend>>\nUC3 --> UC7 : <<extend>>\n@enduml"
    },
    {
        "input": "Design a use case diagram based on the following requirements:\n1. During a semester, a lecturer reads one or more lectures.\n2. Sometimes the lecturer is on leave to focus on doing research; in this case, (s)he does not give a lecture.\n3. A student usually attends one or more lectures, unless (s)he has something better to do.\n4. During the semester, there will be several exercises which are meant to be solved by small study groups.\n5. Each student is assigned to one particular study group for the whole semester in the course management system.\n6. A study group consists of two to three students.\n7. After submission of a solution by a study group, it is graded by a tutor.",
        "output": "@startuml\nleft to right direction\n\nactor Lecturer\nactor Student\nactor Tutor\n\nrectangle Course_Management_System {\n    usecase \"Give Lecture\" as UC1\n    usecase \"Attend Lecture\" as UC2\n    usecase \"Assign Study Group\" as UC3\n    usecase \"Submit Solution\" as UC4\n    usecase \"Grade Solution\" as UC5\n}\n\nLecturer --> UC1\nLecturer --> UC3 : <<include>>\nStudent --> UC2\nStudent --> UC4\nStudent --> UC3\nTutor --> UC5\nUC4 --> UC5 : <<include>>\n@enduml"
    },
    {
        "input": "The content management system shall allow an administrator to create a new blog account, provided the personal details of the new blogger are verified using the author credentials database. The content management system shall allow an administrator to create a new personal Wiki, provided the personal details of the applying author are verified using the Author Credentials service. Design a use case diagram for the content management system.",
        "output": "@startuml\nleft to right direction\n\nactor Administrator\nactor \"Verification Service\" as VerificationService <<secondary>>\n\nrectangle Content_Management_System {\n    usecase \"Create New Blog Account\" as UC1\n    usecase \"Create New Wiki\" as UC2\n    usecase \"Verify Author Details\" as UC3\n}\n\nAdministrator --> UC1\nAdministrator --> UC2\nUC1 --> UC3 : <<include>>\nUC2 --> UC3 : <<include>>\n\nVerificationService --> UC3\n@enduml"
    },
    {
        "input": "Design a use case diagram for the eDoc system. The eDoc Health Record Management System must support the creation and management of patient profiles, allowing comprehensive organization of personal information. The eDoc Health Record Management System must enable comprehensive medical history input and organization for each patient. The eDoc Health Record Management System must provide advanced appointment scheduling, including reminders for both patients and healthcare providers. The eDoc Health Record Management System must ensure secure data storage that complies with healthcare regulations, including HIPAA. The eDoc Health Record Management System must integrate telemedicine practices, allowing remote consultations and interactions with patients. The eDoc Health Record Management System must allow patient access via secure portals, ensuring privacy and data protection. The eDoc Health Record Management System must offer data analysis, collaboration, and reporting functionalities for healthcare teams to improve decision-making and patient care. The eDoc Health Record Management System must support import/export capabilities for easy data accessibility and transfer between systems. The eDoc Health Record Management System must perform regular backups and include data recovery options to ensure data integrity and availability. The eDoc Health Record Management System must manage patient medication records, including medication reminders for patients. The eDoc Health Record Management System must store and manage records for lab results, imaging, and diagnostic reports to support healthcare providers in making informed decisions.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Healthcare_Provider\nactor System_Admin\n\nrectangle eDoc_Health_Record_Management_System {\n    usecase \"Manage Patient Profile\" as UC1\n    usecase \"Input Medical History\" as UC2\n    usecase \"Schedule Appointments\" as UC3\n    usecase \"Send Appointment Reminders\" as UC4\n    usecase \"Perform Telemedicine Consultations\" as UC5\n    usecase \"Access Secure Patient Portals\" as UC6\n    usecase \"Analyze Data and Generate Reports\" as UC7\n    usecase \"Import/Export Health Data\" as UC8\n    usecase \"Perform Data Backup and Recovery\" as UC9\n    usecase \"Manage Medication Records\" as UC10\n    usecase \"Store and Manage Diagnostic Records\" as UC11\n}\n\nPatient --> UC1\nPatient --> UC2\nPatient --> UC3\nPatient --> UC6\nPatient --> UC10\n\nHealthcare_Provider --> UC2\nHealthcare_Provider --> UC3\nHealthcare_Provider --> UC5\nHealthcare_Provider --> UC7\nHealthcare_Provider --> UC10\nHealthcare_Provider --> UC11\n\nSystem_Admin --> UC8\nSystem_Admin --> UC9\n\nUC3 --> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "The HealthCare Management System has these functions: The Creation and Management of Patient Profiles. Comprehensive Medical History Input and Organization. Advanced Appointment Scheduling with Reminders. Secure Data Storage Compliant with Healthcare Regulations. Integration of Telemedicine Practices. Patient Access via Secure Portals. Data Analysis, Collaboration, and Reporting for Healthcare Teams. Import/Export Capabilities for Data Accessibility. Regular Backups and Data Recovery Options. Medication Management with Reminders. Record Storage for Lab Results, Imaging, and Diagnostic Reports. Design a use case diagram for the HealthCare Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Healthcare_Provider\nactor System_Admin\n\nrectangle HealthCare_Management_System {\n    usecase \"Manage Patient Profiles\" as UC1\n    usecase \"Input Medical History\" as UC2\n    usecase \"Schedule Appointments\" as UC3\n    usecase \"Send Appointment Reminders\" as UC4\n    usecase \"Perform Telemedicine Consultations\" as UC5\n    usecase \"Access Patient Portal\" as UC6\n    usecase \"Analyze Data and Generate Reports\" as UC7\n    usecase \"Import/Export Health Data\" as UC8\n    usecase \"Perform Data Backup and Recovery\" as UC9\n    usecase \"Manage Medication Records\" as UC10\n    usecase \"Store Diagnostic Reports\" as UC11\n}\n\nPatient --> UC1\nPatient --> UC2\nPatient --> UC3\nPatient --> UC6\nPatient --> UC10\n\nHealthcare_Provider --> UC2\nHealthcare_Provider --> UC3\nHealthcare_Provider --> UC5\nHealthcare_Provider --> UC7\nHealthcare_Provider --> UC10\nHealthcare_Provider --> UC11\n\nSystem_Admin --> UC8\nSystem_Admin --> UC9\n\nUC3 --> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Parcel Delivery Management System shall allow:\n- Advanced parcel tracking.\n- Efficient management of returns.\n- Real-time parcel inventory control.\n- Seamless customer support interactions.\n- Secure and user-friendly payment processing.\nDesign a use case diagram for the Parcel Delivery Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Admin\n\nrectangle Parcel_Delivery_Management_System {\n    usecase \"Track Parcels\" as UC1\n    usecase \"Manage Returns\" as UC2\n    usecase \"Monitor Inventory\" as UC3\n    usecase \"Access Customer Support\" as UC4\n    usecase \"Process Payments\" as UC5\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC4\nCustomer --> UC5\n\nAdmin --> UC3\n@enduml"
    },
    {
        "input": "The Crime Information System includes the following key product functions:\n• User Management\n• Receive Crime Related Notifications\n• Update FIR\n• Create FIR\n• Access Police Station Information\n• Access Crime Database\n• Community Safety Forums\n• Manage Criminal Records\n• Search Criminal Records.\nDesign a use case diagram for the Crime Information System.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Police_Officer\nactor Admin\n\nrectangle Crime_Information_System {\n    usecase \"User Management\" as UC1\n    usecase \"Receive Crime Notifications\" as UC2\n    usecase \"Update FIR\" as UC3\n    usecase \"Create FIR\" as UC4\n    usecase \"Access Police Station Info\" as UC5\n    usecase \"Access Crime Database\" as UC6\n    usecase \"Join Community Safety Forums\" as UC7\n    usecase \"Manage Criminal Records\" as UC8\n    usecase \"Search Criminal Records\" as UC9\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC7\n\nPolice_Officer --> UC3\nPolice_Officer --> UC4\nPolice_Officer --> UC6\nPolice_Officer --> UC9\n\nAdmin --> UC1\nAdmin --> UC5\nAdmin --> UC8\n@enduml"
    },
    {
        "input": "The Timetable Management System has the following functional requirements:\nUser Registration and Login: The system must allow users to register and log in securely.\nEnroll Student: The system must enable administrators to enroll students and manage their information.\nAllocate Courses to Students: The system must allow administrators to assign courses to students.\nAllocate Courses to Faculty: The system must provide functionality to assign courses to faculty members.\nAdd Faculty Time Preference: The system must allow faculty members to input their preferred time slots for lectures.\nGenerate Timetable: The system must generate timetables based on student courses, faculty preferences, and available resources.\nAllocate Lecture Halls: The system must allocate available lecture halls based on the generated timetable.\nGenerate Course Report: The system must generate reports detailing course allocations and schedules.\nStudent Course Report: The system must provide students with reports showing their enrolled courses and schedules.\nFaculty Course Report: The system must provide faculty with reports detailing their course assignments and schedules.\nDesign a use case diagram for the Timetable Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Admin\nactor Faculty\n\nrectangle Timetable_Management_System {\n    usecase \"Register and Login\" as UC1\n    usecase \"Enroll Student\" as UC2\n    usecase \"Allocate Courses to Students\" as UC3\n    usecase \"Allocate Courses to Faculty\" as UC4\n    usecase \"Add Faculty Time Preferences\" as UC5\n    usecase \"Generate Timetable\" as UC6\n    usecase \"Allocate Lecture Halls\" as UC7\n    usecase \"Generate Course Report\" as UC8\n    usecase \"Generate Student Course Report\" as UC9\n    usecase \"Generate Faculty Course Report\" as UC10\n}\n\nStudent --> UC1\nStudent --> UC9\n\nAdmin --> UC1\nAdmin --> UC2\nAdmin --> UC3\nAdmin --> UC4\nAdmin --> UC6\nAdmin --> UC7\nAdmin --> UC8\n\nFaculty --> UC1\nFaculty --> UC5\nFaculty --> UC10\n\nUC6 --> UC7 : <<extend>>\n@enduml"
    },
    {
        "input": "Cricket Stadium Management System:\n1. The system allows fans to access comprehensive information about upcoming events in the stadium, including match schedules, team line-ups, and other relevant details.\n2. Fans can explore different pricing plans for tickets, view seat availability, and securely purchase tickets for their desired events through the system.\n3. The system provides a platform for sponsors to explore available sponsorship options within the stadium, enabling them to contribute to the operations and engage with the cricket community.\n4. Sponsors can track the return on investment (ROI) for their sponsorships through the system, allowing them to evaluate the effectiveness and impact of their contributions.\n Draw a use case diagram for the Cricket Stadium Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Fan\nactor Sponsor\n\nrectangle Cricket_Stadium_Management_System {\n    usecase \"View Event Information\" as UC1\n    usecase \"Explore Pricing Plans\" as UC2\n    usecase \"Check Seat Availability\" as UC3\n    usecase \"Purchase Tickets\" as UC4\n    usecase \"Explore Sponsorship Options\" as UC5\n    usecase \"Track Sponsorship ROI\" as UC6\n}\n\nFan --> UC1\nFan --> UC2\nFan --> UC3\nFan --> UC4\n\nSponsor --> UC5\nSponsor --> UC6\n@enduml"
    },
    {
        "input": "The Tech E-Commerce system allows customers to browse the catalog of tech goods and repair services offered by Tempest Electronics. Customers can add items to a shopping cart and proceed with the checkout process to purchase products or services. Additionally, customers can review their past orders and cancel any ongoing repair orders if needed. The system provides functionality for managing account details, such as updating personal information and billing details. Customers also have the ability to provide feedback on purchased goods and services. Lastly, the system includes a helpline feature, allowing customers to contact support for inquiries and assistance.\n Design a use case diagram for the Tech E-Commerce System.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Support <<secondary>>\n\nrectangle Tech_E_Commerce_System {\n    usecase \"Browse Catalog\" as UC1\n    usecase \"Add Items to Cart\" as UC2\n    usecase \"Checkout\" as UC3\n    usecase \"Review Past Orders\" as UC4\n    usecase \"Cancel Repair Order\" as UC5\n    usecase \"Manage Account Details\" as UC6\n    usecase \"Provide Feedback\" as UC7\n    usecase \"Contact Helpline\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\nCustomer --> UC8\n\nSupport --> UC8\n@enduml"
    },
    {
        "input": "Give use case diagram for Clinic Management System:\n\n1. The system must allow for patient registration and management of patient information, including personal details, medical history, and contact information.\n\n2. The system must support appointment scheduling, allowing patients to book appointments, and must send reminders to both patients and staff.\n\n3. The system must facilitate billing and invoicing, generating accurate bills based on services provided and tracking payment statuses.\n\n4. The system must enable staff collaboration and communication, allowing healthcare professionals to share information and communicate seamlessly within the system.\n\n5. The system must generate reports and analytics based on patient data, appointments, and billing information, providing insights for operational improvement.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Staff\n\nrectangle Clinic_Management_System {\n    usecase \"Register Patient\" as UC1\n    usecase \"Manage Patient Information\" as UC2\n    usecase \"Schedule Appointment\" as UC3\n    usecase \"Send Appointment Reminders\" as UC4\n    usecase \"Generate Bills\" as UC5\n    usecase \"Track Payment Status\" as UC6\n    usecase \"Staff Collaboration\" as UC7\n    usecase \"Generate Reports and Analytics\" as UC8\n}\n\nPatient --> UC1\nPatient --> UC3\nPatient --> UC6\n\nStaff --> UC2\nStaff --> UC7\nStaff --> UC5\nStaff --> UC8\n\nUC3 --> UC4 : <<include>>\n@enduml"
    },
    {
        "input": "Law Keeper - Law Firm Management System:\nThe system allows lawyers to create, update, and manage case files, ensuring easy access to case-related documents and information. Users can create and assign tasks related to cases, ensuring all relevant deadlines and responsibilities are tracked and completed. LawKeeper provides a repository for research documents and legal references, allowing users to search and manage these materials to assist with case preparation.\nThe system facilitates seamless communication between lawyers and clients, offering a centralized platform to provide updates, share documents, and answer queries. LawKeeper also helps users monitor and manage critical case deadlines by providing alerts and reminders to ensure tasks are completed on time.\nAdditionally, the system tracks billable hours for each client and enables both clients and lawyers to review billing details, ensuring transparency in transactions and payments.\nClients can also file new cases and share relevant case documents through the platform.",
        "output": "@startuml\nleft to right direction\n\nactor Lawyer\nactor Client\n\nrectangle LawKeeper_Management_System {\n    usecase \"Manage Case Files\" as UC1\n    usecase \"Create and Assign Tasks\" as UC2\n    usecase \"Access Legal References\" as UC3\n    usecase \"Send Case Updates\" as UC4\n    usecase \"Monitor Case Deadlines\" as UC5\n    usecase \"Track Billable Hours\" as UC6\n    usecase \"Review Billing Details\" as UC7\n    usecase \"Receive Updates\" as UC8\n    usecase \"Review Payments\" as UC9\n    usecase \"File a Case\" as UC10\n    usecase \"Share Documents\" as UC11\n}\n\nLawyer --> UC1\nLawyer --> UC2\nLawyer --> UC3\nLawyer --> UC4\nLawyer --> UC5\nLawyer --> UC6\nLawyer --> UC7\n\nClient --> UC8\nClient --> UC9\nClient --> UC10\nClient --> UC11\n@enduml"
    },
    {
        "input": "Design a use case diagram for the Online Shopping System. The system must allow customers to browse products, add items to their shopping cart, and proceed with the checkout process. Customers should be able to create an account, manage their profile, and view order history. The system must support secure payment processing and provide order tracking functionality. Additionally, the system should allow administrators to manage product listings, view sales reports, and process customer inquiries.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Admin\nactor \"Payment Gateway\" as Payment_Gateway <<secondary>>\n\nrectangle Online_Shopping_System {\n    usecase \"Browse Products\" as UC1\n    usecase \"Add to Cart\" as UC2\n    usecase \"Checkout\" as UC3\n    usecase \"Create Account\" as UC4\n    usecase \"Manage Profile\" as UC5\n    usecase \"View Order History\" as UC6\n    usecase \"Secure Payment Processing\" as UC7\n    usecase \"Order Tracking\" as UC8\n    usecase \"Manage Product Listings\" as UC9\n    usecase \"View Sales Reports\" as UC10\n    usecase \"Process Customer Inquiries\" as UC11\n    usecase \"Process Payment\" as UC12\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\nCustomer --> UC8\n\nAdmin --> UC9\nAdmin --> UC10\nAdmin --> UC11\n\nUC12 --> Payment_Gateway\n@enduml"
    },
    {
        "input": "Design a use case diagram for an automatic teller machine (ATM) with the following requirements:\n1. The ATM system must check the validity of the inserted ATM card.\n2. The ATM system must validate the PIN number entered by the customer.\n3. The ATM system must ensure that no more than $250 is dispensed against any ATM card within a 24-hour period.\n4. The ATM system must be written in C++.\n5. The ATM system must communicate with the bank using 256-bit encryption.\n6. The ATM system must validate an ATM card in three seconds or less.\n7. The ATM system must validate a PIN in three seconds or less.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Bank_System <<secondary>>\n\nrectangle ATM_System {\n    usecase \"Insert ATM Card\" as UC1\n    usecase \"Enter PIN\" as UC2\n    usecase \"Withdraw Cash\" as UC3\n    usecase \"Check Account Balance\" as UC4\n    usecase \"Transfer Funds\" as UC5\n    usecase \"Check Card Validity\" as UC6\n    usecase \"Validate PIN\" as UC7\n    usecase \"Dispense Cash\" as UC8\n    usecase \"Check Daily Limit\" as UC9\n    usecase \"Handle Bank Communication\" as UC10\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\n\nUC1 --> UC6 : <<include>>\nUC2 --> UC7 : <<include>>\nUC3 --> UC9 : <<include>>\nUC3 --> UC8 : <<include>>\nUC5 --> UC10 : <<include>>\n\nBank_System --> UC10\n@enduml"
    },
    {
        "input": "Design a use case diagram for a hotel management system with the following requirements:\n1. The system must allow guests to check-in and check-out of the hotel.\n2. The system must provide room booking functionality, allowing guests to reserve rooms for their stay.\n3. The system must support room service requests, enabling guests to order food and other services to their rooms.\n4. The system must generate invoices for guests, detailing their stay and any additional charges.\n5. The system must allow hotel staff to manage room availability, view guest information, and process payments.",
        "output": "@startuml\nleft to right direction\n\nactor Guest\nactor Staff\n\nrectangle Hotel_Management_System {\n    usecase \"Check-in\" as UC1\n    usecase \"Check-out\" as UC2\n    usecase \"Book Room\" as UC3\n    usecase \"Order Room Service\" as UC4\n    usecase \"Generate Invoice\" as UC5\n    usecase \"Manage Room Availability\" as UC6\n    usecase \"View Guest Information\" as UC7\n    usecase \"Process Payments\" as UC8\n}\n\nGuest --> UC1\nGuest --> UC2\nGuest --> UC3\nGuest --> UC4\nGuest --> UC5\n\nStaff --> UC6\nStaff --> UC7\nStaff --> UC8\n@enduml"
    },
    {
        "input": "Design a use case diagram for the Altered State University (ASU) Registration System with the following requirements:\n1. Professors indicate which courses they will teach online.\n2. A course catalog can be printed.\n3. Allow students to select online four courses for the upcoming semester.\n4. No course may have more than 10 students or less than 3 students.\n5. When the registration is completed, the system sends information to the billing system.\n6. Professors can obtain course rosters online.\n7. Students can add or drop classes online.",
        "output": "@startuml\nleft to right direction\n\nactor Professor\nactor Student\nactor Billing_System <<secondary>>\n\nrectangle ASU_Registration_System {\n    usecase \"Indicate Courses to Teach\" as UC1\n    usecase \"Print Course Catalog\" as UC2\n    usecase \"Select Courses for Semester\" as UC3\n    usecase \"Add or Drop Classes\" as UC4\n    usecase \"Send Information to Billing System\" as UC5\n    usecase \"Obtain Course Rosters\" as UC6\n}\n\nProfessor --> UC1\nProfessor --> UC6\nProfessor --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC2\nUC3 --> UC5 : <<include>>\nUC4 --> UC5 : <<include>>\n\nBilling_System --> UC5\n@enduml"
    },
    {
        "input": "Design a use case diagram for the Cafe Management System with the following requirements:\n1. The system must allow staff to log in with existing credentials or create a new account for access.\n2. The system must provide a centralized dashboard where staff can view key metrics, notifications, and navigate to other functionalities.\n3. The system must enable staff to add, update, and delete items in the inventory, track stock levels, set reorder points, and automate restocking processes.\n4. The system must facilitate the creation, modification, and deletion of menu items, allowing customization of menu categories and pricing. Menu images should also be available.\n5. The system must streamline the order placement process for customers, providing order confirmation and status updates to both customers and staff.\n6. The system must maintain a database of customer profiles, capturing and storing customer preferences and order history.\n7. The system must generate comprehensive graphs (such as Area Chart and Bar Chart) on sales and customer trends. Jasper reports must be used to produce receipts for customers.",
        "output": "@startuml\nleft to right direction\n\nactor Staff\nactor Customer\n\nrectangle Cafe_Management_System {\n    usecase \"Log in or Create Account\" as UC1\n    usecase \"Access Centralized Dashboard\" as UC2\n    usecase \"Manage Inventory\" as UC3\n    usecase \"Manage Menu Items\" as UC4\n    usecase \"Place Orders\" as UC5\n    usecase \"Give Order Status Updates\" as UC6\n    usecase \"Manage Customer Profiles\" as UC7\n    usecase \"Generate Sales Graphs\" as UC8\n    usecase \"Generate Receipts\" as UC9\n}\n\nStaff --> UC1\nStaff --> UC2\nStaff --> UC3\nStaff --> UC4\nStaff --> UC7\nStaff --> UC8\nStaff --> UC9\n\nCustomer --> UC1\nCustomer --> UC5\nUC5 --> UC6 : <<include>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for a Business Process Outsourcing (BPO) Management System with the following requirements:\n1. The system must provide a personalized profile for each user, ensuring security for individual accounts.\n2. The system must allow users to personalize their account and change their password as needed.\n3. The system must enable clients to post project requests with specific requirements for Business Process Outsourcing (BPO) organizations to choose from.\n4. The system must allow BPO organizations to search for and respond to project requests posted by clients.\n5. The system must facilitate the transfer of documents required by the BPO organization, allowing the receiver to download them.\n6. The system must provide clients with constant updates on the progress of their project or work.\n7. The system must enable clients to check the quality of their product or service and request any necessary modifications.\n8. The system must allow BPO organizations to upload the final product or service for further procedures such as payment or shipment.\n9. The system must facilitate payments from clients to BPO organizations at the end of their agreement.\n10. The system must ensure that the product or service is delivered to the client after completion.\n11. The system must allow clients to rate the services provided by the BPO organization.",
        "output": "@startuml\nleft to right direction\n\nactor Client\nactor BPO_Organization\nactor Payment_Gateway <<secondary>>\n\nrectangle BPO_Management_System {\n    usecase \"Create and Manage Profile\" as UC1\n    usecase \"Post Project Request\" as UC2\n    usecase \"Search and Respond to Projects\" as UC3\n    usecase \"Transfer and Download Documents\" as UC4\n    usecase \"Receive Project Updates\" as UC5\n    usecase \"Check Product Quality and Request Modifications\" as UC6\n    usecase \"Upload Final Product\" as UC7\n    usecase \"Process Payment\" as UC8\n    usecase \"Deliver Product\" as UC9\n    usecase \"Rate Services\" as UC10\n}\n\nClient --> UC1\nClient --> UC2\nClient --> UC5\nClient --> UC6\nClient --> UC10\n\nBPO_Organization --> UC1\nBPO_Organization --> UC3\nBPO_Organization --> UC4\nBPO_Organization --> UC7\nBPO_Organization --> UC9\n\nPayment_Gateway --> UC8\n\nUC7 --> UC8 : <<include>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for the information system of the student office of a university. The system should support the following activities:\n• Many important administrative activities of a university are processed by the student office. Students can register for studies (matriculation), enroll, and withdraw from studies here. Matriculation involves enrolling, that is, registering for studies.\n• Students receive their certificates from the student office. The certificates are printed out by an employee. Lecturers send grading information to the student office. The notification system then informs the students automatically that a certificate has been issued.\n• There is a differentiation between two types of employees in the student office: a) those that are exclusively occupied with the administration of student data (service employee, or ServEmp), and b) those that fulfill the remaining tasks (administration employee, or AdminEmp), whereas all employees (ServEmp and AdminEmp) can issue information.\n• Administration employees issue certificates when the students come to collect them. Administration employees also create courses. When creating courses, they can reserve lecture halls.",    
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Lecturer\nactor ServEmp <<secondary>>\nactor AdminEmp\n\nrectangle Student_Office_Information_System {\n    usecase \"Register for Studies (Matriculation)\" as UC1\n    usecase \"Enroll in Studies\" as UC2\n    usecase \"Withdraw from Studies\" as UC3\n    usecase \"Send Grading Information\" as UC4\n    usecase \"Print and Issue Certificates\" as UC5\n    usecase \"Create Courses\" as UC6\n    usecase \"Reserve Lecture Halls\" as UC7\n    usecase \"Send Certificate Notifications\" as UC8\n    usecase \"Provide Information\" as UC9\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\n\nLecturer --> UC4\n\nServEmp --> UC9\n\nAdminEmp --> UC5\nAdminEmp --> UC6\nAdminEmp --> UC7\nAdminEmp --> UC9\n\nUC4 --> UC5 : <<include>>\nUC5 --> UC8 : <<include>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for the Information System of a University. The system should support the following activities:\n• A university consists of multiple faculties which are composed of various institutes. Each faculty and each institute has a name. An address is known for each institute.\n• Each faculty is led by a dean, who is an employee of the university.\n• The total number of employees is known. Employees have a social security number, a name, and an e-mail address. There is a distinction between research and administrative personnel.\n• Research associates are assigned to at least one institute. The field of study of each research associate is known. Furthermore, research associates can be involved in projects for a certain number of hours, and the name, starting date, and end date of the projects are known. Some research associates teach courses. They are called lecturers.\n• Courses have a unique number (ID), a name, and a weekly duration in hours.",      
        "output": "@startuml\nleft to right direction\n\nactor Dean\nactor Research_Associate\nactor Admin_Personnel\nactor Lecturer\nactor University_Admin\n\nLecturer <|-- Research_Associate\n\nrectangle University_Information_System {\n    usecase \"Manage Faculty Details\" as UC1\n    usecase \"Manage Institute Details\" as UC2\n    usecase \"Record Faculty and Institute Addresses\" as UC3\n    usecase \"Manage Employee Information\" as UC4\n    usecase \"Assign Research Associates to Institutes\" as UC5\n    usecase \"Track Research Projects\" as UC6\n    usecase \"Track Course Details\" as UC7\n}\n\nDean --> UC1\nDean --> UC2\nDean --> UC3\n\nResearch_Associate --> UC5\nResearch_Associate --> UC6\n\nAdmin_Personnel --> UC4\nUniversity_Admin --> UC4\nUniversity_Admin --> UC6\nUniversity_Admin --> UC7\n\nLecturer --> UC7\n\nUC5 --> UC6 : <<include>>\n@enduml"
    },
    {
        "input": "The purpose of the Legal Eagle Case Management System is to provide a comprehensive and efficient platform for legal professionals, case managers, and clients to manage legal cases seamlessly. The system aims to streamline various aspects of case management, including case creation, status tracking, updates, client communication, reports and analytics generation, legal research, and document management. By offering these functionalities, the system enhances collaboration, communication, and decision-making within legal organizations, contributing to improved case outcomes. Design a use case diagram for the Legal Eagle Case Management System.",    
        "output": "@startuml\nleft to right direction\n\nactor Legal_Professional\nactor Client\nactor Legal_Researcher\nactor Voice_Assistant <<secondary>>\n\nrectangle Legal_Eagle_Case_Management_System {\n    usecase \"Create Case\" as UC1\n    usecase \"Track Case Status\" as UC2\n    usecase \"Update Case Status\" as UC3\n    usecase \"File a Case\" as UC4\n    usecase \"Receive Case Updates\" as UC5\n    usecase \"Generate Reports and Analytics\" as UC6\n    usecase \"Perform Legal Research\" as UC7\n    usecase \"Manage Documents\" as UC8\n    usecase \"Activate Using Voice\" as UC9\n}\n\nLegal_Professional --> UC1\nLegal_Professional --> UC2\nLegal_Professional --> UC3\nLegal_Professional --> UC6\nLegal_Professional --> UC7\nLegal_Professional --> UC8\n\nClient --> UC4\nClient --> UC5\n\nLegal_Researcher --> UC7\n\nVoice_Assistant --> UC9\n\nUC1 --> UC9 : <<extend>>\nUC3 --> UC9 : <<extend>>\nUC4 --> UC9 : <<extend>>\nUC5 --> UC9 : <<extend>>\n@enduml"
    },
    {
        "input": "TimeCraft is designed to revolutionize the parcel delivery experience, targeting major delivery companies such as FedEx and DHL. By leveraging technology, it aims to simplify parcel handling for senders, receivers, and delivery companies. The primary objectives of TimeCraft include improving parcel tracking accuracy, reducing rough handling issues, and empowering customers and delivery companies with more control and real-time information. Give use case diagram for the TimeCraft Parcel Management System.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Delivery_Company\n\nUser <|-- Sender\nUser <|-- Receiver\n\nrectangle TimeCraft_Parcel_Management_System {\n    usecase \"Track Parcels\" as UC1\n    usecase \"Report Rough Handling Issues\" as UC2\n    usecase \"Update Parcel Status\" as UC3\n    usecase \"Receive Real-Time Updates\" as UC4\n    usecase \"Schedule Parcel Pickup\" as UC5\n    usecase \"Manage Parcel Routes\" as UC6\n    usecase \"Control Delivery Options\" as UC7\n}\n\nSender --> UC5\nSender --> UC2\nSender --> UC1\n\nReceiver --> UC4\nReceiver --> UC1\n\nDelivery_Company --> UC6\nDelivery_Company --> UC7\nDelivery_Company --> UC3\n\n@enduml"
    },
    {
        "input": "The Employee Management System (EMS) is an innovative platform designed to streamline the management of employee information. EMS offers features like real-time tracking of attendance, salary management, and automated reporting tools to empower HR teams with seamless data management and decision-making. Design a use case diagram for the Employee Management System.",
        "output": "@startuml\nleft to right direction\n\nactor HR_Team\nactor Employee\n\nrectangle Employee_Management_System {\n    usecase \"Manage Employee Information\" as UC1\n    usecase \"Track Attendance\" as UC2\n    usecase \"Manage Salaries\" as UC3\n    usecase \"Generate Reports\" as UC4\n    usecase \"View Attendance Record\" as UC5\n}\n\nHR_Team --> UC1\nHR_Team --> UC2\nHR_Team --> UC3\nHR_Team --> UC4\n\nEmployee --> UC5\nEmployee --> UC1\n@enduml"
    },
    {
        "input": "RoboCop Crime Information System aims to enhance public safety and facilitate law enforcement by providing a centralized platform for accessing and managing crime-related information. The system offers up-to-date crime statistics, user management, crime-related notifications, FIR (First Information Report) handling, access to nearest police station information, a comprehensive crime database, community safety forums, and tools for law enforcement to manage and search criminal records. Design a use case diagram for the RoboCop Crime Information System.",
        "output": "@startuml\nleft to right direction\n\nactor Law_Enforcement_Agent\nactor Citizen\n\nrectangle RoboCop_Crime_Information_System {\n    usecase \"Manage User Accounts\" as UC1\n    usecase \"Receive Crime Notifications\" as UC2\n    usecase \"Handle FIR\" as UC3\n    usecase \"Access Police Station Info\" as UC4\n    usecase \"View Crime Statistics\" as UC5\n    usecase \"Access Crime Database\" as UC6\n    usecase \"Manage Criminal Records\" as UC7\n    usecase \"Search Criminal Records\" as UC8\n    usecase \"Participate in Safety Forums\" as UC9\n}\n\nCitizen --> UC2\nCitizen --> UC3\nCitizen --> UC4\nCitizen --> UC9\n\nLaw_Enforcement_Agent --> UC1\nLaw_Enforcement_Agent --> UC2\nLaw_Enforcement_Agent --> UC3\nLaw_Enforcement_Agent --> UC4\nLaw_Enforcement_Agent --> UC5\nLaw_Enforcement_Agent --> UC6\nLaw_Enforcement_Agent --> UC7\nLaw_Enforcement_Agent --> UC8\n\nUC3 --> UC2 : <<include>>\n@enduml"
    },
    {
        "input": "The Anywhere Grocery Store Management System is an automated solution designed to streamline key operations in grocery stores, addressing challenges like inventory control, sales processing, and customer service inefficiencies. The system integrates inventory management, point of sale operations, supplier management, customer relationship management, and online shopping with delivery into a cohesive platform. By automating these processes, it improves accuracy, speeds up transactions, and enhances decision-making, ultimately boosting operational efficiency and customer satisfaction. Design a use case diagram for the Anywhere Grocery Store Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Supplier <<secondary>>\nactor Store_Manager\n\nrectangle Anywhere_Grocery_Store_Management_System {\n    usecase \"Manage Inventory\" as UC1\n    usecase \"Process Sales\" as UC2\n    usecase \"Manage Suppliers\" as UC3\n    usecase \"Handle Customer Service Requests\" as UC4\n    usecase \"Online Shopping\" as UC5\n    usecase \"Track Orders\" as UC6\n    usecase \"View Sales Reports\" as UC7\n    usecase \"Provide Stock\" as UC8\n    usecase \"Deliver Orders\" as UC9\n}\n\nCustomer --> UC5\nCustomer --> UC6\n\nStore_Manager --> UC1\nStore_Manager --> UC2\nStore_Manager --> UC3\nStore_Manager --> UC4\nStore_Manager --> UC7\nStore_Manager --> UC9\n\nSupplier --> UC8\n@enduml"
    },
    {
        "input": "The Gym Management System is a centralized software solution designed to streamline gym operations by integrating member management, class scheduling, attendance tracking, payments, and inventory management. It allows gym administrators to manage member registrations, class schedules, and payments, while enabling trainers to access class assignments and track attendance. The system also facilitates communication between members and staff, supports automated payment processing, and ensures real-time updates on inventory. Biometric or card-based attendance tracking and seamless communication tools enhance overall operational efficiency. Design a use case diagram for the Gym Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Member\nactor Trainer\nactor Gym_Admin\nactor Payment_Gateway <<secondary>>\n\nrectangle Gym_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"View Class Schedule\" as UC2\n    usecase \"Track Attendance\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Manage Inventory\" as UC5\n    usecase \"Communicate with Staff\" as UC6\n    usecase \"Assign Classes\" as UC7\n    usecase \"Process Payment\" as UC8\n    usecase \"Track Real-time Inventory\" as UC9\n}\n\nMember --> UC1\nMember --> UC2\nMember --> UC4\nMember --> UC6\n\nTrainer --> UC7\nTrainer --> UC3\n\nGym_Admin --> UC2\nGym_Admin --> UC5\nGym_Admin --> UC9\nGym_Admin --> UC8\n\nPayment_Gateway --> UC8\n@enduml"
    },
    {
        "input": "The Time Table Generating Management System is a comprehensive software solution designed to automate the creation and management of timetables in educational institutions. By utilizing intelligent algorithms, the system optimizes resource allocation, minimizes scheduling conflicts, and enhances productivity. The System allows administrators to enroll students, allocate courses to both students and faculty, and generate optimized timetables. Faculty members can input time preferences, while students can view their course schedules. The system also automatically allocates lecture halls and generates reports for both students and faculty, detailing their assigned courses and schedules. Design a use case diagram for the Time Table Generating Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Admin\nactor Faculty\nactor Student\n\nrectangle Time_Table_Generating_Management_System {\n    usecase \"Enroll Students\" as UC1\n    usecase \"Allocate Courses to Students\" as UC2\n    usecase \"Allocate Courses to Faculty\" as UC3\n    usecase \"Generate Timetable\" as UC4\n    usecase \"Allocate Lecture Halls\" as UC5\n    usecase \"Generate Reports\" as UC6\n    usecase \"Input Time Preferences\" as UC7\n    usecase \"View Course Schedule\" as UC8\n}\n\nAdmin --> UC1\nAdmin --> UC2\nAdmin --> UC3\nAdmin --> UC4\nAdmin --> UC5\nAdmin --> UC6\n\nFaculty --> UC7\nFaculty --> UC6\n\nStudent --> UC8\n@enduml"
    },
    {
        "input": "Cricket stadium management system provides a user-friendly platform for fans to buy tickets, access event information, and stay updated on all the happenings within the stadium. Additionally, the system facilitates seamless sponsorship opportunities for businesses to contribute to the stadium's operations and engage with the cricket community. Draw a use case diagram for the Cricket Stadium Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Fan\nactor Sponsor\n\nrectangle Cricket_Stadium_Management_System {\n    usecase \"Buy Tickets\" as UC1\n    usecase \"Access Event Information\" as UC2\n    usecase \"Receive Event Updates\" as UC3\n    usecase \"Explore Sponsorship Opportunities\" as UC4\n    usecase \"Engage with Cricket Community\" as UC5\n}\n\nFan --> UC1\nFan --> UC2\nFan --> UC3\n\nSponsor --> UC4\nSponsor --> UC5\n@enduml"
    },
    {
        "input": "The e-commerce system allows customers to log in and purchase tech goods and tech-related services at an affordable price. The system allows for managing orders, providing feedback, a customer helpline, and a wide catalog of products for meeting customer tech needs. The system also provides support for customers through a dedicated support team. Design a use case diagram for the e-commerce system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Support <<secondary>>\n\nrectangle E_Commerce_System {\n    usecase \"Log In\" as UC1\n    usecase \"Purchase Tech Goods\" as UC2\n    usecase \"Purchase Tech Services\" as UC3\n    usecase \"Track Orders\" as UC4\n    usecase \"Provide Feedback\" as UC5\n    usecase \"Access Customer Helpline\" as UC6\n    usecase \"Browse Product Catalog\" as UC7\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC6\n@enduml"
    },
    {
        "input": "Clinisync automates core clinic operations by providing a platform for managing patient information, scheduling appointments, handling billing, and supporting administrative tasks. The system enables efficient collaboration between staff members and allows for streamlined processes such as patient registration, appointment management, invoicing, and reporting. By facilitating these interactions, Clinisync improves clinic workflows and ensures that both administrative and clinical tasks are efficiently managed. Design a use case diagram for the Clinisync System.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Staff\n\nrectangle Clinisync_System {\n    usecase \"Register\" as UC1\n    usecase \"Manage Patient Information\" as UC2\n    usecase \"Schedule Appointment\" as UC3\n    usecase \"Handle Billing\" as UC4\n    usecase \"Generate Reports\" as UC5\n    usecase \"Manage Invoicing\" as UC6\n}\n\nPatient --> UC1\nPatient --> UC3\n\nStaff --> UC2\nStaff --> UC3\nStaff --> UC4\nStaff --> UC5\nStaff --> UC6\n@enduml"
    },
    {
        "input": "LawKeeper is a comprehensive law firm management information system designed to streamline and automate key operational tasks for law firms. The application allows lawyers to easily access and manage clientele files, track billable hours, organize case files, and manage appointments. The system is also designed to enhance client satisfaction by providing timely updates on case progress, access to essential documents, and visibility into billable hours and lawyer expertise. Additionally, clients can conduct transactions and track their cases through the platform, improving overall communication and transparency. Design a use case diagram for the LawKeeper System.",
        "output": "@startuml\nleft to right direction\n\nactor Lawyer\nactor Client\nactor Payment_Gateway <<secondary>>\n\nrectangle LawKeeper_System {\n    usecase \"Access and Manage Client Files\" as UC1\n    usecase \"Track Billable Hours\" as UC2\n    usecase \"Organize Case Files\" as UC3\n    usecase \"Manage Appointments\" as UC4\n    usecase \"Track Case Progress\" as UC5\n    usecase \"Receive Case Progress Updates\" as UC6\n    usecase \"Access Essential Documents\" as UC7\n    usecase \"View Billable Hours\" as UC8\n    usecase \"Conduct Transactions\" as UC9\n    usecase \"Process Payment\" as UC10\n}\n\nLawyer --> UC1\nLawyer --> UC2\nLawyer --> UC3\nLawyer --> UC4\n\nClient --> UC5\nClient --> UC7\nClient --> UC8\nClient --> UC9\n\nUC5 --> UC6 : <<include>>\nUC9 --> UC10 : <<include>>\n\nPayment_Gateway --> UC10\n@enduml"
    },
    {
        "input": "Real Estate Management System (REMS) is designed to simplify and automate property management, focusing on improving operational efficiency, transaction automation, and client engagement. It provides a centralized platform to streamline property listings, tracking, and financial management for various types of real estate properties. By minimizing manual processes and enhancing key interactions between property managers and clients, the system ensures seamless handling of sales, rentals, and leasing, while also offering robust financial tools for better decision-making. Additionally, REMS includes compliance reporting, data analytics for market insights, and is scalable to meet the needs of both small and large firms. Design a use case diagram for the Real Estate Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Property_Manager\nactor Client\nactor Financial_System <<secondary>>\n\nrectangle Real_Estate_Management_System {\n    usecase \"Manage Property Listings\" as UC1\n    usecase \"Track Property\" as UC2\n    usecase \"Handle Sales\" as UC3\n    usecase \"Handle Rentals\" as UC4\n    usecase \"Handle Leasing\" as UC5\n    usecase \"Generate Compliance Reports\" as UC6\n    usecase \"Analyze Market Data\" as UC7\n    usecase \"Make Transactions\" as UC8\n    usecase \"View Property\" as UC9\n}\n\nProperty_Manager --> UC1\nProperty_Manager --> UC2\nProperty_Manager --> UC3\nProperty_Manager --> UC4\nProperty_Manager --> UC5\nProperty_Manager --> UC6\nProperty_Manager --> UC7\n\nClient --> UC8\nClient --> UC9\n\nUC3 --> UC8 : <<include>>\nUC4 --> UC8 : <<include>>\nUC5 --> UC8 : <<include>>\n\nFinancial_System --> UC8\n@enduml"
    },
    {
        "input": "Design a use case diagram for a Real Estate Management System (REMS) that simplifies property management. The system allows property managers to handle property listings, track properties, and manage sales, rentals, and leasing. It includes compliance report generation and market data analysis for making informed decisions. Clients can view property details and perform transactions, while the system integrates with an external financial system for seamless payment processing.",
        "output": "@startuml\nleft to right direction\n\nactor Property_Manager\nactor Client\nactor Financial_System <<secondary>>\n\nrectangle Real_Estate_Management_System {\n    usecase \"Manage Property Listings\" as UC1\n    usecase \"Track Property\" as UC2\n    usecase \"Handle Sales\" as UC3\n    usecase \"Handle Rentals\" as UC4\n    usecase \"Handle Leasing\" as UC5\n    usecase \"Generate Compliance Reports\" as UC6\n    usecase \"Analyze Market Data\" as UC7\n    usecase \"Make Transactions\" as UC8\n    usecase \"View Property\" as UC9\n}\n\nProperty_Manager --> UC1\nProperty_Manager --> UC2\nProperty_Manager --> UC3\nProperty_Manager --> UC4\nProperty_Manager --> UC5\nProperty_Manager --> UC6\nProperty_Manager --> UC7\n\nClient --> UC8\nClient --> UC9\n\nUC3 --> UC8 : <<include>>\nUC4 --> UC8 : <<include>>\nUC5 --> UC8 : <<include>>\n\nFinancial_System --> UC8\n@enduml"
    },
    {
        "input": "An all-inclusive event management tool called EventEase is made to make every part of planning and executing an event easier. EventEase makes it simple for organizers to establish, modify, and oversee events by allowing them to enter vital information like names, descriptions, dates, venues, and different kinds and prices of tickets. Easy registration, safe online ticket purchases, and prompt updates via email or the EventEase mobile app are all advantages for attendees. The platform delivers strong statistics for evaluating the success of an event based on ticket sales, attendance demographics, and revenue. It also combines reliable payment processing technologies to ensure seamless transactions. Additionally, EventEase maintains the highest standards of security to protect customer data and privacy while ensuring effective communication through newsletters, social network integrations, and real-time notifications. For thorough monitoring, administrators can access a single dashboard that allows for effective management of speakers, venues, attendees, and financial details. EventEase offers an all-in-one solution for effective event planning and management, with a focus on accessibility, scalability, and user-friendliness. Give a use case diagram for EventEase.",
        "output": "@startuml\nleft to right direction\n\nactor Organizer\nactor Attendee\nactor Sponsor\nactor Payment_System <<secondary>>\n\nrectangle EventEase_Management_System {\n    usecase \"Register for Event\" as UC3\n    usecase \"Purchase Tickets\" as UC5\n    usecase \"Access Event Dashboard\" as UC8\n    usecase \"Receive Event Updates\" as UC6\n    usecase \"View Event Performance Metrics\" as UC7\n    usecase \"Manage Event Logistics\" as UC9\n    usecase \"Monitor Event Progress\" as UC10\n    usecase \"Promote Sponsor Branding\" as UC11\n    usecase \"Process Payment\" as UC12\n}\n\nOrganizer --> UC9\nOrganizer --> UC10\nOrganizer --> UC8\nOrganizer --> UC11\nOrganizer --> UC7\nOrganizer --> UC8\nAttendee --> UC3\nAttendee --> UC5\nAttendee --> UC6\nAttendee --> UC8\n\nSponsor --> UC11\n\nUC5 --> UC12 : <<include>>\n\nPayment_System --> UC12\n@enduml"
    },
    {
        "input": "Design a use case diagram for EventEase, an event management platform that helps organizers manage and plan events. The system supports functions like attendee registration, ticket purchases, event updates, and monitoring performance metrics. Administrators can manage event logistics and oversee event details through a centralized dashboard, while customers can buy tickets and receive updates about the events. Payment systems are integrated to handle transactions securely.",
        "output": "@startuml\nleft to right direction\n\nactor Organizer\nactor Attendee\nactor Sponsor\nactor Payment_System <<secondary>>\n\nrectangle EventEase_Management_System {\n    usecase \"Register for Event\" as UC3\n    usecase \"Purchase Tickets\" as UC5\n    usecase \"Access Event Dashboard\" as UC8\n    usecase \"Receive Event Updates\" as UC6\n    usecase \"View Event Performance Metrics\" as UC7\n    usecase \"Manage Event Logistics\" as UC9\n    usecase \"Monitor Event Progress\" as UC10\n    usecase \"Promote Sponsor Branding\" as UC11\n    usecase \"Process Payment\" as UC12\n}\n\nOrganizer --> UC9\nOrganizer --> UC10\nOrganizer --> UC8\nOrganizer --> UC11\nOrganizer --> UC7\n\nAttendee --> UC3\nAttendee --> UC5\nAttendee --> UC6\nAttendee --> UC8\n\nSponsor --> UC11\n\nUC5 --> UC12 : <<include>>\n\nPayment_System --> UC12\n@enduml"
    },
    {
        "input": "The Online Learning Management System (OLMS) is a comprehensive platform designed to facilitate online education and training. OLMS offers features like course creation, student enrollment, assessments, and progress tracking. It also provides tools for communication, collaboration, and content delivery. The system aims to enhance the learning experience for students and streamline the teaching process for instructors. Design a use case diagram for the Online Learning Management System.",
        "output": "@startuml\nleft to right direction\n\nactor Instructor\nactor Student\n\nrectangle Online_Learning_Management_System {\n    usecase \"Create Course\" as UC1\n    usecase \"Enroll Students\" as UC2\n    usecase \"Assess Students\" as UC3\n    usecase \"Track Progress\" as UC4\n    usecase \"Communicate through Chat\" as UC5\n    usecase \"Deliver Content\" as UC6\n    usecase \"Take Assessment\" as UC7\n}\n\nInstructor --> UC1\nInstructor --> UC2\nInstructor --> UC3\nInstructor --> UC4\nInstructor --> UC5\nInstructor --> UC6\nStudent --> UC5\nStudent --> UC7\n@enduml"
    },
    {
        "input": "Design a use case diagram for a crypto exchange system involving currency exchange, trading, viewing market trends, and updating market trends using external market data from sources like Binance and Kraken.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor \"External Market API (Binance, Kraken)\" as ExternalMarketAPI <<secondary>>\n\nrectangle Crypto_Exchange_System {\n    usecase \"Exchange Cryptocurrencies\" as UC1\n    usecase \"Perform Trading\" as UC2\n    usecase \"View Market Trends\" as UC3\n    usecase \"Update Market Trends\" as UC4\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\n\nUC3 --> UC4 : <<include>>\nExternalMarketAPI --> UC4\n@enduml"
    },
    {
        "input": "Design a usecase diagram for it. Functional requirements for Webmed Healthcare System:\n\n1. The system must allow patients and caregivers to register on the platform.\n2. The system must provide a secure login feature for accessing healthcare services.\n3. The system must offer a feature for users to explore different healthcare facilities and services.\n4. The system must include a finance module focused on purchasing insurance.\n5. The system must display comprehensive information about diseases and their symptoms under a Health A-Z feature.\n6. The system must include resources such as a symptom checker, health calculator, and a function to find a doctor based on location.\n7. The system must provide an online medicine delivery option under the drugs and supplements section.\n8. The system must offer a payment module for reimbursing providers for services delivered.\n9. The system must collect user feedback for quality improvement purposes.\n10. The system must offer a logout functionality for users to securely exit the platform.\n11. The system must include a bulletin for news, health awareness, and information on experts and counselling programs.\n12. The system must provide access to health insurance guides and ambulance services under the resources section.",
        "output": "@startuml\nleft to right direction\n\nactor ServiceProvider\nactor User\n\nrectangle System {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Use Facilities\" as UC3\n    usecase \"Access Finance\" as UC4\n    usecase \"Access Health A-Z\" as UC5\n    usecase \"Use Resources\" as UC6\n    usecase \"Do Payment\" as UC7\n    usecase \"Give Feedback\" as UC8\n    usecase \"Logout\" as UC9\n    usecase \"Access News And Experts\" as UC10\n    usecase \"Get Drugs And Supplements\" as UC11\n}\n\nServiceProvider --> UC6\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC9\nUser --> UC7\nUser --> UC6\nUser --> UC10\nUser --> UC11\nUser --> UC5\nUser --> UC4\n\nUC7 --> UC8 : <<extend>>\n@enduml"
    },
    {
        "input": "Design a usecase diagram for this system. Functional requirements for the Online Examination System:\n\n1. The system must allow students to register and create accounts.\n2. The system must enable teachers to create exams and set questions.\n3. The system must allow students to take exams online.\n4. The system must generate results for the exams taken by students.\n5. The system must provide exam analysis, including performance review and insights.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Teacher\n\nrectangle Online_Examination_System {\n    usecase \"Register\" as UC1\n    usecase \"Create Exam\" as UC2\n    usecase \"Take Exam\" as UC3\n    usecase \"Generate Result\" as UC4\n    usecase \"Analyze Exam\" as UC5\n}\n\nStudent --> UC1\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\n\nTeacher --> UC2\n\nUC3 --> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Design a usecase diagram for this system. Functional requirements for the Online Voting System:\n\n1. The system must allow citizens to register as voters.\n2. The system must enable candidates to register for elections.\n3. The system must allow registered voters to cast their votes online.\n4. The system must generate results for the elections based on the votes cast.\n5. The system must provide analysis of the votes, including voter turnout and demographics.",
        "output": "@startuml\nleft to right direction\n\nactor Citizen\nactor Candidate\n\nrectangle Online_Voting_System {\n    usecase \"Register as Voter\" as UC1\n    usecase \"Register as Candidate\" as UC2\n    usecase \"Cast Vote\" as UC3\n    usecase \"Generate Result\" as UC4\n    usecase \"Analyze Votes\" as UC5\n}\n\nCitizen --> UC1\nCitizen --> UC3\nCitizen --> UC4\nCitizen --> UC5\n\nCandidate --> UC2\n\nUC3 --> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Design a usecase diagram for this system. Functional requirements for the E-Ticketing System for Buses:\n\n1. The system must allow customers to register and create an account for booking tickets.\n2. The system must enable customers to make bus reservations and purchase tickets online.\n3. The system must provide customers with the ability to cancel their reservations if needed.\n4. The system must facilitate secure payments, allowing customers to pay for tickets online through bank transactions.\n5. The system must allow customers to check the status of their reservations and buses online.\n6. The system must allow customers to edit their profiles and manage their accounts.\n7. The system must allow the admin to manage user accounts, including deleting accounts.\n8. The system must enable managers to update and manage routes, bus schedules, vehicle records, and payment information.\n9. The system must generate reports related to bus reservations, payments, and cancellations for management use.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Manager\n\nrectangle Bus_E-Ticketing_System {\n    usecase \"Registration\" as UC1\n    usecase \"Make Reservation\" as UC2\n    usecase \"Cancellation\" as UC3\n    usecase \"Do Payment\" as UC4\n    usecase \"Check Status\" as UC5\n    usecase \"Edit Profile\" as UC6\n    usecase \"Delete Account\" as UC7\n    usecase \"Manage Transactions\" as UC8\n    usecase \"Update Routes\" as UC9\n    usecase \"Update Bus Schedules\" as UC10\n    usecase \"Update Vehicle Records\" as UC11\n    usecase \"Update User Credentials\" as UC12\n    usecase \"Manage Account\" as UC13\n    usecase \"Generate Reports\" as UC14\n}\n\nCustomer --> UC1\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC13\nCustomer --> UC2\n\nManager --> UC8\nManager --> UC9\nManager --> UC10\nManager --> UC11\nManager --> UC14\n\nactor Admin <<secondary>>\n\nAdmin --> UC10\nAdmin --> UC12\nAdmin --> UC7\n\nUC4 --> UC3 : <<extend>>\nUC13 --> UC7 : <<extend>>\nUC13 --> UC6 : <<extend>>\n@enduml"
    },
    {
        "input": "Design a usecase diagram for this system. Functional requirements for the Weather Monitoring System:\n\n1. The system must allow users to check the current weather status, including temperature, humidity, rainfall, pressure, and dew point.\n2. The system must provide live updates of weather data for real-time viewing.\n3. The system must alert users with tips and warnings during certain weather conditions.\n4. The system must display weather data in graphical form to allow easier analysis of temperature variations.\n5. The system must predict the weather for the next few days based on current and past data.\n6. The system must provide a weekly analysis, including average, highest, and lowest temperatures of the week.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Weather_Monitoring_System {\n    usecase \"Check Weather Status\" as UC1\n    usecase \"Live Update\" as UC2\n    usecase \"Get Alerts\" as UC3\n    usecase \"Generate Graphical Representation\" as UC4\n    usecase \"Predict Future Weather\" as UC5\n    usecase \"Weekly Analysis\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\n\nUC1 --> UC2 : <<extend>>\nUC4 --> UC5 : <<extend>>\n@enduml"
    },
    {
        "input": "Give usecase diagram for this system. Functional requirements for the Online Shopping System:\n\n1. The system must allow users to register and create an account.\n2. The system must provide a product catalog displaying available products for purchase.\n3. The system must allow users to add products to their shopping cart.\n4. The system must include a payment gateway for users to make payments for their purchases.\n5. The system must display the user's order history, showing past orders.\n6. The system must offer customer support functionality for users to ask queries or report issues.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Shopping_System {\n    usecase \"Register\" as UC1\n    usecase \"View Products\" as UC2\n    usecase \"Add To Cart\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"View Order History\" as UC5\n    usecase \"Contact Support\" as UC6\n    usecase \"Provide Support\" as UC7\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n\nSupport --> UC7\nUC6 --> UC7 : <<include>>\n@enduml"
    },
    {
        "input": "Give usecase diagram for this system. Functional requirements for the Library Management System:\n\n1. The system must allow users to register and create an account.\n2. The system must provide a book catalog displaying all available books.\n3. The system must allow users to borrow books from the library.\n4. The system must allow users to return borrowed books.\n5. The system must allow users to renew borrowed books.\n6. The system must calculate late fees for books returned after the due date.",
        "output": "@startuml\nleft to right direction\n\nactor Librarian\nactor User\n\nrectangle Library_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"View Books\" as UC2\n    usecase \"Borrow Book\" as UC3\n    usecase \"Return Book\" as UC4\n    usecase \"Renew Book\" as UC5\n    usecase \"Calculate Late Fee\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\n\nLibrarian -right-> UC6\n\nUC5 --> UC6 : <<include>>\n@enduml"
    },
    {
        "input": "Give usecase diagram for this system. Functional requirements for the e-Province system:\n\n1. The system must allow citizens to register for an account.\n2. The system must provide a login module where users can log in using their unique application number with an approved status.\n3. The system must allow users to apply for government certificates like birth/death certificates, income and caste certificates, etc.\n4. The system must provide an admin module that can issue certificates to citizens.\n5. The system must manage user profiles, allowing users to update their personal information.\n6. The system must allow admins to view user profiles.\n7. The system must allow admins to deactivate users.",
        "output": "@startuml\nleft to right direction\n\nactor Citizen\nactor Admin\n\nrectangle E-Province {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Apply for Certificate\" as UC3\n    usecase \"Issue Certificate\" as UC4\n    usecase \"Manage User Profile\" as UC5\n    usecase \"View User Profile\" as UC6\n    usecase \"Deactivate User\" as UC7\n}\n\nCitizen --> UC1\nCitizen --> UC2\nCitizen --> UC3\nCitizen --> UC5\n\nAdmin --> UC4\nAdmin --> UC6\nAdmin --> UC5\n\nUC5 --> UC7 : <<extend>>\n@enduml"
    },
    {
        "input": "Give usecase diagram for this system. Functional requirements for the Online Banking System:\n\n1. The system must allow customers to register by creating an account.\n2. The system must provide account management functionality for users to view and manage their accounts.\n3. The system must enable customers to transfer funds between their accounts.\n4. The system must allow customers to pay bills online.\n5. The system must display a transaction history for users to review past transactions.\n6. The system must offer customer support functionality for users to contact customer support for queries or issues.\n7. Customer support should provide solutions to queries raised by customers through an included support system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Banking_System {\n    usecase \"Register\" as UC1\n    usecase \"Manage Account\" as UC2\n    usecase \"Transfer Funds\" as UC3\n    usecase \"Pay Bills\" as UC4\n    usecase \"View Transaction History\" as UC5\n    usecase \"Contact Support\" as UC6\n    usecase \"Provide Support\" as UC7\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n\nSupport --> UC7\nUC6 --> UC7 : <<include>>\n\nUC3 --> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Functional requirements for the DigiDocLocker:\n\n1. The system must allow citizens to register and log in to the platform.\n2. The system must allow users to upload documents in various file formats.\n3. The system must display the complete user profile based on the information stored in the database.\n4. The system must allow users to request documents from the respective issuers.\n5. The system must display certificate issuers’ names and the number of documents issued by the issuers to the user.\n6. The system must display the requesters’ names and the number of documents requested by them.\n Give me use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Citizen\nactor \"Requester (Eg: UPSC)\" as Requester\nactor \"Issuer (Eg: Income Tax Department)\" as Issuer\n\nrectangle DigiDocLocker {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Request Document\" as UC3\n    usecase \"Upload Document\" as UC4\n    usecase \"View Profile\" as UC5\n    usecase \"Issue Document\" as UC6\n}\n\nCitizen --> UC1\nCitizen --> UC2\nCitizen --> UC4\nCitizen --> UC5\n\nRequester --> UC3\nRequester --> UC2\nIssuer --> UC2\nIssuer --> UC6\n@enduml"
    },
    {
        "input": "Functional requirements for the E-Retail system:\n\n1. The system must allow sellers and customers to register and log in to the platform.\n2. The system must allow sellers to list products for sale.\n3. The system must display all available products for customers to view.\n4. The system must allow customers to buy products and make payments.\n5. The system must enable customers to rate the products they have purchased.\n6. The system must allow customers to report sellers for any violations or issues with the product or delivery.\n7. The system must display the contact information and rating of the seller to the customer before purchasing a product.\n \n Give me use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Seller\nactor Customer\n\nrectangle E-Retail {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"List Products\" as UC3\n    usecase \"View Products\" as UC4\n    usecase \"Buy Products\" as UC5\n    usecase \"Rate Product\" as UC6\n    usecase \"Report Seller\" as UC7\n    usecase \"View Seller Information\" as UC8\n    usecase \"Make Payment\" as UC9\n}\n\nSeller --> UC1\nSeller --> UC2\nSeller --> UC3\nSeller --> UC4\n\nCustomer --> UC2\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\nCustomer --> UC8\n\nUC5 --> UC6 : <<extend>>\nUC5 --> UC9 : <<include>>\n@enduml"
    },

    {
        "input": "Functional requirements for the Online Food Ordering System:\n\n1. The system must allow users to register and log in to the platform.\n2. The system must allow users to select a restaurant to order food from.\n3. The system must provide a menu for users to browse food items from the selected restaurant.\n4. The system must allow users to place an order for food.\n5. The system must facilitate payment through a secure payment gateway.\n6. The system must allow users to track the status of their orders.\n7. The system must allow users to contact customer support for any queries or issues.\n Give me use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Food_Ordering_System {\n    usecase \"Register\" as UC1\n    usecase \"Select Restaurant\" as UC2\n    usecase \"Browse Menu\" as UC3\n    usecase \"Place Order\" as UC4\n    usecase \"Make Payment\" as UC5\n    usecase \"Track Order\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC4 --> UC5 : <<include>>\n@enduml"
    },
    {
        "input": "Functional requirements for the Online Movie Ticket Booking System:\n\n1. The system must allow users to register and log in to the platform.\n2. The system must allow users to select a movie for which they want to book tickets.\n3. The system must allow users to select seats for the selected movie.\n4. The system must facilitate payment through a secure payment gateway.\n5. The system must confirm the ticket booking after payment is made.\n6. The system must allow users to cancel their ticket bookings if necessary.\n7. The system must allow users to contact customer support for any queries or issues.\n Give me use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Movie_Ticket_Booking_System {\n    usecase \"Register\" as UC1\n    usecase \"Select Movie\" as UC2\n    usecase \"Select Seats\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Confirm Ticket\" as UC5\n    usecase \"Cancel Ticket\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC5 --> UC6 : <<extend>>\n@enduml"
    },
    {
        "input": "Functional requirements for the Online Hotel Booking System:\n\n1. The system must allow users to register and log in to the platform.\n2. The system must allow users to select a hotel for which they want to book rooms.\n3. The system must allow users to select rooms in the selected hotel.\n4. The system must facilitate payment through a secure payment gateway.\n5. The system must confirm the booking of rooms after payment is made.\n6. The system must allow users to cancel their room bookings if necessary.\n7. The system must allow users to contact customer support for any queries or issues.\n Give me use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Hotel_Booking_System {\n    usecase \"Register\" as UC1\n    usecase \"Select Hotel\" as UC2\n    usecase \"Select Room\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Confirm Booking\" as UC5\n    usecase \"Cancel Booking\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC5 --> UC6 : <<extend>>\n@enduml"
    },
    {
        "input": "Give me use case diagram for this system. Functional requirements for the Online Flight Booking System:\n\n1. The system must allow users to register and log in to the platform.\n2. The system must allow users to select a flight for which they want to book tickets.\n3. The system must allow users to select seats for the selected flight.\n4. The system must facilitate payment through a secure payment gateway.\n5. The system must confirm the booking of tickets after payment is made.\n6. The system must allow users to cancel their ticket bookings if necessary.\n7. The system must allow users to contact customer support for any queries or issues.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle Online_Flight_Booking_System {\n    usecase \"Register\" as UC1\n    usecase \"Select Flight\" as UC2\n    usecase \"Select Seats\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Confirm Ticket\" as UC5\n    usecase \"Cancel Ticket\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC5 --> UC6 : <<extend>>\n@enduml"
    },
    {
        "input": "Give me use case diagram for this system. Functional requirements for the Online Event Management System:\n\n1. The system must allow users to register and log in to the platform.\n2. The system must allow users to create events and manage event details.\n3. The system must allow users to promote events to attract attendees.\n4. The system must allow users to book tickets for events.\n5. The system must facilitate payment through a secure payment gateway for tickets.\n6. The system must allow users to track the status of events and ticket bookings.\n7. The system must allow users to contact customer support for any queries or issues.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor \"Customer Support\" as Support\n\nrectangle Online_Event_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"Create Event\" as UC2\n    usecase \"Promote Event\" as UC3\n    usecase \"Book Ticket\" as UC4\n    usecase \"Make Payment\" as UC5\n    usecase \"Track Event\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nSupport --> UC8\nUC7 --> UC8 : <<include>>\n\nUC4 --> UC5 : <<include>>\n@enduml"
    },
    {
        "input": "Design me use case diagram for this system.Functional requirements for the Law Enforcement System:\n\n1. The system must allow lawyers to register and log in to the platform.\n2. The system must allow lawyers to view case details and logs.\n3. The system must allow lawyers to add and update case details.\n4. The system must support both criminal and civil case categories.\n5. The system must provide online filing options for cases.\n6. The system must allow lawyers to download model forms for cases.\n7. The system must provide quick references for common legal cases.\n8. The system must offer e-books and other legal resources for reference.\n9. The system must allow lawyers to view blogs, news updates, and submit feedback.",
        "output": "@startuml\nleft to right direction\n\nactor Lawyer\nactor Admin\n\nrectangle Law_Enforcement_System {\n    usecase \"Register\" as UC1\n    usecase \"View Case details and logs\" as UC2\n    usecase \"Add case\" as UC3\n    usecase \"Update details\" as UC4\n    usecase \"Criminal\" as UC5\n    usecase \"Civil\" as UC6\n    usecase \"Filing online\" as UC7\n    usecase \"Download Model Forms\" as UC8\n    usecase \"Display Links\" as UC9\n    usecase \"Display Forms\" as UC10\n    usecase \"Quick references\" as UC11\n    usecase \"Books\" as UC12\n    usecase \"Add feedback\" as UC13\n    usecase \"View Blogs and news updates\" as UC14\n    usecase \"Download\" as UC15\n    usecase \"Upload Documents\" as UC16\n    usecase \"Update Logs\" as UC17\n    usecase \"Update Calendar\" as UC18\n    usecase \"Set reminders\" as UC19\n}\n\nLawyer --> UC1\nLawyer --> UC2\nLawyer --> UC3\nLawyer --> UC7\nLawyer --> UC8\nLawyer --> UC13\nLawyer --> UC14\n\nUC3 --> UC4 : <<include>>\nUC4 --> UC5 : <<extend>>\nUC4 --> UC6 : <<extend>>\nUC7 --> UC9 : <<extend>>\nUC8 --> UC10 : <<include>>\nUC8 --> UC11 : <<extend>>\nUC11 --> UC12 : <<extend>>\n\nAdmin --> UC16\nAdmin --> UC17\nAdmin --> UC18\nAdmin --> UC19\n\nUC16 --> UC15 : <<extend>>\nUC19 --> UC18 : <<include>>\n@enduml"
    },
    {
        "input": "Design me use case diagram for this system. Functional requirements for 'My Helper' application:\n\n1. The system must allow users to send an SMS to perform remote operations on their phones.\n2. The system must allow users to track the location of their phone via an SMS.\n3. The system must allow users to lock their phones remotely via an SMS.\n4. The system must allow users to change the sound profile (silent to normal) of their phone via an SMS.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle My_Helper {\n    usecase \"Send SMS\" as UC1\n    usecase \"Track Phone\" as UC2\n    usecase \"Lock Phone\" as UC3\n    usecase \"Change Sound Profile\" as UC4\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\n\nUC1 --> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Design me use case diagram for this system. Functional requirements for COVID-19 Management System:\n\n1. The system must allow healthcare organizations to track COVID-19 patients.\n2. The system must enable healthcare organizations to treat COVID-19 patients via virtual care.\n3. The system must provide the government with tools to monitor the spread of the virus.\n4. The system must allow healthcare organizations and the government to assess the risk profiles of patients.\n5. The system must raise awareness about COVID-19 among the general public.\n6. The system must allow patients to connect with virtual care services for consultation.\n7. The system must provide patients with the ability to buy medicines online.",
        "output": "@startuml\nleft to right direction\n\nactor Healthcare_Organization\nactor Government\nactor Patient\n\nrectangle COVID-19_Management_System {\n    usecase \"Track COVID-19 Patients\" as UC1\n    usecase \"Treat COVID-19 Patients\" as UC2\n    usecase \"Monitor Virus Spread\" as UC3\n    usecase \"Assess Patient Risk\" as UC4\n    usecase \"Provide Awareness\" as UC5\n    usecase \"Connect with Virtual Care\" as UC6\n    usecase \"Buy Medicines\" as UC7\n}\n\nHealthcare_Organization --> UC1\nHealthcare_Organization --> UC2\nHealthcare_Organization --> UC4\nHealthcare_Organization --> UC6\n\nGovernment --> UC3\nGovernment --> UC4\nGovernment --> UC5\n\nPatient --> UC1\nPatient --> UC7\nPatient --> UC6\n\nUC4 --> UC6 : <<extend>>\n@enduml"
    },
    {
        "input": "Design me use case diagram for this system. Functional requirements for 'Car Care' application:\n\n1. The system must allow car owners to register and log in.\n2. The system must allow car owners to enter car information.\n3. The system must allow service centers to enter the estimated expiry dates of car parts.\n4. The system must notify car owners and service centers about the expiry dates of car parts.\n5. The system must allow car owners to accept service requests and select the parts for service.\n6. The system must enable service centers to pick up the car, examine it, prepare a list of damaged parts, and perform the selected services.\n7. The system must allow the service center to update the car information after servicing.\n8. The system must provide an online payment option for car owners to make payments for the service.",
        "output": "@startuml\nleft to right direction\n\nactor Car_Owner\nactor Service_Centre\n\nrectangle Car_Care {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Enter Car Information\" as UC3\n    usecase \"Enter Expiry Dates\" as UC4\n    usecase \"Notify Expiry\" as UC5\n    usecase \"Accept Service Request\" as UC6\n    usecase \"Pick Up Car\" as UC7\n    usecase \"Examine Car\" as UC8\n    usecase \"Prepare List\" as UC9\n    usecase \"Select Damaged Parts\" as UC10\n    usecase \"Service Parts\" as UC11\n    usecase \"Update Information\" as UC12\n    usecase \"Make Payment\" as UC13\n}\n\nCar_Owner --> UC1\nCar_Owner --> UC2\nCar_Owner --> UC3\nCar_Owner --> UC5\nCar_Owner --> UC6\nCar_Owner --> UC10\nCar_Owner --> UC13\n\nService_Centre --> UC2\nService_Centre --> UC4\nService_Centre --> UC7\nService_Centre --> UC8\nService_Centre --> UC9\nService_Centre --> UC11\nService_Centre --> UC12\n\nUC6 --> UC7 : <<extend>>\nUC9 --> UC10 : <<include>>\nUC11 --> UC12 : <<extend>>\n@enduml"
    },
    {
        "input": "Design me use case diagram for this system. Functional requirements for 'E-Ration Shop':\n\n1. The system must allow ration cardholders to register, log in, and order grocery items online.\n2. The system must display shop details, stock availability, and shop advertisements to ration cardholders.\n3. The system must notify ration cardholders about stock availability regularly.\n4. The system must provide product delivery functionality for ration cardholders.\n5. The system must provide a complaint forum for ration cardholders to submit grievances.\n6. The system must allow retailers to manage stock, advertise their shop, and deliver products.\n7. The system must support payments through PayTM, COD, and other payment gateways.\n8. The system must have admin and moderator functionalities, such as managing users, monitoring system usage, approving retailer applications, generating reports, and managing content.\n9. The system must use Aadhaar-based authentication and OTP verification for secure access.",
        "output": "@startuml\nleft to right direction\n\nactor \"Ration_Cardholder (Customer)\" as Ration_Cardholder\nactor \"Retailer (Shopkeeper)\" as Retailer\nactor Admin\nactor Moderator\n\nrectangle E-Ration_Shop {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Order Grocery Items\" as UC3\n    usecase \"View Shop Details\" as UC4\n    usecase \"View Stock\" as UC5\n    usecase \"Manage Stock\" as UC6\n    usecase \"Advertise Shop\" as UC7\n    usecase \"Notify Stock Availability\" as UC8\n    usecase \"Deliver Products\" as UC9\n    usecase \"Complaint Forum\" as UC10\n    usecase \"Make Payment\" as UC11\n    usecase \"Manage Users\" as UC12\n    usecase \"Monitor System Usage\" as UC13\n    usecase \"Approve Retailer Applications\" as UC14\n    usecase \"Generate Reports\" as UC15\n    usecase \"Manage Content\" as UC16\n    usecase \"Review Complaints\" as UC17\n    usecase \"Authentication with Aadhaar and OTP\" as UC18\n}\n\nRation_Cardholder --> UC1\nRation_Cardholder --> UC2\nRation_Cardholder --> UC3\nRation_Cardholder --> UC4\nRation_Cardholder --> UC5\nRation_Cardholder --> UC10\nRation_Cardholder --> UC11\n\nRetailer --> UC4\nRetailer --> UC6\nRetailer --> UC7\nRetailer --> UC9\n\nAdmin --> UC12\nAdmin --> UC13\nAdmin --> UC14\nAdmin --> UC15\nAdmin --> UC18\n\nModerator --> UC16\nModerator --> UC17\n\nUC3 --> UC9 : <<extend>>\nUC5 --> UC8 : <<extend>>\n@enduml"
    },
    {
        "input": "Design me use case diagram for this system. Functional requirements for 'Textile Management System':\n\n1. The system must allow customers to register and sample available products.\n2. The system must allow customers and manufacturers to check stock availability.\n3. The system must support the purchasing and processing of raw materials by the manufacturer.\n4. The system must enable the production of garments by the manufacturer.\n5. The system must allow for product checking, clearance, and shipment of finished garments.\n6. The system must generate bills for customers and reports for manufacturers.\n7. The system must allow customers to order garments.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Manufacturer\n\nrectangle Textile_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"Sample Products\" as UC2\n    usecase \"Check Stock\" as UC3\n    usecase \"Purchase Raw Materials\" as UC4\n    usecase \"Process Raw Materials\" as UC5\n    usecase \"Produce Garments\" as UC6\n    usecase \"Check Products\" as UC7\n    usecase \"Clearance of Products\" as UC8\n    usecase \"Ship Products\" as UC9\n    usecase \"Generate Bill\" as UC10\n    usecase \"Generate Reports\" as UC11\n    usecase \"Order Garments\" as UC12\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC12\n\nManufacturer --> UC3\nManufacturer --> UC4\nManufacturer --> UC5\nManufacturer --> UC6\nManufacturer --> UC7\nManufacturer --> UC8\nManufacturer --> UC9\nManufacturer --> UC10\nManufacturer --> UC11\n\nUC7 --> UC8 : <<extend>>\n@enduml"
    },
    {
        "input": "Design me use case diagram for this system. Functional requirements for 'Hotel Reservation System':\n\n1. The system must allow customers to register, log in, search available rooms, book rooms, and make payments.\n2. The system must allow customers to view their reservations and contact customer support.\n3. The system must allow hotel managers to add or update room details and generate reports.\n4. The system must provide customer support to assist users with their queries and issues.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor HotelManager\nactor \"Customer Support\" as Support\n\nrectangle Hotel_Reservation_System {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Search Rooms\" as UC3\n    usecase \"Book Room\" as UC4\n    usecase \"Make Payment\" as UC5\n    usecase \"View Reservation\" as UC6\n    usecase \"Manage Room Details\" as UC7\n    usecase \"Generate Report\" as UC8\n    usecase \"Contact Support\" as UC9\n    usecase \"Provide Support\" as UC10\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC9\n\nHotelManager --> UC7\nHotelManager --> UC8\n\nSupport --> UC10\nUC9 --> UC10 : <<include>>\n@enduml"
    },
    {
        "input": "Design me use case diagram for this system. Functional requirements for 'Learning Management System':\n\n1. The system must allow students to register, enroll in courses, submit assignments, and view their grades.\n2. The system must allow instructors to create courses, manage student assignments, and grade submissions.\n3. The system must facilitate collaboration through discussion forums for students and instructors.\n4. The system must provide a feedback mechanism for students to share their learning experiences with instructors.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Instructor\n\nrectangle Learning_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"Enroll in Course\" as UC2\n    usecase \"Submit Assignment\" as UC3\n    usecase \"View Grades\" as UC4\n    usecase \"Create Course\" as UC5\n    usecase \"Manage Assignments\" as UC6\n    usecase \"Grade Submissions\" as UC7\n    usecase \"Join Discussion Forum\" as UC8\n    usecase \"Provide Feedback\" as UC9\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC8\nStudent --> UC9\n\nInstructor --> UC5\nInstructor --> UC6\nInstructor --> UC7\n@enduml"
    },
    {
        "input": "Functional requirements for 'Inventory Management System':\n\n1. The system must allow store managers to view current inventory levels, reorder products, and manage suppliers.\n2. The system must track deliveries and update inventory levels accordingly.\n3. The system must generate reports on product usage and reorder history. Design me use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor StoreManager\nactor Supplier\n\nrectangle Inventory_Management_System {\n    usecase \"View Inventory\" as UC1\n    usecase \"Reorder Product\" as UC2\n    usecase \"Manage Suppliers\" as UC3\n    usecase \"Track Deliveries\" as UC4\n    usecase \"Generate Reports\" as UC5\n}\n\nStoreManager --> UC1\nStoreManager --> UC2\nStoreManager --> UC3\nStoreManager --> UC5\n\nSupplier --> UC4\n@enduml"
    },
    {
        "input": "Functional requirements for 'Gym Management System':\n\n1. The system must allow users to register as members, book sessions, and track their fitness progress.\n2. Trainers must be able to create workout plans, manage their schedules, and monitor client progress.\n3. The system must handle membership payments through an integrated payment gateway. Design me use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Trainer\n\nrectangle Gym_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"Book Session\" as UC2\n    usecase \"Track Progress\" as UC3\n    usecase \"Create Workout Plan\" as UC4\n    usecase \"Manage Schedule\" as UC5\n    usecase \"Track Client Progress\" as UC6\n    usecase \"Make Payment\" as UC7\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC7\n\nTrainer --> UC4\nTrainer --> UC5\nTrainer --> UC6\n@enduml"
    },
    {
        "input": "Functional requirements for 'Warehouse Management System':\n\n1. The system must track stock levels in real-time and manage shipments and deliveries.\n2. Warehouse managers must be able to manage the entire stock lifecycle, generate reports, and manage employee schedules.\n3. The system must include inventory optimization features to adjust stock based on real-time demand. Design me use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor WarehouseManager\nactor Employee\n\nrectangle Warehouse_Management_System {\n    usecase \"Track Stock\" as UC1\n    usecase \"Manage Shipments\" as UC2\n    usecase \"Manage Deliveries\" as UC3\n    usecase \"Manage Stock\" as UC4\n    usecase \"Generate Reports\" as UC5\n    usecase \"Manage Employee Schedule\" as UC6\n    usecase \"Optimize Inventory\" as UC7\n}\n\nWarehouseManager --> UC1\nWarehouseManager --> UC4\nWarehouseManager --> UC5\nWarehouseManager --> UC6\nWarehouseManager --> UC7\n\nEmployee --> UC2\nEmployee --> UC3\n@enduml"
    },
    {
        "input": "Functional Requirements for Hospital Management System:\n1. The system shall allow patients to book appointments with available doctors.\n2. The system shall enable patients to view their medical records for ongoing treatments.\n3. The system shall allow patients to receive prescriptions electronically after consultations.\n4. The system shall allow doctors to manage patient records efficiently, keeping them up-to-date with relevant information.\n5. The system shall enable doctors to schedule follow-up appointments with patients.\n6. The system shall generate invoices for medical services used by patients through the billing module.\n7. The system shall allow doctors to issue prescriptions electronically, minimizing paperwork.\n Design me use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Doctor\n\nrectangle Hospital_Management_System {\n    usecase \"Book Appointment\" as UC1\n    usecase \"View Medical Records\" as UC2\n    usecase \"Receive Prescription\" as UC3\n    usecase \"Manage Patient Records\" as UC4\n    usecase \"Schedule Appointments\" as UC5\n    usecase \"Prescribe Medications\" as UC6\n    usecase \"Generate Bill\" as UC7\n}\n\nPatient --> UC1\nPatient --> UC2\nPatient --> UC3\nPatient --> UC7\n\nDoctor --> UC4\nDoctor --> UC5\nDoctor --> UC6\n@enduml"
    },
    {
        "input": "Design me use case diagram for this system. Functional Requirements for Banking System:\n1. The system shall allow customers to deposit money into their accounts.\n2. The system shall allow customers to withdraw money from their accounts.\n3. The system shall allow customers to transfer funds between accounts.\n4. The system shall allow customers to check their account balances.\n5. The system shall allow customers to apply for loans.\n6. The system shall provide customers with access to their transaction history.\n7. The system shall allow bank employees to manage customer accounts, including details and status.\n8. The system shall allow bank employees to approve or reject loan applications submitted by customers.\n9. The system shall allow bank employees to generate reports on banking operations.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor BankEmployee\n\nrectangle Banking_System {\n    usecase \"Deposit Money\" as UC1\n    usecase \"Withdraw Money\" as UC2\n    usecase \"Transfer Funds\" as UC3\n    usecase \"Check Balance\" as UC4\n    usecase \"Apply for Loan\" as UC5\n    usecase \"View Transaction History\" as UC6\n    usecase \"Manage Accounts\" as UC7\n    usecase \"Approve Loan Applications\" as UC8\n    usecase \"Generate Reports\" as UC9\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n\nBankEmployee --> UC7\nBankEmployee --> UC8\nBankEmployee --> UC9\n@enduml"
    },
    {
        "input": "Design me use case diagram for this system. Functional Requirements for Car Rental System:\n1. The system shall allow customers to search for available cars.\n2. The system shall allow customers to select the desired car for rental.\n3. The system shall allow customers to make a reservation for the selected car.\n4. The system shall allow customers to view their booking history.\n5. The system shall allow customers to cancel their bookings if needed.\n6. The system shall allow car rental agencies to manage their fleet of cars.\n7. The system shall allow car rental agencies to track bookings made by customers.\n8. The system shall allow car rental agencies to generate reports on rental activity.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor CarRentalAgency\n\nrectangle Car_Rental_System {\n    usecase \"Search Cars\" as UC1\n    usecase \"Select Car\" as UC2\n    usecase \"Make Reservation\" as UC3\n    usecase \"View Booking History\" as UC4\n    usecase \"Cancel Booking\" as UC5\n    usecase \"Manage Fleet\" as UC6\n    usecase \"Track Bookings\" as UC7\n    usecase \"Generate Reports\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\n\nCarRentalAgency --> UC6\nCarRentalAgency --> UC7\nCarRentalAgency --> UC8\n@enduml"
    },
    {
        "input": "Design me use case diagram for this system. Functional Requirements for Final Year Project (FYP) Management System:\n1. The system shall allow students to submit their project proposals for approval.\n2. The system shall allow students to upload progress reports at various stages of the project.\n3. The system shall allow students to track the evaluation status of their projects.\n4. The system shall allow supervisors to review student submissions and provide detailed feedback.\n5. The system shall allow supervisors to set project deadlines to ensure students stay on track.\n6. The system shall allow supervisors to monitor the progress of each student.\n7. The system shall allow panel members to evaluate projects during key milestones and offer scores.\n8. The system shall allow the FYP committee to assign panel members to projects.\n9. The system shall allow the FYP committee to approve or reject proposals based on academic standards.\n10. The system shall allow the FYP committee to ensure the overall quality of the submitted projects.\n11. The system shall facilitate communication between students, supervisors, and panel members to foster collaboration.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Supervisor\nactor Panel_Member\nactor FYP_Committee\n\nrectangle FYP_Management_System {\n    usecase \"Submit Proposal\" as UC1\n    usecase \"Upload Progress Report\" as UC2\n    usecase \"Track Evaluation Status\" as UC3\n    usecase \"Review Submissions\" as UC4\n    usecase \"Provide Feedback\" as UC5\n    usecase \"Set Project Deadlines\" as UC6\n    usecase \"Monitor Progress\" as UC7\n    usecase \"Evaluate Projects\" as UC8\n    usecase \"Assign Panel Members\" as UC9\n    usecase \"Approve Proposals\" as UC10\n    usecase \"Ensure Academic Standards\" as UC11\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\n\nSupervisor --> UC4\nSupervisor --> UC5\nSupervisor --> UC6\nSupervisor --> UC7\n\nPanel_Member --> UC4\nPanel_Member --> UC8\n\nFYP_Committee --> UC9\nFYP_Committee --> UC10\nFYP_Committee --> UC11\n\nUC4 --> UC5 : <<extend>>\n@enduml"
    },
    {
        "input": "Design me use case diagram for this system. Functional Requirements for 'Online Auction System':\n1. The system shall allow users to register and create accounts for bidding.\n2. The system shall allow users to browse and search for items available for auction.\n3. The system shall allow users to place bids on items they are interested in.\n4. The system shall notify users of the status of their bids and the auction results.\n5. The system shall allow sellers to list items for auction and set starting prices.\n6. The system shall allow sellers to monitor the progress of their auctions and view bids placed on their items.\n7. The system shall allow sellers to close auctions and finalize transactions with winning bidders.\n8. The system shall provide a secure payment gateway for users to make payments for won items.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Seller\n\nrectangle Online_Auction_System {\n    usecase \"Register\" as UC1\n    usecase \"Create Account\" as UC2\n    usecase \"Browse Items\" as UC3\n    usecase \"Place Bid\" as UC4\n    usecase \"Notify Status\" as UC5\n    usecase \"List Items\" as UC6\n    usecase \"Monitor Auctions\" as UC7\n    usecase \"Close Auction\" as UC8\n    usecase \"Finalize Transaction\" as UC9\n    usecase \"Make Payment\" as UC10\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC10\n\nSeller --> UC6\nSeller --> UC7\nSeller --> UC8\nSeller --> UC9\n@enduml"
    },

    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Volunteer Management System:\n1. The system shall allow volunteers to sign up for events.\n2. The system shall allow volunteers to view assigned tasks.\n3. The system shall track the participation hours of each volunteer.\n4. The system shall allow volunteers to update their availability for events.\n5. The system shall allow coordinators to assign tasks to volunteers.\n6. The system shall allow coordinators to track the participation of volunteers.\n7. The system shall allow event managers to schedule events in advance.\n8. The system shall allow event managers to approve volunteer rosters for events.\n9. The system shall allow event managers to monitor the success and effectiveness of events.\n10. The system shall generate reports on participation and event success for evaluation.",
        "output": "@startuml\nleft to right direction\n\nactor Volunteer\nactor Coordinator\nactor Event_Manager\n\nrectangle Volunteer_Management_System {\n    usecase \"Sign Up for Event\" as UC1\n    usecase \"View Assigned Tasks\" as UC2\n    usecase \"Track Participation Hours\" as UC3\n    usecase \"Update Availability\" as UC4\n    usecase \"Assign Tasks\" as UC5\n    usecase \"Track Volunteer Participation\" as UC6\n    usecase \"Schedule Events\" as UC7\n    usecase \"Approve Volunteer Rosters\" as UC8\n    usecase \"Monitor Event Success\" as UC9\n    usecase \"Generate Reports\" as UC10\n}\n\nVolunteer --> UC1\nVolunteer --> UC2\nVolunteer --> UC3\nVolunteer --> UC4\n\nCoordinator --> UC5\nCoordinator --> UC6\n\nEvent_Manager --> UC7\nEvent_Manager --> UC8\nEvent_Manager --> UC9\nEvent_Manager --> UC10\n\nUC6 --> UC10 : <<include>>\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Hiring System at TechHire Solutions:\n1. The system shall allow candidates to submit applications including resumes and cover letters.\n2. The system shall scan resumes for relevant skills, experience, and qualifications.\n3. The system shall automatically shortlist candidates based on the scan results.\n4. The system shall allow recruiters to schedule interviews for shortlisted candidates.\n5. The system shall allow interviewers to provide feedback and ratings after each interview round.\n6. The system shall allow recruiters to select the most qualified candidates based on interview feedback.\n7. The system shall generate offer letters for selected candidates.\n8. The system shall track the overall hiring status across all stages of the recruitment cycle.",
        "output": "@startuml\nleft to right direction\n\nactor Candidate\nactor Recruiter\nactor Interviewer\n\nrectangle Hiring_System_TechHire_Solutions {\n    usecase \"Submit Application\" as UC1\n    usecase \"Scan Resume\" as UC2\n    usecase \"Shortlist Candidates\" as UC3\n    usecase \"Schedule Interviews\" as UC4\n    usecase \"Provide Interview Feedback\" as UC5\n    usecase \"Select Candidates\" as UC6\n    usecase \"Generate Offer Letter\" as UC7\n    usecase \"Track Hiring Status\" as UC8\n}\n\nCandidate --> UC1\n\nRecruiter --> UC2\nRecruiter --> UC3\nRecruiter --> UC4\nRecruiter --> UC6\nRecruiter --> UC7\nRecruiter --> UC8\n\nInterviewer --> UC5\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for GitHub Universe 2023 Management System:\n1. The system shall allow participants to register for the event.\n2. The system shall allow participants to sign up for keynotes and workshops.\n3. The system shall manage sponsor onboarding and interactions.\n4. The system shall track sponsor branding during the event.\n5. The system shall manage the overall event schedule.\n6. The system shall send real-time updates to all users.\n7. The system shall allow participants to submit feedback on the sessions they attend.\n8. The system shall allow speakers to schedule and present technical talks.\n9. The system shall generate reports based on user feedback and event metrics.\n10. The system shall monitor event attendance.\n11. The system shall allow sponsors to submit sponsorship proposals.\n12. The system shall allow sponsors to review their benefits for sponsoring the event.",
        "output": "@startuml\nleft to right direction\n\nactor Participant\nactor Sponsor\nactor Organizer\nactor Speaker\n\nrectangle GitHub_Universe_Management_System {\n    usecase \"Register for Event\" as UC1\n    usecase \"Sign Up for Sessions\" as UC2\n    usecase \"Manage Sponsor Onboarding\" as UC3\n    usecase \"Track Sponsor Branding\" as UC4\n    usecase \"Manage Event Schedule\" as UC5\n    usecase \"Send Real-Time Updates\" as UC6\n    usecase \"Submit Session Feedback\" as UC7\n    usecase \"Give Tech-Talks\" as UC8\n    usecase \"Generate Reports\" as UC9\n    usecase \"Monitor Attendance\" as UC10\n    usecase \"Submit Sponsorship Proposal\" as UC11\n    usecase \"Review Sponsorship Benefits\" as UC12\n}\n\nParticipant --> UC1\nParticipant --> UC2\nParticipant --> UC7\n\nSponsor --> UC11\nSponsor --> UC4\n\nOrganizer --> UC5\nOrganizer --> UC6\nOrganizer --> UC9\nOrganizer --> UC10\nOrganizer --> UC3\nOrganizer --> UC4\n\nSpeaker --> UC8\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for University Course Registration System:\n1. The system shall allow students to search for available courses.\n2. The system shall allow students to add courses to their course list.\n3. The system shall allow students to register for the upcoming semester.\n4. The system shall allow students to drop courses if needed.\n5. The system shall allow students to view their academic history.\n6. The system shall allow professors to view the list of enrolled students.\n7. The system shall allow professors to assign grades to students.\n8. The system shall allow professors to provide feedback on assignments.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Professor\n\nrectangle Course_Registration_System {\n    usecase \"Search Courses\" as UC1\n    usecase \"Add Course\" as UC2\n    usecase \"Register for Semester\" as UC3\n    usecase \"Drop Course\" as UC4\n    usecase \"View Academic History\" as UC5\n    usecase \"View Enrolled Students\" as UC6\n    usecase \"Assign Grades\" as UC7\n    usecase \"Provide Feedback\" as UC8\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\n\nProfessor --> UC6\nProfessor --> UC7\nProfessor --> UC8\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Social Media Platform:\n1. The system shall allow users to create and manage their profiles.\n2. The system shall allow users to post content, including text, images, and videos.\n3. The system shall allow users to interact with other users by commenting and liking posts.\n4. The system shall allow users to join and participate in group discussions.\n5. The system shall allow users to send private messages to each other.\n6. The system shall notify users about new activities on the platform, such as interactions with their posts.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Social_Media_Platform {\n    usecase \"Create Profile\" as UC1\n    usecase \"Post Content\" as UC2\n    usecase \"Interact with Users\" as UC3\n    usecase \"Join Groups\" as UC4\n    usecase \"Participate in Discussions\" as UC5\n    usecase \"Send Messages\" as UC6\n    usecase \"Receive Notifications\" as UC7\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Social Networking Platform (like Facebook):\n1. The system shall allow users to create personalized profiles.\n2. The system shall allow users to send and accept friend requests to build connections.\n3. The system shall allow users to share posts including text, photos, and videos.\n4. The system shall allow users to engage with posts through likes, comments, and reactions.\n5. The system shall allow users to send private messages and share media.\n6. The system shall notify users in real-time about interactions and new connections.\n7. The system shall allow business users to create and manage business pages.\n8. The system shall allow business users to manage targeted advertisements.\n9. The system shall allow moderators to monitor content and ensure it complies with community guidelines.\n10. The system shall allow administrators to manage platform-wide activities and enforce guidelines.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Moderator\nactor Admin\n\nrectangle Facebook_System {\n    usecase \"Create Profile\" as UC1\n    usecase \"Manage Friends\" as UC2\n    usecase \"Share Life Moments\" as UC3\n    usecase \"Post Content\" as UC4\n    usecase \"Engage with Posts\" as UC5\n    usecase \"Send Private Messages\" as UC6\n    usecase \"Receive Notifications\" as UC7\n    usecase \"Create Business Page\" as UC8\n    usecase \"Manage Advertisements\" as UC9\n    usecase \"Monitor and Moderate Content\" as UC10\n    usecase \"Enforce Community Guidelines\" as UC11\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\n\nModerator --> UC10\n\nAdmin --> UC11\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Blood Donation App:\n1. The system shall allow users to register as blood donors.\n2. The system shall allow recipients to find donors based on blood type and location.\n3. The system shall allow users to post blood requests in urgent situations.\n4. The system shall notify donors of blood requests.\n5. The system shall allow recipients to locate nearby hospitals.\n6. The system shall allow blood banks to organize blood donation drives.\n7. The system shall allow blood banks to track blood availability.\n8. The system shall allow donors to donate blood.\n",
        "output": "@startuml\nleft to right direction\n\nactor Donor\nactor Recipient\nactor BloodBank\n\nrectangle Blood_Donation_App {\n    usecase \"Register as Donor\" as UC1\n    usecase \"Find Blood Donor\" as UC2\n    usecase \"Post Blood Request\" as UC3\n    usecase \"Receive Notifications\" as UC4\n    usecase \"Locate Nearby Hospitals\" as UC5\n    usecase \"Organize Blood Donation Drives\" as UC6\n    usecase \"Track Blood Availability\" as UC7\n    usecase \"Donate Blood\" as UC8\n}\n\nDonor --> UC1\nDonor --> UC8\nDonor --> UC4\nRecipient --> UC2\nRecipient --> UC3\nRecipient --> UC5\nRecipient --> UC4\nBloodBank --> UC6\nBloodBank --> UC7\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Ride-Sharing Platform (like Uber):\n1. The system shall allow passengers to request rides to specific destinations.\n2. The system shall allow passengers to track the location of their rides in real-time.\n3. The system shall allow passengers to pay for the service through the platform.\n4. The system shall allow passengers to rate their drivers after the ride.\n5. The system shall allow drivers to accept ride requests.\n6. The system shall allow drivers to navigate to the passenger's location and destination.\n7. The system shall allow drivers to provide safe and efficient rides to passengers.\n8. The system shall provide customer support features for passengers and drivers.\n9. The system shall allow customer support to assist users in resolving issues.\n",
        "output": "@startuml\nleft to right direction\n\nactor Passenger\nactor Driver\nactor CustomerSupport\n\nrectangle Ride_Sharing_Platform {\n    usecase \"Request Ride\" as UC1\n    usecase \"Track Location\" as UC2\n    usecase \"Pay for Service\" as UC3\n    usecase \"Rate Driver\" as UC4\n    usecase \"Accept Ride Request\" as UC5\n    usecase \"Navigate to Location\" as UC6\n    usecase \"Provide Ride\" as UC7\n    usecase \"Resolve Issues\" as UC8\n    usecase \"Provide Assistance\" as UC9\n}\n\nPassenger --> UC1\nPassenger --> UC2\nPassenger --> UC3\nPassenger --> UC4\n\nDriver --> UC5\nDriver --> UC6\nDriver --> UC7\n\nCustomerSupport --> UC8\nCustomerSupport --> UC9\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Food Delivery Platform (like DoorDash):\n1. The system shall allow customers to browse restaurant menus.\n2. The system shall allow customers to place orders for delivery or pickup.\n3. The system shall allow customers to track the status of their delivery.\n4. The system shall allow restaurants to receive customer orders.\n5. The system shall allow restaurants to prepare food after receiving orders.\n6. The system shall allow restaurants to notify customers when their orders are ready for pickup or delivery.\n7. The system shall allow delivery drivers to accept delivery requests.\n8. The system shall allow delivery drivers to pick up orders from restaurants.\n9. The system shall allow delivery drivers to deliver orders to customers.\n10. The system shall provide customer support features to resolve issues.\n11. The system shall allow customer support to provide assistance to users.\n",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Restaurant\nactor Driver\nactor CustomerSupport\n\nrectangle Food_Delivery_Platform {\n    usecase \"Browse Menus\" as UC1\n    usecase \"Place Order\" as UC2\n    usecase \"Track Delivery\" as UC3\n    usecase \"Receive Orders\" as UC4\n    usecase \"Prepare Food\" as UC5\n    usecase \"Notify Order Ready\" as UC6\n    usecase \"Accept Delivery Request\" as UC7\n    usecase \"Pick Up Order\" as UC8\n    usecase \"Deliver Order\" as UC9\n    usecase \"Resolve Issues\" as UC10\n    usecase \"Provide Assistance\" as UC11\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\n\nRestaurant --> UC4\nRestaurant --> UC5\nRestaurant --> UC6\n\nDriver --> UC7\nDriver --> UC8\nDriver --> UC9\n\nCustomerSupport --> UC10\nCustomerSupport --> UC11\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Job Finder App (SheWorks):\n1. The system shall allow job seekers to create profiles.\n2. The system shall allow job seekers to upload resumes.\n3. The system shall allow job seekers to search for jobs that align with their preferences (e.g., flexible hours, remote work).\n4. The system shall allow job seekers to apply for jobs through the platform.\n5. The system shall notify users of job updates, interview calls, and feedback.\n6. The system shall allow job seekers to schedule interviews with employers.\n7. The system shall offer career development workshops for job seekers.\n8. The system shall allow job seekers to participate in networking events.\n9. The system shall allow employers to shortlist candidates based on their profiles and resumes.\n10. The system shall allow employers to post job vacancies.\n11. The system shall allow mentors to offer mentorship to job seekers.\n12. The system shall recommend job opportunities to job seekers based on their profiles and resumes.\n",
        "output": "@startuml\nleft to right direction\n\nactor Job_Seeker\nactor Employer\nactor Mentor\n\nrectangle SheWorks_App {\n    usecase \"Create Profile\" as UC1\n    usecase \"Upload Resume\" as UC2\n    usecase \"Search for Jobs\" as UC3\n    usecase \"Apply for Job\" as UC4\n    usecase \"Receive Notifications\" as UC5\n    usecase \"Schedule Interview\" as UC6\n    usecase \"Attend Workshops\" as UC7\n    usecase \"Participate in Networking Events\" as UC8\n    usecase \"Shortlist Candidates\" as UC9\n    usecase \"Post Job Vacancies\" as UC10\n    usecase \"Offer Mentorship\" as UC11\n    usecase \"Receive Job Recommendations\" as UC12\n}\n\nJob_Seeker --> UC1\nJob_Seeker --> UC2\nJob_Seeker --> UC3\nJob_Seeker --> UC4\nJob_Seeker --> UC6\nJob_Seeker --> UC5\nJob_Seeker --> UC7\nJob_Seeker --> UC8\nJob_Seeker --> UC12\n\nEmployer --> UC9\nEmployer --> UC10\n\nMentor --> UC11\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Hackathon Management Web App:\n1. The system shall allow participants to register for the hackathon event.\n2. The system shall allow participants to form teams for the event.\n3. The system shall allow participants to submit their projects.\n4. The system shall provide a chat feature for team communication.\n5. The system shall notify participants about event updates and important announcements.\n6. The system shall allow participants to view the event schedule.\n7. The system shall allow mentors to provide guidance through the platform.\n8. The system shall allow mentors to review team project progress.\n9. The system shall allow judges to evaluate projects.\n10. The system shall allow judges to score submissions.\n11. The system shall allow organizers to manage judging rounds.\n12. The system shall allow sponsors to submit sponsorship materials.\n13. The system shall allow sponsors to track the visibility of their sponsorships.\n14. The system shall allow organizers to coordinate event announcements.\n",
        "output": "@startuml\nleft to right direction\n\nactor Participant\nactor Organizer\nactor Mentor\nactor Judge\nactor Sponsor\n\nrectangle Hackathon_Management_System {\n    usecase \"Register for Event\" as UC1\n    usecase \"Form Team\" as UC2\n    usecase \"Submit Project\" as UC3\n    usecase \"Chat with Team\" as UC4\n    usecase \"Receive Notifications\" as UC5\n    usecase \"View Event Schedule\" as UC6\n    usecase \"Provide Mentorship\" as UC7\n    usecase \"Review Project Progress\" as UC8\n    usecase \"Evaluate Projects\" as UC9\n    usecase \"Score Submissions\" as UC10\n    usecase \"Manage Judging Rounds\" as UC11\n    usecase \"Submit Sponsorship Materials\" as UC12\n    usecase \"Track Sponsorship Visibility\" as UC13\n    usecase \"Coordinate Announcements\" as UC14\n}\n\nParticipant --> UC1\nParticipant --> UC2\nParticipant --> UC3\nParticipant --> UC4\nParticipant --> UC5\nParticipant --> UC6\n\nOrganizer --> UC6\nOrganizer --> UC14\nOrganizer --> UC11\nOrganizer --> UC8\n\nMentor --> UC7\nMentor --> UC8\n\nJudge --> UC9\nJudge --> UC10\n\nSponsor --> UC12\nSponsor --> UC13\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Seminar Management System:\n1. The system shall allow audience members to register for the seminar.\n2. The system shall allow audience members to book seats for sessions.\n3. The system shall notify audience members about session schedules and updates.\n4. The system shall allow audience members to view the seminar session schedule.\n5. The system shall provide a feedback mechanism for audience members to evaluate sessions.\n6. The system shall allow organizers to manage auditorium allocation for sessions.\n7. The system shall allow organizers to manage speaker session content.\n8. The system shall allow organizers to invite guest speakers to the seminar.\n9. The system shall allow organizers to track audience attendance.\n10. The system shall allow organizers to coordinate event timings and session schedules.\n11. The system shall allow sponsors to promote their brands through the platform.\n12. The system shall allow guest speakers to manage their seminar session content.\n",
        "output": "@startuml\nleft to right direction\n\nactor Audience\nactor Organizer\nactor Guest_Speaker\nactor Sponsor\n\nrectangle Seminar_Management_System {\n    usecase \"Register for Seminar\" as UC1\n    usecase \"Book Seat\" as UC2\n    usecase \"Receive Notifications\" as UC3\n    usecase \"View Session Schedule\" as UC4\n    usecase \"Submit Feedback\" as UC5\n    usecase \"Manage Auditorium Allocation\" as UC6\n    usecase \"Manage Speaker Sessions\" as UC7\n    usecase \"Invite Guest Speakers\" as UC8\n    usecase \"Track Attendance\" as UC9\n    usecase \"Coordinate Event Timings\" as UC10\n    usecase \"Promote Sponsor Branding\" as UC11\n    usecase \"Manage Seminar Session Content\" as UC12\n}\n\nAudience --> UC1\nAudience --> UC2\nAudience --> UC3\nAudience --> UC4\nAudience --> UC5\n\nOrganizer --> UC6\nOrganizer --> UC7\nOrganizer --> UC8\nOrganizer --> UC9\nOrganizer --> UC10\n\nGuest_Speaker --> UC7\nGuest_Speaker --> UC12\n\nSponsor --> UC11\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Project Management System:\n1. The system shall allow project managers to create project plans.\n2. The system shall allow project managers to assign tasks to team members.\n3. The system shall allow project managers to track project progress.\n4. The system shall allow team members to view their assigned tasks.\n5. The system shall allow team members to update the status of their tasks.\n6. The system shall provide a communication feature for team members to interact with each other.\n7. The system shall allow project managers to generate project reports.\n8. The system shall allow project managers to monitor project timelines.\n9. The system shall help project managers identify potential risks.\n10. The system shall allow stakeholders to access project information.\n11. The system shall allow stakeholders to review progress reports.\n12. The system shall allow stakeholders to provide feedback on project deliverables.\n",
        "output": "@startuml\nleft to right direction\n\nactor ProjectManager\nactor TeamMember\nactor Stakeholder\n\n rectangle Project_Management_System {\n    usecase \"Create Project Plan\" as UC1\n    usecase \"Assign Tasks\" as UC2\n    usecase \"Track Progress\" as UC3\n    usecase \"View Assigned Tasks\" as UC4\n    usecase \"Update Task Status\" as UC5\n    usecase \"Communicate with Team\" as UC6\n    usecase \"Generate Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Risks\" as UC9\n    usecase \"Access Project Information\" as UC10\n    usecase \"Review Progress Reports\" as UC11\n    usecase \"Provide Feedback\" as UC12\n}\n\nProjectManager --> UC1\nProjectManager --> UC2\nProjectManager --> UC3\nProjectManager --> UC7\nProjectManager --> UC8\nProjectManager --> UC9\n\nTeamMember --> UC4\nTeamMember --> UC5\nTeamMember --> UC6\n\nStakeholder --> UC10\nStakeholder --> UC11\nStakeholder --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Customer Relationship Management (CRM) System:\n1. The system shall allow sales teams to track customer leads.\n2. The system shall allow sales teams to manage customer accounts.\n3. The system shall allow sales teams to analyze sales data.\n4. The system shall allow marketing teams to create targeted campaigns.\n5. The system shall allow marketing teams to track customer engagement.\n6. The system shall allow marketing teams to generate reports on campaign performance.\n7. The system shall allow customer support teams to log customer inquiries.\n8. The system shall allow customer support teams to resolve customer issues.\n9. The system shall allow customer support teams to provide feedback on customer satisfaction.\n",
        "output": "@startuml\nleft to right direction\n\nactor SalesTeam\nactor MarketingTeam\nactor CustomerSupport\n\nrectangle CRM_System {\n    usecase \"Track Leads\" as UC1\n    usecase \"Manage Customer Accounts\" as UC2\n    usecase \"Analyze Sales Data\" as UC3\n    usecase \"Create Campaigns\" as UC4\n    usecase \"Track Customer Engagement\" as UC5\n    usecase \"Generate Reports\" as UC6\n    usecase \"Log Customer Inquiries\" as UC7\n    usecase \"Resolve Issues\" as UC8\n    usecase \"Provide Feedback\" as UC9\n}\n\nSalesTeam --> UC1\nSalesTeam --> UC2\nSalesTeam --> UC3\n\nMarketingTeam --> UC4\nMarketingTeam --> UC5\nMarketingTeam --> UC6\n\nCustomerSupport --> UC7\nCustomerSupport --> UC8\nCustomerSupport --> UC9\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Content Management System (CMS):\n1. The system shall allow users to create digital content.\n2. The system shall allow users to edit existing content.\n3. The system shall allow users to collaborate on content creation.\n4. The system shall allow users to upload media files (e.g., images, videos).\n5. The system shall allow users to organize content into categories.\n6. The system shall allow users to schedule content publication.\n7. The system shall allow administrators to approve content before publication.\n8. The system shall provide version control for content management.\n9. The system shall provide analytics to analyze content performance.\n10. The system shall allow administrators to manage user permissions.\n11. The system shall allow administrators to monitor content performance.\n12. The system shall ensure the security of the platform.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Administrator\n\nrectangle Content_Management_System {\n    usecase \"Create Content\" as UC1\n    usecase \"Edit Content\" as UC2\n    usecase \"Collaborate on Content\" as UC3\n    usecase \"Upload Media Files\" as UC4\n    usecase \"Organize Content\" as UC5\n    usecase \"Schedule Publication\" as UC6\n    usecase \"Approve Content\" as UC7\n    usecase \"Version Control\" as UC8\n    usecase \"Analyze Content\" as UC9\n    usecase \"Manage Permissions\" as UC10\n    usecase \"Monitor Performance\" as UC11\n    usecase \"Ensure Security\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC8\n\nAdministrator --> UC7\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Learning Management System (LMS):\n1. The system shall allow instructors to create courses.\n2. The system shall allow instructors to upload learning materials.\n3. The system shall allow instructors to assess student performance.\n4. The system shall allow students to enroll in courses.\n5. The system shall allow students to access course content.\n6. The system shall allow students to submit assignments.\n7. The system shall allow students to take quizzes.\n8. The system shall provide discussion forums for students to participate in course discussions.\n9. The system shall allow instructors to grade assignments.\n10. The system shall allow administrators to manage user accounts.\n11. The system shall allow administrators to monitor course enrollment.\n12. The system shall allow administrators to generate reports on student progress.\n",
        "output": "@startuml\nleft to right direction\n\nactor Instructor\nactor Student\nactor Administrator\n\nrectangle Learning_Management_System {\n    usecase \"Create Courses\" as UC1\n    usecase \"Upload Learning Materials\" as UC2\n    usecase \"Assess Student Performance\" as UC3\n    usecase \"Enroll in Courses\" as UC4\n    usecase \"Access Course Content\" as UC5\n    usecase \"Submit Assignments\" as UC6\n    usecase \"Take Quizzes\" as UC7\n    usecase \"Participate in Discussions\" as UC8\n    usecase \"Grade Assignments\" as UC9\n    usecase \"Manage User Accounts\" as UC10\n    usecase \"Monitor Course Enrollment\" as UC11\n    usecase \"Generate Reports\" as UC12\n}\n\nInstructor --> UC1\nInstructor --> UC2\nInstructor --> UC3\nInstructor --> UC9\n\nStudent --> UC4\nStudent --> UC5\nStudent --> UC6\nStudent --> UC7\nStudent --> UC8\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Project Tracking System:\n1. The system shall allow team members to create tasks.\n2. The system shall allow team members to assign tasks to other team members.\n3. The system shall allow team members to set deadlines for tasks.\n4. The system shall allow team members to update task statuses.\n5. The system shall allow team members to track progress on tasks.\n6. The system shall provide communication features for team members to collaborate.\n7. The system shall generate reports on project progress.\n8. The system shall allow project managers to monitor project timelines.\n9. The system shall help project managers identify bottlenecks in the project.\n10. The system shall allow project managers to oversee project progress.\n11. The system shall allow project managers to allocate resources for tasks.\n12. The system shall help project managers ensure that project milestones are met.\n",
        "output": "@startuml\nleft to right direction\n\nactor TeamMember\nactor ProjectManager\n\nrectangle Project_Tracking_System {\n    usecase \"Create Tasks\" as UC1\n    usecase \"Assign Tasks\" as UC2\n    usecase \"Set Deadlines\" as UC3\n    usecase \"Update Task Status\" as UC4\n    usecase \"Track Progress\" as UC5\n    usecase \"Communicate with Team\" as UC6\n    usecase \"Generate Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Bottlenecks\" as UC9\n    usecase \"Oversee Project Progress\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Milestones\" as UC12\n}\n\nTeamMember --> UC1\nTeamMember --> UC2\nTeamMember --> UC3\nTeamMember --> UC4\nTeamMember --> UC5\nTeamMember --> UC6\nTeamMember --> UC7\n\nProjectManager --> UC8\nProjectManager --> UC9\nProjectManager --> UC10\nProjectManager --> UC11\nProjectManager --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Task Management System:\n1. The system shall allow users to create tasks.\n2. The system shall allow users to set priorities for tasks.\n3. The system shall allow users to set deadlines for task completion.\n4. The system shall allow users to update the status of tasks.\n5. The system shall allow users to track progress on tasks.\n6. The system shall allow users to categorize tasks based on different criteria.\n7. The system shall generate task lists for users.\n8. The system shall allow users to set reminders for tasks.\n9. The system shall allow users to organize tasks into projects.\n10. The system shall allow users to share tasks with collaborators.\n11. The system shall allow users to assign tasks to team members.\n12. The system shall notify users about task updates and deadlines.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Collaborator\n\nrectangle Task_Management_System {\n    usecase \"Create Tasks\" as UC1\n    usecase \"Set Priorities\" as UC2\n    usecase \"Set Deadlines\" as UC3\n    usecase \"Update Task Status\" as UC4\n    usecase \"Track Progress\" as UC5\n    usecase \"Categorize Tasks\" as UC6\n    usecase \"Generate Task Lists\" as UC7\n    usecase \"Set Reminders\" as UC8\n    usecase \"Organize Tasks\" as UC9\n    usecase \"Share Tasks\" as UC10\n    usecase \"Assign Tasks\" as UC11\n    usecase \"Receive Notifications\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\n\nCollaborator --> UC10\nCollaborator --> UC11\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Bug Tracking System:\n1. The system shall allow developers to log software bugs.\n2. The system shall allow developers to assign bugs to team members.\n3. The system shall allow developers to track the status of bug fixes.\n4. The system shall allow developers to update the status of bugs.\n5. The system shall allow developers to prioritize bugs based on severity.\n6. The system shall provide communication features for developers to collaborate on bug resolution.\n7. The system shall generate bug reports for tracking bug statistics.\n8. The system shall allow project managers to monitor bug resolution timelines.\n9. The system shall help project managers identify recurring bugs in the software.\n10. The system shall allow project managers to oversee the progress of bug resolution.\n11. The system shall allow project managers to allocate resources for fixing bugs.\n12. The system shall help project managers ensure software quality standards are met.\n",
        "output": "@startuml\nleft to right direction\n\nactor Developer\nactor ProjectManager\n\nrectangle Bug_Tracking_System {\n    usecase \"Log Bugs\" as UC1\n    usecase \"Assign Bugs\" as UC2\n    usecase \"Track Bug Fixes\" as UC3\n    usecase \"Update Bug Status\" as UC4\n    usecase \"Prioritize Bugs\" as UC5\n    usecase \"Communicate with Team\" as UC6\n    usecase \"Generate Bug Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Recurring Bugs\" as UC9\n    usecase \"Oversee Bug Resolution\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Software Quality\" as UC12\n}\n\nDeveloper --> UC1\nDeveloper --> UC2\nDeveloper --> UC3\nDeveloper --> UC4\nDeveloper --> UC5\nDeveloper --> UC6\nDeveloper --> UC7\n\nProjectManager --> UC8\nProjectManager --> UC9\nProjectManager --> UC10\nProjectManager --> UC11\nProjectManager --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Customer Support System:\n1. The system shall allow customer support agents to log customer inquiries.\n2. The system shall allow customer support agents to assign tickets to support agents.\n3. The system shall allow customer support agents to track ticket resolutions.\n4. The system shall allow customer support agents to update ticket statuses.\n5. The system shall allow customer support agents to prioritize tickets based on urgency.\n6. The system shall provide communication features for customer support agents to communicate with customers about issue resolutions.\n7. The system shall generate support reports for tracking customer inquiries and resolutions.\n8. The system shall allow managers to monitor ticket resolution timelines.\n9. The system shall help managers identify recurring customer issues.\n10. The system shall allow managers to oversee the progress of ticket resolutions.\n11. The system shall allow managers to allocate resources for resolving customer issues.\n12. The system shall help managers ensure customer satisfaction standards are met.\n",
        "output": "@startuml\nleft to right direction\n\nactor CustomerSupportAgent\nactor Manager\n\nrectangle Customer_Support_System {\n    usecase \"Log Customer Inquiries\" as UC1\n    usecase \"Assign Tickets\" as UC2\n    usecase \"Track Ticket Resolutions\" as UC3\n    usecase \"Update Ticket Status\" as UC4\n    usecase \"Prioritize Tickets\" as UC5\n    usecase \"Communicate with Customers\" as UC6\n    usecase \"Generate Support Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Recurring Issues\" as UC9\n    usecase \"Oversee Ticket Resolution\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Customer Satisfaction\" as UC12\n}\n\nCustomerSupportAgent --> UC1\nCustomerSupportAgent --> UC2\nCustomerSupportAgent --> UC3\nCustomerSupportAgent --> UC4\nCustomerSupportAgent --> UC5\nCustomerSupportAgent --> UC6\nCustomerSupportAgent --> UC7\n\nManager --> UC8\nManager --> UC9\nManager --> UC10\nManager --> UC11\nManager --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Help Desk System:\n1. The system shall allow users to log help desk tickets.\n2. The system shall allow support agents to assign tickets to agents.\n3. The system shall allow users and support agents to track ticket resolutions.\n4. The system shall allow support agents to update ticket statuses.\n5. The system shall allow support agents to prioritize tickets based on urgency.\n6. The system shall provide communication features for support agents to communicate with users regarding issue resolutions.\n7. The system shall generate help desk reports for tracking ticket statistics.\n8. The system shall allow managers to monitor ticket resolution timelines.\n9. The system shall help managers identify recurring technical issues.\n10. The system shall allow managers to oversee the progress of ticket resolutions.\n11. The system shall allow managers to allocate resources for resolving tickets.\n12. The system shall help managers ensure that service level agreements are met.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor SupportAgent\nactor Manager\n\nrectangle Help_Desk_System {\n    usecase \"Log Help Desk Tickets\" as UC1\n    usecase \"Assign Tickets\" as UC2\n    usecase \"Track Ticket Resolutions\" as UC3\n    usecase \"Update Ticket Status\" as UC4\n    usecase \"Prioritize Tickets\" as UC5\n    usecase \"Communicate with Users\" as UC6\n    usecase \"Generate Help Desk Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Recurring Issues\" as UC9\n    usecase \"Oversee Ticket Resolution\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Service Level Agreements\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nSupportAgent --> UC3\nSupportAgent --> UC4\nSupportAgent --> UC5\nSupportAgent --> UC6\nSupportAgent --> UC7\n\nManager --> UC8\nManager --> UC9\nManager --> UC10\nManager --> UC11\nManager --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Library Management System:\n1. The system shall allow librarians to catalog books.\n2. The system shall allow librarians to manage patron accounts.\n3. The system shall allow librarians to track book loans.\n4. The system shall allow patrons to search for books in the library catalog.\n5. The system shall allow patrons to check out books from the library.\n6. The system shall allow patrons to renew book loans.\n7. The system shall generate library reports for tracking book circulation and other statistics.\n8. The system shall allow librarians to monitor book circulation.\n9. The system shall help librarians identify overdue books.\n10. The system shall allow administrators to oversee library operations.\n11. The system shall allow administrators to allocate resources for the library.\n12. The system shall help administrators ensure that library policies are enforced.\n",
        "output": "@startuml\nleft to right direction\n\nactor Librarian\nactor Patron\nactor Administrator\n\nrectangle Library_Management_System {\n    usecase \"Catalog Books\" as UC1\n    usecase \"Manage Patron Accounts\" as UC2\n    usecase \"Track Book Loans\" as UC3\n    usecase \"Search for Books\" as UC4\n    usecase \"Check Out Books\" as UC5\n    usecase \"Renew Book Loans\" as UC6\n    usecase \"Generate Library Reports\" as UC7\n    usecase \"Monitor Book Circulation\" as UC8\n    usecase \"Identify Overdue Books\" as UC9\n    usecase \"Oversee Library Operations\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Enforce Library Policies\" as UC12\n}\n\nLibrarian --> UC1\nLibrarian --> UC2\nLibrarian --> UC3\nLibrarian --> UC7\nLibrarian --> UC8\nLibrarian --> UC9\n\nPatron --> UC4\nPatron --> UC5\nPatron --> UC6\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Hotel Management System:\n1. The system shall allow hotel staff to create guest reservations.\n2. The system shall allow hotel staff to assign rooms to guests.\n3. The system shall allow hotel staff to track guest check-ins and check-outs.\n4. The system shall allow guests to book rooms.\n5. The system shall allow guests to request hotel services.\n6. The system shall allow guests to provide feedback on their stay.\n7. The system shall generate reports for hotel staff on hotel operations.\n8. The system shall allow hotel staff to monitor room availability.\n9. The system shall help hotel staff identify guest preferences.\n10. The system shall allow managers to oversee hotel operations.\n11. The system shall allow managers to allocate resources effectively.\n12. The system shall help managers ensure guest satisfaction.\n",
        "output": "@startuml\nleft to right direction\n\nactor HotelStaff\nactor Guest\nactor Manager\n\nrectangle Hotel_Management_System {\n    usecase \"Create Guest Reservations\" as UC1\n    usecase \"Assign Rooms\" as UC2\n    usecase \"Track Check-Ins and Check-Outs\" as UC3\n    usecase \"Book Rooms\" as UC4\n    usecase \"Request Services\" as UC5\n    usecase \"Provide Feedback\" as UC6\n    usecase \"Generate Hotel Reports\" as UC7\n    usecase \"Monitor Room Availability\" as UC8\n    usecase \"Identify Guest Preferences\" as UC9\n    usecase \"Oversee Hotel Operations\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Guest Satisfaction\" as UC12\n}\n\nHotelStaff --> UC1\nHotelStaff --> UC2\nHotelStaff --> UC3\nHotelStaff --> UC7\nHotelStaff --> UC8\nHotelStaff --> UC9\n\nGuest --> UC4\nGuest --> UC5\nGuest --> UC6\n\nManager --> UC10\nManager --> UC11\nManager --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for National Health ID System:\n1. The system shall allow patients to create a unique Health ID.\n2. The system shall allow health data consent managers to seek a patient’s consent for sharing health data.\n3. The system shall maintain the health records of patients digitally.\n4. The system shall allow health authorities to use health records for patient diagnosis.\n5. The system shall allow health authorities to record medications, including vaccinations, for newborns and patients.\n",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor HealthAuthority\nactor HealthDataConsentManager\n\nrectangle National_Health_ID_System {\n    usecase \"Create Health ID\" as UC1\n    usecase \"Seek Patient's Consent\" as UC2\n    usecase \"Maintain Health Records\" as UC3\n    usecase \"Use for Patient Diagnosis\" as UC4\n    usecase \"Record Medications\" as UC5\n}\n\nPatient --> UC1\nPatient --> UC3\n\nHealthDataConsentManager --> UC2\nHealthAuthority --> UC5\nHealthAuthority --> UC4\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Device Donation System:\n1. The system shall allow donors to enter the details of the device they are willing to donate.\n2. The system shall allow donors to enter their address details for pickup.\n3. The system shall notify donors to wait for the approval of the device.\n4. The system shall allow admins to verify the details of the donated device.\n5. The system shall allow admins to assign a pickup executive to collect the device.\n6. The system shall allow volunteers to join the team to help with device pickups.\n",
        "output": "@startuml\nleft to right direction\n\nactor Donor\nactor Admin\nactor Volunteer\n\nrectangle Device_Donation_System {\n    usecase \"Enter Device Details\" as UC1\n    usecase \"Enter Address Details\" as UC2\n    usecase \"Wait for Approval\" as UC3\n    usecase \"Verify Device Details\" as UC4\n    usecase \"Assign Pickup Executive\" as UC5\n    usecase \"Join a Team\" as UC6\n}\n\nDonor --> UC1\nDonor --> UC2\nDonor --> UC3\n\nAdmin --> UC4\nAdmin --> UC5\n\nVolunteer --> UC6\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Car Rental System:\n1. The system shall allow users to search for available cars for rental.\n2. The system shall allow users to select a car for rental from the available options.\n3. The system shall allow users to make a reservation for a rental car.\n4. The system shall allow users to specify the rental duration.\n5. The system shall allow users to specify the pick-up and drop-off locations for the rental car.\n6. The system shall generate rental agreements for car rentals.\n7. The system shall allow administrators to track rental durations for cars.\n8. The system shall process payments for car rentals.\n9. The system shall allow administrators to manage car listings.\n10. The system shall allow administrators to monitor reservations.\n11. The system shall allow administrators to confirm the availability of cars for rental.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Administrator\n\nrectangle Car_Rental_System {\n    usecase \"Search for Available Cars\" as UC1\n    usecase \"Select Car for Rental\" as UC2\n    usecase \"Make Reservation\" as UC3\n    usecase \"Specify Rental Duration\" as UC4\n    usecase \"Specify Pick&Drop Location\" as UC5\n    usecase \"Generate Rental Agreements\" as UC7\n    usecase \"Track Rental Durations\" as UC8\n    usecase \"Process Payments\" as UC9\n    usecase \"Manage Car Listings\" as UC10\n    usecase \"Monitor Reservations\" as UC11\n    usecase \"Confirm Car Availability\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nAdministrator --> UC7\nAdministrator --> UC8\nAdministrator --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Online College Magazine System:\n1. The system shall allow users (students, faculty, contributors) to manage articles, including writing, editing, and publishing.\n2. The system shall allow users to rate published articles.\n3. The system shall allow users to comment on published articles.\n4. The system shall allow users to organize articles based on appropriate categories.\n5. The system shall allow guests to read, comment on, and rate articles.\n6. The system shall allow guests to contribute content for the magazine if interested.\n7. The system shall allow moderators to review articles before they are published.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Guest\nactor Moderator\n\nUser <|-- Student\nUser <|-- Faculty\nUser <|-- Contributor\n\nrectangle Online_College_Magazine_System {\n    usecase \"Manage Articles\" as UC1\n    usecase \"Rate Articles\" as UC2\n    usecase \"Comment on Articles\" as UC3\n    usecase \"Organize Articles\" as UC4\n    usecase \"Generate Content\" as UC5\n    usecase \"Review Articles\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\n\nGuest --> UC2\nGuest --> UC3\nGuest --> UC5\n\nModerator --> UC6\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Crime Record Management System:\n1. The system shall allow petitioners to file a First Incident Report (FIR).\n2. The system shall allow victims to record complaints.\n3. The system shall allow tracking of criminals, including those arrested, to be arrested, or escaped.\n4. The system shall allow investigating officers to manage cases, including updating and tracking the status of cases.\n5. The system shall allow investigating officers to monitor crime activities throughout the state.\n",
        "output": "@startuml\nleft to right direction\n\nactor Petitioner\nactor Victim\nactor Accused\nactor InvestigatingOfficer\n\nrectangle Crime_Record_Management_System {\n    usecase \"File FIR\" as UC1\n    usecase \"Record Complaints\" as UC2\n    usecase \"Track Criminals\" as UC3\n    usecase \"Manage Cases\" as UC4\n    usecase \"Monitor Crime Activities\" as UC5\n}\n\nPetitioner --> UC1\nVictim --> UC2\nAccused --> UC3\nInvestigatingOfficer --> UC4\nInvestigatingOfficer --> UC5\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Smart Traffic System:\n1. The system shall allow traffic police to monitor roads with high traffic levels.\n2. The system shall detect helmet and seat belt violations using image processing.\n3. The system shall submit details of driver violations to the traffic police when the driver violates the law more than two times.\n4. The system shall operate street lights based on population density at night to save electricity.\n5. The system shall allow traffic police to cancel the license of drivers who violate the law.\n6. The system shall regulate automated traffic lights to control traffic flow and avoid congestion.\n",
        "output": "@startuml\nleft to right direction\n\nactor TrafficPolice\n\nrectangle Smart_Traffic_System {\n    usecase \"Monitor Roads\" as UC1\n    usecase \"Detect Helmet/Seat Belt\" as UC2\n    usecase \"Submit Driver Violations\" as UC3\n    usecase \"Operate Street Lights\" as UC4\n    usecase \"Cancel License\" as UC5\n    usecase \"Regulate Traffic Lights\" as UC6\n}\n\nUC2 --> UC3 : <<extend>>\n\nTrafficPolice --> UC1\nTrafficPolice --> UC2\nTrafficPolice --> UC3\nTrafficPolice --> UC5\nUC3 --> UC5 :<<include>>\n\nUC1 --> UC4 : <<include>>\nUC1 --> UC6 : <<include>>\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Job Portal System:\n1. The system shall allow job seekers to view available job listings.\n2. The system shall provide job availability predictions to job seekers.\n3. The system shall allow job seekers to search for jobs using filters like location, sector, and eligibility.\n4. The system shall allow job seekers and companies to register profiles.\n5. The system shall allow companies to shortlist candidates for job positions.\n6. The system shall allow companies to post job listings.\n7. The system shall allow job seekers to apply for jobs.\n",
        "output": "@startuml\nleft to right direction\n\nactor JobSeeker\nactor Company\n\nrectangle Job_Portal_System {\n    usecase \"See Available Job Listings\" as UC1\n    usecase \"See Job Availability Predictions\" as UC2\n    usecase \"Search Jobs by Filters\" as UC3\n    usecase \"Register Profile\" as UC4\n    usecase \"Shortlist Candidates\" as UC5\n    usecase \"Post Job Listings\" as UC6\n    usecase \"Apply for Job\" as UC7\n}\n\nJobSeeker --> UC1\nJobSeeker --> UC2\nJobSeeker --> UC3\nJobSeeker --> UC4\nJobSeeker --> UC7\n\nCompany --> UC4\nCompany --> UC5\nCompany --> UC6\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Aarogya Setu App:\n1. The system shall help users identify COVID-19 hotspots in their area.\n2. The system shall perform contact tracing to identify possible COVID-19 exposures.\n3. The system shall notify users about their proximity to nearby infections or hotspots.\n4. The system shall allow users to self-identify their risk based on symptoms and exposure.\n5. The system shall monitor users' health assessments based on their self-reported data.\n6. The system shall help users identify COVID-19 symptoms.\n7. The system shall send users alerts about the best safety precautions.\n8. The system shall provide users with a list of quarantine measures for those at high risk.\n9. The system shall assist users who have a travel history with self-quarantine measures.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Aarogya_Setu_App {\n    usecase \"Identify Hotspots\" as UC1\n    usecase \"Contact Tracing\" as UC2\n    usecase \"Check Proximity to Infection\" as UC3\n    usecase \"Self-Identify Risk\" as UC4\n    usecase \"Monitor Health Assessment\" as UC5\n    usecase \"Identify Symptoms\" as UC6\n    usecase \"Receive Safety Precautions Alerts\" as UC7\n    usecase \"Access Quarantine Measures List\" as UC8\n    usecase \"Get Self-Quarantine Help\" as UC9\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Wedding Planner System:\n1. The system shall allow couples to create wedding budgets.\n2. The system shall allow couples to select venues for their wedding.\n3. The system shall allow couples to hire vendors for services like catering, photography, and entertainment.\n4. The system shall allow couples to manage guest lists.\n5. The system shall allow couples to send invitations to their guests.\n6. The system shall allow couples to track RSVPs from guests.\n7. The system shall allow couples to create wedding timelines for event planning.\n8. The system shall allow couples to manage seating arrangements for the wedding event.\n9. The system shall allow couples to coordinate event logistics.\n10. The system shall allow wedding planners to oversee the planning process.\n11. The system shall allow wedding planners to communicate with vendors.\n12. The system shall allow wedding planners to ensure the smooth execution of the wedding events.\n",
        "output": "@startuml\nleft to right direction\n\nactor Couple\nactor WeddingPlanner\n\nrectangle Wedding_Planner_System {\n    usecase \"Create Wedding Budget\" as UC1\n    usecase \"Select Venues\" as UC2\n    usecase \"Hire Vendors\" as UC3\n    usecase \"Manage Guest Lists\" as UC4\n    usecase \"Send Invitations\" as UC5\n    usecase \"Track RSVPs\" as UC6\n    usecase \"Create Wedding Timelines\" as UC7\n    usecase \"Manage Seating Arrangements\" as UC8\n    usecase \"Coordinate Event Logistics\" as UC9\n    usecase \"Oversee Planning Process\" as UC10\n    usecase \"Communicate with Vendors\" as UC11\n    usecase \"Ensure Smooth Execution\" as UC12\n}\n\nCouple --> UC1\nCouple --> UC2\nCouple --> UC3\nCouple --> UC4\nCouple --> UC5\nCouple --> UC6\nCouple --> UC7\nCouple --> UC8\nCouple --> UC9\n\nWeddingPlanner --> UC10\nWeddingPlanner --> UC11\nWeddingPlanner --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Arcade Management System:\n1. The system shall allow arcade owners to add new games.\n2. The system shall allow arcade owners to set game prices.\n3. The system shall allow arcade owners to track game usage.\n4. The system shall allow customers to purchase tickets to play games.\n5. The system shall allow customers to play games using purchased tickets.\n6. The system shall allow customers to redeem tickets for prizes.\n7. The system shall allow arcade owners to manage customer accounts.\n8. The system shall track ticket balances for customers.\n9. The system shall generate reports on game popularity and arcade performance.\n10. The system shall allow arcade owners to oversee arcade operations.\n11. The system shall allow arcade owners to allocate resources effectively.\n12. The system shall allow arcade owners to ensure customer satisfaction.\n",
        "output": "@startuml\nleft to right direction\n\nactor ArcadeOwner\nactor Customer\n\nrectangle Arcade_Management_System {\n    usecase \"Add New Games\" as UC1\n    usecase \"Set Game Prices\" as UC2\n    usecase \"Track Game Usage\" as UC3\n    usecase \"Purchase Tickets\" as UC4\n    usecase \"Play Games\" as UC5\n    usecase \"Redeem Tickets\" as UC6\n    usecase \"Manage Customer Accounts\" as UC7\n    usecase \"Track Ticket Balances\" as UC8\n    usecase \"Generate Reports\" as UC9\n    usecase \"Oversee Arcade Operations\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Customer Satisfaction\" as UC12\n}\n\nArcadeOwner --> UC1\nArcadeOwner --> UC2\nArcadeOwner --> UC3\nArcadeOwner --> UC7\nArcadeOwner --> UC8\nArcadeOwner --> UC9\nArcadeOwner --> UC10\nArcadeOwner --> UC11\nArcadeOwner --> UC12\n\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Blind Navigation Mobile App:\n1. The system shall provide audio directions to blind users based on GPS data.\n2. The system shall allow blind users to search for nearby places of interest.\n3. The system shall allow blind users to plan routes for navigation.\n4. The system shall provide real-time updates on the user’s location during navigation.\n5. The system shall allow users to set their preferences for navigation and audio feedback.\n6. The system shall allow users to save their favorite locations for future reference.\n7. The system shall provide access to emergency services in case of need.\n",
        "output": "@startuml\nleft to right direction\n\nactor BlindUser\n\nrectangle Blind_Navigation_App {\n    usecase \"Get Audio Directions\" as UC1\n    usecase \"Search for Nearby Places\" as UC2\n    usecase \"Plan Routes\" as UC3\n    usecase \"Receive Real-Time Updates\" as UC4\n    usecase \"Set Preferences\" as UC5\n    usecase \"Save Favorite Locations\" as UC6\n    usecase \"Access Emergency Services\" as UC7\n}\n\nBlindUser --> UC1\nBlindUser --> UC2\nBlindUser --> UC3\nBlindUser --> UC4\nBlindUser --> UC5\nBlindUser --> UC6\nBlindUser --> UC7\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Sign Language Translator Mobile App:\n1. The system shall translate sign language gestures into text and speech.\n2. The system shall allow deaf users to communicate with hearing users by converting signed words and phrases.\n3. The system shall convert sign language gestures into text for display.\n4. The system shall convert sign language gestures into spoken words.\n5. The system shall allow users to customize sign language dictionaries.\n6. The system shall allow users to save common phrases for quick access.\n7. The system shall allow users to adjust translation settings for personalized usage.\n",
        "output": "@startuml\nleft to right direction\n\nactor DeafUser\nactor HearingUser\n\nrectangle Sign_Language_Translator_App {\n    usecase \"Translate Sign Language Gestures\" as UC1\n    usecase \"Communicate with Hearing Users\" as UC2\n    usecase \"Convert Gestures to Text\" as UC3\n    usecase \"Convert Gestures to Speech\" as UC4\n    usecase \"Customize Dictionaries\" as UC5\n    usecase \"Save Common Phrases\" as UC6\n    usecase \"Adjust Translation Settings\" as UC7\n}\n\nDeafUser --> UC1\nDeafUser --> UC2\nDeafUser --> UC3\nDeafUser --> UC4\nDeafUser --> UC5\nDeafUser --> UC6\nDeafUser --> UC7\n\nHearingUser --> UC2\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Glacier Melting Prediction System:\n1. The system shall allow scientists to input data related to glacier melting.\n2. The system shall allow scientists to run simulations for predicting glacier melting.\n3. The system shall allow scientists to visualize the results of glacier melting predictions.\n4. The system shall generate reports on glacier melting and its potential impact.\n5. The system shall allow scientists to share data with other researchers.\n6. The system shall identify trends in glacier melting patterns over time.\n",
        "output": "@startuml\nleft to right direction\n\nactor Scientist\n\nrectangle Glacier_Melting_Prediction_System {\n    usecase \"Input Data\" as UC1\n    usecase \"Run Simulations\" as UC2\n    usecase \"Visualize Results\" as UC3\n    usecase \"Generate Reports\" as UC4\n    usecase \"Share Data\" as UC5\n    usecase \"Identify Trends\" as UC6\n}\n\nScientist --> UC1\nScientist --> UC2\nScientist --> UC3\nScientist --> UC4\nScientist --> UC5\nScientist --> UC6\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Air Quality Monitoring System:\n1. The system shall allow environmental agencies to monitor real-time air quality data.\n2. The system shall allow environmental agencies to set pollution thresholds for various air pollutants.\n3. The system shall issue alerts when air pollution levels exceed set thresholds.\n4. The system shall generate air quality reports based on collected data.\n5. The system shall map pollution sources in urban areas.\n6. The system shall identify trends in air pollution patterns over time.\n",
        "output": "@startuml\nleft to right direction\n\nactor EnvironmentalAgency\n\nrectangle Air_Quality_Monitoring_System {\n    usecase \"Monitor Air Quality Data\" as UC1\n    usecase \"Set Pollution Thresholds\" as UC2\n    usecase \"Issue Pollution Alerts\" as UC3\n    usecase \"Generate Reports\" as UC4\n    usecase \"Map Pollution Sources\" as UC5\n    usecase \"Identify Trends\" as UC6\n}\n\nEnvironmentalAgency --> UC1\nEnvironmentalAgency --> UC2\nEnvironmentalAgency --> UC3\nEnvironmentalAgency --> UC4\nEnvironmentalAgency --> UC5\nEnvironmentalAgency --> UC6\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Diagramming Tool:\n1. The system shall allow software engineers to create UML diagrams.\n2. The system shall allow software engineers to create flowcharts and other visual representations.\n3. The system shall allow software engineers to customize visual elements such as shapes and connectors.\n4. The system shall allow software engineers to collaborate on diagrams with team members.\n5. The system shall allow software engineers to share diagrams with other users.\n6. The system shall allow software engineers to export diagrams in various formats.\n7. The system shall provide version control for diagrams.\n8. The system shall provide diagram templates for easy use.\n9. The system shall integrate with other software development tools.\n",
        "output": "@startuml\nleft to right direction\n\nactor SoftwareEngineer\nactor TeamMember\n\nrectangle Diagramming_Tool {\n    usecase \"Create UML Diagrams\" as UC1\n    usecase \"Create Flowcharts\" as UC2\n    usecase \"Customize Visual Elements\" as UC3\n    usecase \"Collaborate on Diagrams\" as UC4\n    usecase \"Share Diagrams\" as UC5\n    usecase \"Export Diagrams\" as UC6\n    usecase \"Version Control\" as UC7\n    usecase \"Diagram Templates\" as UC8\n    usecase \"Integrate with Other Tools\" as UC9\n}\n\nSoftwareEngineer --> UC1\nSoftwareEngineer --> UC2\nSoftwareEngineer --> UC3\nSoftwareEngineer --> UC4\nSoftwareEngineer --> UC5\nSoftwareEngineer --> UC6\nSoftwareEngineer --> UC7\nSoftwareEngineer --> UC8\nSoftwareEngineer --> UC9\n\nTeamMember --> UC4\nTeamMember --> UC5\nTeamMember --> UC6\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Fitness Application:\n1. The system shall allow users to log exercises performed.\n2. The system shall track calories burned by users during workouts.\n3. The system shall allow users to create personalized workout plans.\n4. The system shall allow users to set fitness goals.\n5. The system shall provide users with workout summaries.\n6. The system shall send users reminders for scheduled workouts.\n7. The system shall allow users to track their nutrition intake.\n8. The system shall allow users to log their meals.\n9. The system shall calculate users' daily calorie intake.\n10. The system shall allow users to monitor their overall nutrition intake.\n11. The system shall provide users with meal summaries.\n12. The system shall send users alerts for meal planning.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Fitness_Application {\n    usecase \"Log Exercises\" as UC1\n    usecase \"Track Calories Burned\" as UC2\n    usecase \"Create Workout Plans\" as UC3\n    usecase \"Set Fitness Goals\" as UC4\n    usecase \"View Workout Summaries\" as UC5\n    usecase \"Receive Workout Reminders\" as UC6\n    usecase \"Track Nutrition\" as UC7\n    usecase \"Log Meals\" as UC8\n    usecase \"Calculate Calorie Intake\" as UC9\n    usecase \"Monitor Nutrition Intake\" as UC10\n    usecase \"View Meal Summaries\" as UC11\n    usecase \"Receive Meal Planning Alerts\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Hostel Finding Application:\n1. The system shall allow students to search for hostels based on location, price, and amenities.\n2. The system shall allow students to book hostel accommodations online.\n3. The system shall provide filters for refining search results.\n4. The system shall allow students to view hostel reviews.\n5. The system shall allow students to compare hostel options.\n6. The system shall allow students to manage their bookings.\n7. The system shall send students booking confirmations.\n8. The system shall provide directions to hostels after booking.\n",
        "output": "@startuml\nleft to right direction\n\nactor Student\n\nrectangle Hostel_Finding_Application {\n    usecase \"Search Hostels\" as UC1\n    usecase \"Book Hostel Accommodations\" as UC2\n    usecase \"Filter Search Results\" as UC3\n    usecase \"View Hostel Reviews\" as UC4\n    usecase \"Compare Hostel Options\" as UC5\n    usecase \"Manage Bookings\" as UC6\n    usecase \"Receive Booking Confirmations\" as UC7\n    usecase \"Access Directions to Hostels\" as UC8\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\nStudent --> UC6\nStudent --> UC7\nStudent --> UC8\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Messaging Application:\n1. The system shall allow users to send text messages to their contacts.\n2. The system shall allow users to send photos to their contacts.\n3. The system shall allow users to send videos to their contacts.\n4. The system shall allow users to send voice messages to their contacts.\n5. The system shall support group chats for multiple participants.\n6. The system shall provide message encryption for secure communication.\n7. The system shall allow users to share multimedia content, including photos, videos, and voice messages.\n8. The system shall allow users to create chat groups.\n9. The system shall allow users to add or remove participants from chat groups.\n10. The system shall allow users to customize chat settings, including notifications and privacy options.\n11. The system shall send notifications for new messages and updates.\n12. The system shall allow users to archive messages for future reference.\n13. The system shall allow users to block contacts from sending messages.\n14. The system shall allow users to manage message storage on their devices.\n15. The system shall allow users to view their message history.\n16. The system shall send alerts for incoming messages.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Messaging_Application {\n    usecase \"Send Text Messages\" as UC1\n    usecase \"Send Photos\" as UC2\n    usecase \"Send Videos\" as UC3\n    usecase \"Send Voice Messages\" as UC4\n    usecase \"Support Group Chats\" as UC5\n    usecase \"Encrypt Messages\" as UC6\n    usecase \"Share Multimedia\" as UC7\n    usecase \"Create Chat Groups\" as UC8\n    usecase \"Add/Remove Participants\" as UC9\n    usecase \"Customize Chat Settings\" as UC10\n    usecase \"Send Notifications\" as UC11\n    usecase \"Archive Messages\" as UC12\n    usecase \"Block Contacts\" as UC13\n    usecase \"Manage Message Storage\" as UC14\n    usecase \"View Message Histories\" as UC15\n    usecase \"Receive Message Alerts\" as UC16\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\nUser --> UC16\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Social Media Application:\n1. The system shall allow users to share photos with their friends.\n2. The system shall allow users to share videos with their friends.\n3. The system shall allow users to share messages with their friends.\n4. The system shall support multimedia sharing, including photos, videos, and messages.\n5. The system shall support chat messaging between users.\n6. The system shall support story posting for users to share temporary content.\n7. The system shall allow users to create posts for sharing on their profiles.\n8. The system shall allow users to view stories posted by their friends.\n9. The system shall allow users to send direct messages to their contacts.\n10. The system shall allow users to add friends to their social network.\n11. The system shall allow users to follow other users' profiles.\n12. The system shall allow users to comment on posts.\n13. The system shall allow users to manage their privacy settings.\n14. The system shall provide an activity feed for users to view new content from their friends.\n15. The system shall send notifications to users for new posts, messages, and updates.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Social_Media_Application {\n    usecase \"Share Photos\" as UC1\n    usecase \"Share Videos\" as UC2\n    usecase \"Share Messages\" as UC3\n    usecase \"Support Multimedia Sharing\" as UC4\n    usecase \"Support Chat Messaging\" as UC5\n    usecase \"Support Story Posting\" as UC6\n    usecase \"Create Posts\" as UC7\n    usecase \"View Stories\" as UC8\n    usecase \"Send Direct Messages\" as UC9\n    usecase \"Add Friends\" as UC10\n    usecase \"Follow Users\" as UC11\n    usecase \"Comment on Posts\" as UC12\n    usecase \"Manage Privacy Settings\" as UC13\n    usecase \"View Activity Feeds\" as UC14\n    usecase \"Receive Notifications\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Logo Design Application:\n1. The system shall allow users to create custom logos for businesses, websites, and products.\n2. The system shall allow users to select colors for their logo designs.\n3. The system shall allow users to add text and graphics to their logos.\n4. The system shall allow users to customize logo templates.\n5. The system shall allow users to save their logo designs for future use.\n6. The system shall allow users to download their logos in various formats.\n7. The system shall allow users to share their logos on social media platforms.\n8. The system shall allow users to collaborate on logo design projects with other users.\n9. The system shall provide access to design tools for logo creation.\n10. The system shall allow users to manage their logo design projects.\n11. The system shall allow users to view their design history.\n12. The system shall provide users with design suggestions based on their project requirements.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Logo_Design_Application {\n    usecase \"Create Custom Logos\" as UC1\n    usecase \"Select Colors\" as UC2\n    usecase \"Add Text and Graphics\" as UC3\n    usecase \"Customize Logo Templates\" as UC4\n    usecase \"Save Logo Designs\" as UC5\n    usecase \"Download Logos\" as UC6\n    usecase \"Share Logos\" as UC7\n    usecase \"Collaborate on Projects\" as UC8\n    usecase \"Access Design Tools\" as UC9\n    usecase \"Manage Logo Projects\" as UC10\n    usecase \"View Design Histories\" as UC11\n    usecase \"Receive Design Suggestions\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Daraz E-Commerce Platform:\n1. The system shall allow users to browse products available for sale.\n2. The system shall allow users to add items to their cart for purchase.\n3. The system shall allow users to make purchases online.\n4. The system shall support product categories for easy browsing.\n5. The system shall provide search filters for narrowing down product searches.\n6. The system shall offer product recommendations to users based on their preferences.\n7. The system shall allow users to create accounts for managing their shopping experience.\n8. The system shall allow users to view their order histories.\n9. The system shall allow users to track the shipment of their orders.\n10. The system shall process payments for purchases made by users.\n11. The system shall manage inventory for products listed on the platform.\n12. The system shall generate sales reports for tracking sales performance.\n13. The system shall allow administrators to add new products to the platform.\n14. The system shall allow administrators to update existing product listings.\n15. The system shall allow administrators to monitor user activity on the platform.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Administrator\n\nrectangle Daraz_E-Commerce_Platform {\n    usecase \"Browse Products\" as UC1\n    usecase \"Add Items to Cart\" as UC2\n    usecase \"Make Purchases\" as UC3\n    usecase \"Support Product Categories\" as UC4\n    usecase \"Support Search Filters\" as UC5\n    usecase \"Provide Product Recommendations\" as UC6\n    usecase \"Create Accounts\" as UC7\n    usecase \"View Order Histories\" as UC8\n    usecase \"Track Order Shipments\" as UC9\n    usecase \"Process Payments\" as UC10\n    usecase \"Manage Inventory\" as UC11\n    usecase \"Generate Sales Reports\" as UC12\n    usecase \"Add New Products\" as UC13\n    usecase \"Update Product Listings\" as UC14\n    usecase \"Monitor User Activity\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\n\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Bidding Application:\n1. The system shall allow users to participate in online auctions.\n2. The system shall allow users to place bids on auction items.\n3. The system shall allow users to win auctions by placing the highest bid.\n4. The system shall support different auction categories for easy navigation.\n5. The system shall provide notifications for new bids and auction updates.\n6. The system shall include countdown timers for auctions.\n7. The system shall allow users to create accounts for managing their bidding activities.\n8. The system shall allow users to view available auction listings.\n9. The system shall allow users to track their bid histories.\n10. The system shall allow users to manage their auction wins.\n11. The system shall send auction alerts to users.\n12. The system shall allow users to manage their auction activities.\n13. The system shall allow users to view auction results after bidding ends.\n14. The system shall provide users with payment instructions after winning an auction.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Bidding_Application {\n    usecase \"Participate in Online Auctions\" as UC1\n    usecase \"Place Bids on Items\" as UC2\n    usecase \"Win Auctions\" as UC3\n    usecase \"Support Auction Categories\" as UC4\n    usecase \"Provide Bid Notifications\" as UC5\n    usecase \"Include Auction Countdowns\" as UC6\n    usecase \"Create Accounts\" as UC7\n    usecase \"View Auction Listings\" as UC8\n    usecase \"Track Bid Histories\" as UC9\n    usecase \"Manage Auction Wins\" as UC10\n    usecase \"Receive Auction Alerts\" as UC11\n    usecase \"Manage Auction Activities\" as UC12\n    usecase \"View Auction Results\" as UC13\n    usecase \"Receive Payment Instructions\" as UC14\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for House Helper/Maid Finding Application:\n1. The system shall allow users to search for domestic helpers based on services, availability, and ratings.\n2. The system shall allow users to hire domestic helpers for household chores.\n3. The system shall allow users to view helper profiles, including services and ratings.\n4. The system shall allow users to request services from domestic helpers.\n5. The system shall allow users to schedule appointments with helpers.\n6. The system shall allow users to manage their bookings for helper services.\n7. The system shall track the service history of domestic helpers.\n8. The system shall allow users to provide feedback and ratings for domestic helpers.\n9. The system shall allow users to manage their preferences for selecting helpers.\n10. The system shall allow users to view service summaries after appointments.\n11. The system shall send users reminders for scheduled services.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle House_Helper_Finding_Application {\n    usecase \"Search for Helpers\" as UC1\n    usecase \"Hire Domestic Helpers\" as UC2\n    usecase \"View Helper Profiles\" as UC3\n    usecase \"Request Services\" as UC4\n    usecase \"Schedule Appointments\" as UC5\n    usecase \"Manage Bookings\" as UC6\n    usecase \"Track Service Histories\" as UC7\n    usecase \"Provide Feedback on Helpers\" as UC8\n    usecase \"Manage Helper Preferences\" as UC9\n    usecase \"View Service Summaries\" as UC10\n    usecase \"Receive Service Reminders\" as UC11\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Pharmaceutical Supply Chain Management System:\n1. The system shall allow pharmaceutical companies to track inventory of pharmaceutical products.\n2. The system shall allow pharmaceutical companies to manage orders for products.\n3. The system shall allow pharmaceutical companies to monitor shipments of pharmaceutical products.\n4. The system shall allow pharmaceutical companies to input production data for product management.\n5. The system shall allow pharmaceutical companies to generate purchase orders.\n6. The system shall allow pharmaceutical companies to track product deliveries.\n7. The system shall allow pharmaceutical companies to manage supplier relationships.\n8. The system shall allow pharmaceutical companies to track sales data.\n9. The system shall generate reports on product performance for pharmaceutical companies.\n10. The system shall allow administrators to oversee supply chain operations.\n11. The system shall allow administrators to allocate resources for supply chain management.\n12. The system shall allow administrators to ensure product quality across the supply chain.\n",
        "output": "@startuml\nleft to right direction\n\nactor PharmaceuticalCompany\nactor Administrator\n\nrectangle Pharmaceutical_Supply_Chain_Management_System {\n    usecase \"Track Inventory\" as UC1\n    usecase \"Manage Orders\" as UC2\n    usecase \"Monitor Shipments\" as UC3\n    usecase \"Input Production Data\" as UC4\n    usecase \"Generate Purchase Orders\" as UC5\n    usecase \"Track Product Deliveries\" as UC6\n    usecase \"Manage Suppliers\" as UC7\n    usecase \"Track Sales Data\" as UC8\n    usecase \"Generate Reports\" as UC9\n    usecase \"Oversee Operations\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Product Quality\" as UC12\n}\n\nPharmaceuticalCompany --> UC1\nPharmaceuticalCompany --> UC2\nPharmaceuticalCompany --> UC3\nPharmaceuticalCompany --> UC4\nPharmaceuticalCompany --> UC5\nPharmaceuticalCompany --> UC6\nPharmaceuticalCompany --> UC7\nPharmaceuticalCompany --> UC8\nPharmaceuticalCompany --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Learn How to Code Application:\n1. The system shall allow users to learn programming languages through interactive tutorials.\n2. The system shall allow users to practice coding exercises to improve their skills.\n3. The system shall allow users to build software projects using project templates.\n4. The system shall provide coding tutorials for various programming languages.\n5. The system shall support code editors for users to write and test code.\n6. The system shall include project templates to assist users in building software projects.\n7. The system shall allow users to create accounts for managing their learning progress.\n8. The system shall allow users to view coding lessons provided by the platform.\n9. The system shall allow users to complete coding challenges to test their knowledge.\n10. The system shall track users' coding progress over time.\n11. The system shall allow users to manage code repositories for their projects.\n12. The system shall allow users to share code snippets with other users.\n13. The system shall allow users to manage their coding preferences.\n14. The system shall allow users to view their project histories.\n15. The system shall provide users with coding tips and suggestions to improve their skills.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Learn_How_to_Code_Application {\n    usecase \"Learn Programming Languages\" as UC1\n    usecase \"Practice Coding Exercises\" as UC2\n    usecase \"Build Software Projects\" as UC3\n    usecase \"Provide Coding Tutorials\" as UC4\n    usecase \"Support Code Editors\" as UC5\n    usecase \"Include Project Templates\" as UC6\n    usecase \"Create Accounts\" as UC7\n    usecase \"View Coding Lessons\" as UC8\n    usecase \"Complete Coding Challenges\" as UC9\n    usecase \"Track Coding Progress\" as UC10\n    usecase \"Manage Code Repositories\" as UC11\n    usecase \"Share Code Snippets\" as UC12\n    usecase \"Manage Coding Preferences\" as UC13\n    usecase \"View Project Histories\" as UC14\n    usecase \"Receive Coding Tips\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Data Visualization Application:\n1. The system shall allow users to create visual representations of data.\n2. The system shall allow users to analyze trends based on the visualized data.\n3. The system shall allow users to present insights derived from data visualizations.\n4. The system shall provide data import tools for bringing in external data sets.\n5. The system shall support chart templates to assist users in visualizing data.\n6. The system shall include customization options for visual elements in charts.\n7. The system shall allow users to import data sets from various sources.\n8. The system shall allow users to create charts based on imported data.\n9. The system shall allow users to customize chart styles according to their preferences.\n10. The system shall allow users to save their visualizations for future reference.\n11. The system shall allow users to share data insights with others.\n12. The system shall allow users to export charts in various formats.\n13. The system shall allow users to manage their data sources.\n14. The system shall allow users to view the history of their visualizations.\n15. The system shall provide users with data analysis suggestions.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Data_Visualization_Application {\n    usecase \"Create Visual Representations\" as UC1\n    usecase \"Analyze Trends\" as UC2\n    usecase \"Present Insights\" as UC3\n    usecase \"Provide Data Import Tools\" as UC4\n    usecase \"Support Chart Templates\" as UC5\n    usecase \"Include Customization Options\" as UC6\n    usecase \"Import Data Sets\" as UC7\n    usecase \"Create Charts\" as UC8\n    usecase \"Customize Chart Styles\" as UC9\n    usecase \"Save Visualizations\" as UC10\n    usecase \"Share Data Insights\" as UC11\n    usecase \"Export Charts\" as UC12\n    usecase \"Manage Data Sources\" as UC13\n    usecase \"View Visualization Histories\" as UC14\n    usecase \"Receive Data Analysis Suggestions\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for 'Find the One' Matchmaking Application:\n1. The system shall allow users to find compatible partners using matching algorithms.\n2. The system shall allow users to build relationships and connect with like-minded individuals.\n3. The system shall provide user profiles for creating and managing user data.\n4. The system shall support matching algorithms to suggest potential partners.\n5. The system shall include chat messaging features for communication between users.\n6. The system shall allow users to create profiles to participate in matchmaking.\n7. The system shall allow users to view partner suggestions based on compatibility.\n8. The system shall allow users to send messages to potential matches.\n9. The system shall track relationship statuses of users.\n10. The system shall allow users to manage their connections with others.\n11. The system shall provide relationship advice to users.\n12. The system shall allow users to manage their privacy settings for safe interactions.\n13. The system shall allow users to view their relationship histories.\n14. The system shall notify users about new matches.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Find_the_One_Matchmaking_Application {\n    usecase \"Find Compatible Partners\" as UC1\n    usecase \"Build Relationships\" as UC2\n    usecase \"Connect with Like-Minded Individuals\" as UC3\n    usecase \"Provide User Profiles\" as UC4\n    usecase \"Support Matching Algorithms\" as UC5\n    usecase \"Include Chat Messaging Features\" as UC6\n    usecase \"Create Profiles\" as UC7\n    usecase \"View Partner Suggestions\" as UC8\n    usecase \"Send Messages\" as UC9\n    usecase \"Track Relationship Statuses\" as UC10\n    usecase \"Manage Connections\" as UC11\n    usecase \"Receive Relationship Advice\" as UC12\n    usecase \"Manage Privacy Settings\" as UC13\n    usecase \"View Relationship Histories\" as UC14\n    usecase \"Receive New Match Notifications\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for 'FoodPanda' Food Delivery Application:\n1. The system shall allow users to order food from restaurants for delivery.\n2. The system shall allow users to track the status of their food deliveries.\n3. The system shall allow users to provide feedback on the quality of the food they receive.\n4. The system shall support restaurant listings for users to browse available restaurants.\n5. The system shall allow users to browse menus of restaurants.\n6. The system shall allow users to customize their orders based on preferences.\n7. The system shall allow users to create accounts for managing orders and settings.\n8. The system shall allow users to place orders for food delivery.\n9. The system shall allow users to track the status of their orders in real-time.\n10. The system shall allow users to manage their delivery addresses for convenience.\n11. The system shall allow users to rate food items after receiving them.\n12. The system shall allow users to manage payment methods for seamless transactions.\n13. The system shall allow users to view their order histories.\n14. The system shall send notifications to users for order updates.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle FoodPanda_Food_Delivery_Application {\n    usecase \"Order Food from Restaurants\" as UC1\n    usecase \"Track Deliveries\" as UC2\n    usecase \"Provide Feedback on Food Quality\" as UC3\n    usecase \"Support Restaurant Listings\" as UC4\n    usecase \"Support Menu Browsing\" as UC5\n    usecase \"Support Order Customization\" as UC6\n    usecase \"Create Accounts\" as UC7\n    usecase \"Browse Menus\" as UC8\n    usecase \"Place Orders for Delivery\" as UC9\n    usecase \"Track Order Statuses\" as UC10\n    usecase \"Manage Delivery Addresses\" as UC11\n    usecase \"Rate Food Items\" as UC12\n    usecase \"Manage Payment Methods\" as UC13\n    usecase \"View Order Histories\" as UC14\n    usecase \"Receive Order Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Web Vulnerability Scanner:\n1. The system shall allow hackers to identify security vulnerabilities in web applications.\n2. The system shall detect common vulnerabilities such as SQL injection and cross-site scripting.\n3. The system shall allow hackers to run scans on target URLs to detect vulnerabilities.\n4. The system shall allow hackers to analyze scan results for potential security flaws.\n5. The system shall generate reports detailing the vulnerabilities found in the scans.\n6. The system shall allow hackers to exploit detected security flaws.\n7. The system shall provide recommendations for remediating identified vulnerabilities.\n8. The system shall allow hackers to manage scan settings for customized scans.\n9. The system shall allow hackers to view the history of previous scans.\n10. The system shall send alerts to hackers when critical vulnerabilities are found.\n",
        "output": "@startuml\nleft to right direction\n\nactor Hacker\n\nrectangle Web_Vulnerability_Scanner {\n    usecase \"Identify Security Vulnerabilities\" as UC1\n    usecase \"Detect Common Vulnerabilities\" as UC2\n    usecase \"Run Scans\" as UC3\n    usecase \"Analyze Scan Results\" as UC4\n    usecase \"Generate Reports\" as UC5\n    usecase \"Exploit Security Flaws\" as UC6\n    usecase \"Get Recommendations\" as UC7\n    usecase \"Manage Scan Settings\" as UC8\n    usecase \"View Scan Histories\" as UC9\n    usecase \"Receive Alerts\" as UC10\n}\n\nHacker --> UC1\nHacker --> UC2\nHacker --> UC3\nHacker --> UC4\nHacker --> UC5\nHacker --> UC6\nHacker --> UC7\nHacker --> UC8\nHacker --> UC9\nHacker --> UC10\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Course Management System:\n1. The system shall allow students to enroll in courses.\n2. The system shall allow students to view course materials online.\n3. The system shall allow students to submit assignments for evaluation.\n4. The system shall allow instructors to create courses for students.\n5. The system shall allow instructors to upload course materials for student access.\n6. The system shall allow instructors to grade assignments submitted by students.\n7. The system shall allow students to search for available courses.\n8. The system shall allow students to access course materials after enrollment.\n9. The system shall track student progress through courses.\n10. The system shall manage course schedules for students and instructors.\n11. The system shall generate reports on course performance and student progress.\n12. The system shall allow instructors to monitor student performance.\n13. The system shall allow instructors to provide feedback on assignments.\n14. The system shall allow instructors to communicate with students directly.\n",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Instructor\n\nrectangle Course_Management_System {\n    usecase \"Enroll in Courses\" as UC1\n    usecase \"View Course Materials\" as UC2\n    usecase \"Submit Assignments\" as UC3\n    usecase \"Create Courses\" as UC4\n    usecase \"Upload Course Materials\" as UC5\n    usecase \"Grade Assignments\" as UC6\n    usecase \"Search for Courses\" as UC7\n    usecase \"Access Course Materials\" as UC8\n    usecase \"Track Student Progress\" as UC9\n    usecase \"Manage Course Schedules\" as UC10\n    usecase \"Generate Course Reports\" as UC11\n    usecase \"Monitor Student Performance\" as UC12\n    usecase \"Provide Feedback on Assignments\" as UC13\n    usecase \"Communicate with Students\" as UC14\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC7\nStudent --> UC8\nStudent --> UC9\nStudent --> UC10\nStudent --> UC11\n\nInstructor --> UC4\nInstructor --> UC5\nInstructor --> UC6\nInstructor --> UC12\nInstructor --> UC13\nInstructor --> UC14\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Video Streaming Application:\n1. The system shall allow users to watch videos.\n2. The system shall allow users to create playlists of their favorite videos.\n3. The system shall allow users to share video content with friends.\n4. The system shall support video categories for browsing.\n5. The system shall provide search filters for narrowing down video searches.\n6. The system shall offer video recommendations based on user preferences.\n7. The system shall allow users to create accounts for personalized access.\n8. The system shall allow users to like or dislike videos.\n9. The system shall allow users to share videos on social media platforms.\n10. The system shall allow users to comment on videos.\n11. The system shall allow users to manage their video preferences.\n12. The system shall track users' video histories.\n13. The system shall send notifications to users when new content is available.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Video_Streaming_Application {\n    usecase \"Watch Videos\" as UC1\n    usecase \"Create Playlists\" as UC2\n    usecase \"Share Content\" as UC3\n    usecase \"Support Video Categories\" as UC4\n    usecase \"Support Search Filters\" as UC5\n    usecase \"Provide Video Recommendations\" as UC6\n    usecase \"Create Accounts\" as UC7\n    usecase \"Like/Dislike Videos\" as UC8\n    usecase \"Share Videos on Social Media\" as UC9\n    usecase \"Comment on Videos\" as UC10\n    usecase \"Manage Video Preferences\" as UC11\n    usecase \"View Video Histories\" as UC12\n    usecase \"Receive New Content Notifications\" as UC13\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Zoo Management System:\n1. The system shall allow zookeepers to manage animals in the zoo.\n2. The system shall allow zookeepers to manage exhibits for animal display.\n3. The system shall allow zookeepers to manage visitor information.\n4. The system shall allow zookeepers to input animal data such as health records and feeding schedules.\n5. The system shall allow zookeepers to track feeding schedules for animals.\n6. The system shall allow zookeepers to monitor the health of animals.\n7. The system shall allow visitors to view exhibit information such as animal species and locations.\n8. The system shall allow visitors to purchase tickets for zoo entry.\n9. The system shall allow visitors to attend animal shows or events.\n10. The system shall allow administrators to manage exhibit maintenance and ensure their upkeep.\n11. The system shall track visitor attendance for reporting purposes.\n12. The system shall generate reports on animal populations and exhibits.\n13. The system shall allow administrators to oversee zoo operations.\n14. The system shall allow administrators to allocate resources such as staff and funds.\n15. The system shall ensure the safety of visitors during their time in the zoo.\n",
        "output": "@startuml\nleft to right direction\n\nactor Zookeeper\nactor Visitor\nactor Administrator \n\nrectangle Zoo_Management_System {\n    usecase \"Manage Animals\" as UC1\n    usecase \"Manage Exhibits\" as UC2\n    usecase \"Manage Visitor Information\" as UC3\n    usecase \"Input Animal Data\" as UC4\n    usecase \"Track Feeding Schedules\" as UC5\n    usecase \"Monitor Animal Health\" as UC6\n    usecase \"View Exhibit Information\" as UC7\n    usecase \"Purchase Tickets\" as UC8\n    usecase \"Attend Animal Shows\" as UC9\n    usecase \"Manage Exhibit Maintenance\" as UC10\n    usecase \"Track Visitor Attendance\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Visitor Safety\" as UC15\n}\n\nZookeeper --> UC1\nZookeeper --> UC2\nZookeeper --> UC3\nZookeeper --> UC4\nZookeeper --> UC5\nZookeeper --> UC6\n\nVisitor --> UC7\nVisitor --> UC8\nVisitor --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for this system. Functional Requirements for Welcome Party Planner Application:\n1. The system shall allow organizers to plan and manage welcome parties for new employees.\n2. The system shall allow organizers to manage party schedules.\n3. The system shall allow organizers to invite guests to the welcome parties.\n4. The system shall allow organizers to coordinate party activities.\n5. The system shall allow new employees to view party details.\n6. The system shall allow new employees to RSVP to events.\n7. The system shall allow new employees to participate in party games.\n8. The system shall allow organizers to manage party budgets for the events.\n9. The system shall allow organizers to track guest attendance.\n10. The system shall allow organizers to collect event feedback from guests.\n11. The system shall allow organizers to manage and customize party themes.\n12. The system shall allow organizers to view the history of past parties.\n13. The system shall send notifications to organizers for party updates.\n",
        "output": "@startuml\nleft to right direction\n\nactor Organizer\nactor NewEmployee\n\nrectangle Welcome_Party_Planner_Application {\n    usecase \"Plan Welcome Parties\" as UC1\n    usecase \"Manage Party Schedules\" as UC2\n    usecase \"Invite Guests\" as UC3\n    usecase \"Coordinate Party Activities\" as UC4\n    usecase \"View Party Details\" as UC5\n    usecase \"RSVP to Events\" as UC6\n    usecase \"Participate in Party Games\" as UC7\n    usecase \"Manage Party Budgets\" as UC8\n    usecase \"Track Guest Attendance\" as UC9\n    usecase \"Provide Event Feedback\" as UC10\n    usecase \"Manage Party Themes\" as UC11\n    usecase \"View Party Histories\" as UC12\n    usecase \"Receive Party Updates\" as UC13\n}\n\nOrganizer --> UC1\nOrganizer --> UC2\nOrganizer --> UC3\nOrganizer --> UC4\nOrganizer --> UC8\nOrganizer --> UC9\nOrganizer --> UC10\nOrganizer --> UC11\nOrganizer --> UC12\nOrganizer --> UC13\n\nNewEmployee --> UC5\nNewEmployee --> UC6\nNewEmployee --> UC7\n@enduml"
    },
    {
        "input": "Give me a use case diagram for this system. Functional Requirements for Trip Planner Application:\n1. The system shall allow users to plan trips and create trip itineraries.\n2. The system shall allow users to organize and manage their travel itineraries.\n3. The system shall allow users to share their travel experiences with others.\n4. The system shall allow users to search for travel destinations.\n5. The system shall allow users to book accommodations for their trips.\n6. The system shall allow users to arrange transportation options for their travel.\n7. The system shall allow users to create trip plans and add activities to their itineraries.\n8. The system shall allow users to view detailed information about their trips.\n9. The system shall allow users to add activities to their trip itineraries.\n10. The system shall allow users to manage their trip budgets.\n11. The system shall allow users to track and manage their travel expenses.\n12. The system shall allow users to share trip photos and memories.\n13. The system shall allow users to manage their travel preferences for future trips.\n14. The system shall allow users to view their trip histories.\n15. The system shall send users notifications and updates for their trips.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Trip_Planner_Application {\n    usecase \"Plan Trips\" as UC1\n    usecase \"Organize Itineraries\" as UC2\n    usecase \"Share Travel Experiences\" as UC3\n    usecase \"Search Destinations\" as UC4\n    usecase \"Book Accommodations\" as UC5\n    usecase \"Arrange Transportation\" as UC6\n    usecase \"Create Trip Plans\" as UC7\n    usecase \"View Trip Details\" as UC8\n    usecase \"Add Activities to Itineraries\" as UC9\n    usecase \"Manage Trip Budgets\" as UC10\n    usecase \"Track Travel Expenses\" as UC11\n    usecase \"Share Trip Photos\" as UC12\n    usecase \"Manage Travel Preferences\" as UC13\n    usecase \"View Trip Histories\" as UC14\n    usecase \"Receive Trip Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for this system. Functional Requirements for Cafe Management System:\n1. The system shall allow cafe owners to manage orders placed by customers.\n2. The system shall track inventory levels for menu items and other products.\n3. The system shall analyze sales data to improve business performance.\n4. The system shall allow cafe owners to input and manage menu items.\n5. The system shall allow cafe owners to process customer orders.\n6. The system shall allow cafe owners to manage customer payments.\n7. The system shall allow customers to view menu options available at the cafe.\n8. The system shall allow customers to place orders for menu items.\n9. The system shall allow customers to pay for their purchases online or at the cafe.\n10. The system shall track inventory levels and notify owners of low stock.\n11. The system shall manage relationships with suppliers for inventory restocking.\n12. The system shall generate reports on sales performance for analysis.\n13. The system shall allow administrators to oversee cafe operations.\n14. The system shall allow administrators to allocate resources efficiently.\n15. The system shall ensure customer satisfaction by managing feedback and service quality.\n",
        "output": "@startuml\nleft to right direction\n\nactor CafeOwner\nactor Customer\nactor Administrator \n\nrectangle Cafe_Management_System {\n    usecase \"Manage Orders\" as UC1\n    usecase \"Track Inventory\" as UC2\n    usecase \"Analyze Sales Data\" as UC3\n    usecase \"Input Menu Items\" as UC4\n    usecase \"Process Orders\" as UC5\n    usecase \"Manage Customer Payments\" as UC6\n    usecase \"View Menu Options\" as UC7\n    usecase \"Place Orders\" as UC8\n    usecase \"Pay for Purchases\" as UC9\n    usecase \"Track Inventory Levels\" as UC10\n    usecase \"Manage Supplier Relationships\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Customer Satisfaction\" as UC15\n}\n\nCafeOwner --> UC1\nCafeOwner --> UC2\nCafeOwner --> UC3\nCafeOwner --> UC4\nCafeOwner --> UC5\nCafeOwner --> UC6\n\nCustomer --> UC7\nCustomer --> UC8\nCustomer --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Crime Management System:\n1. The system shall allow investigators to manage criminal cases.\n2. The system shall allow investigators to track suspects involved in criminal activities.\n3. The system shall allow investigators to analyze crime data for trends and insights.\n4. The system shall allow investigators to input case details such as descriptions, timelines, and evidence.\n5. The system shall allow investigators to gather evidence for criminal cases.\n6. The system shall allow investigators to identify potential suspects in ongoing cases.\n7. The system shall allow officers to search criminal records for investigation purposes.\n8. The system shall allow officers to issue warrants for arrests or searches.\n9. The system shall allow officers to make arrests of suspects.\n10. The system shall allow administrators to track the progress of cases.\n11. The system shall allow administrators to manage evidence storage for cases.\n12. The system shall generate reports on crime trends and case statistics.\n13. The system shall allow administrators to oversee law enforcement operations.\n14. The system shall allow administrators to allocate resources for crime management.\n15. The system shall ensure public safety by tracking crime and managing law enforcement activities.\n",
        "output": "@startuml\nleft to right direction\n\nactor Investigator\nactor Officer\nactor Administrator \n\nrectangle Crime_Management_System {\n    usecase \"Manage Criminal Cases\" as UC1\n    usecase \"Track Suspects\" as UC2\n    usecase \"Analyze Crime Data\" as UC3\n    usecase \"Input Case Details\" as UC4\n    usecase \"Gather Evidence\" as UC5\n    usecase \"Identify Suspects\" as UC6\n    usecase \"Search Criminal Records\" as UC7\n    usecase \"Issue Warrants\" as UC8\n    usecase \"Make Arrests\" as UC9\n    usecase \"Track Case Progress\" as UC10\n    usecase \"Manage Evidence Storage\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Public Safety\" as UC15\n}\n\nInvestigator --> UC1\nInvestigator --> UC2\nInvestigator --> UC3\nInvestigator --> UC4\nInvestigator --> UC5\nInvestigator --> UC6\n\nOfficer --> UC7\nOfficer --> UC8\nOfficer --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Intelligence Agency System:\n1. The system shall allow intelligence officers to manage national security threats.\n2. The system shall allow intelligence officers to track suspects involved in potential security threats.\n3. The system shall allow intelligence officers to analyze intelligence data for security insights.\n4. The system shall allow intelligence officers to input threat details, including descriptions and evidence.\n5. The system shall allow intelligence officers to gather intelligence related to national security.\n6. The system shall allow intelligence officers to identify suspects based on intelligence gathered.\n7. The system shall allow administrators to search criminal records for further investigation.\n8. The system shall allow administrators to issue warrants for security operations.\n9. The system shall allow administrators to make arrests based on warrants.\n10. The system shall allow administrators to track threat levels and updates.\n11. The system shall allow administrators to manage intelligence storage and security data.\n12. The system shall generate reports on security trends and intelligence data.\n13. The system shall allow administrators to oversee intelligence operations.\n14. The system shall allow administrators to allocate resources for national security.\n15. The system shall ensure national security through threat management and intelligence analysis.\n",
        "output": "@startuml\nleft to right direction\n\nactor IntelligenceOfficer\nactor Administrator \n\nrectangle Intelligence_Agency_System {\n    usecase \"Manage National Security Threats\" as UC1\n    usecase \"Track Suspects\" as UC2\n    usecase \"Analyze Intelligence Data\" as UC3\n    usecase \"Input Threat Details\" as UC4\n    usecase \"Gather Intelligence\" as UC5\n    usecase \"Identify Suspects\" as UC6\n    usecase \"Search Criminal Records\" as UC7\n    usecase \"Issue Warrants\" as UC8\n    usecase \"Make Arrests\" as UC9\n    usecase \"Track Threat Levels\" as UC10\n    usecase \"Manage Intelligence Storage\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure National Security\" as UC15\n}\n\nIntelligenceOfficer --> UC1\nIntelligenceOfficer --> UC2\nIntelligenceOfficer --> UC3\nIntelligenceOfficer --> UC4\nIntelligenceOfficer --> UC5\nIntelligenceOfficer --> UC6\n\nAdministrator --> UC7\nAdministrator --> UC8\nAdministrator --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Protest Management System:\n1. The system shall allow organizers to manage demonstrations and protests.\n2. The system shall allow organizers to track participants involved in protests.\n3. The system shall allow organizers to analyze protest data for insights.\n4. The system shall allow organizers to input protest details such as location, time, and participants.\n5. The system shall allow organizers to gather information related to protests.\n6. The system shall allow organizers to identify participants for coordination.\n7. The system shall allow officers to monitor protest activities to ensure safety.\n8. The system shall allow officers to issue permits for protests and demonstrations.\n9. The system shall allow officers to ensure public safety during protests.\n10. The system shall allow administrators to track the progress of protests.\n11. The system shall allow administrators to manage protest locations and logistics.\n12. The system shall generate reports on protest trends and data.\n13. The system shall allow administrators to oversee protest operations.\n14. The system shall allow administrators to allocate resources for protest management.\n15. The system shall ensure peaceful demonstrations through proper coordination and safety measures.\n",
        "output": "@startuml\nleft to right direction\n\nactor Organizer\nactor Officer\nactor Administrator \n\nrectangle Protest_Management_System {\n    usecase \"Manage Demonstrations\" as UC1\n    usecase \"Track Participants\" as UC2\n    usecase \"Analyze Protest Data\" as UC3\n    usecase \"Input Protest Details\" as UC4\n    usecase \"Gather Information\" as UC5\n    usecase \"Identify Participants\" as UC6\n    usecase \"Monitor Protest Activities\" as UC7\n    usecase \"Issue Permits\" as UC8\n    usecase \"Ensure Public Safety\" as UC9\n    usecase \"Track Protest Progress\" as UC10\n    usecase \"Manage Protest Locations\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Peaceful Demonstrations\" as UC15\n}\n\nOrganizer --> UC1\nOrganizer --> UC2\nOrganizer --> UC3\nOrganizer --> UC4\nOrganizer --> UC5\nOrganizer --> UC6\n\nOfficer --> UC7\nOfficer --> UC8\nOfficer --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Boycott Management System:\n1. The system shall allow activists to organize boycotts and manage protest activities.\n2. The system shall allow activists to track the supporters involved in the boycott.\n3. The system shall allow activists to analyze boycott data and trends for insights.\n4. The system shall allow activists to input boycott details, including location and objectives.\n5. The system shall allow activists to gather information related to the boycott.\n6. The system shall allow activists to identify supporters and manage their involvement.\n7. The system shall allow officers to monitor boycott activities and ensure public safety.\n8. The system shall allow officers to issue public statements during the boycott.\n9. The system shall allow officers to ensure public safety during the boycott.\n10. The system shall allow administrators to track boycott progress and updates.\n11. The system shall allow administrators to manage boycott locations and logistics.\n12. The system shall generate reports on boycott trends and data analysis.\n13. The system shall allow administrators to oversee boycott operations.\n14. The system shall allow administrators to allocate resources for managing the boycott.\n15. The system shall ensure peaceful demonstrations by coordinating with law enforcement.\n",
        "output": "@startuml\nleft to right direction\n\nactor Activist\nactor Officer\nactor Administrator \n\nrectangle Boycott_Management_System {\n    usecase \"Organize Boycotts\" as UC1\n    usecase \"Track Supporters\" as UC2\n    usecase \"Analyze Boycott Data\" as UC3\n    usecase \"Input Boycott Details\" as UC4\n    usecase \"Gather Information\" as UC5\n    usecase \"Identify Supporters\" as UC6\n    usecase \"Monitor Boycott Activities\" as UC7\n    usecase \"Issue Statements\" as UC8\n    usecase \"Ensure Public Safety\" as UC9\n    usecase \"Track Boycott Progress\" as UC10\n    usecase \"Manage Boycott Locations\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Peaceful Demonstrations\" as UC15\n}\n\nActivist --> UC1\nActivist --> UC2\nActivist --> UC3\nActivist --> UC4\nActivist --> UC5\nActivist --> UC6\n\nOfficer --> UC7\nOfficer --> UC8\nOfficer --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Disaster Management System:\n1. The system shall allow responders to manage disaster incidents and response activities.\n2. The system shall allow responders to track victims affected by disasters.\n3. The system shall allow responders to analyze disaster data for insights.\n4. The system shall allow responders to input disaster details, including location and severity.\n5. The system shall allow responders to gather information during the disaster response.\n6. The system shall allow responders to identify victims for rescue operations.\n7. The system shall allow officers to monitor disaster activities to ensure public safety.\n8. The system shall allow officers to issue alerts and warnings during disasters.\n9. The system shall ensure public safety during disaster events.\n10. The system shall allow administrators to track disaster progress and updates.\n11. The system shall allow administrators to manage disaster locations and logistics.\n12. The system shall generate reports on disaster trends and data analysis.\n13. The system shall allow administrators to oversee disaster operations.\n14. The system shall allow administrators to allocate resources for disaster response.\n15. The system shall ensure timely responses by coordinating resources effectively.\n",
        "output": "@startuml\nleft to right direction\n\nactor Responder\nactor Officer\nactor Administrator \n\nrectangle Disaster_Management_System {\n    usecase \"Manage Disasters\" as UC1\n    usecase \"Track Victims\" as UC2\n    usecase \"Analyze Disaster Data\" as UC3\n    usecase \"Input Disaster Details\" as UC4\n    usecase \"Gather Information\" as UC5\n    usecase \"Identify Victims\" as UC6\n    usecase \"Monitor Disaster Activities\" as UC7\n    usecase \"Issue Alerts\" as UC8\n    usecase \"Ensure Public Safety\" as UC9\n    usecase \"Track Disaster Progress\" as UC10\n    usecase \"Manage Disaster Locations\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Timely Responses\" as UC15\n}\n\nResponder --> UC1\nResponder --> UC2\nResponder --> UC3\nResponder --> UC4\nResponder --> UC5\nResponder --> UC6\n\nOfficer --> UC7\nOfficer --> UC8\nOfficer --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Disaster Recovery System:\n1. The system shall allow organizations to recover from disasters and restore business operations.\n2. The system shall allow organizations to restore operations and critical systems after disasters.\n3. The system shall minimize downtime during the disaster recovery process.\n4. The system shall allow organizations to input disaster recovery plans for future incidents.\n5. The system shall allow organizations to activate recovery procedures when necessary.\n6. The system shall allow organizations to restore critical systems affected by the disaster.\n7. The system shall allow IT staff to monitor recovery progress during the recovery phase.\n8. The system shall allow IT staff to test backup systems for operational readiness.\n9. The system shall allow IT staff to ensure data integrity during recovery.\n10. The system shall track recovery timelines to measure the speed of restoration.\n11. The system shall manage resources required for disaster recovery efforts.\n12. The system shall generate reports on disaster recovery performance and timelines.\n13. The system shall allow administrators to oversee recovery operations and strategies.\n14. The system shall allow administrators to allocate resources effectively for recovery.\n15. The system shall ensure business continuity by minimizing downtime and restoring operations.\n",
        "output": "@startuml\nleft to right direction\n\nactor Organization\nactor ITStaff\nactor Administrator \n\nrectangle Disaster_Recovery_System {\n    usecase \"Recover from Disasters\" as UC1\n    usecase \"Restore Operations\" as UC2\n    usecase \"Minimize Downtime\" as UC3\n    usecase \"Input Recovery Plans\" as UC4\n    usecase \"Activate Recovery Procedures\" as UC5\n    usecase \"Restore Critical Systems\" as UC6\n    usecase \"Monitor Recovery Progress\" as UC7\n    usecase \"Test Backup Systems\" as UC8\n    usecase \"Ensure Data Integrity\" as UC9\n    usecase \"Track Recovery Timelines\" as UC10\n    usecase \"Manage Recovery Resources\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Oversee Operations\" as UC13\n    usecase \"Allocate Resources\" as UC14\n    usecase \"Ensure Business Continuity\" as UC15\n}\n\nOrganization --> UC1\nOrganization --> UC2\nOrganization --> UC3\nOrganization --> UC4\nOrganization --> UC5\nOrganization --> UC6\n\nITStaff --> UC7\nITStaff --> UC8\nITStaff --> UC9\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\nAdministrator --> UC13\nAdministrator --> UC14\nAdministrator --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for this system. Functional Requirements for Calculator Application:\n1. The system shall allow users to perform basic arithmetic operations such as addition, subtraction, multiplication, and division.\n2. The system shall provide a user-friendly interface for interacting with the calculator.\n3. The system shall allow users to input numerical values and select mathematical operators.\n4. The system shall display calculation results to the users.\n5. The system shall include the option to clear input values for new calculations.\n6. The system shall allow users to perform multiple operations in a sequence.\n7. The system shall save calculation history for reference.\n8. The system shall allow users to customize calculator settings, such as number format or theme.\n9. The system shall provide access to past calculations through a calculation log.\n10. The system shall notify users in case of calculation errors or invalid inputs.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Calculator_Application {\n    usecase \"Perform Addition\" as UC1\n    usecase \"Perform Subtraction\" as UC2\n    usecase \"Perform Multiplication\" as UC3\n    usecase \"Perform Division\" as UC4\n    usecase \"Provide User-Friendly Interface\" as UC5\n    usecase \"Input Numerical Values\" as UC6\n    usecase \"Select Operators\" as UC7\n    usecase \"View Calculation Results\" as UC8\n    usecase \"Clear Input\" as UC9\n    usecase \"Perform Multiple Operations\" as UC10\n    usecase \"Save Calculation History\" as UC11\n    usecase \"Customize Calculator Settings\" as UC12\n    usecase \"View Calculation Logs\" as UC13\n    usecase \"Receive Calculation Error Notifications\" as UC14\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\n@enduml"
    },
    {
        "input": "Give me a use case diagram for this system. Functional Requirements for Code Repository Platform:\n1. The system shall allow developers to manage source code for software development projects.\n2. The system shall facilitate collaboration on projects by providing tools for multiple developers to work together.\n3. The system shall track code changes and version control using appropriate tools.\n4. The system shall provide version control tools to manage revisions and updates to the codebase.\n5. The system shall support code review features to allow developers to review and approve code changes.\n6. The system shall include project management capabilities for organizing and tracking project progress.\n7. The system shall allow developers to create repositories to store project code.\n8. The system shall allow developers to commit code changes and save them in the repository.\n9. The system shall allow developers to merge code branches when working on multiple features.\n10. The system shall track code histories, including changes made by different developers.\n11. The system shall allow developers to manage project issues, such as bug tracking and feature requests.\n12. The system shall automate code testing to verify the functionality of code changes.\n13. The system shall allow developers to manage access permissions for the code repository.\n14. The system shall provide project wikis for sharing project documentation.\n15. The system shall send notifications to developers about updates or changes to the code.\n",
        "output": "@startuml\nleft to right direction\n\nactor Developer\n\nrectangle Code_Repository_Platform {\n    usecase \"Manage Source Code\" as UC1\n    usecase \"Collaborate on Projects\" as UC2\n    usecase \"Track Code Changes\" as UC3\n    usecase \"Provide Version Control Tools\" as UC4\n    usecase \"Support Code Review Features\" as UC5\n    usecase \"Include Project Management Capabilities\" as UC6\n    usecase \"Create Repositories\" as UC7\n    usecase \"Commit Code Changes\" as UC8\n    usecase \"Merge Code Branches\" as UC9\n    usecase \"Track Code Histories\" as UC10\n    usecase \"Manage Project Issues\" as UC11\n    usecase \"Automate Code Testing\" as UC12\n    usecase \"Manage Code Access Permissions\" as UC13\n    usecase \"View Project Wikis\" as UC14\n    usecase \"Receive Code Update Notifications\" as UC15\n}\n\nDeveloper --> UC1\nDeveloper --> UC2\nDeveloper --> UC3\nDeveloper --> UC4\nDeveloper --> UC5\nDeveloper --> UC6\nDeveloper --> UC7\nDeveloper --> UC8\nDeveloper --> UC9\nDeveloper --> UC10\nDeveloper --> UC11\nDeveloper --> UC12\nDeveloper --> UC13\nDeveloper --> UC14\nDeveloper --> UC15\n@enduml"
    },
    {
        "input": "Give me a use case diagram for this system. Functional Requirements for Meeting Scheduler Application:\n1. The system shall allow users to schedule meetings by selecting dates, times, and participants.\n2. The system shall allow users to invite participants to the meeting via email or other communication methods.\n3. The system shall allow users to manage meeting details, including the location, agenda, and duration.\n4. The system shall integrate with users' calendars for better scheduling.\n5. The system shall support availability checks for participants to find suitable meeting times.\n6. The system shall send reminder notifications to users for upcoming meetings.\n7. The system shall allow users to create meeting requests and share them with participants.\n8. The system shall allow users to send meeting invitations to participants.\n9. The system shall allow users to set meeting agendas and distribute them to participants.\n10. The system shall track meeting schedules and maintain a record of upcoming and past meetings.\n11. The system shall manage participant responses to meeting invitations (accept/decline).\n12. The system shall generate meeting reports, including attendance and meeting notes.\n13. The system shall allow users to customize meeting settings, such as notification preferences.\n14. The system shall provide users with access to past meeting histories.\n15. The system shall send notifications to users about meeting updates or cancellations.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Meeting_Scheduler_Application {\n    usecase \"Schedule Meetings\" as UC1\n    usecase \"Invite Participants\" as UC2\n    usecase \"Manage Meeting Details\" as UC3\n    usecase \"Provide Calendar Integration\" as UC4\n    usecase \"Support Availability Checks\" as UC5\n    usecase \"Send Reminder Notifications\" as UC6\n    usecase \"Create Meeting Requests\" as UC7\n    usecase \"Send Invitations\" as UC8\n    usecase \"Set Meeting Agendas\" as UC9\n    usecase \"Track Meeting Schedules\" as UC10\n    usecase \"Manage Participant Responses\" as UC11\n    usecase \"Generate Meeting Reports\" as UC12\n    usecase \"Customize Meeting Settings\" as UC13\n    usecase \"View Meeting Histories\" as UC14\n    usecase \"Receive Meeting Notifications\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Webinar Platform:\n1. The system shall allow users (hosts) to host webinars with interactive features and audience engagement options.\n2. The system shall allow hosts to schedule webinars, invite participants, and present webinar content.\n3. The system shall allow hosts to track attendee interactions, such as Q&A and polls, during webinars.\n4. The system shall allow hosts to manage webinar recordings and store them for future access.\n5. The system shall provide tools for generating analytics reports on webinar performance.\n6. The system shall allow hosts to customize webinar settings, such as layout and branding.\n7. The system shall allow hosts to view the history of previous webinars.\n8. The system shall send notifications to hosts about upcoming webinars.\n",
        "output": "@startuml\nleft to right direction\n\nactor Host\n\nrectangle Webinar_Platform {\n    usecase \"Host Webinars\" as UC1\n    usecase \"Engage with Attendees\" as UC2\n    usecase \"Analyze Webinar Data\" as UC3\n    usecase \"Provide Webinar Creation Tools\" as UC4\n    usecase \"Support Interactive Features\" as UC5\n    usecase \"Offer Audience Engagement Options\" as UC6\n    usecase \"Schedule Webinars\" as UC7\n    usecase \"Invite Participants\" as UC8\n    usecase \"Present Webinar Content\" as UC9\n    usecase \"Track Attendee Interactions\" as UC10\n    usecase \"Manage Webinar Recordings\" as UC11\n    usecase \"Generate Analytics Reports\" as UC12\n    usecase \"Customize Webinar Settings\" as UC13\n    usecase \"View Webinar Histories\" as UC14\n    usecase \"Receive Webinar Notifications\" as UC15\n}\n\nHost --> UC1\nHost --> UC2\nHost --> UC3\nHost --> UC4\nHost --> UC5\nHost --> UC6\nHost --> UC7\nHost --> UC8\nHost --> UC9\nHost --> UC10\nHost --> UC11\nHost --> UC12\nHost --> UC13\nHost --> UC14\nHost --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Video Conferencing Application (Zoom):\n1. The system shall allow users to host virtual meetings and collaborate with team members and clients.\n2. The system shall provide video and audio conferencing tools for communication.\n3. The system shall allow users to share their screens during meetings.\n4. The system shall include a chat messaging feature for communication during meetings.\n5. The system shall allow users to schedule meetings, invite participants, and join virtual rooms.\n6. The system shall allow users to record meetings for future reference.\n7. The system shall allow users to manage meeting settings, such as mute/unmute participants.\n8. The system shall generate meeting reports with attendance and meeting details.\n9. The system shall allow users to customize virtual meeting backgrounds.\n10. The system shall allow users to view the history of previous meetings.\n11. The system shall notify users of upcoming meetings.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Zoom_Video_Conferencing_Application {\n    usecase \"Host Virtual Meetings\" as UC1\n    usecase \"Collaborate with Team Members\" as UC2\n    usecase \"Communicate with Clients\" as UC3\n    usecase \"Provide Video Conferencing Tools\" as UC4\n    usecase \"Offer Screen Sharing Features\" as UC5\n    usecase \"Support Chat Messaging Options\" as UC6\n    usecase \"Schedule Meetings\" as UC7\n    usecase \"Invite Participants\" as UC8\n    usecase \"Join Virtual Rooms\" as UC9\n    usecase \"Record Meetings\" as UC10\n    usecase \"Manage Meeting Settings\" as UC11\n    usecase \"Generate Meeting Reports\" as UC12\n    usecase \"Customize Meeting Backgrounds\" as UC13\n    usecase \"View Meeting Histories\" as UC14\n    usecase \"Receive Meeting Notifications\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Team Collaboration Platform (Slack):\n1. The system shall allow users to communicate, share files, and collaborate on projects using messaging channels.\n2. The system shall allow users to create channels for team communication and project discussions.\n3. The system shall allow users to send messages and share documents in the platform.\n4. The system shall provide tools for tracking project progress and managing team tasks.\n5. The system shall generate productivity reports based on task completion and collaboration.\n6. The system shall allow users to customize notification settings based on their preferences.\n7. The system shall provide access to message histories for reference.\n8. The system shall send alerts to users for important updates related to the project or messages.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Slack_Team_Collaboration_Platform {\n    usecase \"Communicate\" as UC1\n    usecase \"Share Files\" as UC2\n    usecase \"Collaborate on Projects\" as UC3\n    usecase \"Provide Messaging Channels\" as UC4\n    usecase \"Offer File Sharing Options\" as UC5\n    usecase \"Support Project Management Tools\" as UC6\n    usecase \"Create Channels\" as UC7\n    usecase \"Send Messages\" as UC8\n    usecase \"Share Documents\" as UC9\n    usecase \"Track Project Progress\" as UC10\n    usecase \"Manage Team Tasks\" as UC11\n    usecase \"Generate Productivity Reports\" as UC12\n    usecase \"Customize Notification Settings\" as UC13\n    usecase \"View Message Histories\" as UC14\n    usecase \"Receive Alerts\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Project Management Tool (Trello):\n1. The system shall allow users to organize tasks and track project progress.\n2. The system shall provide task boards, task cards, and project timelines for task organization.\n3. The system shall allow users to create task boards, add task cards, and assign tasks to team members.\n4. The system shall allow users to track task statuses, manage project deadlines, and generate progress reports.\n5. The system shall allow users to customize task labels, view task histories, and receive notifications for task updates.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Trello_Project_Management_Tool {\n    usecase \"Organize Tasks\" as UC1\n    usecase \"Track Project Progress\" as UC2\n    usecase \"Collaborate with Team Members\" as UC3\n    usecase \"Provide Task Boards\" as UC4\n    usecase \"Offer Task Cards\" as UC5\n    usecase \"Support Project Timelines\" as UC6\n    usecase \"Create Task Boards\" as UC7\n    usecase \"Add Task Cards\" as UC8\n    usecase \"Assign Tasks\" as UC9\n    usecase \"Track Task Statuses\" as UC10\n    usecase \"Manage Project Deadlines\" as UC11\n    usecase \"Generate Progress Reports\" as UC12\n    usecase \"Customize Task Labels\" as UC13\n    usecase \"View Task Histories\" as UC14\n    usecase \"Receive Task Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Celebrity News and Events Platform:\n1. The system shall allow users to stay updated on celebrity news, explore profiles, and view event schedules.\n2. The system shall provide news articles, event listings, and celebrity profiles for user exploration.\n3. The system shall allow users to read news articles, view event schedules, and explore celebrity profiles.\n4. The system shall track trending topics, manage event registrations, and generate reports on celebrity engagements.\n5. The system shall allow users to customize news preferences, view event histories, and receive notifications for upcoming events.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Celebrity_News_and_Events_Platform {\n    usecase \"Stay Updated on Celebrity News\" as UC1\n    usecase \"Explore Celebrity Profiles\" as UC2\n    usecase \"View Event Schedules\" as UC3\n    usecase \"Provide News Articles\" as UC4\n    usecase \"Offer Event Listings\" as UC5\n    usecase \"Support Celebrity Profiles\" as UC6\n    usecase \"Read News Articles\" as UC7\n    usecase \"View Event Schedules\" as UC8\n    usecase \"Explore Celebrity Profiles\" as UC9\n    usecase \"Track Trending Topics\" as UC10\n    usecase \"Manage Event Registrations\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize News Preferences\" as UC13\n    usecase \"View Event Histories\" as UC14\n    usecase \"Receive Event Notifications\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. Functional Requirements for Tech-Talk Platform:\n1. The system shall allow users to engage in tech discussions, share knowledge, and collaborate on tech projects.\n2. The system shall provide discussion forums, knowledge-sharing tools, and project management features.\n3. The system shall allow users to participate in discussions, share tech resources, and collaborate on tech projects.\n4. The system shall track tech trends, manage project tasks, and generate reports on tech innovations.\n5. The system shall allow users to customize discussion preferences, view project histories, and receive notifications for tech updates.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Tech_Talk_Platform {\n    usecase \"Engage in Tech Discussions\" as UC1\n    usecase \"Share Knowledge\" as UC2\n    usecase \"Collaborate on Tech Projects\" as UC3\n    usecase \"Provide Discussion Forums\" as UC4\n    usecase \"Offer Knowledge Sharing Tools\" as UC5\n    usecase \"Support Project Management Features\" as UC6\n    usecase \"Participate in Tech Discussions\" as UC7\n    usecase \"Share Tech Resources\" as UC8\n    usecase \"Collaborate on Tech Projects\" as UC9\n    usecase \"Track Tech Trends\" as UC10\n    usecase \"Manage Project Tasks\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Discussion Preferences\" as UC13\n    usecase \"View Project Histories\" as UC14\n    usecase \"Receive Tech Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Create a use case diagram for following, Functional Requirements for Babysitter Management System:\n1. The system shall allow parents to search for available babysitters and book babysitting appointments.\n2. The system shall allow parents to communicate with babysitters, track babysitting sessions, and manage payment transactions.\n3. Babysitters shall be able to view babysitting requests, accept appointments, and provide care for children.\n4. The system shall include features for tracking babysitting schedules, generating reports on babysitter performance, and notifying parents of babysitting updates.\n",
        "output": "@startuml\nleft to right direction\n\nactor Parent\nactor Babysitter\n\nrectangle Babysitter_Management_System {\n    usecase \"Find Babysitters\" as UC1\n    usecase \"Schedule Babysitting Sessions\" as UC2\n    usecase \"Track Babysitter Activities\" as UC3\n    usecase \"Search for Available Babysitters\" as UC4\n    usecase \"Book Babysitting Appointments\" as UC5\n    usecase \"Communicate with Babysitters\" as UC6\n    usecase \"View Babysitting Requests\" as UC7\n    usecase \"Accept Appointments\" as UC8\n    usecase \"Provide Care for Children\" as UC9\n    usecase \"Track Babysitting Schedules\" as UC10\n    usecase \"Manage Payment Transactions\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Babysitting Preferences\" as UC13\n    usecase \"View Babysitter Histories\" as UC14\n    usecase \"Receive Babysitting Updates\" as UC15\n}\n\nParent --> UC1\nParent --> UC2\nParent --> UC3\nParent --> UC4\nParent --> UC5\nParent --> UC6\n\nBabysitter --> UC7\nBabysitter --> UC8\nBabysitter --> UC9\n\nParent --> UC10\nParent --> UC11\nParent --> UC12\nParent --> UC13\nParent --> UC14\nParent --> UC15\n@enduml"
    },
    {
        "input": "Create a use case diagram for following, Functional Requirements for WhatsApp Sticker Maker Application:\n1. The system shall allow users to create custom stickers by designing stickers, importing images, and adding text.\n2. The system shall allow users to save stickers to collections, share stickers with friends, and download sticker packs.\n3. The system shall include features for editing sticker designs, managing sticker categories, and generating reports on sticker usage.\n4. The system shall allow users to customize sticker settings, view sticker histories, and receive notifications for sticker updates.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle WhatsApp_Sticker_Maker_Application {\n    usecase \"Create Custom Stickers\" as UC1\n    usecase \"Share Stickers with Friends\" as UC2\n    usecase \"Manage Sticker Collections\" as UC3\n    usecase \"Design Stickers\" as UC4\n    usecase \"Import Images\" as UC5\n    usecase \"Add Text to Stickers\" as UC6\n    usecase \"Save Stickers to Collections\" as UC7\n    usecase \"Share Stickers in Chats\" as UC8\n    usecase \"Download Sticker Packs\" as UC9\n    usecase \"Edit Sticker Designs\" as UC10\n    usecase \"Manage Sticker Categories\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Sticker Settings\" as UC13\n    usecase \"View Sticker Histories\" as UC14\n    usecase \"Receive Sticker Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Create a use case diagram for following, Functional Requirements for AI-Based Slides/Presentation Maker:\n1. The system shall allow users to create professional presentations by designing slides, adding content, and customizing slide layouts.\n2. The system shall provide templates, design tools, and data visualization options for slide creation.\n3. The system shall include features for tracking presentation progress, managing slide transitions, and generating reports on presentation engagement.\n4. The system shall allow users to customize presentation settings, view presentation histories, and receive notifications for presentation updates.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle AI_Based_Slides_Presentation_Maker {\n    usecase \"Create Professional Presentations\" as UC1\n    usecase \"Design Slides\" as UC2\n    usecase \"Analyze Presentation Data\" as UC3\n    usecase \"Provide Templates\" as UC4\n    usecase \"Offer Design Tools\" as UC5\n    usecase \"Support Data Visualization Options\" as UC6\n    usecase \"Create Slides\" as UC7\n    usecase \"Add Content\" as UC8\n    usecase \"Customize Slide Layouts\" as UC9\n    usecase \"Track Presentation Progress\" as UC10\n    usecase \"Manage Slide Transitions\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Presentation Settings\" as UC13\n    usecase \"View Presentation Histories\" as UC14\n    usecase \"Receive Presentation Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Create a use case diagram for following, Functional Requirements for AI-Based Resume Builder:\n1. The system shall allow users to create professional resumes.\n2. The system shall allow users to design resume templates.\n3. The system shall allow users to analyze resume data.\n4. The system shall provide resume templates.\n5. The system shall provide design tools.\n6. The system shall support data visualization options.\n7. The system shall allow users to create resumes.\n8. The system shall allow users to add content to resumes.\n9. The system shall allow users to customize resume layouts.\n10. The system shall allow users to track resume progress.\n11. The system shall allow users to manage resume sections.\n12. The system shall generate reports on resume engagement.\n13. The system shall allow users to customize resume settings.\n14. The system shall allow users to view resume histories.\n15. The system shall notify users of resume updates.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle AI_Based_Resume_Builder {\n    usecase \"Create Professional Resumes\" as UC1\n    usecase \"Design Resume Templates\" as UC2\n    usecase \"Analyze Resume Data\" as UC3\n    usecase \"Provide Resume Templates\" as UC4\n    usecase \"Offer Design Tools\" as UC5\n    usecase \"Support Data Visualization Options\" as UC6\n    usecase \"Create Resumes\" as UC7\n    usecase \"Add Content\" as UC8\n    usecase \"Customize Resume Layouts\" as UC9\n    usecase \"Track Resume Progress\" as UC10\n    usecase \"Manage Resume Sections\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Resume Settings\" as UC13\n    usecase \"View Resume Histories\" as UC14\n    usecase \"Receive Resume Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Create a use case diagram for following, Functional Requirements for AI-Based Chatbot:\n1. The system shall allow users to interact with automated responses.\n2. The system shall allow users to provide information through the chatbot.\n3. The system shall analyze user queries.\n4. The system shall provide chatbot templates.\n5. The system shall offer design tools for chatbot creation.\n6. The system shall support data visualization options.\n7. The system shall allow users to chat with the chatbot.\n8. The system shall allow users to ask questions.\n9. The system shall allow users to receive answers.\n10. The system shall track chatbot interactions.\n11. The system shall manage user queries.\n12. The system shall generate reports on chatbot performance.\n13. The system shall allow users to customize chatbot settings.\n14. The system shall allow users to view chatbot histories.\n15. The system shall notify users of chatbot updates.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle AI_Based_Chatbot {\n    usecase \"Interact with Automated Responses\" as UC1\n    usecase \"Provide Information\" as UC2\n    usecase \"Analyze User Queries\" as UC3\n    usecase \"Provide Chatbot Templates\" as UC4\n    usecase \"Offer Design Tools\" as UC5\n    usecase \"Support Data Visualization Options\" as UC6\n    usecase \"Chat with Chatbot\" as UC7\n    usecase \"Ask Questions\" as UC8\n    usecase \"Receive Answers\" as UC9\n    usecase \"Track Chatbot Interactions\" as UC10\n    usecase \"Manage User Queries\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Chatbot Settings\" as UC13\n    usecase \"View Chatbot Histories\" as UC14\n    usecase \"Receive Chatbot Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Create a use case diagram for following, Functional Requirements for VR-Based Training Platform:\n1. The system shall allow users to engage in virtual training sessions.\n2. The system shall allow users to learn new skills.\n3. The system shall analyze training data.\n4. The system shall provide VR training modules.\n5. The system shall offer interactive simulations.\n6. The system shall support progress tracking tools.\n7. The system shall allow users to participate in VR training sessions.\n8. The system shall allow users to complete skill challenges.\n9. The system shall provide feedback on user performance.\n10. The system shall track user training progress.\n11. The system shall manage skill assessments.\n12. The system shall generate reports on training outcomes.\n13. The system shall allow users to customize training settings.\n14. The system shall allow users to view training histories.\n15. The system shall notify users of training updates.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle VR_Based_Training_Platform {\n    usecase \"Engage in Virtual Training Sessions\" as UC1\n    usecase \"Learn New Skills\" as UC2\n    usecase \"Analyze Training Data\" as UC3\n    usecase \"Provide VR Training Modules\" as UC4\n    usecase \"Offer Interactive Simulations\" as UC5\n    usecase \"Support Progress Tracking Tools\" as UC6\n    usecase \"Participate in VR Training Sessions\" as UC7\n    usecase \"Complete Skill Challenges\" as UC8\n    usecase \"Receive Feedback on Performance\" as UC9\n    usecase \"Track Training Progress\" as UC10\n    usecase \"Manage Skill Assessments\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Training Settings\" as UC13\n    usecase \"View Training Histories\" as UC14\n    usecase \"Receive Training Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Create a use case diagram for following, Functional Requirements for Connexus VR-Based Social Platform:\n1. The system shall allow users to connect with like-minded individuals.\n2. The system shall allow users to engage in virtual social activities.\n3. The system shall analyze social interactions.\n4. The system shall provide VR social spaces for users.\n5. The system shall offer interactive games.\n6. The system shall support privacy settings for users.\n7. The system shall allow users to create virtual avatars.\n8. The system shall allow users to join social events.\n9. The system shall allow users to interact with other users.\n10. The system shall track social connections of users.\n11. The system shall allow users to manage privacy preferences.\n12. The system shall generate reports on social engagements.\n13. The system shall allow users to customize social settings.\n14. The system shall allow users to view social histories.\n15. The system shall notify users of social updates.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Connexus_VR_Social_Platform {\n    usecase \"Connect with Like-Minded Individuals\" as UC1\n    usecase \"Engage in Virtual Social Activities\" as UC2\n    usecase \"Analyze Social Interactions\" as UC3\n    usecase \"Provide VR Social Spaces\" as UC4\n    usecase \"Offer Interactive Games\" as UC5\n    usecase \"Support Privacy Settings\" as UC6\n    usecase \"Create Virtual Avatars\" as UC7\n    usecase \"Join Social Events\" as UC8\n    usecase \"Interact with Other Users\" as UC9\n    usecase \"Track Social Connections\" as UC10\n    usecase \"Manage Privacy Preferences\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Social Settings\" as UC13\n    usecase \"View Social Histories\" as UC14\n    usecase \"Receive Social Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Create a use case diagram for following, Functional Requirements for VR-Based Public Speaking App:\n1. The system shall allow users to overcome stage fright.\n2. The system shall allow users to practice public speaking.\n3. The system shall analyze speaking performance.\n4. The system shall provide VR speaking environments.\n5. The system shall offer speech coaching tools.\n6. The system shall support audience feedback options.\n7. The system shall allow users to practice speeches.\n8. The system shall provide coaching tips to users.\n9. The system shall allow users to improve their speaking skills.\n10. The system shall track the speaking progress of users.\n11. The system shall allow users to manage speech evaluations.\n12. The system shall generate reports on speaking performance.\n13. The system shall allow users to customize speaking settings.\n14. The system shall allow users to view speaking histories.\n15. The system shall notify users of speaking updates.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle VR_Based_Public_Speaking_App {\n    usecase \"Overcome Stage Fright\" as UC1\n    usecase \"Practice Public Speaking\" as UC2\n    usecase \"Analyze Speaking Performance\" as UC3\n    usecase \"Provide VR Speaking Environments\" as UC4\n    usecase \"Offer Speech Coaching Tools\" as UC5\n    usecase \"Support Audience Feedback Options\" as UC6\n    usecase \"Practice Speeches\" as UC7\n    usecase \"Receive Coaching Tips\" as UC8\n    usecase \"Improve Speaking Skills\" as UC9\n    usecase \"Track Speaking Progress\" as UC10\n    usecase \"Manage Speech Evaluations\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Speaking Settings\" as UC13\n    usecase \"View Speaking Histories\" as UC14\n    usecase \"Receive Speaking Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Create a use case diagram for following, Functional Requirements for VR-Based Physiotherapy App:\n1. The system shall allow users to perform physical therapy exercises.\n2. The system shall allow users to track their rehabilitation progress.\n3. The system shall analyze rehabilitation data.\n4. The system shall provide VR exercise routines for users.\n5. The system shall offer motion tracking tools for users.\n6. The system shall support progress monitoring features.\n7. The system shall allow users to follow guided exercises.\n8. The system shall allow users to monitor their movements during exercises.\n9. The system shall help users improve their physical mobility.\n10. The system shall track users' exercise progress.\n11. The system shall allow users to manage their rehabilitation goals.\n12. The system shall generate reports on rehabilitation outcomes.\n13. The system shall allow users to customize exercise settings.\n14. The system shall allow users to view their exercise histories.\n15. The system shall notify users of exercise updates.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle VR_Based_Physiotherapy_App {\n    usecase \"Perform Physical Therapy Exercises\" as UC1\n    usecase \"Track Progress\" as UC2\n    usecase \"Analyze Rehabilitation Data\" as UC3\n    usecase \"Provide VR Exercise Routines\" as UC4\n    usecase \"Offer Motion Tracking Tools\" as UC5\n    usecase \"Support Progress Monitoring Features\" as UC6\n    usecase \"Follow Guided Exercises\" as UC7\n    usecase \"Monitor Movements\" as UC8\n    usecase \"Improve Physical Mobility\" as UC9\n    usecase \"Track Exercise Progress\" as UC10\n    usecase \"Manage Rehabilitation Goals\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Exercise Settings\" as UC13\n    usecase \"View Exercise Histories\" as UC14\n    usecase \"Receive Exercise Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Create a use case diagram for following, Functional Requirements for VR-Based Meditation App:\n1. The system shall allow users to practice meditation and mindfulness exercises.\n2. The system shall allow users to track their meditation progress.\n3. The system shall analyze meditation data.\n4. The system shall provide VR meditation environments for users.\n5. The system shall offer guided meditation sessions.\n6. The system shall support relaxation techniques for users.\n7. The system shall allow users to follow meditation guides.\n8. The system shall allow users to monitor their breathing and heart rate during meditation.\n9. The system shall help users improve their mental well-being.\n10. The system shall track users' meditation progress.\n11. The system shall allow users to manage their meditation goals.\n12. The system shall generate reports on meditation outcomes.\n13. The system shall allow users to customize meditation settings.\n14. The system shall allow users to view their meditation histories.\n15. The system shall notify users of meditation updates.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle VR_Based_Meditation_App {\n    usecase \"Practice Meditation and Mindfulness\" as UC1\n    usecase \"Track Progress\" as UC2\n    usecase \"Analyze Meditation Data\" as UC3\n    usecase \"Provide VR Meditation Environments\" as UC4\n    usecase \"Offer Guided Meditation Sessions\" as UC5\n    usecase \"Support Relaxation Techniques\" as UC6\n    usecase \"Follow Meditation Guides\" as UC7\n    usecase \"Monitor Breathing and Heart Rate\" as UC8\n    usecase \"Improve Mental Well-Being\" as UC9\n    usecase \"Track Meditation Progress\" as UC10\n    usecase \"Manage Meditation Goals\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Meditation Settings\" as UC13\n    usecase \"View Meditation Histories\" as UC14\n    usecase \"Receive Meditation Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for Salah Tracker App:\n1. The system shall allow users to track their daily prayers.\n2. The system shall allow users to set prayer reminders.\n3. The system shall analyze users' prayer habits.\n4. The system shall provide prayer tracking tools.\n5. The system shall offer reminder notifications.\n6. The system shall support prayer statistics for users.\n7. The system shall allow users to log their daily prayers.\n8. The system shall allow users to receive reminders for prayer times.\n9. The system shall allow users to view their prayer history.\n10. The system shall track the prayer progress of users.\n11. The system shall allow users to manage their prayer goals.\n12. The system shall generate reports on prayer habits.\n13. The system shall allow users to customize their prayer settings.\n14. The system shall allow users to view their prayer histories.\n15. The system shall notify users of prayer updates.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle Salah_Tracker_App {\n    usecase \"Track Daily Prayers\" as UC1\n    usecase \"Set Prayer Reminders\" as UC2\n    usecase \"Analyze Prayer Habits\" as UC3\n    usecase \"Provide Prayer Tracking Tools\" as UC4\n    usecase \"Offer Reminder Notifications\" as UC5\n    usecase \"Support Prayer Statistics\" as UC6\n    usecase \"Log Daily Prayers\" as UC7\n    usecase \"Receive Reminders for Prayer Times\" as UC8\n    usecase \"View Prayer History\" as UC9\n    usecase \"Track Prayer Progress\" as UC10\n    usecase \"Manage Prayer Goals\" as UC11\n    usecase \"Generate Reports\" as UC12\n    usecase \"Customize Prayer Settings\" as UC13\n    usecase \"View Prayer Histories\" as UC14\n    usecase \"Receive Prayer Updates\" as UC15\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for Online Pharmacy System:\n1. The system shall allow customers to create an account.\n2. The system shall allow customers to select medicines.\n3. The system shall allow customers to place an order.\n4. The system shall allow customers to view the status of their order.\n5. The system shall allow admins to manage supplier information.\n6. The system shall allow admins to provide supplier details.\n",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Admin\n\nrectangle Online_Pharmacy_System {\n    usecase \"Create Account\" as UC1\n    usecase \"Select Medicines\" as UC2\n    usecase \"Place Order\" as UC3\n    usecase \"View Order Status\" as UC4\n    usecase \"Manage Supplier Information\" as UC5\n    usecase \"Provide Supplier Details\" as UC6\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\n\nAdmin --> UC5\nAdmin --> UC6\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for Health Equity Management System:\n1. The system shall allow patients to register and upload social and medical data.\n2. The system shall classify patients based on social determinants.\n3. The system shall allow patients to track their personal health.\n4. The system shall allow healthcare providers to plan health worker activity.\n5. The system shall notify patients of relevant medical events.\n6. The system shall allow healthcare providers, medical professionals, and government officials to access and analyze health data.\n7. The system shall allow the government to implement intervention schemes.\n",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Caretaker\nactor Healthcare_Provider\nactor Medical_Professional\nactor Government_Official\n\nrectangle Health_Equity_Management_System {\n    usecase \"Register and Upload Social and Medical Data\" as UC1\n    usecase \"Classify Patients Based on Social Determinants\" as UC2\n    usecase \"Track Personal Health\" as UC3\n    usecase \"Plan Health Worker Activity\" as UC4\n    usecase \"Notify Relevant Medical Events\" as UC5\n    usecase \"Access and Analyze Health Data\" as UC6\n    usecase \"Implement Intervention Schemes\" as UC7\n}\n\nPatient --> UC1\nPatient --> UC3\nPatient --> UC5\n\nCaretaker --> UC3\n\nHealthcare_Provider --> UC4\nHealthcare_Provider --> UC6\n\nMedical_Professional --> UC6\n\nGovernment_Official --> UC6\nGovernment_Official --> UC7\n\nUC1 --> UC2 : <<include>>\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for e-Med System:\n1. The system shall allow users to set a medicine intake schedule.\n2. The system shall notify users when they need to restock their medicines.\n3. The system shall allow users to schedule appointments with family doctors.\n4. The system shall provide an emergency button for users to press in critical situations.\n5. The system shall contact individuals listed in the user's emergency contact list when the emergency button is pressed.\n6. The system shall allow users to record their medical history.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Doctor <<secondary>>\nactor Emergency_Contact <<secondary>>\n\nrectangle e-Med_System {\n    usecase \"Set Medicine Intake Schedule\" as UC1\n    usecase \"Receive Medicine Restock Notifications\" as UC2\n    usecase \"Schedule Appointments\" as UC3\n    usecase \"Press Emergency Button\" as UC4\n    usecase \"Contact Emergency Contacts\" as UC5\n    usecase \"Record Medical History\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC6\n\nEmergency_Contact --> UC5\nDoctor --> UC3\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for Health Application:\n1. The system shall allow users to provide their daily diet cycle.\n2. The system shall provide nutrient recommendations based on the daily diet cycle.\n3. The system shall allow users to upload their medical reports.\n4. The system shall provide nutrient suggestions based on the user's medical reports.\n5. The system shall allow users to enter disease information.\n6. The system shall provide nutrient benefits for fighting the entered disease.\n7. The system shall allow users to contact professional nutritionists for clarification.\n8. The system shall authenticate users before providing recommendations.\n9. The system shall provide machine learning-based nutrient recommendations.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Nutritionist <<secondary>>\n\nrectangle Health_Application {\n    usecase \"Provide Daily Diet Cycle\" as UC1\n    usecase \"Get Nutrient Recommendations\" as UC2\n    usecase \"Upload Medical Reports\" as UC3\n    usecase \"Receive Medical-based Nutrient Suggestions\" as UC4\n    usecase \"Enter Disease Information\" as UC5\n    usecase \"Get Disease-based Nutrient Benefits\" as UC6\n    usecase \"Contact Nutritionist\" as UC7\n    usecase \"Authenticate User\" as UC8\n    usecase \"Receive ML-based Nutrient Recommendations\" as UC9\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\n\nNutritionist --> UC7\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for Health Tracker Application:\n1. The system shall allow users to input their daily food intake.\n2. The system shall allow users to track their exercise routines.\n3. The system shall allow users to monitor their water consumption.\n4. The system shall provide personalized recommendations based on user health data and goals.\n5. The system shall allow users to set reminders for meals, workouts, and hydration.\n6. The system shall allow users to connect with friends.\n7. The system shall allow users to share their achievements with friends.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Friend <<secondary>>\n\nrectangle Health_Tracker_Application {\n    usecase \"Input Daily Food Intake\" as UC1\n    usecase \"Track Exercise Routines\" as UC2\n    usecase \"Monitor Water Consumption\" as UC3\n    usecase \"Receive Personalized Recommendations\" as UC4\n    usecase \"Set Reminders\" as UC5\n    usecase \"Connect with Friends\" as UC6\n    usecase \"Share Achievements\" as UC7\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nFriend --> UC6\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for FitnessPal Application:\n1. The system shall allow users to input their fitness preferences.\n2. The system shall allow users to provide their dietary restrictions.\n3. The system shall allow users to set health goals.\n4. The system shall provide personalized suggestions based on user data.\n5. The system shall allow users to track their progress.\n6. The system shall allow users to set reminders for workouts and meals.\n7. The system shall provide access to exercise routines.\n8. The system shall provide recipes for users to explore.\n9. The system shall allow users to connect with fitness trainers.\n10. The system shall allow users to consult nutritionists.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Fitness_Trainer <<secondary>>\nactor Nutritionist <<secondary>>\n\nrectangle FitnessPal_Application {\n    usecase \"Input Fitness Preferences\" as UC1\n    usecase \"Provide Dietary Restrictions\" as UC2\n    usecase \"Set Health Goals\" as UC3\n    usecase \"Receive Personalized Suggestions\" as UC4\n    usecase \"Track Progress\" as UC5\n    usecase \"Set Reminders\" as UC6\n    usecase \"Access Exercise Routines\" as UC7\n    usecase \"Explore Recipes\" as UC8\n    usecase \"Connect with Fitness Trainers\" as UC9\n    usecase \"Consult Nutritionists\" as UC10\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\n\nFitness_Trainer --> UC9\nNutritionist --> UC10\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for Student Counselling Management System:\n1. The system shall allow students to register for counselling.\n2. The system shall allow students to check their eligibility criteria for counselling.\n3. The system shall provide information about available colleges and universities.\n4. The system shall track counselling procedures for counsellors.\n5. The system shall generate reports based on the merit list of students.\n6. The system shall allow students to monitor seat availability in institutions.\n7. The system shall publish results of the counselling process.\n",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Counsellor\n\nrectangle Student_Counselling_Management_System {\n    usecase \"Register for Counselling\" as UC1\n    usecase \"Check Eligibility Criteria\" as UC2\n    usecase \"View College Information\" as UC3\n    usecase \"Track Counselling Procedures\" as UC4\n    usecase \"Generate Reports\" as UC5\n    usecase \"Monitor Seat Availability\" as UC6\n    usecase \"Publish Results\" as UC7\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC6\nStudent --> UC7\n\nCounsellor --> UC4\nCounsellor --> UC5\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for Online Visa Processing System:\n1. The system shall allow applicants to register by providing a valid email and password.\n2. The system shall allow applicants to log in by verifying credentials.\n3. The system shall allow applicants to apply for a visa online.\n4. The system shall allow applicants to submit necessary documents.\n5. The system shall allow applicants to select a visa type.\n6. The system shall allow applicants to view and modify the application.\n7. The system shall allow applicants to delete their visa application.\n8. The system shall allow applicants to check the status of their visa application.\n9. The system shall allow administrators to update applicant details.\n10. The system shall allow administrators to interact with the Visa Consultant Officer.\n11. The system shall allow administrators to approve or reject the visa application.\n12. The system shall allow Visa Consultant Officers to view visa details.\n13. The system shall allow Visa Consultant Officers to view document proofs submitted by the applicant.\n",
        "output": "@startuml\nleft to right direction\n\nactor Applicant\nactor Administrator\nactor Visa_Consultant_Officer\n\nrectangle Online_Visa_Processing_System {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Apply for Visa\" as UC3\n    usecase \"Submit Documents\" as UC4\n    usecase \"Select Visa Type\" as UC5\n    usecase \"View/Modify Application\" as UC6\n    usecase \"Delete Application\" as UC7\n    usecase \"Check Visa Status\" as UC8\n    usecase \"Update Applicant Details\" as UC9\n    usecase \"Interact with Visa Consultant Officer\" as UC10\n    usecase \"Approve/Reject Application\" as UC11\n    usecase \"View Visa Details\" as UC12\n    usecase \"View Document Proofs\" as UC13\n}\n\nApplicant --> UC1\nApplicant --> UC2\nApplicant --> UC3\nApplicant --> UC4\nApplicant --> UC5\nApplicant --> UC6\nApplicant --> UC7\nApplicant --> UC8\n\nAdministrator --> UC9\nAdministrator --> UC10\nAdministrator --> UC11\n\nVisa_Consultant_Officer --> UC10\nVisa_Consultant_Officer --> UC12\nVisa_Consultant_Officer --> UC13\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for Placement Automation System:\n1. The system shall allow students to register as a student.\n2. The system shall allow companies to register as a company.\n3. The system shall allow students to upload their resumes.\n4. The system shall allow students to view available skills training.\n5. The system shall allow students to enroll in training.\n6. The system shall allow companies to post job opportunities.\n7. The system shall allow administrators to manage placement drives.\n8. The system shall allow students to view registered companies.\n9. The system shall allow students to track their placement status.\n10. The system shall allow administrators to manage student training records.\n",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Company\nactor Admin\n\nrectangle Placement_Automation_System {\n    usecase \"Register as Student\" as UC1\n    usecase \"Register as Company\" as UC2\n    usecase \"Upload Resume\" as UC3\n    usecase \"View Available Skills Training\" as UC4\n    usecase \"Enroll in Training\" as UC5\n    usecase \"Post Job Opportunity\" as UC6\n    usecase \"Manage Placement Drives\" as UC7\n    usecase \"View Registered Companies\" as UC8\n    usecase \"Track Placement Status\" as UC9\n    usecase \"Manage Student Training Records\" as UC10\n}\n\nStudent --> UC1\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\nStudent --> UC9\n\nCompany --> UC2\nCompany --> UC6\nCompany --> UC8\n\nAdmin --> UC7\nAdmin --> UC10\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for Farming Insights Application:\n1. The system shall provide real-time weather insights to the farmers.\n2. The system shall provide soil condition alerts to the farmers.\n3. The system shall provide market trend tracking information to the farmers.\n4. The system shall provide information about labour availability to the farmers.\n5. The system shall provide farming recommendations to the farmers.\n6. The system shall allow farmers to make data-driven decisions based on the recommendations provided.\n",
        "output": "@startuml\nleft to right direction\n\nactor Farmer\nactor Data_Provider <<secondary>>\nactor Market_Agent <<secondary>>\n\nrectangle Farming_Insights_Application {\n    usecase \"Get Real-Time Weather Insights\" as UC1\n    usecase \"Receive Soil Condition Alerts\" as UC2\n    usecase \"Track Market Trends\" as UC3\n    usecase \"Access Labour Availability Info\" as UC4\n    usecase \"Get Farming Recommendations\" as UC5\n    usecase \"Make Data-Driven Decisions\" as UC6\n}\n\nFarmer --> UC1\nFarmer --> UC2\nFarmer --> UC3\nFarmer --> UC4\nFarmer --> UC5\n\nUC5 --> UC6 : <<include>>\nData_Provider --> UC1\nData_Provider --> UC2\n\nMarket_Agent --> UC3\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for Green Rides Application:\n1. The system shall allow users to select a route from source to destination.\n2. The system shall display traffic and pollution levels for the selected route.\n3. The system shall send notifications for traffic jams to users within a specific radius.\n4. The system shall allow users to report accident-prone spots to the concerned authority.\n5. The system shall provide Meals-on-Wheel service information for available restaurants on the route.\n6. The system shall allow users to activate Drive Mode to notify callers that they are driving.\n7. The system shall allow users to provide feedback on traffic and pollution accuracy.\n8. The system shall notify users of accident-prone areas based on the number of accidents.\n9. The system shall allow road authority admins to monitor road conditions and accident reports.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor \"Road Authority Admin\" as Admin\nactor \"Hotel/Restaurant\" as Restaurant\n\nrectangle Green_Rides_App {\n    usecase \"Select Route\" as UC1\n    usecase \"View Traffic and Pollution Levels\" as UC2\n    usecase \"Receive Notifications for Traffic Jams\" as UC3\n    usecase \"Report Accident Spots\" as UC4\n    usecase \"Use Meals-on-Wheel Service\" as UC5\n    usecase \"Activate Drive Mode\" as UC6\n    usecase \"Provide Feedback\" as UC7\n    usecase \"Track Accident-Prone Areas\" as UC8\n    usecase \"Monitor Road Conditions\" as UC9\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nAdmin --> UC9\nAdmin --> UC8\n\nRestaurant --> UC5\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for Art Gallery Management System:\n1. The system shall allow customers to browse art collections.\n2. The system shall allow customers to view detailed information about each art piece.\n3. The system shall allow customers to place orders for purchasing art.\n4. The system shall allow customers to make payments for orders.\n5. The system shall allow customers to cancel their orders if needed.\n6. The system shall allow admins to manage (add, update, delete) art items in the gallery.\n7. The system shall allow admins to update details like price, description, and stock availability for art.\n8. The system shall allow admins to generate reports on gallery activity and sales.\n",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Admin\n\nrectangle Art_Gallery_Management_System {\n    usecase \"Browse Art\" as UC1\n    usecase \"View Art Details\" as UC2\n    usecase \"Place Order\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Cancel Order\" as UC5\n    usecase \"Manage Art\" as UC6\n    usecase \"Update Art Details\" as UC7\n    usecase \"Generate Gallery Report\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\n\nAdmin --> UC6\nAdmin --> UC7\nAdmin --> UC8\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for College Trade Platform:\n1. The system shall allow students to register on the platform.\n2. The system shall allow students to post items for sale or trade.\n3. The system shall allow students to search for available goods.\n4. The system shall allow students to rate sellers based on previous transactions.\n5. The system shall allow students to buy or trade items.\n6. The system shall allow students to access and view seller ratings.\n",
        "output": "@startuml\nleft to right direction\n\nactor Student\n\nrectangle College_Trade_Platform {\n    usecase \"Register\" as UC1\n    usecase \"Post Items for Sale/Trade\" as UC2\n    usecase \"Search for Goods\" as UC3\n    usecase \"Rate Sellers\" as UC4\n    usecase \"Buy/Trade Items\" as UC5\n    usecase \"Access Seller Ratings\" as UC6\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC5\nStudent --> UC4\nStudent --> UC6\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for the Online Quiz System:\n1. The system shall allow the admin to register students and teachers.\n2. The system shall allow teachers to create quizzes.\n3. The system shall allow teachers to schedule quizzes.\n4. The system shall allow teachers to edit quizzes.\n5. The system shall allow students to take quizzes.\n6. The system shall automatically evaluate the quizzes.\n7. The system shall allow students to view correct answers after taking the quiz.\n8. The system shall allow students to provide feedback on the quiz.\n",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Teacher\nactor Admin\n\nrectangle Online_Quiz_System {\n    usecase \"Register Students and Teachers\" as UC1\n    usecase \"Create Quiz\" as UC2\n    usecase \"Schedule Quiz\" as UC3\n    usecase \"Edit Quiz\" as UC4\n    usecase \"Take Quiz\" as UC5\n    usecase \"Auto Evaluation\" as UC6\n    usecase \"View Correct Answers\" as UC7\n    usecase \"Provide Feedback\" as UC8\n}\n\nAdmin --> UC1\n\nTeacher --> UC2\nTeacher --> UC3\nTeacher --> UC4\nTeacher --> UC6\n\nStudent --> UC5\nStudent --> UC7\nStudent --> UC8\n\nUC5 --> UC6 : <<include>>\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for the Book Bank Management System:\n1. The system shall authenticate users before allowing access.\n2. The system shall allow members to borrow books.\n3. The system shall allow members to buy books.\n4. The system shall allow members to reserve books or magazines.\n5. The system shall allow members to return borrowed books.\n6. The system shall allow admins to update book stock.\n7. The system shall calculate due fines for late returns.\n8. The system shall track misplaced books using a bar scanner.\n9. The system shall allow admins to manage book titles.\n10. The system shall generate sales reports.\n11. The system shall manage user records.\n12. The system shall handle payments for books.\n",
        "output": "@startuml\nleft to right direction\n\nactor Member\nactor Admin\n\nrectangle Book_Bank_Management_System {\n    usecase \"User Authentication\" as UC1\n    usecase \"Borrow Books\" as UC2\n    usecase \"Buy Books\" as UC3\n    usecase \"Reserve Books\" as UC4\n    usecase \"Return Books\" as UC5\n    usecase \"Update Stock\" as UC6\n    usecase \"Calculate Due Fine\" as UC7\n    usecase \"Track Misplaced Books\" as UC8\n    usecase \"Manage Book Titles\" as UC9\n    usecase \"Generate Sales Reports\" as UC10\n    usecase \"Manage User Records\" as UC11\n    usecase \"Handle Payments\" as UC12\n}\n\nMember --> UC1\nMember --> UC2\nMember --> UC3\nMember --> UC4\nMember --> UC5\nMember --> UC7\n\nAdmin --> UC6\nAdmin --> UC7\nAdmin --> UC8\nAdmin --> UC9\nAdmin --> UC10\nAdmin --> UC11\nAdmin --> UC12\n\nUC2 --> UC7 : <<extend>>\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for the Mega Associates Website:\n1. The system shall allow clients to view the firm's major projects.\n2. The system shall allow clients to explore available departments and collaborations.\n3. The system shall allow clients to read recent news related to the firm.\n4. The system shall allow clients to explore firm insights.\n5. The system shall allow clients to learn about the firm's history.\n6. The system shall allow clients to contact the firm via mail or chat.\n7. The system shall allow job seekers to view career opportunities.\n8. The system shall allow administrators to manage website content.\n",
        "output": "@startuml\nleft to right direction\n\nactor Client\nactor Job_Seeker\nactor Administrator\n\nrectangle Mega_Associates_Website {\n    usecase \"View Major Projects\" as UC1\n    usecase \"Explore Departments & Collaborations\" as UC2\n    usecase \"Read Recent News\" as UC3\n    usecase \"Explore Firm Insights\" as UC4\n    usecase \"Learn Firm History\" as UC5\n    usecase \"Contact via Mail or Chat\" as UC6\n    usecase \"View Career Opportunities\" as UC7\n    usecase \"Manage Website Content\" as UC8\n}\n\nClient --> UC1\nClient --> UC2\nClient --> UC3\nClient --> UC4\nClient --> UC5\nClient --> UC6\n\nJob_Seeker --> UC7\n\nAdministrator --> UC8\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for the Startup Meet System:\n1. The system shall allow entrepreneurs to create startup profiles.\n2. The system shall allow entrepreneurs to request funding from investors or mentors.\n3. The system shall allow entrepreneurs to submit startup abstracts to investors or mentors.\n4. The system shall allow entrepreneurs to give virtual presentations to investors or mentors.\n5. The system shall allow entrepreneurs to apply for government loans.\n6. The system shall allow entrepreneurs to view government policies for startups.\n7. The system shall allow mentors to provide guidance and mentorship to entrepreneurs.\n8. The system shall allow investors and mentors to review startup ideas.\n9. The system shall allow investors to accept investment proposals from entrepreneurs.\n",
        "output": "@startuml\nleft to right direction\n\nactor Entrepreneur\nactor Investor\nactor Mentor\nactor Government_Agency <<secondary>>\n\nrectangle Startup_Meet_System {\n    usecase \"Create Startup Profile\" as UC1\n    usecase \"Request Funding\" as UC2\n    usecase \"Submit Abstract\" as UC3\n    usecase \"Give Virtual Presentation\" as UC4\n    usecase \"Apply for Government Loans\" as UC5\n    usecase \"View Government Policies\" as UC6\n    usecase \"Provide Mentorship\" as UC7\n    usecase \"Review Startup Ideas\" as UC8\n    usecase \"Accept Investment Proposal\" as UC9\n}\n\nEntrepreneur --> UC1\nEntrepreneur --> UC2\nEntrepreneur --> UC3\nEntrepreneur --> UC4\nEntrepreneur --> UC5\nEntrepreneur --> UC6\n\nInvestor --> UC8\nInvestor --> UC9\nInvestor --> UC4\n\nMentor --> UC7\nMentor --> UC8\n\nGovernment_Agency --> UC5\nGovernment_Agency --> UC6\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for the Video Suggestion System:\n1. The system shall collect user activity data for video recommendations.\n2. The system shall process user data to generate video suggestions.\n3. The system shall generate a video dataset based on user interactions.\n4. The system shall suggest relevant videos to users.\n5. The system shall refresh and update video suggestions when users request or refresh their page.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Data_Processor <<secondary>>\n\nrectangle Video_Suggestion_System {\n    usecase \"Collect User Activity\" as UC1\n    usecase \"Process User Data\" as UC2\n    usecase \"Generate Video Dataset\" as UC3\n    usecase \"Suggest Videos\" as UC4\n    usecase \"Refresh and Update Suggestions\" as UC5\n}\n\nUser --> UC4\nUser --> UC5\n\nData_Processor --> UC1\nData_Processor --> UC2\nData_Processor --> UC3\n\nUC1 --> UC2 : <<include>>\nUC2 --> UC3 : <<include>>\nUC3 --> UC4 : <<include>>\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for the Library Management System:\n1. The system shall allow library members to search books by title, author, subject, or publication date.\n2. The system shall allow library members to check out available book items.\n3. The system shall allow library members to reserve book items that are not currently available.\n4. The system shall retrieve book information, including borrower details.\n5. The system shall allow library members to return checked-out books.\n6. The system shall collect fines for late returns.\n7. The system shall send notifications when reserved books become available or when books are overdue.\n",
        "output": "@startuml\nleft to right direction\n\nactor Library_Member\nactor Librarian\n\nrectangle Library_Management_System {\n    usecase \"Search Books\" as UC1\n    usecase \"Check-out Book\" as UC2\n    usecase \"Reserve Book\" as UC3\n    usecase \"Retrieve Book Information\" as UC4\n    usecase \"Return Book\" as UC5\n    usecase \"Collect Fines\" as UC6\n    usecase \"Send Notifications\" as UC7\n}\n\nLibrary_Member --> UC1\nLibrary_Member --> UC2\nLibrary_Member --> UC3\nLibrary_Member --> UC5\nLibrary_Member --> UC6\n\nLibrarian --> UC6\nLibrarian --> UC4\n\nUC5 --> UC7 : <<extend>>\nUC3 --> UC7 : <<extend>>\n@enduml"
    },
    {
        "input": "Draw a use case diagram. Functional Requirements for the Course Management System:\n1. The system shall allow lecturers to give one or more lectures.\n2. The system shall allow lecturers to go on leave for research purposes, preventing them from giving lectures.\n3. The system shall allow students to attend one or more lectures.\n4. The system shall provide study groups for solving exercises during the semester.\n5. The system shall assign each student to a specific study group for the semester.\n6. The system shall ensure that a study group consists of two to three students.\n7. The system shall allow tutors to grade solutions submitted by study groups.\n",
        "output": "@startuml\nleft to right direction\n\nactor Lecturer\nactor Student\nactor Tutor\n\nrectangle Course_Management_System {\n    usecase \"Give Lecture\" as UC1\n    usecase \"Attend Lecture\" as UC2\n    usecase \"Assign Study Group\" as UC3\n    usecase \"Submit Solution\" as UC4\n    usecase \"Grade Solution\" as UC5\n}\n\nLecturer --> UC1\nLecturer --> UC3 : <<include>>\nStudent --> UC2\nStudent --> UC4\nStudent --> UC3\nTutor --> UC5\nUC4 --> UC5 : <<include>>\n@enduml"
    },
    {
        "input": "Give use case diagram. Functional Requirements for the Content Management System:\n1. The system shall allow an administrator to create a new blog account.\n2. The system shall verify author details before creating a blog account using the author credentials database.\n3. The system shall allow an administrator to create a new personal Wiki.\n4. The system shall verify author details before creating a personal Wiki using the Author Credentials service.\n",
        "output": "@startuml\nleft to right direction\n\nactor Administrator\nactor \"Verification Service\" as VerificationService <<secondary>>\n\nrectangle Content_Management_System {\n    usecase \"Create New Blog Account\" as UC1\n    usecase \"Create New Wiki\" as UC2\n    usecase \"Verify Author Details\" as UC3\n}\n\nAdministrator --> UC1\nAdministrator --> UC2\nUC1 --> UC3 : <<include>>\nUC2 --> UC3 : <<include>>\n\nVerificationService --> UC3\n@enduml"
    },
    {
        "input": "Give use case diagram. Functional Requirements for the eDoc Health Record Management System:\n1. The system shall manage patient profiles, including comprehensive personal information.\n2. The system shall allow healthcare providers to input and organize patient medical history.\n3. The system shall allow advanced appointment scheduling for patients, including reminders.\n4. The system shall provide appointment reminders for both patients and healthcare providers.\n5. The system shall enable telemedicine consultations and remote interactions with patients.\n6. The system shall provide patients access to their health records through secure portals.\n7. The system shall allow data analysis, collaboration, and report generation for healthcare teams.\n8. The system shall support importing and exporting health data between systems.\n9. The system shall perform regular backups and provide data recovery options.\n10. The system shall manage patient medication records, including medication reminders.\n11. The system shall store and manage diagnostic records like lab results and imaging reports.\n",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Healthcare_Provider\nactor System_Admin\n\nrectangle eDoc_Health_Record_Management_System {\n    usecase \"Manage Patient Profile\" as UC1\n    usecase \"Input Medical History\" as UC2\n    usecase \"Schedule Appointments\" as UC3\n    usecase \"Send Appointment Reminders\" as UC4\n    usecase \"Perform Telemedicine Consultations\" as UC5\n    usecase \"Access Secure Patient Portals\" as UC6\n    usecase \"Analyze Data and Generate Reports\" as UC7\n    usecase \"Import/Export Health Data\" as UC8\n    usecase \"Perform Data Backup and Recovery\" as UC9\n    usecase \"Manage Medication Records\" as UC10\n    usecase \"Store and Manage Diagnostic Records\" as UC11\n}\n\nPatient --> UC1\nPatient --> UC2\nPatient --> UC3\nPatient --> UC6\nPatient --> UC10\n\nHealthcare_Provider --> UC2\nHealthcare_Provider --> UC3\nHealthcare_Provider --> UC5\nHealthcare_Provider --> UC7\nHealthcare_Provider --> UC10\nHealthcare_Provider --> UC11\n\nSystem_Admin --> UC8\nSystem_Admin --> UC9\n\nUC3 --> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Give use case diagram. Functional Requirements for the HealthCare Management System:\n1. The system shall manage patient profiles.\n2. The system shall input and organize medical history.\n3. The system shall allow advanced appointment scheduling.\n4. The system shall send appointment reminders.\n5. The system shall allow telemedicine consultations.\n6. The system shall provide access to patient portals.\n7. The system shall analyze data and generate reports.\n8. The system shall support import/export of health data.\n9. The system shall perform data backups and recovery.\n10. The system shall manage medication records.\n11. The system shall store diagnostic reports.\n",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Healthcare_Provider\nactor System_Admin\n\nrectangle HealthCare_Management_System {\n    usecase \"Manage Patient Profiles\" as UC1\n    usecase \"Input Medical History\" as UC2\n    usecase \"Schedule Appointments\" as UC3\n    usecase \"Send Appointment Reminders\" as UC4\n    usecase \"Perform Telemedicine Consultations\" as UC5\n    usecase \"Access Patient Portal\" as UC6\n    usecase \"Analyze Data and Generate Reports\" as UC7\n    usecase \"Import/Export Health Data\" as UC8\n    usecase \"Perform Data Backup and Recovery\" as UC9\n    usecase \"Manage Medication Records\" as UC10\n    usecase \"Store Diagnostic Reports\" as UC11\n}\n\nPatient --> UC1\nPatient --> UC2\nPatient --> UC3\nPatient --> UC6\nPatient --> UC10\n\nHealthcare_Provider --> UC2\nHealthcare_Provider --> UC3\nHealthcare_Provider --> UC5\nHealthcare_Provider --> UC7\nHealthcare_Provider --> UC10\nHealthcare_Provider --> UC11\n\nSystem_Admin --> UC8\nSystem_Admin --> UC9\n\nUC3 --> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Give use case diagram. Functional Requirements for the Parcel Delivery Management System:\n1. The system shall provide advanced parcel tracking.\n2. The system shall manage returns efficiently.\n3. The system shall monitor real-time parcel inventory.\n4. The system shall support customer interactions with customer service.\n5. The system shall process payments securely and efficiently.\n",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Admin\n\nrectangle Parcel_Delivery_Management_System {\n    usecase \"Track Parcels\" as UC1\n    usecase \"Manage Returns\" as UC2\n    usecase \"Monitor Inventory\" as UC3\n    usecase \"Access Customer Support\" as UC4\n    usecase \"Process Payments\" as UC5\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC4\nCustomer --> UC5\n\nAdmin --> UC3\n@enduml"
    },
    {
        "input": "Give use case diagram. Functional Requirements for the Crime Information System:\n1. The system shall manage users.\n2. The system shall receive crime-related notifications.\n3. The system shall allow the police to update FIRs.\n4. The system shall allow the police to create FIRs.\n5. The system shall provide access to police station information.\n6. The system shall provide access to a crime database.\n7. The system shall allow users to join community safety forums.\n8. The system shall manage criminal records.\n9. The system shall allow the police to search criminal records.\n",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Police_Officer\nactor Admin\n\nrectangle Crime_Information_System {\n    usecase \"User Management\" as UC1\n    usecase \"Receive Crime Notifications\" as UC2\n    usecase \"Update FIR\" as UC3\n    usecase \"Create FIR\" as UC4\n    usecase \"Access Police Station Info\" as UC5\n    usecase \"Access Crime Database\" as UC6\n    usecase \"Join Community Safety Forums\" as UC7\n    usecase \"Manage Criminal Records\" as UC8\n    usecase \"Search Criminal Records\" as UC9\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC7\n\nPolice_Officer --> UC3\nPolice_Officer --> UC4\nPolice_Officer --> UC6\nPolice_Officer --> UC9\n\nAdmin --> UC1\nAdmin --> UC5\nAdmin --> UC8\n@enduml"
    },
    {
        "input": "Give use case diagram. Functional Requirements for the Timetable Management System:\n1. The system shall allow users to register and log in securely.\n2. The system shall allow administrators to enroll students and manage their information.\n3. The system shall allow administrators to assign courses to students.\n4. The system shall allow administrators to assign courses to faculty.\n5. The system shall allow faculty members to input their preferred time slots for lectures.\n6. The system shall generate timetables based on student courses, faculty preferences, and available resources.\n7. The system shall allocate available lecture halls based on the generated timetable.\n8. The system shall generate reports detailing course allocations and schedules.\n9. The system shall provide students with reports showing their enrolled courses and schedules.\n10. The system shall provide faculty with reports detailing their course assignments and schedules.\n",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Admin\nactor Faculty\n\nrectangle Timetable_Management_System {\n    usecase \"Register and Login\" as UC1\n    usecase \"Enroll Student\" as UC2\n    usecase \"Allocate Courses to Students\" as UC3\n    usecase \"Allocate Courses to Faculty\" as UC4\n    usecase \"Add Faculty Time Preferences\" as UC5\n    usecase \"Generate Timetable\" as UC6\n    usecase \"Allocate Lecture Halls\" as UC7\n    usecase \"Generate Course Report\" as UC8\n    usecase \"Generate Student Course Report\" as UC9\n    usecase \"Generate Faculty Course Report\" as UC10\n}\n\nStudent --> UC1\nStudent --> UC9\n\nAdmin --> UC1\nAdmin --> UC2\nAdmin --> UC3\nAdmin --> UC4\nAdmin --> UC6\nAdmin --> UC7\nAdmin --> UC8\n\nFaculty --> UC1\nFaculty --> UC5\nFaculty --> UC10\n\nUC6 --> UC7 : <<extend>>\n@enduml"
    },
    {
        "input": "Give use case diagram. Functional Requirements for the Cricket Stadium Management System:\n1. The system shall allow fans to view comprehensive information about upcoming events in the stadium.\n2. The system shall allow fans to explore different pricing plans for tickets.\n3. The system shall allow fans to check seat availability.\n4. The system shall allow fans to securely purchase tickets for events.\n5. The system shall allow sponsors to explore available sponsorship options within the stadium.\n6. The system shall allow sponsors to track the return on investment (ROI) for their sponsorships.\n",
        "output": "@startuml\nleft to right direction\n\nactor Fan\nactor Sponsor\n\nrectangle Cricket_Stadium_Management_System {\n    usecase \"View Event Information\" as UC1\n    usecase \"Explore Pricing Plans\" as UC2\n    usecase \"Check Seat Availability\" as UC3\n    usecase \"Purchase Tickets\" as UC4\n    usecase \"Explore Sponsorship Options\" as UC5\n    usecase \"Track Sponsorship ROI\" as UC6\n}\n\nFan --> UC1\nFan --> UC2\nFan --> UC3\nFan --> UC4\n\nSponsor --> UC5\nSponsor --> UC6\n@enduml"
    },
    {
        "input": "Give use case diagram. Functional Requirements for the Tech E-Commerce System:\n1. The system shall allow customers to browse the catalog of tech goods and repair services.\n2. The system shall allow customers to add items to a shopping cart.\n3. The system shall allow customers to complete the checkout process to purchase products or services.\n4. The system shall allow customers to review their past orders.\n5. The system shall allow customers to cancel ongoing repair orders.\n6. The system shall allow customers to manage account details, including personal and billing information.\n7. The system shall allow customers to provide feedback on purchased goods and services.\n8. The system shall allow customers to contact support through a helpline for inquiries and assistance.\n",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Support <<secondary>>\n\nrectangle Tech_E_Commerce_System {\n    usecase \"Browse Catalog\" as UC1\n    usecase \"Add Items to Cart\" as UC2\n    usecase \"Checkout\" as UC3\n    usecase \"Review Past Orders\" as UC4\n    usecase \"Cancel Repair Order\" as UC5\n    usecase \"Manage Account Details\" as UC6\n    usecase \"Provide Feedback\" as UC7\n    usecase \"Contact Helpline\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\nCustomer --> UC8\n\nSupport --> UC8\n@enduml"
    },
    {
        "input": "Give use case diagram. Functional Requirements for the Clinic Management System:\n1. The system shall allow for patient registration.\n2. The system shall manage patient information, including personal details, medical history, and contact information.\n3. The system shall support appointment scheduling for patients.\n4. The system shall send appointment reminders to patients and staff.\n5. The system shall generate bills based on services provided.\n6. The system shall track payment statuses for each patient.\n7. The system shall facilitate staff collaboration and communication.\n8. The system shall generate reports and analytics based on patient data, appointments, and billing information.\n",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Staff\n\nrectangle Clinic_Management_System {\n    usecase \"Register Patient\" as UC1\n    usecase \"Manage Patient Information\" as UC2\n    usecase \"Schedule Appointment\" as UC3\n    usecase \"Send Appointment Reminders\" as UC4\n    usecase \"Generate Bills\" as UC5\n    usecase \"Track Payment Status\" as UC6\n    usecase \"Staff Collaboration\" as UC7\n    usecase \"Generate Reports and Analytics\" as UC8\n}\n\nPatient --> UC1\nPatient --> UC3\nPatient --> UC6\n\nStaff --> UC2\nStaff --> UC7\nStaff --> UC5\nStaff --> UC8\n\nUC3 --> UC4 : <<include>>\n@enduml"
    },
    {
        "input": "Give use case diagram. Functional Requirements for LawKeeper - Law Firm Management System:\n1. The system shall allow lawyers to create, update, and manage case files.\n2. The system shall allow lawyers to create and assign tasks related to cases.\n3. The system shall allow lawyers to access and manage legal references and research materials.\n4. The system shall allow lawyers to send case updates to clients.\n5. The system shall help users monitor and manage critical case deadlines.\n6. The system shall track billable hours for each client.\n7. The system shall allow clients and lawyers to review billing details.\n8. The system shall allow clients to receive updates about their cases.\n9. The system shall allow clients to review payment transactions.\n10. The system shall allow clients to file new cases.\n11. The system shall allow clients to share case-related documents.\n",
        "output": "@startuml\nleft to right direction\n\nactor Lawyer\nactor Client\n\nrectangle LawKeeper_Management_System {\n    usecase \"Manage Case Files\" as UC1\n    usecase \"Create and Assign Tasks\" as UC2\n    usecase \"Access Legal References\" as UC3\n    usecase \"Send Case Updates\" as UC4\n    usecase \"Monitor Case Deadlines\" as UC5\n    usecase \"Track Billable Hours\" as UC6\n    usecase \"Review Billing Details\" as UC7\n    usecase \"Receive Updates\" as UC8\n    usecase \"Review Payments\" as UC9\n    usecase \"File a Case\" as UC10\n    usecase \"Share Documents\" as UC11\n}\n\nLawyer --> UC1\nLawyer --> UC2\nLawyer --> UC3\nLawyer --> UC4\nLawyer --> UC5\nLawyer --> UC6\nLawyer --> UC7\n\nClient --> UC8\nClient --> UC9\nClient --> UC10\nClient --> UC11\n@enduml"
    },
    {
        "input": "Given the requirements, generate a use case diagram for this system. Functional Requirements for the Online Shopping System:\n1. The system shall allow customers to browse products.\n2. The system shall allow customers to add items to their shopping cart.\n3. The system shall allow customers to complete the checkout process.\n4. The system shall allow customers to create an account.\n5. The system shall allow customers to manage their profile.\n6. The system shall allow customers to view order history.\n7. The system shall support secure payment processing.\n8. The system shall provide order tracking functionality.\n9. The system shall allow administrators to manage product listings.\n10. The system shall allow administrators to view sales reports.\n11. The system shall allow administrators to process customer inquiries.\n12. The system shall integrate with a payment gateway for processing payments.\n",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Admin\nactor \"Payment Gateway\" as Payment_Gateway <<secondary>>\n\nrectangle Online_Shopping_System {\n    usecase \"Browse Products\" as UC1\n    usecase \"Add to Cart\" as UC2\n    usecase \"Checkout\" as UC3\n    usecase \"Create Account\" as UC4\n    usecase \"Manage Profile\" as UC5\n    usecase \"View Order History\" as UC6\n    usecase \"Secure Payment Processing\" as UC7\n    usecase \"Order Tracking\" as UC8\n    usecase \"Manage Product Listings\" as UC9\n    usecase \"View Sales Reports\" as UC10\n    usecase \"Process Customer Inquiries\" as UC11\n    usecase \"Process Payment\" as UC12\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\nCustomer --> UC8\n\nAdmin --> UC9\nAdmin --> UC10\nAdmin --> UC11\n\nUC12 --> Payment_Gateway\n@enduml"
    },
    {
        "input": "Given the requirements, generate a use case diagram for this system.\n Functional Requirements for the ATM System:\n1. The system must check the validity of the inserted ATM card.\n2. The system must validate the PIN number entered by the customer.\n3. The system must ensure that no more than $250 is dispensed against any ATM card within a 24-hour period.\n4. The system must be written in C++.\n5. The system must communicate with the bank using 256-bit encryption.\n6. The system must validate an ATM card in three seconds or less.\n7. The system must validate a PIN in three seconds or less.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Bank_System <<secondary>>\n\nrectangle ATM_System {\n    usecase \"Insert ATM Card\" as UC1\n    usecase \"Enter PIN\" as UC2\n    usecase \"Withdraw Cash\" as UC3\n    usecase \"Check Account Balance\" as UC4\n    usecase \"Transfer Funds\" as UC5\n    usecase \"Check Card Validity\" as UC6\n    usecase \"Validate PIN\" as UC7\n    usecase \"Dispense Cash\" as UC8\n    usecase \"Check Daily Limit\" as UC9\n    usecase \"Handle Bank Communication\" as UC10\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\n\nUC1 --> UC6 : <<include>>\nUC2 --> UC7 : <<include>>\nUC3 --> UC9 : <<include>>\nUC3 --> UC8 : <<include>>\nUC5 --> UC10 : <<include>>\n\nBank_System --> UC10\n@enduml"
    },
    {
        "input": "Given the requirements, generate a use case diagram for this system. \n Functional Requirements for the Hotel Management System:\n1. The system must allow guests to check-in and check-out of the hotel.\n2. The system must provide room booking functionality for guests.\n3. The system must support room service requests for guests.\n4. The system must generate invoices detailing guest stays and charges.\n5. The system must allow staff to manage room availability, view guest information, and process payments.",
        "output": "@startuml\nleft to right direction\n\nactor Guest\nactor Staff\n\nrectangle Hotel_Management_System {\n    usecase \"Check-in\" as UC1\n    usecase \"Check-out\" as UC2\n    usecase \"Book Room\" as UC3\n    usecase \"Order Room Service\" as UC4\n    usecase \"Generate Invoice\" as UC5\n    usecase \"Manage Room Availability\" as UC6\n    usecase \"View Guest Information\" as UC7\n    usecase \"Process Payments\" as UC8\n}\n\nGuest --> UC1\nGuest --> UC2\nGuest --> UC3\nGuest --> UC4\nGuest --> UC5\n\nStaff --> UC6\nStaff --> UC7\nStaff --> UC8\n@enduml"
    },
    {
        "input": "Given the requirements, generate a use case diagram for this system. Functional Requirements for the ASU Registration System:\n1. Professors indicate which courses they will teach online.\n2. A course catalog can be printed.\n3. Students must be able to select up to four courses for the upcoming semester online.\n4. The system must enforce a maximum of 10 students and a minimum of 3 students per course.\n5. After registration, the system must send information to the billing system.\n6. Professors must be able to obtain course rosters online.\n7. Students must be able to add or drop classes online.",
        "output": "@startuml\nleft to right direction\n\nactor Professor\nactor Student\nactor Billing_System <<secondary>>\n\nrectangle ASU_Registration_System {\n    usecase \"Indicate Courses to Teach\" as UC1\n    usecase \"Print Course Catalog\" as UC2\n    usecase \"Select Courses for Semester\" as UC3\n    usecase \"Add or Drop Classes\" as UC4\n    usecase \"Send Information to Billing System\" as UC5\n    usecase \"Obtain Course Rosters\" as UC6\n}\n\nProfessor --> UC1\nProfessor --> UC6\nProfessor --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC2\nUC3 --> UC5 : <<include>>\nUC4 --> UC5 : <<include>>\n\nBilling_System --> UC5\n@enduml"
    },
    {
        "input": "Given the requirements, generate a use case diagram for this system. Functional Requirements for the University Information System:\n1. The system must manage details of faculties and institutes, including their names and addresses.\n2. Each faculty is led by a dean, who must have their details managed by the system.\n3. The system must manage employee information, including social security numbers, names, and e-mail addresses.\n4. The system must distinguish between research personnel and administrative personnel.\n5. Research associates must be assigned to one or more institutes, and their field of study must be recorded.\n6. The system must track research projects, including names, starting and end dates, and assigned hours for research associates.\n7. Research associates involved in teaching are considered lecturers, and the system must track course details such as unique ID, course name, and weekly duration in hours.",
        "output": "@startuml\nleft to right direction\n\nactor Dean\nactor Research_Associate\nactor Admin_Personnel\nactor Lecturer\nactor University_Admin\n\nLecturer <|-- Research_Associate\n\nrectangle University_Information_System {\n    usecase \"Manage Faculty Details\" as UC1\n    usecase \"Manage Institute Details\" as UC2\n    usecase \"Record Faculty and Institute Addresses\" as UC3\n    usecase \"Manage Employee Information\" as UC4\n    usecase \"Assign Research Associates to Institutes\" as UC5\n    usecase \"Track Research Projects\" as UC6\n    usecase \"Track Course Details\" as UC7\n}\n\nDean --> UC1\nDean --> UC2\nDean --> UC3\n\nResearch_Associate --> UC5\nResearch_Associate --> UC6\n\nAdmin_Personnel --> UC4\nUniversity_Admin --> UC4\nUniversity_Admin --> UC6\nUniversity_Admin --> UC7\n\nLecturer --> UC7\n\nUC5 --> UC6 : <<include>>\n@enduml"
    },
    {
        "input": "Given the requirements, generate a use case diagram for this system. Functional Requirements for Legal Eagle Case Management System:\n1. The system must support the creation of legal cases and allow updates to case status.\n2. The system must provide clients with the ability to file cases and receive updates on case status.\n3. The system must generate reports and analytics based on case data for legal professionals.\n4. The system must allow legal research to be performed within the system.\n5. The system must support document management for legal cases, allowing legal professionals to store and access case-related documents.\n6. The system must integrate voice commands for key functions such as case creation, updates, filing, and notifications.",
        "output": "@startuml\nleft to right direction\n\nactor Legal_Professional\nactor Client\nactor Legal_Researcher\nactor Voice_Assistant <<secondary>>\n\nrectangle Legal_Eagle_Case_Management_System {\n    usecase \"Create Case\" as UC1\n    usecase \"Track Case Status\" as UC2\n    usecase \"Update Case Status\" as UC3\n    usecase \"File a Case\" as UC4\n    usecase \"Receive Case Updates\" as UC5\n    usecase \"Generate Reports and Analytics\" as UC6\n    usecase \"Perform Legal Research\" as UC7\n    usecase \"Manage Documents\" as UC8\n    usecase \"Activate Using Voice\" as UC9\n}\n\nLegal_Professional --> UC1\nLegal_Professional --> UC2\nLegal_Professional --> UC3\nLegal_Professional --> UC6\nLegal_Professional --> UC7\nLegal_Professional --> UC8\n\nClient --> UC4\nClient --> UC5\n\nLegal_Researcher --> UC7\n\nVoice_Assistant --> UC9\n\nUC1 --> UC9 : <<extend>>\nUC3 --> UC9 : <<extend>>\nUC4 --> UC9 : <<extend>>\nUC5 --> UC9 : <<extend>>\n@enduml"
    },
    {
        "input": "Given the requirements, generate a use case diagram for this system. Functional Requirements for TimeCraft Parcel Management System:\n1. The system must allow users (senders and receivers) to track parcels in real-time.\n2. The system must provide users with the ability to report rough handling issues.\n3. Delivery companies must be able to update the status of parcels in transit.\n4. Users must receive real-time updates about parcel status and delivery.\n5. The system must allow senders to schedule parcel pickups.\n6. Delivery companies must be able to manage parcel delivery routes efficiently.\n7. Delivery companies must have control over various delivery options.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Delivery_Company\n\nUser <|-- Sender\nUser <|-- Receiver\n\nrectangle TimeCraft_Parcel_Management_System {\n    usecase \"Track Parcels\" as UC1\n    usecase \"Report Rough Handling Issues\" as UC2\n    usecase \"Update Parcel Status\" as UC3\n    usecase \"Receive Real-Time Updates\" as UC4\n    usecase \"Schedule Parcel Pickup\" as UC5\n    usecase \"Manage Parcel Routes\" as UC6\n    usecase \"Control Delivery Options\" as UC7\n}\n\nSender --> UC5\nSender --> UC2\nSender --> UC1\n\nReceiver --> UC4\nReceiver --> UC1\n\nDelivery_Company --> UC6\nDelivery_Company --> UC7\nDelivery_Company --> UC3\n\n@enduml"
    },
    {
        "input": "Given the requirements, generate a use case diagram for this system. Functional Requirements for Employee Management System (EMS):\n1. The system must allow HR teams to manage employee information.\n2. The system must track employee attendance in real-time.\n3. The system must support salary management functionality.\n4. The system must enable HR teams to generate automated reports.\n5. The system must allow employees to view their attendance records.",
        "output": "@startuml\nleft to right direction\n\nactor HR_Team\nactor Employee\n\nrectangle Employee_Management_System {\n    usecase \"Manage Employee Information\" as UC1\n    usecase \"Track Attendance\" as UC2\n    usecase \"Manage Salaries\" as UC3\n    usecase \"Generate Reports\" as UC4\n    usecase \"View Attendance Record\" as UC5\n}\n\nHR_Team --> UC1\nHR_Team --> UC2\nHR_Team --> UC3\nHR_Team --> UC4\n\nEmployee --> UC5\nEmployee --> UC1\n@enduml"
    },
    {
        "input": "Given the requirements, generate a use case diagram for this system. Functional Requirements for RoboCop Crime Information System:\n1. The system must allow law enforcement agents to manage user accounts.\n2. The system must provide crime-related notifications to users.\n3. The system must handle FIR (First Information Reports).\n4. The system must provide information about the nearest police station.\n5. The system must display crime statistics.\n6. The system must provide access to a comprehensive crime database.\n7. The system must manage criminal records.\n8. The system must allow searching for criminal records.\n9. The system must support community safety forums for public participation.",
        "output": "@startuml\nleft to right direction\n\nactor Law_Enforcement_Agent\nactor Citizen\n\nrectangle RoboCop_Crime_Information_System {\n    usecase \"Manage User Accounts\" as UC1\n    usecase \"Receive Crime Notifications\" as UC2\n    usecase \"Handle FIR\" as UC3\n    usecase \"Access Police Station Info\" as UC4\n    usecase \"View Crime Statistics\" as UC5\n    usecase \"Access Crime Database\" as UC6\n    usecase \"Manage Criminal Records\" as UC7\n    usecase \"Search Criminal Records\" as UC8\n    usecase \"Participate in Safety Forums\" as UC9\n}\n\nCitizen --> UC2\nCitizen --> UC3\nCitizen --> UC4\nCitizen --> UC9\n\nLaw_Enforcement_Agent --> UC1\nLaw_Enforcement_Agent --> UC2\nLaw_Enforcement_Agent --> UC3\nLaw_Enforcement_Agent --> UC4\nLaw_Enforcement_Agent --> UC5\nLaw_Enforcement_Agent --> UC6\nLaw_Enforcement_Agent --> UC7\nLaw_Enforcement_Agent --> UC8\n\nUC3 --> UC2 : <<include>>\n@enduml"
    },
    {
        "input": "Given the requirements, generate a use case diagram for this system. Functional Requirements for Anywhere Grocery Store Management System:\n1. The system must allow store managers to manage inventory effectively.\n2. The system must support sales processing at the point of sale.\n3. The system must provide supplier management tools for store managers.\n4. The system must handle customer service requests.\n5. The system must support online shopping functionality for customers.\n6. The system must allow customers to track their orders.\n7. The system must enable store managers to view sales reports.\n8. The system must allow suppliers to provide stock to the store.\n9. The system must handle order delivery processes.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Supplier <<secondary>>\nactor Store_Manager\n\nrectangle Anywhere_Grocery_Store_Management_System {\n    usecase \"Manage Inventory\" as UC1\n    usecase \"Process Sales\" as UC2\n    usecase \"Manage Suppliers\" as UC3\n    usecase \"Handle Customer Service Requests\" as UC4\n    usecase \"Online Shopping\" as UC5\n    usecase \"Track Orders\" as UC6\n    usecase \"View Sales Reports\" as UC7\n    usecase \"Provide Stock\" as UC8\n    usecase \"Deliver Orders\" as UC9\n}\n\nCustomer --> UC5\nCustomer --> UC6\n\nStore_Manager --> UC1\nStore_Manager --> UC2\nStore_Manager --> UC3\nStore_Manager --> UC4\nStore_Manager --> UC7\nStore_Manager --> UC9\n\nSupplier --> UC8\n@enduml"
    },
    {
        "input": "Given the requirements, generate a use case diagram for this system. Functional Requirements for Gym Management System:\n1. The system must allow members to register.\n2. The system must provide members with access to class schedules.\n3. The system must track attendance using biometric or card-based methods.\n4. The system must support payment processing for members.\n5. The system must enable gym administrators to manage inventory in real-time.\n6. The system must allow communication between members and staff.\n7. The system must allow trainers to access class assignments.\n8. The system must facilitate automated payment processing.\n9. The system must provide real-time updates on inventory management.",
        "output": "@startuml\nleft to right direction\n\nactor Member\nactor Trainer\nactor Gym_Admin\nactor Payment_Gateway <<secondary>>\n\nrectangle Gym_Management_System {\n    usecase \"Register\" as UC1\n    usecase \"View Class Schedule\" as UC2\n    usecase \"Track Attendance\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Manage Inventory\" as UC5\n    usecase \"Communicate with Staff\" as UC6\n    usecase \"Assign Classes\" as UC7\n    usecase \"Process Payment\" as UC8\n    usecase \"Track Real-time Inventory\" as UC9\n}\n\nMember --> UC1\nMember --> UC2\nMember --> UC4\nMember --> UC6\n\nTrainer --> UC7\nTrainer --> UC3\n\nGym_Admin --> UC2\nGym_Admin --> UC5\nGym_Admin --> UC9\nGym_Admin --> UC8\n\nPayment_Gateway --> UC8\n@enduml"
    },
    {
        "input": "Given the requirements, generate a use case diagram for this system. Functional Requirements for Time Table Generating Management System:\n1. The system must allow administrators to enroll students.\n2. The system must enable administrators to allocate courses to students.\n3. The system must enable administrators to allocate courses to faculty members.\n4. The system must generate optimized timetables automatically.\n5. The system must allocate lecture halls based on the generated timetable.\n6. The system must generate reports detailing courses and schedules for both students and faculty.\n7. The system must allow faculty members to input their time preferences.\n8. The system must allow students to view their course schedules.",
        "output": "@startuml\nleft to right direction\n\nactor Admin\nactor Faculty\nactor Student\n\nrectangle Time_Table_Generating_Management_System {\n    usecase \"Enroll Students\" as UC1\n    usecase \"Allocate Courses to Students\" as UC2\n    usecase \"Allocate Courses to Faculty\" as UC3\n    usecase \"Generate Timetable\" as UC4\n    usecase \"Allocate Lecture Halls\" as UC5\n    usecase \"Generate Reports\" as UC6\n    usecase \"Input Time Preferences\" as UC7\n    usecase \"View Course Schedule\" as UC8\n}\n\nAdmin --> UC1\nAdmin --> UC2\nAdmin --> UC3\nAdmin --> UC4\nAdmin --> UC5\nAdmin --> UC6\n\nFaculty --> UC7\nFaculty --> UC6\n\nStudent --> UC8\n@enduml"
    },
    {
        "input": "Given the requirements, generate a use case diagram for this system. Functional Requirements for Cricket Stadium Management System:\n1. The system must allow fans to buy tickets.\n2. The system must provide access to event information for fans.\n3. The system must send updates about events to fans.\n4. The system must enable sponsors to explore sponsorship opportunities.\n5. The system must support sponsors in engaging with the cricket community.",
        "output": "@startuml\nleft to right direction\n\nactor Fan\nactor Sponsor\n\nrectangle Cricket_Stadium_Management_System {\n    usecase \"Buy Tickets\" as UC1\n    usecase \"Access Event Information\" as UC2\n    usecase \"Receive Event Updates\" as UC3\n    usecase \"Explore Sponsorship Opportunities\" as UC4\n    usecase \"Engage with Cricket Community\" as UC5\n}\n\nFan --> UC1\nFan --> UC2\nFan --> UC3\n\nSponsor --> UC4\nSponsor --> UC5\n@enduml"
    },
    {
        "input": "Given the requirements, generate a use case diagram for this system. Functional Requirements for E-Commerce System:\n1. The system must allow customers to log in.\n2. The system must enable customers to purchase tech goods.\n3. The system must enable customers to purchase tech services.\n4. The system must allow customers to track orders.\n5. The system must allow customers to provide feedback.\n6. The system must provide a customer helpline for assistance.\n7. The system must provide a catalog of products for browsing.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Support <<secondary>>\n\nrectangle E_Commerce_System {\n    usecase \"Log In\" as UC1\n    usecase \"Purchase Tech Goods\" as UC2\n    usecase \"Purchase Tech Services\" as UC3\n    usecase \"Track Orders\" as UC4\n    usecase \"Provide Feedback\" as UC5\n    usecase \"Access Customer Helpline\" as UC6\n    usecase \"Browse Product Catalog\" as UC7\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC6\n@enduml"
    },
    {
        "input": "Given the requirements, generate a use case diagram for this system. Functional Requirements for Clinisync System:\n1. The system must allow patients to register.\n2. The system must enable staff to manage patient information.\n3. The system must allow patients to schedule appointments.\n4. The system must handle billing operations.\n5. The system must generate reports for the clinic.\n6. The system must support managing invoicing for patient transactions.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Staff\n\nrectangle Clinisync_System {\n    usecase \"Register\" as UC1\n    usecase \"Manage Patient Information\" as UC2\n    usecase \"Schedule Appointment\" as UC3\n    usecase \"Handle Billing\" as UC4\n    usecase \"Generate Reports\" as UC5\n    usecase \"Manage Invoicing\" as UC6\n}\n\nPatient --> UC1\nPatient --> UC3\n\nStaff --> UC2\nStaff --> UC3\nStaff --> UC4\nStaff --> UC5\nStaff --> UC6\n@enduml"
    },
    {
        "input": "Given the requirements, generate a use case diagram for this system. Functional Requirements for LawKeeper System:\n1. The system must allow lawyers to access and manage client files.\n2. The system must enable lawyers to track billable hours.\n3. The system must allow lawyers to organize case files.\n4. The system must support managing appointments for lawyers.\n5. The system must track case progress for clients and lawyers.\n6. The system must provide clients with updates on case progress.\n7. The system must allow clients to access essential case documents.\n8. The system must allow clients to view billable hours.\n9. The system must support clients in conducting transactions.\n10. The system must process payments through an external payment gateway.",
        "output": "@startuml\nleft to right direction\n\nactor Lawyer\nactor Client\nactor Payment_Gateway <<secondary>>\n\nrectangle LawKeeper_System {\n    usecase \"Access and Manage Client Files\" as UC1\n    usecase \"Track Billable Hours\" as UC2\n    usecase \"Organize Case Files\" as UC3\n    usecase \"Manage Appointments\" as UC4\n    usecase \"Track Case Progress\" as UC5\n    usecase \"Receive Case Progress Updates\" as UC6\n    usecase \"Access Essential Documents\" as UC7\n    usecase \"View Billable Hours\" as UC8\n    usecase \"Conduct Transactions\" as UC9\n    usecase \"Process Payment\" as UC10\n}\n\nLawyer --> UC1\nLawyer --> UC2\nLawyer --> UC3\nLawyer --> UC4\n\nClient --> UC5\nClient --> UC7\nClient --> UC8\nClient --> UC9\n\nUC5 --> UC6 : <<include>>\nUC9 --> UC10 : <<include>>\n\nPayment_Gateway --> UC10\n@enduml"
    },
    {
        "input": "Generate a use case diagram. Functional Requirements for Real Estate Management System (REMS):\n1. The system must allow property managers to manage property listings.\n2. The system must enable property managers to track properties.\n3. The system must handle property sales for property managers.\n4. The system must handle property rentals for property managers.\n5. The system must handle property leasing for property managers.\n6. The system must generate compliance reports.\n7. The system must analyze market data for informed decisions.\n8. The system must allow clients to perform transactions related to properties.\n9. The system must allow clients to view property details.\n10. The system must integrate with an external financial system for transaction processing.",
        "output": "@startuml\nleft to right direction\n\nactor Property_Manager\nactor Client\nactor Financial_System <<secondary>>\n\nrectangle Real_Estate_Management_System {\n    usecase \"Manage Property Listings\" as UC1\n    usecase \"Track Property\" as UC2\n    usecase \"Handle Sales\" as UC3\n    usecase \"Handle Rentals\" as UC4\n    usecase \"Handle Leasing\" as UC5\n    usecase \"Generate Compliance Reports\" as UC6\n    usecase \"Analyze Market Data\" as UC7\n    usecase \"Make Transactions\" as UC8\n    usecase \"View Property\" as UC9\n}\n\nProperty_Manager --> UC1\nProperty_Manager --> UC2\nProperty_Manager --> UC3\nProperty_Manager --> UC4\nProperty_Manager --> UC5\nProperty_Manager --> UC6\nProperty_Manager --> UC7\n\nClient --> UC8\nClient --> UC9\n\nUC3 --> UC8 : <<include>>\nUC4 --> UC8 : <<include>>\nUC5 --> UC8 : <<include>>\n\nFinancial_System --> UC8\n@enduml"
    },
    {
        "input": "Generate a use case diagram. Functional Requirements for EventEase Management System:\n1. The system must allow attendees to register for events.\n2. The system must enable attendees to purchase tickets online.\n3. The system must provide event organizers with an event dashboard.\n4. The system must send event updates to attendees.\n5. The system must provide performance metrics for organizers to evaluate event success.\n6. The system must manage event logistics for organizers (e.g., speakers, venues, attendees).\n7. The system must monitor event progress.\n8. The system must allow sponsors to promote branding during events.\n9. The system must ensure secure payment processing through an external payment system.",
        "output": "@startuml\nleft to right direction\n\nactor Organizer\nactor Attendee\nactor Sponsor\nactor Payment_System <<secondary>>\n\nrectangle EventEase_Management_System {\n    usecase \"Register for Event\" as UC3\n    usecase \"Purchase Tickets\" as UC5\n    usecase \"Access Event Dashboard\" as UC8\n    usecase \"Receive Event Updates\" as UC6\n    usecase \"View Event Performance Metrics\" as UC7\n    usecase \"Manage Event Logistics\" as UC9\n    usecase \"Monitor Event Progress\" as UC10\n    usecase \"Promote Sponsor Branding\" as UC11\n    usecase \"Process Payment\" as UC12\n}\n\nOrganizer --> UC9\nOrganizer --> UC10\nOrganizer --> UC8\nOrganizer --> UC11\nOrganizer --> UC7\nOrganizer --> UC8\nAttendee --> UC3\nAttendee --> UC5\nAttendee --> UC6\nAttendee --> UC8\n\nSponsor --> UC11\n\nUC5 --> UC12 : <<include>>\n\nPayment_System --> UC12\n@enduml"
    },
    {
        "input": "Generate a use case diagram. Functional Requirements for EventEase Management System:\n1. The system must allow attendees to register for events.\n2. The system must enable attendees to purchase tickets.\n3. The system must provide organizers with a centralized event dashboard.\n4. The system must send event updates to attendees.\n5. The system must display performance metrics for event organizers.\n6. The system must allow organizers to manage event logistics.\n7. The system must monitor the progress of events.\n8. The system must allow sponsors to promote their branding during events.\n9. The system must integrate with a payment system to handle transactions securely.",
        "output": "@startuml\nleft to right direction\n\nactor Organizer\nactor Attendee\nactor Sponsor\nactor Payment_System <<secondary>>\n\nrectangle EventEase_Management_System {\n    usecase \"Register for Event\" as UC3\n    usecase \"Purchase Tickets\" as UC5\n    usecase \"Access Event Dashboard\" as UC8\n    usecase \"Receive Event Updates\" as UC6\n    usecase \"View Event Performance Metrics\" as UC7\n    usecase \"Manage Event Logistics\" as UC9\n    usecase \"Monitor Event Progress\" as UC10\n    usecase \"Promote Sponsor Branding\" as UC11\n    usecase \"Process Payment\" as UC12\n}\n\nOrganizer --> UC9\nOrganizer --> UC10\nOrganizer --> UC8\nOrganizer --> UC11\nOrganizer --> UC7\n\nAttendee --> UC3\nAttendee --> UC5\nAttendee --> UC6\nAttendee --> UC8\n\nSponsor --> UC11\n\nUC5 --> UC12 : <<include>>\n\nPayment_System --> UC12\n@enduml"
    },
    {
        "input": "Generate a use case diagram. Functional Requirements for Online Learning Management System (OLMS):\n1. The system must allow instructors to create courses.\n2. The system must allow instructors to enroll students.\n3. The system must allow instructors to assess students.\n4. The system must allow instructors to track student progress.\n5. The system must provide communication tools like chat for both instructors and students.\n6. The system must allow instructors to deliver course content.\n7. The system must allow students to take assessments.",
        "output": "@startuml\nleft to right direction\n\nactor Instructor\nactor Student\n\nrectangle Online_Learning_Management_System {\n    usecase \"Create Course\" as UC1\n    usecase \"Enroll Students\" as UC2\n    usecase \"Assess Students\" as UC3\n    usecase \"Track Progress\" as UC4\n    usecase \"Communicate through Chat\" as UC5\n    usecase \"Deliver Content\" as UC6\n    usecase \"Take Assessment\" as UC7\n}\n\nInstructor --> UC1\nInstructor --> UC2\nInstructor --> UC3\nInstructor --> UC4\nInstructor --> UC5\nInstructor --> UC6\nStudent --> UC5\nStudent --> UC7\n@enduml"
    },
    {
        "input": "Generate a use case diagram. Functional Requirements for Crypto Exchange System:\n1. The system must allow users to exchange cryptocurrencies.\n2. The system must enable users to perform trading.\n3. The system must allow users to view market trends.\n4. The system must update market trends using external market data from sources like Binance and Kraken.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor \"External Market API (Binance, Kraken)\" as ExternalMarketAPI <<secondary>>\n\nrectangle Crypto_Exchange_System {\n    usecase \"Exchange Cryptocurrencies\" as UC1\n    usecase \"Perform Trading\" as UC2\n    usecase \"View Market Trends\" as UC3\n    usecase \"Update Market Trends\" as UC4\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\n\nUC3 --> UC4 : <<include>>\nExternalMarketAPI --> UC4\n@enduml"
    },
    {
        "input": "Give use case diagram for User Stories of Bank Management System.\n 1. As a bank customer, I want to be able to view my account balance online, so that I can keep track of my finances.\n 2. As a small business owner with limited resources, I want the banking system to have low fees, be easy to use, provide access to credit, and allow me to manage my business finances efficiently so that I can focus on growing my business.\n 3. As a new customer, I want the banking system to have a user-friendly interface, offer quick account setup, provide detailed instructions for transactions, and offer customer support so that I can feel confident using the system.\n 4. As a frequent traveler who regularly uses multiple currencies, I want the banking system to offer competitive exchange rates, provide easy-to-use currency conversion tools, allow me to manage multiple accounts in different currencies, and offer international payment options so that I can manage my finances effectively while abroad.\n 5. As an elderly customer with limited mobility, I want the banking system to have large, easy-to-read fonts and provide clear audio instructions, offer online banking options with large, clear buttons, have wheelchair accessibility in branches, and offer telephone support with customer service representatives who are patient and helpful so that I can manage my finances independently.\n 6. As a parent who wants to teach financial literacy to my children, I want the banking system to offer options for children's savings accounts, educational resources about budgeting and saving, parental controls for online banking, and user-friendly tools for monitoring their spending so that my children can learn about money management while using a safe and secure platform.\n 7. As a high net worth individual who values privacy, I want the banking system to provide top-level security features like biometric authentication, advanced encryption, strict data protection policies, and a dedicated customer service team that can handle my unique needs so that my financial information is kept safe and secure.\n 8. As a freelancer with variable income, I want the banking system to offer flexible account options, customizable notifications about transactions, real-time reporting of my balance, and the ability to categorize my expenses so that I can manage my finances more effectively and have a better understanding of my cash flow.\n 9. As a young adult who is just starting to build credit, I want the banking system to offer educational resources about credit building, low interest rates on loans, credit cards with easy-to-understand terms, and personalized advice from financial experts so that I can build my credit score and make informed financial decisions.\n 10. As a user with a physical disability, I want the banking system to be accessible and easy to use with assistive technologies like screen readers, so that I can manage my finances independently.\n 11. As a student with limited income, I want the banking system to have low or no fees, so that I can save money and not be charged unnecessary costs.\n 12. As a business owner, I want the banking system to offer efficient and reliable payment processing, so that I can receive and make payments quickly and securely.\n 13. As a frequent traveler, I want the banking system to have a large network of ATMs and branches in different countries, so that I can easily access my money while abroad.\n 14. As a high net worth individual, I want the banking system to offer exclusive benefits and services, such as personalized investment advice and premium credit cards, so that I can make the most of my financial resources.\n 15. As a privacy-conscious user, I want the banking system to have strong data protection policies and to not share my personal information with third parties, so that my privacy is respected and my financial data is kept secure.\n 16. As a busy professional, I want the banking system to offer convenient online and mobile banking options, so that I can manage my finances on-the-go and save time.\n 17. As a retired person, I want the banking system to offer user-friendly interfaces and clear communication, so that I can easily understand my financial statements and transactions.\n 18. As a senior citizen living on a fixed income, I want the banking system to offer low fees, easy-to-understand terms and conditions, user-friendly online banking options, and friendly customer service representatives who can answer my questions and provide assistance when needed so that I can manage my finances confidently.\n 19. As a busy professional who values time and convenience, I want the banking system to offer a mobile app with a user-friendly interface, real-time notifications for transactions and account balances, easy-to-use bill payment options, and the ability to deposit checks using my smartphone so that I can manage my finances on-the-go.\n 20. As a small business owner who values transparency, I want the banking system to provide detailed reports on transaction history, offer customizable alerts for transactions, provide secure access to multiple users with different levels of authorization, and offer options for exporting data to accounting software so that I can keep track of my finances easily and accurately.\n 21. As a socially conscious individual who wants to support environmentally friendly practices, I want the banking system to offer paperless statements and receipts, partner with eco-friendly organizations, offer credit cards that donate a portion of the profits to environmental causes, and provide educational resources about sustainable finance so that I can align my financial decisions with my values.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor SmallBusinessOwner\nactor NewCustomer\nactor FrequentTraveler\nactor ElderlyCustomer\nactor Parent\nactor HighNetWorthIndividual\nactor Freelancer\nactor YoungAdult\nactor PhysicallyDisabledUser\nactor Student\nactor BusinessOwner\nactor RetiredPerson\nactor SeniorCitizen\nactor BusyProfessional\nactor SociallyConsciousIndividual\n\nElderlyCustomer <|-- RetiredPerson\nSeniorCitizen <|-- RetiredPerson\nCustomer <|-- NewCustomer\nBusinessOwner <|-- SmallBusinessOwner\n\nrectangle BankingSystem {\n    usecase \"View account balance online\" as UC1\n    usecase \"Give Low fees\" as UC2\n    usecase \"Access credit\" as UC22\n    usecase \"Manage business finances\" as UC23\n    usecase \"Setup account quickly\" as UC3\n    usecase \"Access customer support\" as UC24\n    usecase \"Manage multiple currencies\" as UC4\n    usecase \"Manage international payments\" as UC25\n    usecase \"Use Large fonts\" as UC5\n    usecase \"Get audio instructions\" as UC26\n    usecase \"Use accessibility features\" as UC27\n    usecase \"Open Children's savings accounts\" as UC6\n    usecase \"Access parental controls\" as UC28\n    usecase \"Use Biometric authentication\" as UC7\n    usecase \"Get Flexible account options\" as UC8\n    usecase \"Get customizable notifications/alerts\" as UC29\n    usecase \"Access Educational resources\" as UC9\n    usecase \"Access Credit building tools\" as UC30\n    usecase \"Use Assistive technologies\" as UC10\n    usecase \"Manage Payments\" as UC11\n    usecase \"Payment processing\" as UC12\n    usecase \"Use ATMs globally\" as UC13\n    usecase \"Use Exclusive benefits and premium services\" as UC14\n    usecase \"Use online and mobile banking\" as UC16\n    usecase \"Access User-friendly interface\" as UC17\n    usecase \"Make clear communication\" as UC15\n    usecase \"Receive Real-time notifications\" as UC19\n    usecase \"Make bill payments\" as UC31\n    usecase \"View Detailed transaction reports\" as UC20\n    usecase \"Utilize eco-friendly features\" as UC21\n    usecase \"Use Paperless statements\" as UC32\n    usecase \"Deposit Checks\" as UC33\n    usecase \"Get Personalized Investment Advice\" as UC34\n    usecase \"Get Premium Credit Cards\" as UC35\n}\n\nCustomer --> UC1\nSmallBusinessOwner --> UC2\nSmallBusinessOwner --> UC22\nSmallBusinessOwner --> UC23\nNewCustomer --> UC3\nNewCustomer --> UC24\n\nFrequentTraveler --> UC4\nFrequentTraveler --> UC25\n\nElderlyCustomer --> UC5\nElderlyCustomer --> UC26\nElderlyCustomer --> UC27\n\nParent --> UC6\nParent --> UC28\n\nHighNetWorthIndividual --> UC7\nHighNetWorthIndividual --> UC14\nUC14 ..> UC34 : <<include>>\nUC14 ..> UC35 : <<include>>\n\nFreelancer --> UC8\nFreelancer --> UC29\n\nYoungAdult --> UC9\nYoungAdult --> UC30\n\nPhysicallyDisabledUser --> UC10\nStudent --> UC2\nBusinessOwner --> UC11\nUC11 ..> UC12 : <<include>>\n\nFrequentTraveler --> UC13\n\nBusyProfessional --> UC16\nRetiredPerson --> UC17\nRetiredPerson --> UC15\n\nSeniorCitizen --> UC24\nSeniorCitizen --> UC2\n\nBusyProfessional --> UC19\nBusyProfessional --> UC31\nBusyProfessional --> UC33\n\nBusinessOwner --> UC20\nBusinessOwner --> UC29\nSociallyConsciousIndividual --> UC21\nSociallyConsciousIndividual --> UC32\nSociallyConsciousIndividual --> UC9\n@enduml"
    },
    {
        "input": "Give use case diagram for User Stories of Educational Management System.\n 1. As a teacher, I want to be able to create and share lesson plans with my colleagues, so that we can collaborate and improve our teaching practices.\n 2. As a student, I want to be able to submit assignments online, so that I can easily track my progress and receive feedback from my teachers.\n 3. As a parent, I want to be able to view my child's academic progress in real-time, so that I can stay informed and support their learning at home.\n 4. As an administrator, I want to be able to generate reports on student performance and attendance, so that I can identify areas for improvement and make data-driven decisions.\n 5. As a student with a visual impairment, I want to be able to access course materials in alternative formats, such as Braille or audio, so that I can fully participate in class.\n 6. As a teacher, I want to be able to easily communicate with parents and guardians, so that we can work together to support student success.\n 7. As a student athlete, I want to be able to view my game schedule and practice times online, so that I can plan my schedule and balance my athletic and academic responsibilities.\n 8. As a parent, I want to be able to receive automatic notifications when my child's grades or attendance change, so that I can stay informed and take action if necessary.\n 9. As a student, I want to be able to access resources for mental health and well-being, such as counselling services or mindfulness activities, so that I can manage stress and feel supported in my academic journey.\n 10. As a teacher, I want to be able to easily track and report on student participation in class discussions and group activities, so that I can assess their engagement and understanding.\n 11. As a teacher, I want to be able to create and administer online quizzes that adapt to each student's ability level, so that I can provide personalized feedback and support.\n 12. As a student, I want to be able to access a virtual reality lab that allows me to explore scientific concepts and phenomena in a more immersive and interactive way.\n 13. As a parent, I want to be able to easily view and track my child's nutrition and meal choices in the school cafeteria, so that I can ensure they are making healthy choices.\n 14. As an administrator, I want to be able to implement an AI-powered Chatbot that can answer common student questions and provide support, so that we can improve access to information and reduce administrative workload.\n 15. As a student, I want to be able to participate in a peer-to-peer tutoring program that connects me with older students who can provide mentorship and academic support.\n 16. As a teacher, I want to be able to create and share interactive simulations that allow students to experiment with real-world scenarios and develop problem-solving skills.\n 17. As a parent, I want to be able to view real-time updates on my child's school bus location and estimated arrival time, so that I can plan for pick-up and drop-off.\n 18. As an administrator, I want to be able to analyze data on student engagement and satisfaction, so that we can identify areas for improvement and make data-driven decisions.\n 19. As a student, I want to be able to participate in a student-led media production program that allows me to create and share videos, podcasts, and other media content.\n 20. As a teacher, I want to be able to easily track and report on student attendance and punctuality, so that we can ensure students are meeting their academic requirements and identify potential attendance issues.",
        "output": "@startuml\nleft to right direction\n\nactor Teacher\nactor Student\nactor Parent\nactor Administrator\nactor StudentWithVisualImpairment\nactor StudentAthlete\n\nStudent <|-- StudentWithVisualImpairment\nStudent <|-- StudentAthlete\n\nrectangle EducationManagementSystem {\n    usecase \"Create and share lesson plans\" as UC1\n    usecase \"Submit assignments online\" as UC2\n    usecase \"View child's academic progress\" as UC3\n    usecase \"Generate student performance reports\" as UC4\n\n    usecase \"Access course materials in alternative formats\" as UC5\n    usecase \"Communicate with parents\" as UC6\n\n    usecase \"View game schedules and practice times\" as UC7\n    usecase \"Receive automatic notifications on grades/attendance\" as UC8\n\n    usecase \"Access mental health resources\" as UC9\n    usecase \"Track student participation\" as UC10\n\n    usecase \"Create adaptive online quizzes\" as UC11\n    usecase \"Access virtual reality lab\" as UC12\n\n    usecase \"Track child's nutrition and meal choices\" as UC13\n    usecase \"Implement AI-powered Chatbot\" as UC14\n\n    usecase \"Participate in peer-to-peer tutoring\" as UC15\n    usecase \"Create interactive simulations\" as UC16\n\n    usecase \"View real-time updates on school bus location\" as UC17\n    usecase \"Analyze student engagement data\" as UC18\n\n    usecase \"Participate in media production program\" as UC19\n    usecase \"Track and report on attendance and punctuality\" as UC20\n}\n\nTeacher --> UC1\nStudent --> UC2\nParent --> UC3\nAdministrator --> UC4\n\nStudentWithVisualImpairment --> UC5\nTeacher --> UC6\n\nStudentAthlete --> UC7\nParent --> UC8\n\nStudent --> UC9\nTeacher --> UC10\n\nTeacher --> UC11\nStudent --> UC12\n\nParent --> UC13\nAdministrator --> UC14\n\nStudent --> UC15\nTeacher --> UC16\n\nParent --> UC17\nAdministrator --> UC18\n\nStudent --> UC19\nTeacher --> UC20\n@enduml"          
    },
    {
        "input": "Give use case diagram for User Stories of Library Management System.\n 1. As a librarian, I want to be able to easily catalogue and classify new books and materials as they are added to the library's collection, so that I can ensure accurate and efficient organization.\n 2. As a library member, I want to be able to browse and access digital resources, such as e-books, audiobooks, and online databases, so that I can have access to a wide variety of resources.\n 3. As a librarian, I want to be able to view and analyse data on library usage and circulation, so that I can identify areas for improvement and make data-driven decisions.\n 4. As a library member, I want to be able to reserve study rooms and group study areas online, so that I can easily schedule time and space to work with others.\n 5. As a librarian, I want to be able to easily track and manage overdue materials and fines, so that we can ensure fair and timely access to library resources.\n 6. As a library member, I want to be able to access online tutorials and resources that can help me develop my research and information literacy skills.\n 7. As a librarian, I want to be able to offer and manage community events and programs, such as author talks, book clubs, and writing workshops, so that we can engage with our community and foster a love of learning.\n 8. As a library member, I want to be able to access language learning resources, such as language learning software and online courses, so that I can improve my language skills.\n 9. As a librarian, I want to be able to easily update and share information about library hours, events, and resources, so that we can effectively communicate with our members.\n 10. As a library member, I want to be able to easily request inter-library loans, so that I can access books and resources that may not be available in my local library.\n 11. As a librarian, I want to be able to easily manage and track the library's budget and expenses, so that we can ensure financial accountability and make informed decisions.\n 12. As a library member, I want to be able to view and check out books from a self-service kiosk, so that I can save time and avoid waiting in lines.\n 13. As a librarian, I want to be able to offer and manage digital media creation tools, such as podcasting and video editing software, so that we can promote creative expression and digital literacy.\n 14. As a library member, I want to be able to easily donate books and other materials to the library's collection, so that I can contribute to the community's access to knowledge and resources.\n 15. As a librarian, I want to be able to easily manage and track library equipment, such as laptops, projectors, and other technology, so that we can ensure efficient and effective use of resources.\n 16. As a library member, I want to be able to access online research databases and academic journals, so that I can conduct research and access scholarly resources.\n 17. As a librarian, I want to be able to offer and manage online tutoring and homework help services, so that we can support student learning and academic achievement.\n 18. As a library member, I want to be able to easily request and access materials in alternative formats, such as large print or braille, so that I can access library resources regardless of my abilities.\n 19. As a librarian, I want to be able to offer and manage technology training and support services, so that we can promote digital literacy and support technology access.",
        "output": "@startuml\nleft to right direction\n\nactor Librarian\nactor LibraryMember\n\nrectangle LibraryManagementSystem {\n    usecase \"Catalogue and classify new books\" as UC1\n    usecase \"Browse and access digital resources\" as UC2\n    usecase \"View and analyze library usage data\" as UC3\n    usecase \"Reserve study rooms online\" as UC4\n\n    usecase \"Track overdue materials and fines\" as UC5\n    usecase \"Access online tutorials\" as UC6\n\n    usecase \"Manage community events and programs\" as UC7\n    usecase \"Access language learning resources\" as UC8\n\n    usecase \"Update and share information on hours/events\" as UC9\n    usecase \"Request inter-library loans\" as UC10\n\n    usecase \"Manage library's budget and expenses\" as UC11\n    usecase \"Check out books from self-service kiosk\" as UC12\n\n    usecase \"Manage digital media creation tools\" as UC13\n    usecase \"Donate books and materials\" as UC14\n\n    usecase \"Manage and track library equipment\" as UC15\n    usecase \"Access research databases and journals\" as UC16\n\n    usecase \"Offer online tutoring and homework help\" as UC17\n    usecase \"Request materials in alternative formats\" as UC18\n\n    usecase \"Manage technology training and support services\" as UC19\n}\n\nLibrarian --> UC1\nLibraryMember --> UC2\nLibrarian --> UC3\nLibraryMember --> UC4\n\nLibrarian --> UC5\nLibraryMember --> UC6\n\nLibrarian --> UC7\nLibraryMember --> UC8\n\nLibrarian --> UC9\nLibraryMember --> UC10\n\nLibrarian --> UC11\nLibraryMember --> UC12\n\nLibrarian --> UC13\nLibraryMember --> UC14\n\nLibrarian --> UC15\nLibraryMember --> UC16\n\nLibrarian --> UC17\nLibraryMember --> UC18\n\nLibrarian --> UC19\n@enduml"
    },
    {
        "input": "Give use case diagram for User Stories of Supermarket Management System.\n 1. As a supermarket manager, I want to be able to easily manage inventory levels and receive alerts when stock runs low, so that I can ensure that we always have the products our customers need.\n 2. As a cashier, I want to be able to quickly scan and process purchases, so that I can provide fast and efficient service to customers.\n 3. As a supermarket manager, I want to be able to view and analyze data on sales and customer trends, so that I can make data-driven decisions about promotions, discounts, and product offerings.\n 4. As a customer, I want to be able to view and search for products online before I visit the store, so that I can plan my shopping trip more efficiently.\n 5. As a supermarket manager, I want to be able to manage employee schedules and track time and attendance, so that I can ensure adequate staffing levels and manage payroll.\n 6. As a customer, I want to be able to easily find products in the store, through clear signage and product categorization, so that I can quickly locate the items I need.\n 7. As a supermarket manager, I want to be able to easily manage promotions and discounts, so that I can drive sales and customer loyalty.\n 8. As a customer, I want to be able to access nutritional information and ingredient lists for products, so that I can make informed decisions about what to buy.\n 9. As a supermarket manager, I want to be able to easily manage supplier relationships and order products from vendors, so that I can maintain product availability and manage costs.\n 10. As a customer, I want to be able to easily find and redeem coupons and discounts, so that I can save money on my purchases.\n 11. As a supermarket manager, I want to be able to manage the store's layout and merchandising, so that I can optimize traffic flow and product visibility.\n 12. As a customer, I want to be able to easily view and compare prices of products, so that I can make informed decisions about where to buy.\n 13. As a supermarket manager, I want to be able to manage and track the store's revenue and expenses, so that I can ensure financial stability and growth.\n 14. As a customer, I want to be able to easily return or exchange products, so that I can have confidence in my purchases.\n 15. As a supermarket manager, I want to be able to manage and track the store's loyalty program and rewards, so that I can promote customer retention and engagement.\n 16. As a customer, I want to be able to easily locate and access customer service representatives, so that I can have my questions and concerns addressed.\n 17. As a supermarket manager, I want to be able to manage and track the store's waste and environmental impact, so that I can promote sustainable practices and reduce costs.\n 18. As a customer, I want to be able to easily purchase products online and have them delivered or ready for pickup, so that I can save time and shop from home.\n 19. As a supermarket manager, I want to be able to manage and track the store's social media and online presence, so that I can engage with customers and promote the store's brand.\n 20. As a customer, I want to be able to access a variety of payment options, such as cash, credit, debit, and mobile payments, so that I can choose the most convenient method for me.",
        "output": "@startuml\nleft to right direction\n\nactor SupermarketManager\nactor Cashier\nactor Customer\n\nrectangle SupermarketManagementSystem {\n    usecase \"Manage inventory levels\" as UC1\n    usecase \"Receive stock alerts\" as UC2\n    usecase \"Scan purchases\" as UC3\n    usecase \"Process purchases\" as UC4\n\n    usecase \"Analyze sales data\" as UC5\n    usecase \"Analyze customer trends\" as UC6\n    usecase \"View products online\" as UC7\n    usecase \"Search products online\" as UC8\n\n    usecase \"Manage employee schedules\" as UC9\n    usecase \"Track employee time\" as UC10\n    usecase \"Find products in the store\" as UC11\n\n    usecase \"Manage promotions\" as UC12\n    usecase \"Manage discounts\" as UC13\n    usecase \"Access nutritional information and ingredients\" as UC14\n\n    usecase \"Manage supplier relationships\" as UC16\n    usecase \"Order products from suppliers\" as UC17\n    usecase \"Find coupons\" as UC18\n    usecase \"Redeem coupons\" as UC19\n\n    usecase \"Manage store layout\" as UC20\n    usecase \"Manage merchandising\" as UC21\n    usecase \"View product prices\" as UC22\n    usecase \"Compare product prices\" as UC23\n\n    usecase \"Track revenue\" as UC24\n    usecase \"Track expenses\" as UC25\n    usecase \"Return products\" as UC26\n    usecase \"Exchange products\" as UC27\n\n    usecase \"Track loyalty programs\" as UC28\n    usecase \"Track rewards\" as UC29\n    usecase \"Locate customer service representatives\" as UC30\n\n    usecase \"Track waste\" as UC31\n    usecase \"Track environmental impact\" as UC32\n    usecase \"Purchase products online\" as UC33\n    usecase \"Schedule delivery or pickup\" as UC34\n\n    usecase \"Track social media and Online Presence\" as UC35\n    usecase \"Access Payment Options\" as UC36\n    usecase \"Access cash payment\" as UC37\n    usecase \"Access credit payment\" as UC38\n    usecase \"Access debit payment\" as UC39\n    usecase \"Access mobile payments\" as UC40\n}\n\nSupermarketManager --> UC1\nSupermarketManager --> UC2\nCashier --> UC3\nCashier --> UC4\n\nSupermarketManager --> UC5\nSupermarketManager --> UC6\nCustomer --> UC7\nCustomer --> UC8\n\nSupermarketManager --> UC9\nSupermarketManager --> UC10\nCustomer --> UC11\n\nSupermarketManager --> UC12\nSupermarketManager --> UC13\nCustomer --> UC14\n\nSupermarketManager --> UC16\nSupermarketManager --> UC17\nCustomer --> UC18\nCustomer --> UC19\n\nSupermarketManager --> UC20\nSupermarketManager --> UC21\nCustomer --> UC22\nCustomer --> UC23\n\nSupermarketManager --> UC24\nSupermarketManager --> UC25\nCustomer --> UC26\nCustomer --> UC27\n\nSupermarketManager --> UC28\nSupermarketManager --> UC29\nCustomer --> UC30\n\nSupermarketManager --> UC31\nUC31 --> UC32: <<include>>\nCustomer --> UC33\nCustomer --> UC34\n\nSupermarketManager --> UC35\nCustomer --> UC36\nUC36 ..> UC37: <<extend>>\nUC36 ..> UC38: <<extend>>\nUC36 ..> UC39: <<extend>>\nUC36 ..> UC40: <<extend>>\n@enduml"
    },
    {
        "input": "Give use case diagram for User Stories of Recruitment Management System.\n 1. As a recruiter, I want to be able to post job listings and descriptions online, so that potential candidates can easily find and apply for open positions.\n 2. As a job seeker, I want to be able to search and filter job listings based on location, salary, and other criteria, so that I can find positions that match my qualifications and interests.\n 3. As a recruiter, I want to be able to easily review and manage resumes and job applications, so that I can efficiently screen candidates and identify qualified candidates.\n 4. As a job seeker, I want to be able to receive updates and notifications on the status of my application, so that I can stay informed and engaged throughout the recruitment process.\n 5. As a recruiter, I want to be able to schedule and conduct interviews with candidates, either in person or remotely, so that I can assess their skills and fit for the position.\n 6. As a job seeker, I want to be able to provide references and other supporting materials to potential employers, so that I can demonstrate my qualifications and experience.\n 7. As a recruiter, I want to be able to track and manage the hiring process from start to finish, including candidate communication, background checks, and job offers.\n 8. As a job seeker, I want to be able to easily submit and manage multiple job applications, so that I can increase my chances of finding a suitable position.\n 9. As a recruiter, I want to be able to collaborate with other team members and hiring managers, so that we can make informed and collaborative decisions about job candidates.\n 10. As a job seeker, I want to be able to research and learn more about the company and its culture, so that I can decide if it is a good fit for me.\n 11. As a recruiter, I want to be able to conduct skill assessments and tests for candidates, so that I can ensure that they have the necessary skills and knowledge for the position.\n 12. As a job seeker, I want to be able to provide feedback on the recruitment process, so that potential employers can improve their hiring process and candidate experience.\n 13. As a recruiter, I want to be able to easily communicate with candidates and provide timely updates on the recruitment process, so that we can build positive relationships with potential hires.\n 14. As a job seeker, I want to be able to receive feedback and constructive criticism on my job application and interview performance, so that I can improve my skills and increase my chances of success in future applications.\n 15. As a recruiter, I want to be able to access and manage a pool of candidates for future job openings, so that we can build a strong talent pipeline.\n 16. As a job seeker, I want to be able to easily access information about employee benefits and perks, so that I can evaluate the overall value of a job offer.\n 17. As a recruiter, I want to be able to collaborate with external recruiting agencies and services, so that we can access a wider pool of qualified candidates.\n 18. As a job seeker, I want to be able to connect and network with potential employers and industry professionals, so that I can increase my visibility and job opportunities.\n 19. As a recruiter, I want to be able to leverage social media and other online platforms to attract and engage with potential job candidates, so that we can build a strong employer brand.\n 20. As a job seeker, I want to be able to receive guidance and support on job search strategies and techniques, so that I can improve my chances of finding a suitable position.",
        "output": "@startuml\nleft to right direction\n\nactor Recruiter\nactor JobSeeker\n\nrectangle RecruitmentManagementSystem {\n    usecase \"Post job listings\" as UC1\n    usecase \"Search and filter job listings\" as UC2\n    usecase \"Review resumes\" as UC3\n    usecase \"Manage applications\" as UC25\n\n    usecase \"Receive application status notifications\" as UC4\n\n    usecase \"Schedule interviews\" as UC5\n    usecase \"Conduct interviews\" as UC22\n    usecase \"In-person\" as UC23\n    usecase \"Online\" as UC24\n\n    usecase \"Provide references/supporting materials\" as UC6\n\n    usecase \"Track and manage the hiring process\" as UC7\n    usecase \"Submit and manage multiple applications\" as UC8\n\n    usecase \"Collaborate with team members and hiring managers\" as UC9\n    usecase \"Research company\" as UC10\n\n    usecase \"Conduct skill assessments\" as UC11\n    usecase \"Provide recruitment process feedback\" as UC12\n\n    usecase \"Communicate with candidates\" as UC13\n    usecase \"Provide updates to candidates\" as UC21\n\n    usecase \"Receive applications and interviews feedback\" as UC14\n\n    usecase \"Manage pool of candidates\" as UC15\n    usecase \"Access employee benefits information\" as UC16\n\n    usecase \"Collaborate with external recruiting agencies\" as UC17\n    usecase \"Connect with employers\" as UC18\n\n    usecase \"Attract candidates on social media\" as UC19\n    usecase \"Receive job search strategies guidance\" as UC20\n}\n\nRecruiter --> UC1\nJobSeeker --> UC2\nRecruiter --> UC3\nRecruiter --> UC25\nJobSeeker --> UC4\n\nRecruiter --> UC5\nRecruiter --> UC22\nUC22 --> UC23: <<extend>>\nUC22 --> UC24: <<extend>>\nJobSeeker --> UC6\n\nRecruiter --> UC7\nJobSeeker --> UC8\n\nRecruiter --> UC9\nJobSeeker --> UC10\n\nRecruiter --> UC11\nJobSeeker --> UC12\n\nRecruiter --> UC13\nUC13 --> UC21: <<extend>>\nJobSeeker --> UC14\n\nRecruiter --> UC15\nJobSeeker --> UC16\n\nRecruiter --> UC17\nJobSeeker --> UC18\n\nRecruiter --> UC19\nJobSeeker --> UC20\n@enduml"          
    },
    {
        "input": "Give use case diagram for User Stories of Hospital Management System.\n 1. As a doctor, I want to be able to access patient records and medical history online, so that I can provide accurate and timely care.\n 2. As a patient, I want to be able to schedule appointments and view test results online, so that I can manage my health more effectively.\n 3. As a nurse, I want to be able to track and manage patient medications and treatment plans, so that I can ensure patient safety and compliance.\n 4. As a patient, I want to be able to communicate with my healthcare providers through secure messaging, so that I can ask questions and receive advice.\n 5. As a hospital administrator, I want to be able to generate reports on patient outcomes and satisfaction, so that I can identify areas for improvement and make data-driven decisions.\n 6. As a patient, I want to be able to access educational resources and information about my condition, so that I can better understand my diagnosis and treatment options.\n 7. As a doctor, I want to be able to easily order tests and procedures for patients, so that I can diagnose and treat medical conditions effectively.\n 8. As a patient, I want to be able to view and pay medical bills online, so that I can manage my healthcare expenses.\n 9. As a hospital administrator, I want to be able to manage and track hospital equipment and supplies, so that I can ensure efficient and effective use of resources.\n 10. As a patient, I want to be able to access telemedicine services and virtual consultations, so that I can receive care remotely.\n 11. As a doctor, I want to be able to access medical research and best practices online, so that I can stay up-to-date on the latest treatments and technologies.\n 12. As a patient, I want to be able to provide feedback on my care and experience at the hospital, so that I can help improve the quality of care for others.\n 13. As a nurse, I want to be able to access patient vitals and monitor patient status in real-time, so that I can provide timely care and interventions.\n 14. As a patient, I want to be able to access mental health resources and support services, so that I can manage my mental health and well-being.\n 15. As a hospital administrator, I want to be able to manage and track hospital staff schedules and assignments, so that I can ensure adequate staffing levels and manage payroll.\n 16. As a patient, I want to be able to access information about hospital services and amenities, so that I can navigate the hospital and make informed decisions about my care.\n 17. As a doctor, I want to be able to easily communicate and collaborate with other healthcare providers, so that we can coordinate care and improve patient outcomes.\n 18. As a patient, I want to be able to access support groups and community resources, so that I can connect with others who have similar health concerns.\n 19. As a hospital administrator, I want to be able to manage and track patient admissions and discharges, so that I can optimize bed utilization and patient flow.\n 20. As a patient, I want to be able to access language interpretation services and other accessibility features, so that I can communicate effectively with my healthcare providers.",
        "output": "@startuml\nleft to right direction\n\nactor Doctor\nactor Patient\nactor Nurse\nactor HospitalAdministrator\n\nrectangle HospitalManagementSystem {\n    usecase \"Access patient records\" as UC1\n    usecase \"Schedule appointments\" as UC2\n    usecase \"Track patient medications\" as UC3\n    usecase \"Communicate with healthcare providers\" as UC4\n\n    usecase \"Generate patient reports\" as UC5\n    usecase \"Access educational resources\" as UC6\n\n    usecase \"Order tests and procedures\" as UC7\n    usecase \"View and pay medical bills\" as UC8\n\n    usecase \"Manage hospital equipment\" as UC9\n    usecase \"Access telemedicine services\" as UC10\n\n    usecase \"Access medical research\" as UC11\n    usecase \"Provide feedback on care\" as UC12\n\n    usecase \"Access patient vitals\" as UC13\n    usecase \"Access mental health resources\" as UC14\n\n    usecase \"Manage hospital staff schedules\" as UC15\n    usecase \"Access hospital services information\" as UC16\n\n    usecase \"Communicate with healthcare providers\" as UC17\n    usecase \"Access support groups\" as UC18\n\n    usecase \"Manage patient admissions\" as UC19\n    usecase \"Access language interpretation services\" as UC20\n}\n\nDoctor --> UC1\nPatient --> UC2\nNurse --> UC3\nPatient --> UC4\n\nHospitalAdministrator --> UC5\nPatient --> UC6\n\nDoctor --> UC7\nPatient --> UC8\n\nHospitalAdministrator --> UC9\nPatient --> UC10\n\nDoctor --> UC11\nPatient --> UC12\n\nNurse --> UC13\nPatient --> UC14\n\nHospitalAdministrator --> UC15\nPatient --> UC16\n\nDoctor --> UC17\nPatient --> UC18\n\nHospitalAdministrator --> UC19\nPatient --> UC20\n@enduml"
    },
    {
        "input": "Give use case diagram for User Stories of E-commerce Management System.\n 1. As an online shopper, I want to be able to browse and search for products by category, brand, and price, so that I can find the items I need.\n 2. As an e-commerce manager, I want to be able to manage product listings and inventory levels, so that I can ensure accurate and up-to-date information for customers.\n 3. As an online shopper, I want to be able to view detailed product descriptions and images, so that I can make informed purchasing decisions.\n 4. As an e-commerce manager, I want to be able to track and analyze customer behavior and preferences, so that I can personalize the shopping experience and improve sales.\n 5. As an online shopper, I want to be able to add items to my shopping cart and easily checkout, so that I can complete my purchase quickly and securely.\n 6. As an e-commerce manager, I want to be able to offer discounts, promotions, and loyalty programs to customers, so that I can drive sales and customer loyalty.\n 7. As an online shopper, I want to be able to track the status of my orders and receive updates on shipping and delivery, so that I can plan for receipt of my items.\n 8. As an e-commerce manager, I want to be able to manage customer reviews and feedback, so that I can improve product quality and customer satisfaction.\n 9. As an online shopper, I want to be able to access customer support and assistance, so that I can resolve any issues or questions about my order.\n 10. As an e-commerce manager, I want to be able to manage and track payment processing and transactions, so that I can ensure secure and efficient payment processing.\n 11. As an online shopper, I want to be able to access a variety of payment options, such as credit card, debit card, and mobile payments, so that I can choose the most convenient method for me.\n 12. As an e-commerce manager, I want to be able to manage and track customer accounts and profiles, so that I can provide personalized recommendations and offers.\n 13. As an online shopper, I want to be able to access product recommendations and personalized offers, so that I can discover new items and save money.\n 14. As an e-commerce manager, I want to be able to manage and track website performance and analytics, so that I can identify areas for improvement and optimize the user experience.\n 15. As an online shopper, I want to be able to access a secure and user-friendly website or mobile app, so that I can shop with confidence and ease.\n 16. As an e-commerce manager, I want to be able to manage and track customer service requests and inquiries, so that I can provide timely and effective support.\n 17. As an online shopper, I want to be able to access product ratings and reviews from other customers, so that I can make informed decisions about my purchases.\n 18. As an e-commerce manager, I want to be able to manage and track shipping and delivery logistics, so that I can ensure timely and accurate delivery of orders.\n 19. As an online shopper, I want to be able to access a secure and easy returns process, so that I can shop with confidence and peace of mind.\n 20. As an e-commerce manager, I want to be able to manage and track customer engagement and retention, so that I can build a loyal customer base and drive repeat business.",
        "output": "@startuml\nleft to right direction\n\nactor OnlineShopper\nactor EcommerceManager\n\nrectangle EcommerceManagementSystem {\n    usecase \"Browse and search for products\" as UC1\n    usecase \"Manage product listings\" as UC2\n    usecase \"View product descriptions\" as UC3\n    usecase \"Track customer behavior\" as UC4\n\n    usecase \"Add items to shopping cart\" as UC5\n    usecase \"Checkout\" as UC6\n\n    usecase \"Offer discounts and promotions\" as UC7\n    usecase \"Track order status\" as UC8\n\n    usecase \"Manage customer reviews\" as UC9\n    usecase \"Access customer support\" as UC10\n\n    usecase \"Manage payment processing\" as UC11\n    usecase \"Access payment options\" as UC12\n\n    usecase \"Manage customer accounts\" as UC13\n    usecase \"Access product recommendations\" as UC14\n\n    usecase \"Manage website performance\" as UC15\n    usecase \"Access secure website\" as UC16\n\n    usecase \"Manage customer service requests\" as UC17\n    usecase \"Access product ratings and reviews\" as UC18\n\n    usecase \"Manage shipping and delivery\" as UC19\n    usecase \"Access returns process\" as UC20\n}\n\nOnlineShopper --> UC1\nEcommerceManager --> UC2\nOnlineShopper --> UC3\nEcommerceManager --> UC4\n\nOnlineShopper --> UC5\nOnlineShopper --> UC6\n\nEcommerceManager --> UC7\nOnlineShopper --> UC8\n\nEcommerceManager --> UC9\nOnlineShopper --> UC10\n\nEcommerceManager --> UC11\nOnlineShopper --> UC12\n\nEcommerceManager --> UC13\nOnlineShopper --> UC14\n\nEcommerceManager --> UC15\nOnlineShopper --> UC16\n\nEcommerceManager --> UC17\nOnlineShopper --> UC18\n\nEcommerceManager --> UC19\nOnlineShopper --> UC20\n@enduml"
    },
    {
        "input": "Give use case diagram for these User Stories:\n 1. As a social media user, I want to be able to create and share posts, photos, and videos with my friends and followers, so that I can stay connected and engaged.\n 2. As a social media manager, I want to be able to schedule and publish content across multiple platforms, so that I can reach a wider audience and increase engagement.\n 3. As a social media user, I want to be able to like, comment, and share posts from other users, so that I can interact and engage with the community.\n 4. As a social media manager, I want to be able to track and analyze social media metrics, such as likes, shares, and comments, so that I can measure the success of my campaigns.\n 5. As a social media user, I want to be able to create and join groups and communities based on shared interests, so that I can connect with like-minded individuals.\n 6. As a social media manager, I want to be able to monitor and respond to comments and messages from users, so that I can provide timely and effective customer support.\n 7. As a social media user, I want to be able to access live streaming and video chat features, so that I can connect with friends and followers in real-time.\n 8. As a social media manager, I want to be able to create and manage social media advertising campaigns, so that I can promote products and services to a targeted audience.\n 9. As a social media user, I want to be able to access privacy settings and controls, so that I can manage who can see my posts and information.\n 10. As a social media manager, I want to be able to collaborate with influencers and brand ambassadors, so that I can leverage their reach and influence.\n 11. As a social media user, I want to be able to access news and updates from my favorite brands and celebrities, so that I can stay informed and engaged.\n 12. As a social media manager, I want to be able to create and manage social media contests and giveaways, so that I can increase engagement and brand awareness.\n 13. As a social media user, I want to be able to access social media analytics and insights, so that I can track my engagement and reach.\n 14. As a social media manager, I want to be able to manage and track social media accounts and profiles, so that I can maintain a consistent brand image.\n 15. As a social media user, I want to be able to access social media customer support and assistance, so that I can resolve any issues or questions about the platform.\n 16. As a social media manager, I want to be able to manage and track social media trends and hashtags, so that I can stay current and relevant.\n 17. As a social media user, I want to be able to access social media listening tools, so that I can monitor conversations and mentions about my brand or interests.\n 18. As a social media manager, I want to be able to manage and track social media engagement and sentiment, so that I can measure the impact of my campaigns.\n 19. As a social media user, I want to be able to access social media content recommendations and suggestions, so that I can discover new content and interests.\n 20. As a social media manager, I want to be able to manage and track social media customer feedback and reviews, so that I can improve customer satisfaction and loyalty.",
        "output": "@startuml\nleft to right direction\n\nactor SocialMediaUser\nactor SocialMediaManager\n\nrectangle SocialMediaManagementSystem {\n    usecase \"Create and share posts\" as UC1\n    usecase \"Schedule and publish content\" as UC2\n    usecase \"Like, comment, and share posts\" as UC3\n    usecase \"Track social media metrics\" as UC4\n\n    usecase \"Create and join groups\" as UC5\n    usecase \"Monitor and respond to comments\" as UC6\n\n    usecase \"Access live streaming and video chat\" as UC7\n    usecase \"Create and manage advertising campaigns\" as UC8\n\n    usecase \"Access privacy settings\" as UC9\n    usecase \"Collaborate with influencers\" as UC10\n\n    usecase \"Access news and updates\" as UC11\n    usecase \"Create contests and giveaways\" as UC12\n\n    usecase \"Access social media analytics\" as UC13\n    usecase \"Manage social media accounts\" as UC14\n\n    usecase \"Access customer support\" as UC15\n    usecase \"Manage social media trends\" as UC16\n\n    usecase \"Access social media listening tools\" as UC17\n    usecase \"Manage social media engagement\" as UC18\n\n    usecase \"Access content recommendations\" as UC19\n    usecase \"Manage customer feedback\" as UC20\n}\n\nSocialMediaUser --> UC1\nSocialMediaManager --> UC2\nSocialMediaUser --> UC3\nSocialMediaManager --> UC4\n\nSocialMediaUser --> UC5\nSocialMediaManager --> UC6\n\nSocialMediaUser --> UC7\nSocialMediaManager --> UC8\n\nSocialMediaUser --> UC9\nSocialMediaManager --> UC10\n\nSocialMediaUser --> UC11\nSocialMediaManager --> UC12\n\nSocialMediaUser --> UC13\nSocialMediaManager --> UC14\n\nSocialMediaUser --> UC15\nSocialMediaManager --> UC16\n\nSocialMediaUser --> UC17\nSocialMediaManager --> UC18\n\nSocialMediaUser --> UC19\nSocialMediaManager --> UC20\n@enduml"
    },
    {
        "input": "Give use case diagram for User Stories of Risk Prediction and Detection System.\n 1. As a risk analyst, I want to be able to access historical data and trends, so that I can identify potential risks and vulnerabilities.\n 2. As a system administrator, I want to be able to monitor and track system performance and security metrics, so that I can detect anomalies and potential threats.\n 3. As a risk analyst, I want to be able to analyze and model risk factors and scenarios, so that I can predict and mitigate potential risks.\n 4. As a system administrator, I want to be able to configure and manage security controls and policies, so that I can protect sensitive data and systems.\n 5. As a risk analyst, I want to be able to generate risk reports and alerts, so that I can communicate risks and recommendations to stakeholders.\n 6. As a system administrator, I want to be able to conduct security assessments and audits, so that I can identify and address security vulnerabilities.\n 7. As a risk analyst, I want to be able to collaborate with other team members and stakeholders, so that we can make informed decisions about risk management.\n 8. As a system administrator, I want to be able to respond to security incidents and breaches, so that I can minimize the impact and restore normal operations.\n 9. As a risk analyst, I want to be able to access risk management tools and software, so that I can streamline risk assessment and mitigation processes.\n 10. As a system administrator, I want to be able to monitor and analyze network traffic and logs, so that I can detect and respond to security incidents.\n 11. As a risk analyst, I want to be able to conduct risk assessments and evaluations, so that I can prioritize and address high-risk areas.\n 12. As a system administrator, I want to be able to implement and manage security patches and updates, so that I can protect systems from known vulnerabilities.\n 13. As a risk analyst, I want to be able to access threat intelligence and security advisories, so that I can stay informed about emerging threats and risks.\n 14. As a system administrator, I want to be able to manage and track user access and permissions, so that I can prevent unauthorized access and data breaches.\n 15. As a risk analyst, I want to be able to conduct risk simulations and scenario planning, so that I can prepare for potential risks and disasters.\n 16. As a system administrator, I want to be able to implement and enforce data encryption and data protection measures, so that I can secure sensitive data.\n 17. As a risk analyst, I want to be able to access risk assessment frameworks and methodologies, so that I can standardize risk management processes.\n 18. As a system administrator, I want to be able to conduct regular security training and awareness programs for employees, so that I can improve security practices and reduce human error.\n 19. As a risk analyst, I want to be able to access risk management best practices and guidelines, so that I can implement effective risk management strategies.\n 20. As a system administrator, I want to be able to implement and manage security incident response plans, so that I can respond quickly and effectively to security incidents.",
        "output": "@startuml\nleft to right direction\n\nactor RiskAnalyst\nactor SystemAdministrator\n\nrectangle RiskPredictionAndDetectionSystem {\n    usecase \"Access historical data\" as UC1\n    usecase \"Monitor system performance\" as UC2\n    usecase \"Analyze risk factors\" as UC3\n    usecase \"Configure security controls\" as UC4\n\n    usecase \"Generate risk reports\" as UC5\n    usecase \"Conduct security assessments\" as UC6\n\n    usecase \"Collaborate with team members\" as UC7\n    usecase \"Respond to security incidents\" as UC8\n\n    usecase \"Access risk management tools\" as UC9\n    usecase \"Monitor network traffic\" as UC10\n\n    usecase \"Conduct risk assessments\" as UC11\n    usecase \"Implement security patches\" as UC12\n\n    usecase \"Access threat intelligence\" as UC13\n    usecase \"Manage user access\" as UC14\n\n    usecase \"Conduct risk simulations\" as UC15\n    usecase \"Implement data encryption\" as UC16\n\n    usecase \"Access risk assessment frameworks\" as UC17\n    usecase \"Conduct security training\" as UC18\n\n    usecase \"Access risk management best practices\" as UC19\n    usecase \"Implement security incident response plans\" as UC20\n}\n\nRiskAnalyst --> UC1\nSystemAdministrator --> UC2\nRiskAnalyst --> UC3\nSystemAdministrator --> UC4\n\nRiskAnalyst --> UC5\nSystemAdministrator --> UC6\n\nRiskAnalyst --> UC7\nSystemAdministrator --> UC8\n\nRiskAnalyst --> UC9\nSystemAdministrator --> UC10\n\nRiskAnalyst --> UC11\nSystemAdministrator --> UC12\n\nRiskAnalyst --> UC13\nSystemAdministrator --> UC14\n\nRiskAnalyst --> UC15\nSystemAdministrator --> UC16\n\nRiskAnalyst --> UC17\nSystemAdministrator --> UC18\n\nRiskAnalyst --> UC19\nSystemAdministrator --> UC20\n@enduml"          
    },
    {
        "input": "Give use case diagram for following User Stories:\n 1. As a customer, I want to be able to search for products by keywords, category, or brand, so that I can find what I'm looking for quickly and easily.\n 2. As a customer, I want to be able to view product details, including price, description, images, and reviews, so that I can make an informed purchase decision.\n 3. As a customer, I want to be able to add products to my shopping cart, so that I can keep track of my purchases and continue shopping.\n 4. As a customer, I want to be able to checkout and pay for my purchases using a variety of payment methods, such as credit cards, PayPal, and mobile payments.\n 5. As a customer, I want to be able to track the status of my order, including shipping and delivery updates, so that I can plan accordingly.\n 6. As a customer, I want to be able to leave feedback and reviews on products and the overall shopping experience, so that other customers can benefit from my experience.\n 7. As a customer, I want to be able to save my payment and shipping information for future purchases, so that I can checkout more quickly and easily.\n 8. As a customer, I want to be able to access my order history and track my purchase history, so that I can keep track of my past orders and reorder items if necessary.\n 9. As a customer, I want to be able to receive recommendations for products based on my past purchases and browsing history, so that I can discover new items that I may be interested in.\n 10. As a customer, I want to be able to easily return or exchange products, so that I can be satisfied with my purchases.\n 11. As a customer, I want to be able to receive discounts and promotions, such as free shipping or percentage off, so that I can save money on my purchases.\n 12. As a customer, I want to be able to contact customer support easily and receive timely responses to my inquiries and issues.\n 13. As a customer, I want to be able to filter products by price range, color, size, and other attributes, so that I can find the products that meet my specific needs.\n 14. As a customer, I want to be able to receive alerts and notifications on sales, new arrivals, and other updates, so that I can stay up to date on the latest offerings.\n 15. As a customer, I want to be able to create and manage a wishlist of items that I'm interested in purchasing, so that I can easily find and purchase them later.\n 16. As a customer, I want to be able to share products and my shopping experience with my friends and followers on social media, so that I can recommend products and the store to others.\n 17. As an administrator, I want to be able to manage product listings, including adding, editing, and deleting products, so that the store is up to date and relevant.\n 18. As an administrator, I want to be able to manage customer orders, including tracking and fulfilling orders, so that customers receive their purchases on time.\n 19. As an administrator, I want to be able to manage customer reviews and feedback, including responding to comments and addressing concerns, so that the store has a positive reputation.\n 20. As an administrator, I want to be able to monitor website traffic and sales data, so that I can make informed decisions about the store's operations and marketing strategies.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Administrator\n\nrectangle ECommerceSystem {\n    usecase \"Search for products\" as UC1\n    usecase \"View product details\" as UC2\n    usecase \"Add products to shopping cart\" as UC3\n    usecase \"Checkout and pay\" as UC4\n\n    usecase \"Track order status\" as UC5\n    usecase \"Leave feedback and reviews\" as UC6\n\n    usecase \"Save payment and shipping information\" as UC7\n    usecase \"Access order history\" as UC8\n\n    usecase \"Receive product recommendations\" as UC9\n    usecase \"Return or exchange products\" as UC10\n\n    usecase \"Receive discounts and promotions\" as UC11\n    usecase \"Contact customer support\" as UC12\n\n    usecase \"Filter products\" as UC13\n    usecase \"Receive alerts and notifications\" as UC14\n\n    usecase \"Create and manage wishlist\" as UC15\n    usecase \"Share products on social media\" as UC16\n\n    usecase \"Manage product listings\" as UC17\n    usecase \"Manage customer orders\" as UC18\n\n    usecase \"Manage customer reviews\" as UC19\n    usecase \"Monitor website traffic\" as UC20\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\n\nCustomer --> UC5\nCustomer --> UC6\n\nCustomer --> UC7\nCustomer --> UC8\n\nCustomer --> UC9\nCustomer --> UC10\n\nCustomer --> UC11\nCustomer --> UC12\n\nCustomer --> UC13\nCustomer --> UC14\n\nCustomer --> UC15\nCustomer --> UC16\n\nAdministrator --> UC17\nAdministrator --> UC18\n\nAdministrator --> UC19\nAdministrator --> UC20\n@enduml"
    },
    {
        "input": "Create a use case diagram for this system, given the following User Stories:\n 1. As a patient, I want to be able to search for doctors by their specialty and availability, so that I can easily find and schedule an appointment with the right healthcare professional.\n 2. As a patient, I want to be able to view my upcoming appointments, so that I can plan my schedule accordingly.\n 3. As a patient, I want to be able to cancel or reschedule appointments online, so that I can adjust my schedule as needed.\n 4. As a patient, I want to be able to receive reminders and notifications about my upcoming appointments, so that I don't forget or miss them.\n 5. As a patient, I want to be able to provide feedback on my experience with the healthcare professional, so that the hospital can improve their services.\n 6. As a healthcare professional, I want to be able to view and manage my appointment schedule, so that I can plan my workday and avoid scheduling conflicts.\n 7. As a healthcare professional, I want to be able to access patient information and medical history, so that I can provide personalized care.\n 8. As a healthcare professional, I want to be able to easily communicate with patients about their appointments and medical conditions, so that we can establish a good doctor-patient relationship.\n 9. As a hospital administrator, I want to be able to generate reports on appointment statistics and patient satisfaction, so that I can evaluate and improve the hospital's services.\n 10. As a hospital administrator, I want to be able to manage and track the availability of healthcare professionals, so that I can ensure that there are enough staff members to meet patient demand.\n 11. As a patient, I want to be able to see the availability of medical facilities (e.g. X-ray machines), so that I can plan for any diagnostic tests in advance.\n 12. As a patient, I want to be able to view my medical test reports and prescription history online, so that I can easily track my health progress.\n 13. As a healthcare professional, I want to be able to request lab tests and scans, so that I can diagnose and treat patients effectively.\n 14. As a healthcare professional, I want to be able to review medical test results and prescribe medications online, so that I can provide efficient care.\n 15. As a patient, I want to be able to make online payments for medical services and treatments, so that I can avoid long wait times at the hospital.\n 16. As a patient, I want to be able to download and print my medical records, so that I can have a copy for personal reference or for other healthcare professionals.\n 17. As a healthcare professional, I want to be able to add notes to patient medical records, so that I can document important information and provide continuity of care.\n 18. As a patient, I want to be able to schedule follow-up appointments with healthcare professionals, so that I can continue to receive treatment and care.\n 19. As a hospital administrator, I want to be able to manage and track the inventory of medical supplies and equipment, so that we can ensure that we have enough supplies to meet patient demand.\n 20. As a healthcare professional, I want to be able to access training materials and resources online, so that I can continue to improve my skills and knowledge.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor HealthcareProfessional\nactor HospitalAdministrator\n\nrectangle HospitalManagementSystem {\n    usecase \"Search for doctors\" as UC1\n    usecase \"View upcoming appointments\" as UC2\n    usecase \"Cancel or reschedule appointments\" as UC3\n    usecase \"Receive reminders and notifications\" as UC4\n\n    usecase \"Provide feedback on experience\" as UC5\n\n    usecase \"View and manage appointment schedule\" as UC6\n    usecase \"Access patient information\" as UC7\n\n    usecase \"Communicate with patients\" as UC8\n\n    usecase \"Generate reports on appointments\" as UC9\n    usecase \"Manage healthcare professionals availability\" as UC10\n\n    usecase \"View medical facilities availability\" as UC11\n    usecase \"View medical test reports\" as UC12\n\n    usecase \"Request lab tests and scans\" as UC13\n    usecase \"Review medical test results\" as UC14\n\n    usecase \"Make online payments\" as UC15\n    usecase \"Download and print medical records\" as UC16\n\n    usecase \"Add notes to patient records\" as UC17\n    usecase \"Schedule follow-up appointments\" as UC18\n\n    usecase \"Manage inventory of medical supplies\" as UC19\n    usecase \"Access training materials\" as UC20\n}\n\nPatient --> UC1\nPatient --> UC2\nPatient --> UC3\nPatient --> UC4\nPatient --> UC5\n\nHealthcareProfessional --> UC6\nHealthcareProfessional --> UC7\nHealthcareProfessional --> UC8\nHealthcareProfessional --> UC13\nHealthcareProfessional --> UC14\nHealthcareProfessional --> UC17\n\nHospitalAdministrator --> UC9\nHospitalAdministrator --> UC10\nHospitalAdministrator --> UC11\nHospitalAdministrator --> UC19\n\nPatient --> UC12\nPatient --> UC15\nPatient --> UC16\nPatient --> UC18\nHealthcareProfessional --> UC20\n@enduml"
    },
    {
        "input": "Design use case diagram for User Stories of a Software Development and Project Management System.\n 1. As a software engineer, I want to be able to easily access and navigate the company's code repository, so that I can efficiently find and work on the codebase.\n 2. As a project manager, I want to be able to create and assign tasks to team members, so that I can manage project timelines and deliverables.\n 3. As a software developer, I want to be able to submit code changes for review and feedback, so that I can ensure high-quality code is integrated into the codebase.\n 4. As a software tester, I want to be able to easily create and execute test cases, so that I can identify and report any issues or bugs.\n 5. As a team lead, I want to be able to track the progress of my team members and provide them with feedback and support, so that we can work together effectively and efficiently.\n 6. As a software engineer, I want to be able to access documentation and resources related to the company's software stack, so that I can improve my skills and knowledge.\n 7. As a product manager, I want to be able to track user feedback and feature requests, so that I can prioritize and plan the product roadmap.\n 8. As a software developer, I want to be able to easily collaborate with other team members on code changes, so that we can work together on complex features or bug fixes.\n 9. As a quality assurance engineer, I want to be able to create and manage test plans, so that I can ensure that software releases are thoroughly tested before they are deployed.\n 10. As a software engineer, I want to be able to participate in code reviews and provide feedback to other team members, so that we can improve the quality of the codebase.\n 11. As a technical writer, I want to be able to easily access and contribute to company documentation, so that I can ensure that the documentation is accurate and up-to-date.\n 12. As a software developer, I want to be able to easily access and use third-party libraries and services, so that I can build applications quickly and efficiently.\n 13. As a team lead, I want to be able to create and track team goals and objectives, so that we can stay focused on delivering high-quality software.\n 14. As a software engineer, I want to be able to easily deploy and manage software releases, so that I can ensure that the software is stable and reliable.\n 15. As a customer support representative, I want to be able to easily access customer data and troubleshoot issues, so that I can provide effective and efficient support.\n 16. As a software developer, I want to be able to access and use development tools and utilities, so that I can improve my productivity and efficiency.\n 17. As a project manager, I want to be able to generate reports on project progress and status, so that I can communicate effectively with stakeholders.\n 18. As a software engineer, I want to be able to access and use analytics and monitoring tools, so that I can identify and resolve performance or reliability issues.\n 19. As a team lead, I want to be able to identify and address team member performance issues, so that we can maintain a high level of productivity and quality.\n 20. As a software developer, I want to be able to easily collaborate with remote team members, so that we can work together effectively and efficiently regardless of location.",
        "output": "@startuml\nleft to right direction\n\nactor SoftwareEngineer\nactor ProjectManager\nactor SoftwareDeveloper\nactor SoftwareTester\nactor TeamLead\nactor ProductManager\nactor QualityAssuranceEngineer\nactor TechnicalWriter\nactor CustomerSupportRepresentative\n\nrectangle SoftwareDevelopmentAndProjectManagementSystem {\n    usecase \"Access code repository\" as UC1\n    usecase \"Create and assign tasks\" as UC2\n    usecase \"Submit code changes for review\" as UC3\n    usecase \"Create and execute test cases\" as UC4\n\n    usecase \"Track team progress\" as UC5\n    usecase \"Access documentation and resources\" as UC6\n\n    usecase \"Track user feedback\" as UC7\n    usecase \"Collaborate on code changes\" as UC8\n\n    usecase \"Create and manage test plans\" as UC9\n    usecase \"Participate in code reviews\" as UC10\n\n    usecase \"Access and contribute to documentation\" as UC11\n    usecase \"Access third-party libraries\" as UC12\n\n    usecase \"Create and track team goals\" as UC13\n    usecase \"Deploy and manage software releases\" as UC14\n\n    usecase \"Access customer data\" as UC15\n    usecase \"Access development tools\" as UC16\n\n    usecase \"Generate project reports\" as UC17\n    usecase \"Access analytics and monitoring tools\" as UC18\n\n    usecase \"Address team member performance issues\" as UC19\n    usecase \"Collaborate with remote team members\" as UC20\n}\n\nSoftwareEngineer --> UC1\nProjectManager --> UC2\nSoftwareDeveloper --> UC3\nSoftwareTester --> UC4\n\nTeamLead --> UC5\nSoftwareEngineer --> UC6\n\nProductManager --> UC7\nSoftwareDeveloper --> UC8\n\nQualityAssuranceEngineer --> UC9\nSoftwareDeveloper --> UC10\n\nTechnicalWriter --> UC11\nSoftwareDeveloper --> UC12\n\nTeamLead --> UC13\nSoftwareEngineer --> UC14\n\nCustomerSupportRepresentative --> UC15\nSoftwareDeveloper --> UC16\n\nProjectManager --> UC17\nSoftwareEngineer --> UC18\n\nTeamLead --> UC19\nSoftwareDeveloper --> UC20\n@enduml"
    },
    {
        "input": "Give use case diagram for following User Stories.\n 1. As a cusotmer, I want to be able to search for specific medications by name or category, so that I can quickly find what I need.\n 2. As a customer, I want to be able to see detailed information about each medication, including dosage, side effects, and possible interactions, so that I can make informed decisions about my purchase.\n 3. As a customer, I want to be able to create a personal account to store my order history and payment information, so that I can easily reorder medications in the future.\n 4. As a customer, I want to be able to receive alerts when my medication is running low, so that I can reorder before I run out.\n 5. As a customer, I want to be able to compare prices and reviews for different medications, so that I can make an informed purchase decision.\n 6. As a customer, I want to be able to see the availability of each medication in real-time, so that I can determine whether it is currently in stock.\n 7. As a customer, I want to be able to track the status of my order, including shipping and delivery information, so that I can plan accordingly.\n 8. As a customer, I want to be able to select different shipping options, including express and overnight delivery, so that I can receive my medications as quickly as possible.\n 9. As a customer, I want to be able to receive reminders about taking my medication, including dosage instructions and potential side effects.\n 10. As a customer, I want to be able to easily cancel or modify an order, so that I can make changes as needed.\n 11. As a customer, I want to be able to receive personalized recommendations for medications based on my health history and current conditions.\n 12. As a customer, I want to be able to leave feedback and reviews for medications, so that others can benefit from my experience.\n 13. As a pharmacist, I want to be able to review and verify prescription orders before they are shipped, so that I can ensure their accuracy and safety.\n 14. As a pharmacist, I want to be able to contact customers directly if there are any issues with their order, including questions about prescriptions and potential drug interactions.\n 15. As a pharmacist, I want to be able to manage inventory levels and receive alerts when certain medications are running low, so that I can restock as needed.\n 16. As a pharmacist, I want to be able to generate reports on medication orders and sales, so that I can monitor trends and make informed business decisions.\n 17. As a pharmacist, I want to be able to communicate with doctors and other healthcare providers to clarify prescription orders and ensure patient safety.\n 18. As a healthcare provider, I want to be able to access patient information and medication history, so that I can make informed decisions about prescribing medications.\n 19. As a healthcare provider, I want to be able to easily submit prescription orders to the online pharmacy, so that my patients can receive their medications quickly and efficiently.\n 20. As a healthcare provider, I want to be able to receive alerts if a patient has not picked up their medication or has reported any issues with their order, so that I can follow up with them as needed.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Pharmacist\nactor HealthcareProvider\n\nrectangle OnlinePharmacySystem {\n    usecase \"Search for medications\" as UC1\n    usecase \"View medication information\" as UC2\n    usecase \"Create personal account\" as UC3\n    usecase \"Receive low medication alerts\" as UC4\n\n    usecase \"Compare prices and reviews\" as UC5\n    usecase \"Check medication availability\" as UC6\n\n    usecase \"Track order status\" as UC7\n    usecase \"Select shipping options\" as UC8\n\n    usecase \"Receive medication reminders\" as UC9\n    usecase \"Cancel or modify order\" as UC10\n\n    usecase \"Receive personalized recommendations\" as UC11\n    usecase \"Leave feedback and reviews\" as UC12\n\n    usecase \"Review and verify prescription orders\" as UC13\n    usecase \"Contact customers\" as UC14\n\n    usecase \"Manage inventory levels\" as UC15\n    usecase \"Generate order reports\" as UC16\n\n    usecase \"Communicate with healthcare providers\" as UC17\n    usecase \"Access patient information\" as UC18\n\n    usecase \"Submit prescription orders\" as UC19\n    usecase \"Receive patient issue alerts\" as UC20\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\n\nCustomer --> UC6\nCustomer --> UC7\nCustomer --> UC8\nCustomer --> UC9\nCustomer --> UC10\n\nCustomer --> UC11\nCustomer --> UC12\n\nPharmacist --> UC13\nPharmacist --> UC14\nPharmacist --> UC15\nPharmacist --> UC16\n\nHealthcareProvider --> UC17\nHealthcareProvider --> UC18\nHealthcareProvider --> UC19\nHealthcareProvider --> UC20\n@enduml"
    },
    {
        "input": "Make a use case diagram for this system. User Stories:\n 1. As a cricket fan, I want to be able to purchase tickets online, so that I can easily attend matches.\n 2. As a cricket team manager, I want to be able to schedule and manage team practices and games, so that we can be prepared for upcoming matches.\n 3. As a cricket player, I want to be able to track my personal statistics, such as runs scored and wickets taken, so that I can monitor my progress and improve my game.\n 4. As a cricket coach, I want to be able to analyze player performance and provide feedback and advice, so that I can help them improve their skills.\n 5. As a cricket fan, I want to be able to watch live streams of matches online, so that I can enjoy the game from anywhere.\n 6. As a cricket team manager, I want to be able to recruit and manage team members, so that we can build a strong and competitive team.\n 7. As a cricket player, I want to be able to communicate with my teammates and coaches, so that we can coordinate and plan effectively.\n 8. As a cricket umpire, I want to be able to track and manage match scores and statistics, so that I can ensure a fair and accurate game.\n 9. As a cricket team captain, I want to be able to communicate and strategize with my teammates during matches, so that we can make informed decisions and win.\n 10. As a cricket fan, I want to be able to follow and engage with my favorite players and teams on social media, so that I can stay updated and connected.\n 11. As a cricket team manager, I want to be able to manage player contracts and payments, so that we can ensure fair compensation and financial stability.\n 12. As a cricket player, I want to be able to access training resources and tutorials, so that I can improve my skills and knowledge of the game.\n 13. As a cricket coach, I want to be able to manage and plan team practices and drills, so that we can improve our skills and teamwork.\n 14. As a cricket fan, I want to be able to purchase and wear official team merchandise, so that I can show my support for my favorite team.\n 15. As a cricket team manager, I want to be able to track and manage team expenses, so that we can stay within budget and maximize resources.\n 16. As a cricket player, I want to be able to receive injury treatment and rehabilitation support, so that I can recover and return to playing.\n 17. As a cricket umpire, I want to be able to access and review video replays of critical decisions, so that I can make accurate calls.\n 18. As a cricket team captain, I want to be able to review and analyze match data and statistics, so that I can make informed decisions and adjust strategies as needed.\n 19. As a cricket fan, I want to be able to participate in online fantasy cricket leagues, so that I can compete and engage with other fans.\n 20. As a cricket team manager, I want to be able to plan and execute team travel and logistics, so that we can arrive at matches on time and well-prepared.",
        "output": "@startuml\nleft to right direction\n\nactor CricketFan\nactor CricketTeamManager\nactor CricketPlayer\nactor CricketCoach\nactor CricketUmpire\nactor CricketTeamCaptain\n\nCricketPlayer <|--CricketTeamCaptain\n\nrectangle CricketManagementAndFanEngagementSystem {\n    usecase \"Purchase tickets online\" as UC1\n    usecase \"Schedule team practices\" as UC2\n    usecase \"Track personal statistics\" as UC3\n    usecase \"Analyze player performance\" as UC4\n\n    usecase \"Watch live streams\" as UC5\n    usecase \"Recruit team members\" as UC6\n    usecase \"Manage team members\" as UC21\n\n    usecase \"Communicate with teammates\" as UC7\n    usecase \"Track match scores\" as UC8\n\n    usecase \"Strategize with teammates\" as UC9\n    usecase \"Follow players and teams\" as UC10\n\n    usecase \"Manage player contracts\" as UC11\n    usecase \"Access training resources\" as UC12\n\n    usecase \"Manage team practices\" as UC13\n    usecase \"Purchase team merchandise\" as UC14\n\n    usecase \"Track team expenses\" as UC15\n    usecase \"Receive injury treatment\" as UC16\n\n    usecase \"Access video replays\" as UC17\n    usecase \"Review match data\" as UC18\n\n    usecase \"Participate in fantasy cricket leagues\" as UC19\n    usecase \"Plan team travel\" as UC20\n}\n\nCricketFan --> UC1\nCricketTeamManager --> UC2\nCricketPlayer --> UC3\nCricketCoach --> UC4\n\nCricketFan --> UC5\nCricketTeamManager --> UC6\nCricketTeamManager --> UC21\nCricketPlayer --> UC7\nCricketUmpire --> UC8\n\nCricketTeamCaptain --> UC9\nCricketFan --> UC10\n\nCricketTeamManager --> UC11\nCricketPlayer --> UC12\n\nCricketCoach --> UC13\nCricketFan --> UC14\n\nCricketTeamManager --> UC15\nCricketPlayer --> UC16\n\nCricketUmpire --> UC17\nCricketTeamCaptain --> UC18\n\nCricketFan --> UC19\nCricketTeamManager --> UC20\n@enduml"          
    },
    {
        "input": "User Stories of an Automatic Test Case Generation System.\n 1. As a software developer, I want to be able to specify the input domain and constraints for automatic testcase generation, so that I can ensure that the generated testcases are relevant and effective.\n 2. As a tester, I want to be able to specify the expected output or behavior for each test case, so that I can ensure that the generated testcases are covering the intended functionality.\n 3. As a developer, I want to be able to specify the coverage criteria (e.g., statement coverage, branch coverage, path coverage) for automatic testcase generation, so that the generated test cases can achieve the desired level of coverage.\n 4. As a tester, I want to be able to configure the level of randomization and diversity in the generated testcases, so that I can ensure that they are not biased towards any particular input or behavior.\n 5. As a tester, I want to be able to prioritize and filter the generated testcases based on their relevance and potential impact, so that I can focus on the most important tests first.\n 6. As a developer, I want to be able to integrate the automatic testcase generation tool with my development environment (e.g., IDE, build system), so that I can easily run and debug the generated testcases.\n 7. As a tester, I want to be able to generate testcases for different platforms and environments (e.g., web, mobile, desktop), so that I can ensure that the software works correctly in all the target environments.\n 8. As a developer, I want to be able to generate testcases for different input formats (e.g., XML, JSON, CSV), so that I can ensure that the software handles different input types correctly.\n 9. As a tester, I want to be able to generate testcases for different types of inputs (e.g., text, numeric, date), so that I can ensure that the software handles different input data types correctly.\n 10. As a developer, I want to be able to generate testcases for different boundary conditions (e.g., minimum and maximum values), so that I can ensure that the software handles edge cases correctly.\n 11. As a tester, I want to be able to generate testcases for error handling and exception scenarios, so that I can ensure that the software handles errors and exceptions correctly.\n 12. As a developer, I want to be able to generate testcases for complex scenarios involving multiple inputs and dependencies, so that I can ensure that the software works correctly in complex situations.\n 13. As a tester, I want to be able to generate testcases for performance and scalability testing, so that I can ensure that the software can handle the expected load and usage patterns.\n 14. As a developer, I want to be able to generate testcases for security testing, so that I can ensure that the software is secure and protects user data.\n 15. As a tester, I want to be able to generate testcases for usability testing, so that I can ensure that the software is easy to use and navigate for end-users.\n 16. As a developer, I want to be able to generate testcases for integration testing, so that I can ensure that the software works correctly with other systems and components.\n 17. As a tester, I want to be able to generate testcases for regression testing, so that I can ensure that the software still works correctly after changes or updates are made.\n 18. As a developer, I want to be able to generate testcases for compatibility testing, so that I can ensure that the software works correctly with different devices, browsers, and platforms.\n 19. As a tester, I want to be able to generate testcases for user acceptance testing, so that I can ensure that the software meets the requirements and expectations of end-users.\n 20. As a software tester, I want to be able to generate test cases automatically, so that I can save time and increase the coverage of my testing.\n 21. As a developer, I want to be able to generate test cases automatically, so that I can verify that my code is working correctly.\n 22. As a QA manager, I want to be able to generate test cases automatically, so that I can ensure that our software is thoroughly tested.\n 23. As a tester, I want to be able to generate test cases that cover all possible scenarios, so that I can catch any defects or issues in the software.\n 24. As a developer, I want to be able to generate test cases for new features, so that I can ensure that they are implemented correctly.\n 25. As a tester, I want to be able to generate test cases that are easy to understand and maintain, so that I can quickly identify and fix any issues that arise.\n 26. As a tester, I want to be able to generate test cases that cover both positive and negative scenarios, so that I can ensure that the software is resilient to various inputs.\n 27. As a tester, I want to be able to generate test cases that are compatible with different platforms and environments, so that I can ensure that the software is reliable across different systems.\n 28. As a tester, I want to be able to generate test cases that simulate user behavior, so that I can identify and fix any usability issues.\n 29. As a developer, I want to be able to generate test cases automatically for code refactoring, so that I can ensure that the behavior of the code remains unchanged.\n 30. As a tester, I want to be able to generate test cases for regression testing, so that I can ensure that new changes do not introduce any new issues in existing functionality.\n 31. As a tester, I want to be able to generate test cases for performance testing, so that I can identify and fix any performance bottlenecks in the software.\n 32. As a tester, I want to be able to generate test cases that cover security vulnerabilities, so that I can ensure that the software is secure and resilient to attacks.\n 33. As a tester, I want to be able to generate test cases that are flexible and customizable, so that I can adjust them to meet specific testing needs.\n 34. As a tester, I want to be able to generate test cases that can be integrated with continuous integration/continuous delivery (CI/CD) pipelines, so that I can ensure that new changes are properly tested before being deployed.\n 35. As a tester, I want to be able to generate test cases that can be easily reviewed and approved by other team members, so that we can ensure that the testing is thorough and comprehensive.\n 36. As a tester, I want to be able to generate test cases that are automated, so that I can run them repeatedly and reliably without manual intervention.\n 37. As a tester, I want to be able to generate test cases that can detect and report defects automatically, so that I can save time and effort in identifying and fixing issues.\n 38. As a tester, I want to be able to generate test cases that can provide detailed reports and analysis on test results, so that I can quickly identify areas of improvement.\n 39. As a tester, I want to be able to generate test cases that are easily maintainable, so that I can quickly update them as new changes are made to the software.\n 40. As a software developer, I want an automatic testcase generation tool to integrate with my continuous integration/continuous deployment pipeline, so that I can ensure that any changes made to the codebase do not introduce new bugs or regressions.\n Give use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Tester\nactor Developer\nactor QAManager\n\nrectangle AutomaticTestCaseGenerationSystem {\n    usecase \"Specify input domain and constraints\" as UC1\n    usecase \"Specify expected output\" as UC2\n    usecase \"Specify coverage criteria\" as UC3\n    usecase \"Configure randomization\" as UC4\n\n    usecase \"Prioritize and filter testcases\" as UC5\n    usecase \"Integrate with development environment\" as UC6\n\n    usecase \"Generate test cases automatically\" as UC7\n    usecase \"Integrate with CI/CD pipelines\" as UC8\n\n    usecase \"Review and approve testcases\" as UC9\n    usecase \"Automate testcases\" as UC10\n\n    usecase \"Detect and report defects\" as UC11\n    usecase \"Provide detailed reports\" as UC12\n}\n\nDeveloper --> UC1\nTester --> UC2\nDeveloper --> UC3\nTester --> UC4\nTester --> UC5\nDeveloper --> UC6\n\nTester --> UC7\nDeveloper --> UC7\n\nDeveloper --> UC8\nTester --> UC9\nDeveloper --> UC10\nTester --> UC11\nDeveloper --> UC12\n\nQAManager --> UC7\n@enduml"
    },
    {
        "input": "Make a use case diagram for a Social Media Platform with following user stories.\n 1. As a user, I want to be able to create a profile and customize my personal information, so that I can share my interests and connect with others.\n 2. As a user, I want to be able to post updates, photos, and videos to my profile, so that I can share my experiences and memories with friends and followers.\n 3. As a user, I want to be able to like, comment, and share posts from other users, so that I can engage with their content and show my appreciation.\n 4. As a user, I want to be able to follow other users and receive updates on their posts, so that I can stay connected and informed.\n 5. As a user, I want to be able to create and join groups and communities based on shared interests, so that I can connect with like-minded people.\n 6. As a user, I want to be able to send private messages and chat with friends, so that I can have private conversations and stay in touch.\n 7. As a user, I want to be able to discover trending topics and popular posts, so that I can stay up-to-date with the latest news and trends.\n 8. As a user, I want to be able to receive notifications for new likes, comments, and messages, so that I can stay engaged and respond promptly.\n 9. As a user, I want to be able to block and report inappropriate content or users, so that I can maintain a safe and positive online environment.\n 10. As a user, I want to be able to customize my privacy settings and control who can view my profile and posts, so that I can protect my personal information.\n 11. As a user, I want to be able to search for users, groups, and posts by keyword, so that I can easily find what I am looking for.\n 12. As a user, I want to be able to save and bookmark posts and content for later viewing, so that I can revisit and share them with others.\n 13. As a user, I want to be able to create and participate in polls and surveys, so that I can gather opinions and feedback from the community.\n 14. As a user, I want to be able to access live streaming and video chat features, so that I can interact with others in real-time.\n 15. As a user, I want to be able to create and share events and invitations, so that I can organize gatherings and activities with friends and followers.\n 16. As a user, I want to be able to access a mobile app for the social media platform, so that I can stay connected and engaged on-the-go.\n 17. As a user, I want to be able to receive recommendations for new users to follow and groups to join, so that I can discover new content and connections.\n 18. As a user, I want to be able to access analytics and insights on my profile and posts, so that I can track my engagement and reach.\n 19. As a user, I want to be able to access customer support and assistance with any issues or concerns, so that I can resolve problems quickly and efficiently.\n 20. As a user, I want to be able to access a marketplace for buying and selling products, so that I can discover and purchase items from other users and businesses.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle SocialMediaPlatform {\n    usecase \"Create profile\" as UC1\n    usecase \"Post updates\" as UC2\n    usecase \"Engage with posts\" as UC3\n    usecase \"Follow other users\" as UC4\n\n    usecase \"Create and join groups\" as UC5\n    usecase \"Send private messages\" as UC6\n\n    usecase \"Discover trending topics\" as UC7\n    usecase \"Receive notifications\" as UC8\n\n    usecase \"Block and report content\" as UC9\n    usecase \"Customize privacy settings\" as UC10\n\n    usecase \"Search for users and posts\" as UC11\n    usecase \"Save and bookmark posts\" as UC12\n\n    usecase \"Create and participate in polls\" as UC13\n    usecase \"Access live streaming\" as UC14\n\n    usecase \"Create and share events\" as UC15\n    usecase \"Access mobile app\" as UC16\n\n    usecase \"Receive recommendations\" as UC17\n    usecase \"Access analytics and insights\" as UC18\n\n    usecase \"Access customer support\" as UC19\n    usecase \"Access marketplace\" as UC20\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\nUser --> UC16\nUser --> UC17\nUser --> UC18\nUser --> UC19\nUser --> UC20\n@enduml"
    },
    {
        "input": "Make a use case diagram for User Stories of an Electronic Gadget Shopping System.\n 1. As a user, I want to be able to browse electronic gadgets by category, so that I can easily find what I am looking for.\n 2. As a user, I want to be able to search for electronic gadgets by brand, so that I can easily find products from my preferred manufacturers.\n 3. As a user, I want to be able to filter electronic gadgets by price range, so that I can find products that fit my budget.\n 4. As a user, I want to be able to view high-quality images and videos of electronic gadgets, so that I can get a clear idea of what the product looks like and how it works.\n 5. As a user, I want to be able to read detailed product descriptions and specifications, so that I can understand the features and functionality of the electronic gadget.\n 6. As a user, I want to be able to compare different electronic gadgets side-by-side, so that I can make an informed purchasing decision.\n 7. As a user, I want to be able to see product ratings and reviews from other customers, so that I can evaluate the quality and reliability of the electronic gadget.\n 8. As a user, I want to be able to add electronic gadgets to my wishlist, so that I can keep track of products I am interested in buying.\n 9. As a user, I want to be able to easily place an order for an electronic gadget and select a shipping option, so that I can receive the product in a timely manner.\n 10. As a user, I want to be able to track the status of my order and receive updates on the shipping and delivery process, so that I can plan accordingly.\n 11. As a user, I want to be able to return electronic gadgets that are damaged or do not meet my expectations, so that I can receive a refund or replacement product.\n 12. As a user, I want to be able to receive customer support and assistance with my electronic gadget purchase, so that I can resolve any issues or concerns.\n 13. As a user, I want to be able to pay for my electronic gadget purchase using a variety of payment methods, such as credit card, PayPal, or Apple Pay.\n 14. As a user, I want to be able to receive promotions and discounts on electronic gadgets, so that I can save money on my purchase.\n 15. As a user, I want to be able to access my electronic gadget purchase history and order details, so that I can review my past transactions.\n 16. As a user, I want to be able to receive recommendations for electronic gadgets based on my browsing and purchase history, so that I can discover new products that fit my interests and needs.\n 17. As a user, I want to be able to receive notifications for electronic gadgets that are on sale or back in stock, so that I can take advantage of special offers.\n 18. As a user, I want to be able to share information about electronic gadgets with my friends and family on social media, so that I can get their opinions and recommendations.\n 19. As a user, I want to be able to provide feedback and suggestions for electronic gadgets and the shopping experience, so that the company can improve its products and services.\n 20. As a user, I want to be able to access a mobile app for electronic gadget shopping, so that I can shop on-the-go and receive notifications about special offers and promotions.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle ElectronicGadgetShoppingSystem {\n    usecase \"Browse and Filter gadgets\" as UC1\n\n    usecase \"Search by brand\" as UC2\n    usecase \"Search by price range\" as UC3\n    usecase \"Search by category\" as UC21\n\n    usecase \"View gadget information\" as UC22\n\n    usecase \"View images and videos\" as UC4\n    usecase \"Read descriptions\" as UC5\n    usecase \"View ratings and reviews\" as UC7\n    \n    usecase \"Compare gadgets\" as UC6\n    usecase \"Add gadgets to wishlist\" as UC8\n    usecase \"Place an order\" as UC9\n    usecase \"Track order status\" as UC10\n    usecase \"Return damaged gadgets\" as UC11\n    usecase \"Receive customer support\" as UC12\n    usecase \"Make Payment\" as UC13\n    usecase \"Receive promotions and discounts\" as UC14\n    usecase \"Access purchase history\" as UC15\n    usecase \"Receive recommendations\" as UC16\n    usecase \"Receive sale notifications\" as UC17\n    usecase \"Share gadgets\" as UC18\n    usecase \"Provide feedback\" as UC19\n    usecase \"Access mobile app\" as UC20\n}\n\nUser --> UC1\n\nUC1 ..> UC2: <<extend>>\nUC1 ..> UC3: <<extend>>\nUC1 ..> UC21: <<extend>>\n\nUser --> UC22\nUC22 ..> UC4: <<extend>>\nUC22 ..> UC5: <<extend>>\nUC22 ..> UC7: <<extend>>\n\nUser --> UC6\nUser --> UC8\nUser --> UC9\nUser --> UC10\n\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\n\nUser --> UC15\nUser --> UC16\nUser --> UC17\nUser --> UC18\n\nUser --> UC19\nUser --> UC20\n@enduml"
    },
    {
        "input": "Give use case diagram for following User Stories:\n 1. As a user, I want to be able to search for train tickets based on my travel dates, so that I can plan my trip accordingly.\n 2. As a user, I want to be able to select my preferred train and seat class, so that I can book tickets that meet my travel needs and preferences.\n 3. As a user, I want to be able to view the train schedule and availability of seats in real-time, so that I can make informed booking decisions.\n 4. As a user, I want to be able to make payment for my train tickets online, so that I can complete the booking process without having to visit a physical ticket counter.\n 5. As a user, I want to receive a confirmation email or SMS after I have successfully booked my train tickets, so that I can have proof of my booking.\n 6. As a user, I want to be able to cancel or modify my train tickets, so that I can adjust my travel plans as needed.\n 7. As a user, I want to be able to track the status of my train tickets, so that I can stay updated on any changes or delays.\n 8. As a user, I want to be able to view my travel history and past train bookings, so that I can keep track of my travel expenses and plans.\n 9. As a user, I want to be able to view the train route and stops, so that I can plan my trip and decide on the most convenient boarding station.\n 10. As a user, I want to be able to view the fare rules and refund policies, so that I can make informed booking decisions.\n 11. As a user, I want to be able to view the train seating layout, so that I can choose the seat that suits my preferences.\n 12. As a user, I want to be able to view the train coach layout, so that I can choose the coach that suits my preferences.\n 13. As a user, I want to be able to view the train's on-board facilities, such as food, Wi-Fi, and entertainment, so that I can plan my trip accordingly.\n 14. As a user, I want to be able to view the train's departure and arrival times, so that I can plan my travel itinerary accordingly.\n 15. As a user, I want to be able to view the train's speed and duration of the journey, so that I can plan my travel itinerary accordingly.\n 16. As a user, I want to be able to view the train's route map, so that I can plan my trip and know where the train will be passing through.\n 17. As a user, I want to be able to view the train's stoppage timings, so that I can plan my travel itinerary accordingly.\n 18. As a user, I want to be able to view the train's running status in real-time, so that I can stay updated on any changes or delays.\n 19. As a user, I want to be able to view the train's coach and seat availability in real-time, so that I can make informed booking decisions.\n 20. As a user, I want to be able to view the train's fare chart and compare the fares for different train classes, so that I can choose the most cost-effective option for my travel.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle TrainTicketBookingSystem {\n    usecase \"Search for train tickets\" as UC1\n    usecase \"Select train and seat class\" as UC2\n    usecase \"Make payment\" as UC4\n    usecase \"Receive confirmation\" as UC5\n    usecase \"Cancel or modify tickets\" as UC6\n    usecase \"Track ticket status\" as UC7\n    usecase \"View travel history\" as UC8\n\n    usecase \"View train schedule\" as UC3\n    usecase \"View train route\" as UC9\n    usecase \"View departure and arrival times\" as UC14\n    usecase \"View stoppage timings\" as UC17\n    usecase \"View running status\" as UC18\n\n    usecase \"View seating layout\" as UC11\n    usecase \"View coach layout\" as UC12\n    usecase \"View on-board facilities\" as UC13\n    usecase \"View fare rules\" as UC10\n    usecase \"View fare chart\" as UC20\n    usecase \"View coach availability\" as UC19\n    usecase \"View speed and duration\" as UC15\n    usecase \"View route map\" as UC16\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUC3 ..> UC9 : <<extend>>\nUC3 ..> UC14 : <<extend>>\nUC3 ..> UC17 : <<extend>>\nUC3 ..> UC18 : <<extend>>\n\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC10\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC15\nUser --> UC16\nUser --> UC19\nUser --> UC20\n@enduml"
    },
    {
        "input": "Give use case diagram for following User Stories:\n 1. As a prospective homebuyer, I want to be able to search for properties based on my preferences such as location, price range, number of bedrooms and bathrooms, so that I can find a home that meets my needs.\n 2. As a homebuyer, I want to be able to view detailed property information including photos, floor plans, and property features, so that I can make an informed decision.\n 3. As a homebuyer, I want to be able to save my favorite properties and receive notifications when new properties that match my criteria become available, so that I can stay updated on the market.\n 4. As a homebuyer, I want to be able to schedule property viewings and appointments with real estate agents, so that I can see the property in person and ask questions.\n 5. As a homebuyer, I want to be able to make offers on properties and receive updates on the status of my offers, so that I can know when to move forward with purchasing a home.\n 6. As a homebuyer, I want to be able to track my mortgage application and receive updates on its status, so that I can stay informed about the loan process.\n 7. As a homebuyer, I want to be able to compare different mortgage options and rates, so that I can choose the best option for my financial situation.\n 8. As a homebuyer, I want to be able to calculate estimated mortgage payments and closing costs, so that I can plan my budget accordingly.\n 9. As a homebuyer, I want to be able to communicate with my real estate agent and other parties involved in the homebuying process, so that I can get my questions answered and stay updated on progress.\n 10. As a homebuyer, I want to be able to perform inspections and appraisals on the property, so that I can ensure that it is in good condition and worth the price.\n 11. As a homebuyer, I want to be able to receive assistance with the paperwork and legal aspects of the homebuying process, so that I can navigate the process easily and efficiently.\n 12. As a homebuyer, I want to be able to negotiate the terms of the sale and reach an agreement with the seller, so that I can purchase the property at a fair price.\n 13. As a homebuyer, I want to be able to review and sign legal documents electronically, so that I can complete the homebuying process without having to physically be present at every step.\n 14. As a homebuyer, I want to be able to access resources and information about the homebuying process, such as guides and FAQs, so that I can educate myself and make informed decisions.\n 15. As a homebuyer, I want to be able to receive post-purchase support such as homeowner insurance, warranties, and maintenance services, so that I can take care of my new home.\n 16. As a homebuyer, I want to be able to rate and review the real estate agent and other parties involved in the homebuying process, so that I can help other buyers make informed decisions.\n 17. As a homebuyer, I want to be able to track the progress of my move, such as scheduling movers and transferring utilities, so that I can prepare for moving into my new home.\n 18. As a homebuyer, I want to be able to receive information about the community and neighborhood where the property is located, such as schools, parks, and local businesses, so that I can make an informed decision.\n 19. As a homebuyer, I want to be able to access virtual tours and 3D models of properties, so that I can see the home in detail even if I can't physically visit it.\n 20. As a first-time home buyer, I want to be able to browse through a variety of property listings based on my preferred location, price range, and other requirements, so that I can make an informed decision on purchasing a house.",
        "output": "@startuml\nleft to right direction\n\nactor Homebuyer\n\nrectangle HomeBuyingSystem {\n    usecase \"Search properties\" as UC1\n    usecase \"View property information\" as UC2\n    usecase \"Save favorite properties\" as UC3\n    usecase \"Schedule viewings\" as UC4\n    usecase \"Make offers\" as UC5\n    usecase \"Track mortgage application\" as UC6\n    usecase \"Compare mortgage options\" as UC7\n    usecase \"Calculate mortgage payments\" as UC8\n    usecase \"Communicate with real estate agent\" as UC9\n    usecase \"Perform inspections\" as UC10\n    usecase \"Receive assistance with paperwork\" as UC11\n    usecase \"Negotiate terms of sale\" as UC12\n    usecase \"Review and sign documents\" as UC13\n    usecase \"Access resources and information\" as UC14\n    usecase \"Receive post-purchase support\" as UC15\n    usecase \"Rate and review parties\" as UC16\n    usecase \"Track move progress\" as UC17\n    usecase \"Receive community information\" as UC18\n    usecase \"Access virtual tours\" as UC19\n}\n\nHomebuyer --> UC1\nHomebuyer --> UC2\nHomebuyer --> UC3\nHomebuyer --> UC4\nHomebuyer --> UC5\nHomebuyer --> UC6\nHomebuyer --> UC7\nHomebuyer --> UC8\nHomebuyer --> UC9\nHomebuyer --> UC10\nHomebuyer --> UC11\nHomebuyer --> UC12\nHomebuyer --> UC13\nHomebuyer --> UC14\nHomebuyer --> UC15\nHomebuyer --> UC16\nHomebuyer --> UC17\nHomebuyer --> UC18\nHomebuyer --> UC19\n@enduml"
    },
    {
        "input": "User stories for food order online.\n 1. As a customer, I want to be able to create an account and save my payment and delivery information for future orders.\n 2. As a customer, I want to be able to view the nutritional information and allergen information for each menu item so that I can make informed choices.\n 3. As a customer, I want to be able to redeem rewards or use discount codes for my orders.\n 4. As a customer, I want to be able to schedule my order for a specific date and time in advance.\n 5. As a customer, I want to be able to see the restaurant's ratings and reviews from third-party platforms like Yelp or Google.\n 6. As a customer, I want to be able to split the bill with friends or colleagues when placing a group order.\n 7. As a customer, I want to be able to view the restaurant's specials and promotions when browsing the menu.\n 8. As a customer, I want to be able to leave delivery instructions for the restaurant, such as gate codes or special parking arrangements.\n Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\n\nrectangle FoodOrderOnlineSystem {\n    usecase \"Create account\" as UC1\n    usecase \"View nutritional information\" as UC2\n    usecase \"Redeem rewards\" as UC3\n    usecase \"Schedule order\" as UC4\n    usecase \"View ratings and reviews\" as UC5\n    usecase \"Split bill\" as UC6\n    usecase \"View specials and promotions\" as UC7\n    usecase \"Leave delivery instructions\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\nCustomer --> UC8\n@enduml"
    },
    {
        "input": "User stories for online shopping.\n 1. As a customer, I want to be able to browse and search for products easily and efficiently.\n 2. As a customer, I want to be able to add products to my cart and review my cart before checking out.\n 3. As a customer, I want to be able to track my order's status and receive updates throughout the delivery process.\n 4. As a customer, I want to be able to view customer reviews and ratings for products.\n 5. As a customer, I want to be able to easily return or exchange products if they are not satisfactory.\n 6. As a customer, I want to be able to receive recommendations for products based on my browsing and purchase history.\n 7. As a customer, I want to be able to access customer support easily and receive timely assistance.\n 8. As a customer, I want to be able to pay securely and conveniently.\n Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\n\nrectangle OnlineShoppingSystem {\n    usecase \"Browse and search products\" as UC1\n    usecase \"Add products to cart\" as UC2\n    usecase \"Track order status\" as UC3\n    usecase \"View reviews and ratings\" as UC4\n    usecase \"Return or exchange products\" as UC5\n    usecase \"Receive recommendations\" as UC6\n    usecase \"Access customer support\" as UC7\n    usecase \"Pay securely\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\nCustomer --> UC8\n@enduml"
    },
    {
        "input": "User stories for Booking travel accommodations.\n 1. As a traveler, I want to be able to search for available accommodations in my destination.\n 2. As a traveler, I want to be able to book a specific accommodation for my desired dates.\n 3. As a traveler, I want to be able to compare different accommodations based on their features and ratings.\n 4. As a traveler, I want to be able to book a combination of accommodations, such as flights and hotels.\n 5. As a traveler, I want to be able to track my booking status and receive timely notifications.\n 6. As a traveler, I want to be able to view the location and nearby attractions of my booked accommodations.\n 7. As a traveler, I want to be able to cancel or modify my booking in case of changes or emergencies.\n 8. As a traveler, I want to be able to leave a review or rating for my booked accommodations.\n Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Traveler\n\nrectangle BookingTravelAccommodationsSystem {\n    usecase \"Search accommodations\" as UC1\n    usecase \"View location/attractions\" as UC2\n    usecase \"Make a booking\" as UC3\n    usecase \"Book accommodation\" as UC4\n    usecase \"Book combination (flights and hotels)\" as UC5\n    usecase \"Compare accommodations\" as UC6\n    usecase \"Manage booking\" as UC7\n    usecase \"Track booking status\" as UC8\n    usecase \"Cancel or modify booking\" as UC9\n    usecase \"Leave review/rating\" as UC10\n}\n\nTraveler --> UC1\nUC1 ..> UC2 : <<extend>>\n\nTraveler --> UC3\nUC3 ..> UC4 : <<extend>>\nUC3 ..> UC5 : <<extend>>\n\nTraveler --> UC6\n\nTraveler --> UC7\nUC7 ..> UC8 : <<extend>>\nUC7 ..> UC9 : <<extend>>\n\nTraveler --> UC10\n@enduml"
    },
    {
        "input": "User stories for Planning a wedding.\n 1. As a bride or groom, I want to be able to create a wedding checklist and timeline to keep track of all the tasks and deadlines.\n 2. As a bride or groom, I want to be able to search for and book wedding venues and vendors.\n 3. As a bride or groom, I want to be able to design and customize my wedding website and invitations.\n 4. As a bride or groom, I want to be able to create and share my wedding registry.\n 5. As a bride or groom, I want to be able to manage my wedding budget and expenses.\n 6. As a bride or groom, I want to be able to plan and schedule my wedding ceremony and reception.\n 7. As a bride or groom, I want to be able to collaborate and communicate with my wedding party guests.\n 8. As a bride or groom, I want to be able to track RSVPs and guest lists.\n 9. As a bride or groom, I want to be able to create and share a wedding day timeline with vendors and participants.\n 10. As a bride or groom, I want to be able to access resources and inspiration for wedding planning.\n Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor BrideOrGroom\n\nrectangle WeddingPlanningSystem {\n    usecase \"Create checklist\" as UC1\n    usecase \"Create timeline\" as UC2\n\n    usecase \"Manage wedding bookings\" as UC3\n    usecase \"Search and book venues\" as UC4\n    usecase \"Search and book vendors\" as UC5\n\n    usecase \"Design wedding website\" as UC6\n    usecase \"Design invitations\" as UC7\n\n    usecase \"Manage registry\" as UC8\n    usecase \"Create registry\" as UC9\n    usecase \"Share registry\" as UC10\n\n    usecase \"Manage budget\" as UC11\n\n    usecase \"Plan ceremony\" as UC12\n    usecase \"Plan reception\" as UC13\n\n    usecase \"Collaborate with wedding party/guests\" as UC14\n    usecase \"Track RSVPs and guest lists\" as UC15\n\n    usecase \"Access resources/inspiration\" as UC16\n}\n\nBrideOrGroom --> UC1\nBrideOrGroom --> UC2\n\nBrideOrGroom --> UC3\nUC3 ..> UC4 : <<extend>>\nUC3 ..> UC5 : <<extend>>\n\nBrideOrGroom --> UC6\nUC6 ..> UC7 : <<extend>>\n\nBrideOrGroom --> UC8\nUC8 ..> UC9 : <<extend>>\nUC8 ..> UC10 : <<extend>>\n\nBrideOrGroom --> UC11\n\nBrideOrGroom --> UC12\nUC12 ..> UC13 : <<extend>>\n\nBrideOrGroom --> UC14\nBrideOrGroom --> UC15\nBrideOrGroom --> UC16\n@enduml"
    },
    {
        "input": "User stories for Shopping for a new car.\n 1. As a prospective car buyer, I want to be able to search and compare different car models based on my preferences.\n 2. As a prospective car buyer, I want to be able to read reviews and ratings of different car models from other buyers and experts.\n 3. As a prospective car buyer, I want to be able to schedule a test drive and see the availability of different car models at nearby dealerships.\n 4. As a prospective car buyer, I want to be able to customize and configure the car model of my choice with different colors, trims, and options.\n 5. As a prospective car buyer, I want to be able to get financing options and estimate my monthly payments based on my budget and credit score.\n 6. As a prospective car buyer, I want to be able to negotiate and finalize the price and financing terms with a sales representative.\n 7. As a prospective car buyer, I want to be able to sign the necessary paperwork and complete the purchase process.\n Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor CarBuyer\n\nrectangle CarShoppingSystem {\n    usecase \"Search car models\" as UC1\n    usecase \"Compare car models\" as UC2\n    usecase \"Read reviews and ratings\" as UC3\n    usecase \"Schedule test drive\" as UC4\n    usecase \"Customize car model\" as UC5\n    usecase \"Get financing options\" as UC6\n    usecase \"Negotiate purchase\" as UC7\n    usecase \"Finalize purchase\" as UC8\n}\n\nCarBuyer --> UC1\nCarBuyer --> UC2\nCarBuyer --> UC3\nCarBuyer --> UC4\nCarBuyer --> UC5\nCarBuyer --> UC6\nCarBuyer --> UC7\nCarBuyer --> UC8\n@enduml"
    },
    {
        "input": "User stories for Managing a personal calendar.\n 1. As a user, I want to be able to create events in my personal calendar, so that I can keep track of my schedule.\n 2. As a user, I want to be able to view my personal calendar by day, week, or month, so that I can easily see my schedule.\n 3. As a user, I want to be able to set my availability in my personal calendar, so that others can see when I am free.\n 4. As a user, I want to be able to share my calendar with others, so that they can see my schedule.\n 5. As a user, I want to be able to sync my personal calendar with other calendars, so that I can see all my events in one place.\n 6. As a user, I want to be able to set reminders for events in my personal calendar, so that I don't forget important appointments.\n 7. As a user, I want to be able to search for events in my personal calendar, so that I can find specific appointments.\n 8. As a user, I want to be able to color-code events in my personal calendar, so that I can easily differentiate between different types of appointments.\n 9. As a user, I want to be able to set recurring events in my personal calendar, so that I don't have to manually create the same event multiple times.\n Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle PersonalCalendarSystem {\n    usecase \"Manage events\" as UC1\n    usecase \"Create events\" as UC2\n    usecase \"Set recurring events\" as UC3\n    usecase \"Set reminders\" as UC4\n    usecase \"Color-code events\" as UC5\n\n    usecase \"View calendar\" as UC6\n    usecase \"Search events\" as UC7\n\n    usecase \"Set availability\" as UC8\n    usecase \"Share calendar\" as UC9\n    usecase \"Sync calendars\" as UC10\n}\n\nUser --> UC1\nUser --> UC4\nUser --> UC3\n\nUC1 ..> UC2 : <<extend>>\nUC1 ..> UC5 : <<extend>>\nUC1 ..> UC7 : <<extend>>\n\nUser --> UC6\n\nUser --> UC8\nUser --> UC9\nUser --> UC10\n@enduml"
    },
    {
        "input": "User stories for Managing a personal budget.\n 1. As a user, I want to be able to create a budget plan with different categories such as income, expenses, and savings.\n 2. As a user, I want to be able to track my spending and income in each category, so that I can stay within my budget.\n 3. As a user, I want to be able to set financial goals and monitor my progress towards achieving them.\n 4. As a user, I want to be able to view reports and insights on my financial habits and trends.\n 5. As a user, I want to be able to receive alerts and notifications for upcoming bills and payments.\n 6. As a user, I want to be able to sync my budget plan with my bank accounts and credit cards, so that I can automatically track my transactions.\n 7. As a user, I want to be able to export my budget data to a spreadsheet or financial software for analysis and planning.\n 8. As a user, I want to be able to track my spending and income in real-time, so that I can make informed financial decisions.\n Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle PersonalBudgetSystem {\n    usecase \"Manage budget plan\" as UC1\n    usecase \"Create budget plan\" as UC2\n    usecase \"Set financial goals\" as UC3\n    usecase \"View reports and insights\" as UC4\n    usecase \"Receive alerts and notifications\" as UC5\n    usecase \"Sync with bank accounts\" as UC6\n    usecase \"Export budget data\" as UC7\n\n    usecase \"Track spending and income\" as UC8\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nUC1 ..> UC8 : <<extend>>\n@enduml"
    },
    {
        "input": "User stories for Creating a social media account.\n 1. As a new user, I want to create a social media account so that I can connect with friends and family online.\n 2. As a user, I want to be able to add my personal information to my social media account, such as my name and profile picture.\n 3. As a user, I want to be able to connect with other users on the social media platform, such as by following them or sending them friend requests.\n 4. As a user, I want to be able to create posts on my social media account, such as status updates or photos.\n 5. As a user, I want to be able to view posts from other users on the social media platform.\n 6. As a user, I want to be able to react to posts on the social media platform, such as by liking or commenting on them.\n 7. As a user, I want to be able to receive notifications when other users interact with my posts or account.\n Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle SocialMediaPlatform {\n    usecase \"Create account\" as UC1\n    usecase \"Add personal information\" as UC2\n    usecase \"Connect with other users\" as UC3\n    usecase \"Manage posts\" as UC4\n    usecase \"React to posts\" as UC5\n    usecase \"Receive notifications\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\n@enduml"
    },
    {
        "input": "User stories for Project management.\n1. As a project manager, I want to be able to create a project plan online so that I can set goals and track progress.\n2. As a team member, I want to be able to view my assigned tasks online so that I can stay organized and on track.\n3. As a project manager, I want to be able to track project progress online so that I can ensure that the project is on track.\n4. As a team member, I want to be able to communicate with other team members online so that we can collaborate effectively.\n5. As a project manager, I want to be able to assign resources to tasks so that I can manage the project budget effectively.\n6. As a team member, I want to be able to view project documents online so that I can access important project information.\n7. As a project manager, I want to be able to set up project workflows so that tasks can be completed efficiently.\n8. As a team member, I want to be able to log time spent on tasks so that I can track my productivity and contribute to accurate billing.\n9. As a project manager, I want to be able to set up alerts for upcoming deadlines so that I can ensure that the project stays on track.\n Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor ProjectManager\nactor TeamMember\n\nrectangle ProjectManagementSystem {\n    usecase \"Create project plan\" as UC1\n    usecase \"View assigned tasks\" as UC2\n    usecase \"Track project progress\" as UC3\n    usecase \"Communicate with team\" as UC4\n    usecase \"Assign resources\" as UC5\n    usecase \"View project documents\" as UC6\n    usecase \"Set up workflows\" as UC7\n    usecase \"Log time spent\" as UC8\n    usecase \"Set up alerts\" as UC9\n}\n\nProjectManager --> UC1\nProjectManager --> UC3\nProjectManager --> UC5\nProjectManager --> UC7\nProjectManager --> UC9\n\nTeamMember --> UC2\nTeamMember --> UC4\nTeamMember --> UC6\nTeamMember --> UC8\n@enduml"
    },
    {
        "input": "User stories for fitness tracker.\n 1. As a user, I want to be able to set up a profile so that the app can track my progress.\n 2. As a user, I want to track my daily steps so that I can monitor my physical activity.\n 3. As a user, I want to set goals for my physical activity so that I can work towards achieving them.\n 4. As a user, I want to track my workouts so that I can monitor my progress and improve my fitness.\n 5. As a user, I want to track my nutrition so that I can monitor my calorie intake and make healthy choices.\n 6. As a user, I want to connect with friends and other users so that I can stay motivated and share my progress.\n 7. As a user, I want to receive personalized recommendations for workouts and nutrition so that I can achieve my goals more effectively.\n 8. As a user, I want to be able to sync my fitness data with other apps and devices so that I can have a comprehensive view of my health.\n 9. As a user, I want to be able to set reminders for my workouts and meals so that I can stay on track with my fitness goals.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle FitnessTrackerSystem {\n    usecase \"Set up profile\" as UC1\n    usecase \"Track daily steps\" as UC2\n    usecase \"Set activity goals\" as UC3\n    usecase \"Track workouts\" as UC4\n    usecase \"Track nutrition\" as UC5\n    usecase \"Connect with friends\" as UC6\n    usecase \"Receive recommendations\" as UC7\n    usecase \"Sync fitness data\" as UC8\n    usecase \"Set reminders\" as UC9\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\n@enduml"
    },
    {
        "input": "User stories for Learning management system.\n1. As a student, I want to be able to view my course schedule and deadlines so that I can stay organized.\n2. As an instructor, I want to be able to create and manage course content so that I can deliver engaging and informative lessons.\n3. As a student, I want to be able to participate in online discussions with my classmates so that I can collaborate and learn from others.\n4. As an administrator, I want to be able to manage user accounts and access so that I can ensure security and privacy.\n5. As a student, I want to be able to track my progress and grades so that I can monitor my performance.\n6. As an instructor, I want to be able to create quizzes and assessments so that I can evaluate student learning.\n7. As a student, I want to be able to access course materials from my mobile device so that I can study on the go.\n8. As an instructor, I want to be able to provide video lectures so that I can engage students and deliver content in a dynamic way.\n9. As a student, I want to be able to receive personalized recommendations and resources based on my learning preferences so that I can improve my knowledge and skills.\n10. As an administrator, I want to be able to generate reports on student and course performance so that I can evaluate the effectiveness of the system and make data-driven decisions.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Instructor\nactor Administrator\n\nrectangle LearningManagementSystem {\n    usecase \"View course schedule\" as UC1\n    usecase \"Participate in discussions\" as UC2\n    usecase \"Track progress and grades\" as UC3\n    usecase \"Access course materials\" as UC4\n    usecase \"Receive recommendations\" as UC5\n\n    usecase \"Manage course content\" as UC6\n    usecase \"Create quizzes/assessments\" as UC7\n    usecase \"Provide video lectures\" as UC8\n\n    usecase \"Manage user accounts\" as UC9\n    usecase \"Generate reports\" as UC10\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\n\nInstructor --> UC6\nInstructor --> UC7\nInstructor --> UC8\n\nAdministrator --> UC9\nAdministrator --> UC10\n@enduml"
    },
    {
        "input": "User stories for Music Streaming.\n1. As a music listener, I want to be able to search for my favorite artists and songs, so that I can easily find and play the music I love.\n2. As a music listener, I want to be able to create and manage playlists, so that I can easily organize and listen to my favorite songs.\n3. As a music listener, I want to be able to discover new music based on my listening preferences, so that I can expand my music library.\n4. As a music listener, I want to be able to access my music library across multiple devices, so that I can listen to my music wherever I am.\n5. As a music listener, I want to be able to see the lyrics of the songs I'm listening to, so that I can sing along.\n6. As a music listener, I want to be able to share my favorite songs and playlists with my friends, so that we can discover new music together.\n7. As a music listener, I want to be able to customize the playback settings, so that I can optimize the music listening experience.\n8. As a music artist, I want to be able to upload my music to the streaming service, so that I can reach a wider audience.\n9. As a music listener, I want to be able to listen to music offline, so that I can listen to my favorite songs without an internet connection.",
        "output": "@startuml\nleft to right direction\n\nactor MusicListener\nactor MusicArtist\n\nrectangle MusicStreamingSystem {\n    usecase \"Search for artists/songs\" as UC1\n    usecase \"Manage playlists\" as UC2\n    usecase \"Discover new music\" as UC3\n    usecase \"Access music library\" as UC4\n    usecase \"View song lyrics\" as UC5\n    usecase \"Share songs/playlists\" as UC6\n    usecase \"Customize playback settings\" as UC7\n    usecase \"Listen to music offline\" as UC8\n    usecase \"Upload music\" as UC9\n}\n\nMusicListener --> UC1\nMusicListener --> UC2\nMusicListener --> UC3\nMusicListener --> UC4\nMusicListener --> UC5\nMusicListener --> UC6\nMusicListener --> UC7\nMusicListener --> UC8\n\nMusicArtist --> UC9\n@enduml"
    },
    {
        "input": "User stories for Job Application.\n1. As a job seeker, I want to be able to search for job openings that match my skills and experience, so that I can find relevant job opportunities.\n2. As a job seeker, I want to be able to create and manage my job application profile, so that I can easily apply for multiple job openings.\n3. As a job seeker, I want to be able to apply for job openings directly from the job board, so that I can easily submit my job application.\n4. As a job seeker, I want to be able to track the status of my job applications, so that I know where I stand in the job application process.\n5. As a job seeker, I want to be able to receive job recommendations based on my job application profile, so that I can discover new job opportunities.\n6. As a job seeker, I want to be able to communicate with potential employers through the job application platform, so that I can ask questions and provide additional information.\n7. As a job seeker, I want to be able to easily update my job application profile, so that I can keep my job application up-to-date.\n8. As a job seeker, I want to be able to receive job alerts when new job openings match my skills and experience, so that I can stay informed about new job opportunities.\n9. As a job seeker, I want to be able to see the salary and benefits information for job openings, so that I can make informed decisions about which jobs to apply for.\n Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor JobSeeker\n\nrectangle JobApplicationSystem {\n    usecase \"Search job openings\" as UC1\n    usecase \"Manage job application profile\" as UC2\n    usecase \"Apply for job openings\" as UC3\n    usecase \"Track application status\" as UC4\n    usecase \"Receive job recommendations\" as UC5\n    usecase \"Communicate with employers\" as UC6\n    usecase \"Update job application profile\" as UC7\n    usecase \"Receive job alerts\" as UC8\n    usecase \"View salary/benefits information\" as UC9\n}\n\nJobSeeker --> UC1\nJobSeeker --> UC2\nJobSeeker --> UC3\nJobSeeker --> UC4\nJobSeeker --> UC5\nJobSeeker --> UC6\nUC2 ..> UC7: <<extend>>\nJobSeeker --> UC8\nJobSeeker --> UC9\n@enduml"
    },
    {
        "input": "1. As a customer, I want to be able to view my account balance online so that I can keep track of my finances. 2. As a customer, I want to be able to transfer money to other accounts online so that I can make payments and transfers easily. 3. As a customer, I want to be able to view my transaction history online so that I can keep track of my spending. 4. As a customer, I want to be able to deposit checks online so that I don’t have to go to a physical branch. 5. As a customer, I want to be able to pay my bills online so that I don’t have to go to a physical branch or send a check. 6. As a customer, I want to be able to set up recurring payments online so that I don’t have to manually make payments every month. 7. As a customer, I want to be able to view my account statements online so that I can keep track of my finances. 8. As a customer, I want to be able to apply for loans online so that I don’t have to go to a physical branch. 9. As a customer, I want to be able to set up account alerts online so that I can receive notifications about my account activity.\n Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\n\nrectangle OnlineBankingSystem {\n    usecase \"View account balance\" as UC1\n    usecase \"Transfer money\" as UC2\n    usecase \"View transaction history\" as UC3\n    usecase \"Deposit checks\" as UC4\n    usecase \"Pay bills\" as UC5\n    usecase \"Set up recurring payments\" as UC6\n    usecase \"View account statements\" as UC7\n    usecase \"Apply for loans\" as UC8\n    usecase \"Set up account alerts\" as UC9\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\nCustomer --> UC8\nCustomer --> UC9\n@enduml"
    },
    {
        "input": "Create a use case diagram for this.\n 1. As a new customer, I want to open a bank account online, so that I can easily transfer money to my friends and family. 2. As a customer, I want to deposit money into my new bank account, so that I can start using it for transactions. 3. As a customer, I want to withdraw money from my bank account, so that I can access my funds anytime and anywhere. 4. As a customer, I want to view my account balance, so that I can keep track of my transactions and expenses. 5. As a customer, I want to check my recent transactions, so that I can verify my account activity and detect any errors or fraud. 6. As a customer, I want to transfer money to another account within the same bank, so that I can pay bills or send money to my contacts. 7. As a customer, I want to transfer money to another account in a different bank, so that I can send money to people who don't have accounts in my bank.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\n\nrectangle BankAccountSystem {\n    usecase \"Open bank account\" as UC1\n    usecase \"Deposit money\" as UC2\n    usecase \"Withdraw money\" as UC3\n    usecase \"View account balance\" as UC4\n    usecase \"Check recent transactions\" as UC5\n    usecase \"Transfer money within bank\" as UC6\n    usecase \"Transfer money to another bank\" as UC7\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n@enduml"
    },
    {
        "input": "1. As a user, I want to receive weather alerts for my current location to stay informed about severe weather conditions. 2. As a user, I want to receive weather alerts for specific locations that I select, such as my workplace or a vacation destination. 3. As a user, I want to receive weather alerts via push notifications on my mobile device. 4. As a user, I want to receive weather alerts via email, in case I miss the push notification. 5. As a user, I want to receive weather alerts that include details about the severity of the weather condition and any precautions I should take. 6. As a user, I want to receive weather alerts that are specific to my needs, such as alerts for extreme heat or cold. 7. As a user, I want to receive weather alerts that are accessible and user-friendly for people with disabilities. 8. As a user, I want to receive weather alerts that are available in multiple languages. 9. As a user, I want to receive weather alerts that include details about the duration of the weather condition and any changes in severity. 10. As a user, I want to receive weather alerts that are reliable and trustworthy, with accurate information and updates. Give me a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle WeatherAlertSystem {\n    \n    usecase \"Receive weather alerts for location\" as UC1\n    \n    usecase \"Receive for current location\" as UC2\n    usecase \"Receive for specific locations\" as UC3\n\n\n    usecase \"Receive weather alerts via different channels\" as UC4\n\n    usecase \"Receive via push notifications\" as UC5\n    usecase \"Receive via email\" as UC6\n    usecase \"Receive alerts for extreme weather conditions\" as UC7\n    usecase \"Receive multilingual weather alerts\" as UC8\n    usecase \"Receive duration and severity details\" as UC9\n}\n\nUC1 ..> UC2: <<extend>>\nUC1 ..> UC3: <<extend>>\nUC4 ..> UC5: <<extend>>\nUC4 ..> UC6: <<extend>>\nUser --> UC1\nUser --> UC4\nUser --> UC7\nUser --> UC8\nUser --> UC9\n@enduml"
    },
    {
        "input": "User stories for Fashion E-commerce\n125. As a user, I want to be able to easily search for a specific item of clothing so that I can find what I am looking for quickly.\nAcceptance Criteria:\n   The search bar should be prominently displayed on the website.\n   The search bar should allow me to enter specific keywords related to the item I am looking for.\n   The search results should be relevant to my search query and displayed in a clear and organized manner.\n126. As a user, I want to be able to filter my search results based on specific criteria so that I can narrow down my options.\nAcceptance Criteria:\n   The filter options should be clearly visible and accessible on the website.\n   The filter options should allow me to select specific criteria such as size, color, brand, and price range.\n   The filter options should be able to update the search results in real-time as I make my selections.\n127. As a user, I want to be able to see high-quality images of the products I am interested in so that I can make an informed decision.\nAcceptance Criteria:\n   The product images should be of high quality and clearly show the product from different angles.\n   The product images should be able to be zoomed in on for a closer look.\n   The product images should accurately reflect the product's color and texture.\n128. As a user, I want to be able to read detailed product descriptions so that I can understand the product's features and benefits.\nAcceptance Criteria:\n   The product descriptions should be informative and easy to understand.\n   The product descriptions should include information about the product's material, sizing, care instructions, and other relevant details.\n   The product descriptions should be accompanied by clear and accurate product images.\n129. As a user, I want to be able to add items to my cart and easily check out so that I can complete my purchase.\nAcceptance Criteria:\n   The \"Add to Cart\" button should be clearly visible and accessible on the product page.\n   The cart should display the items I have added and the total cost of my purchase.\n   The checkout process should be easy to follow and include clear instructions for payment and shipping options.\n130. As a user, I want to be able to track the status of my order so that I know when to expect my items to arrive.\nAcceptance Criteria:\n   The website should provide me with a tracking number for my order.\n   The tracking number should allow me to see the status of my order, including when it has shipped and when it is expected to arrive.\n   The website should provide clear instructions for contacting customer support if there are any issues with my order.\n131. As a user, I want to be able to easily return or exchange items that do not fit or meet my expectations.\nAcceptance Criteria:\n   The website should clearly state the return and exchange policy.\n   The website should provide me with clear instructions for initiating a return or exchange.\n   The website should provide me with a prepaid shipping label if I need to return or exchange an item.\n132. As a user, I want to be able to save items to a wish list so that I can easily find them later.\nAcceptance Criteria:\n   The website should provide me with a \"Add to Wishlist\" button on each product page.\n   The website should allow me to view and manage my wishlist from my account dashboard.\n   The website should provide me with the option to share my wishlist with others if I choose to.\n Give me a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle FashionEcommerceSystem {\n    usecase \"Search for item\" as UC1\n    usecase \"Filter search results\" as UC2\n    usecase \"View product images\" as UC3\n    usecase \"Read product descriptions\" as UC4\n    usecase \"Add to cart\" as UC5\n    usecase \"Track order status\" as UC6\n    usecase \"Return items\" as UC7\n    usecase \"Save items to wishlist\" as UC8\n    usecase \"Exchange items\" as UC9\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\n@enduml"
    },
    {
        "input": "User stories for Car Rental\n135. As a user, I want to be able to easily search for available rental cars in my desired location and time period.\nAcceptance Criteria:\n  The search function should allow me to input my desired pickup and drop-off location and date/time.\n  The search function should display a list of available rental cars with relevant details such as make, model, price, and availability.\n136. As a user, I want to be able to filter my search results based on specific criteria such as car type, transmission, and fuel type.\nAcceptance Criteria:\n  The filter options should be prominently displayed and easy to use.\n  The filter options should allow me to select specific criteria such as car type, transmission, fuel type, and other relevant features.\n  The filter options should update the search results in real-time as I make my selections.\n137. As a user, I want to be able to view detailed information about the rental car, including its features, mileage, and any additional fees.\nAcceptance Criteria:\n  The rental car information should be clearly displayed and easy to understand.\n  The rental car information should include relevant details such as features, mileage, and any additional fees.\n  The rental car information should be accompanied by high-quality images of the car.\n138. As a user, I want to be able to easily book a rental car and receive confirmation of my reservation.\nAcceptance Criteria:\n  The booking process should be easy to follow and include clear instructions for entering my personal and payment information.\n  The booking process should display the total cost of my rental, including any additional fees.\n  I should receive a confirmation email with the details of my rental reservation.\n139. As a user, I want to be able to modify or cancel my rental reservation if needed.\nAcceptance Criteria:\n  The website should allow me to modify or cancel my reservation easily from my account dashboard.\n  The website should clearly state the cancellation and modification policy.\n  I should receive a confirmation email if I modify or cancel my reservation.\n140. As a user, I want to be able to view and print my rental agreement and receipt.\nAcceptance Criteria:\n  The website should allow me to access my rental agreement and receipt from my account dashboard.\n  The rental agreement and receipt should be easy to understand and clearly display all relevant information.\n  The rental agreement and receipt should be available to print or download as needed.\n141. As a user, I want to be able to add additional drivers to my rental agreement.\nAcceptance Criteria:\n  The website should allow me to add additional drivers to my rental agreement easily.\n  The website should clearly state any additional fees associated with adding drivers.\n  The additional drivers should meet the rental company's driver requirements.\n142. As a user, I want to be able to pick up and drop off my rental car easily and quickly.\nAcceptance Criteria:\n  The rental car pickup and drop-off location should be clearly stated in the rental agreement and confirmation email.\n  The rental car pickup and drop-off process should be clearly explained and easy to follow.\n  The rental car should be clean, well-maintained, and ready for pickup at the designated time.\n143. As a user, I want to be able to report any issues with the rental car during my rental period.\nAcceptance Criteria:\n  The website should provide clear instructions for reporting any issues with the rental car.\n  The rental company should have a 24/7 customer support line for reporting any issues.\n  The rental company should provide a replacement rental car if the reported issue cannot be resolved in a timely manner.\n Based on the above user stories, create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle CarRentalSystem {\n    usecase \"Search for rental cars\" as UC1\n    usecase \"Filter search results\" as UC2\n    usecase \"View car details\" as UC3\n    usecase \"Book rental car\" as UC4\n    usecase \"Manage reservation\" as UC5\n    usecase \"Modify reservation\" as UC10\n    usecase \"Cancel reservation\" as UC11\n    usecase \"View/print rental agreement\" as UC6\n    usecase \"Add additional drivers\" as UC7\n    usecase \"Pick up/drop off car\" as UC8\n    usecase \"Report car issues\" as UC9\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUC5 ..> UC4: <<extend>>\nUC5 ..> UC10: <<extend>>\nUC5 ..> UC11: <<extend>>\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\n@enduml"
    },
    {
        "input": "User stories for Parking Finder\n144. As a user, I want to be able to easily search for available parking spots in my desired location and time period.\nAcceptance Criteria:\n  The search function should allow me to input my desired location and date/time.\n  The search function should display a list of available parking spots with relevant details such as location, price, and availability.\n145. As a user, I want to be able to filter my search results based on specific criteria such as parking type and price.\nAcceptance Criteria:\n  The filter options should be prominently displayed and easy to use.\n  The filter options should allow me to select specific criteria such as parking type and price range.\n  The filter options should update the search results in real-time as I make my selections.\n146. As a user, I want to be able to view detailed information about the parking spot, including its location, price, and any additional fees.\nAcceptance Criteria:\n  The parking spot information should be clearly displayed and easy to understand.\n  The parking spot information should include relevant details such as location, price, and any additional fees.\n  The parking spot information should be accompanied by high-quality images of the parking spot.\n147. As a user, I want to be able to easily book a parking spot and receive confirmation of my reservation.\nAcceptance Criteria:\n  The booking process should be easy to follow and include clear instructions for entering my personal and payment information.\n  The booking process should display the total cost of my parking spot, including any additional fees.\n  I should receive a confirmation email with the details of my parking spot reservation.\n148. As a user, I want to be able to modify or cancel my parking spot reservation if needed.\nAcceptance Criteria:\n  The website should allow me to modify or cancel my reservation easily from my account dashboard.\n  The website should clearly state the cancellation and modification policy.\n  I should receive a confirmation email if I modify or cancel my reservation.\n149. As a user, I want to be able to view and print my parking spot reservation confirmation and receipt.\nAcceptance Criteria:\n  The website should allow me to access my parking spot reservation confirmation and receipt from my account dashboard.\n  The reservation confirmation and receipt should be easy to understand and clearly display all relevant information.\n  The reservation confirmation and receipt should be available to print or download as needed.\n150. As a user, I want to be able to view the availability of parking spots in real-time.\nAcceptance Criteria:\n  The website should display the real-time availability of parking spots.\n  The website should clearly indicate the number of available parking spots in each location.\n  The website should update the availability in real-time as parking spots are booked or become available.\n151. As a user, I want to be able to view parking spot reviews and ratings from other users.\nAcceptance Criteria:\n  The website should display parking spot reviews and ratings from other users.\n  The reviews and ratings should be easy to understand and provide relevant information.\n  Users should be able to sort reviews and ratings by criteria such as date, rating, and relevance.\n152. As a user, I want to be able to report any issues with the parking spot or payment process.\nAcceptance Criteria:\n  The website should provide clear instructions for reporting any issues with the parking spot or payment process.\n  The website should have a customer support line for reporting any issues.\n  The website should provide a solution to reported issues in a timely manner.\n153. As a user, I want to be able to save my favorite parking spots and receive notifications when they become available.\nAcceptance Criteria:\n  The website should allow users to save their favorite parking spots.\n  The website should allow users to set up notifications when their favorite parking spots become available.\n Give me a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle ParkingFinderSystem {\n    usecase \"Search for parking spots\" as UC1\n    usecase \"Filter search results\" as UC2\n    usecase \"View parking spot details\" as UC3\n    usecase \"Book parking spot\" as UC4\n    usecase \"Manage reservation\" as UC5\n    usecase \"Modify reservation\" as UC10\n    usecase \"Cancel reservation\" as UC11\n    usecase \"View/print reservation\" as UC6\n    usecase \"View availability\" as UC7\n    usecase \"View reviews/ratings\" as UC8\n    usecase \"Report issues\" as UC9\n    usecase \"Save favorite spots\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUC5 ..> UC4: <<extend>>\nUC5 ..> UC10: <<extend>>\nUC5 ..> UC11: <<extend>>\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC12\n@enduml"
    },
    {
        "input": "User stories for personal assistant\n154. As a user, I want to be able to schedule appointments and receive reminders.\nAcceptance Criteria:\n  The personal assistant service should allow me to input appointment details such as date, time, location, and purpose.\n  The personal assistant service should send me reminders about upcoming appointments via email, text message, or push notification.\n155. As a user, I want to be able to manage my to-do list and receive reminders.\nAcceptance Criteria:\n  The personal assistant service should allow me to input and prioritize tasks.\n  The personal assistant service should send me reminders about upcoming tasks via email, text message, or push notification.\n156. As a user, I want to be able to book travel arrangements and receive confirmation.\nAcceptance Criteria:\n  The personal assistant service should allow me to input travel details such as date, time, location, and preferred airline or hotel.\n  The personal assistant service should confirm my travel arrangements and send me a confirmation email.\n157. As a user, I want to be able to make restaurant reservations and receive confirmation.\nAcceptance Criteria:\n  The personal assistant service should allow me to input restaurant details such as date, time, location, and party size.\n  The personal assistant service should confirm my restaurant reservation and send me a confirmation email.\n158. As a user, I want to be able to order groceries and receive delivery.\nAcceptance Criteria:\n  The personal assistant service should allow me to input grocery details such as items, quantity, and delivery address.\n  The personal assistant service should confirm my grocery order and provide a delivery window.\n159. As a user, I want to be able to send gifts and receive confirmation.\nAcceptance Criteria:\n  The personal assistant service should allow me to input gift details such as recipient name and address, gift type, and delivery date.\n  The personal assistant service should confirm my gift order and send me a confirmation email.\n159. As a user, I want to be able to research and book entertainment activities.\nAcceptance Criteria:\n  The personal assistant service should allow me to search for entertainment activities such as concerts, theater shows, and sporting events.\n  The personal assistant service should provide me with relevant details such as dates, times, locations, and ticket prices.\n  The personal assistant service should allow me to book and purchase tickets directly through the service.\n160. As a user, I want to be able to book and manage personal services such as house cleaning or pet grooming.\nAcceptance Criteria:\n  The personal assistant service should allow me to input personal service details such as date, time, and preferred provider.\n  The personal assistant service should confirm my personal service booking and send me a confirmation email.\n161. As a user, I want to be able to receive personalized recommendations for products and services.\nAcceptance Criteria:\n  The personal assistant service should use my preferences and past behavior to provide personalized recommendations for products and services.\n  The personal assistant service should allow me to provide feedback on recommendations to improve future recommendations.\n162. As a user, I want to be able to communicate with my personal assistant through various channels such as email, text message, or phone.\nAcceptance Criteria:\n  The personal assistant service should provide me with multiple channels for communication.\n  The personal assistant service should provide me with a timely response to my inquiries and requests.\n  The personal assistant service should ensure the privacy and security of my communication channels.\n Create a use case diagram for this system.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle PersonalAssistantSystem {\n    usecase \"Schedule appointments\" as UC1\n    usecase \"Manage to-do list\" as UC2\n    usecase \"Book travel arrangements\" as UC3\n    usecase \"Make restaurant reservations\" as UC4\n    usecase \"Order groceries\" as UC5\n    usecase \"Send gifts\" as UC6\n    usecase \"Book entertainment activities\" as UC7\n    usecase \"Book personal services\" as UC8\n    usecase \"Receive recommendations\" as UC9\n    usecase \"Communicate with personal assistant\" as UC10\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\n@enduml"
    },
    {
        "input": "User stories for E-book Reading\n163. As a user, I want to be able to easily browse through my collection of e-books so that I can quickly find the book I want to read.\nAcceptance criteria:\n  The app should provide a user-friendly interface that allows for easy navigation and sorting of books based on various criteria such as title, author, genre, etc.\n\n164. As a user, I want to be able to customize the reading experience to my preferences so that I can enjoy reading in a way that suits me best.\nAcceptance criteria:\n  The app should provide customizable options for font size, background color, font type, spacing, and margin size.\n\n165. As a user, I want to be able to highlight and take notes on passages so that I can easily refer back to them later.\nAcceptance criteria:\n  The app should allow for highlighting and note-taking functionality, with the ability to easily search and access these annotations.\n\n166. As a user, I want to be able to track my progress through a book so that I know how much I have read and how much I have left.\nAcceptance criteria:\n  The app should provide a progress bar or percentage tracker that updates as the user reads.\n\n167. As a user, I want to be able to sync my e-books across devices so that I can pick up where I left off on any device.\nAcceptance criteria:\n  The app should allow for seamless syncing across devices, with bookmarks and progress tracking carried over.\n\n168. As a user, I want to be able to access a wide variety of e-books so that I can discover new titles and authors.\nAcceptance criteria:\n  The app should have a large and diverse library of e-books that includes both classic and contemporary titles.\n\n169. As a user, I want to be able to adjust the brightness of my screen so that I can read comfortably in any lighting conditions.\nAcceptance criteria:\n  The app should allow for adjusting screen brightness with ease, either manually or automatically based on ambient light.\n\n170. As a user, I want to be able to search for specific words or phrases within a book so that I can quickly find information.\nAcceptance criteria:\n  The app should provide a robust search functionality that allows for searching within a book, with the ability to refine searches based on specific criteria.\n\n171. As a user, I want to be able to download e-books for offline reading so that I can read without an internet connection.\nAcceptance criteria:\n  The app should allow for downloading e-books for offline reading, with the ability to manage downloaded books and delete them when no longer needed.\n\n172. As a user, I want to be able to share my reading experience with others so that I can discuss books and recommendations with friends and family.\nAcceptance criteria:\n  The app should allow for easy sharing of books, reviews, and annotations with others through social media or other sharing platforms.\n Based on the user stories above, please provide a use case diagram.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle EBookReadingSystem {\n    usecase \"Browse/Access e-book collection\" as UC1\n    usecase \"Customize reading experience\" as UC2\n    usecase \"Highlight and take notes\" as UC3\n    usecase \"Track reading progress\" as UC4\n    usecase \"Sync e-books across devices\" as UC5\n    usecase \"Adjust screen brightness\" as UC6\n    usecase \"Search within book\" as UC7\n    usecase \"Download e-books\" as UC8\n    usecase \"Share reading experience\" as UC9\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\n@enduml"
    },
    {
        "input": "User stories for Creating a social media account\n173. As a user, I want to create a new social media account using my email address.\nAcceptance criteria:\n  User must enter a valid email address.\n  User must choose a strong password that meets the platform's criteria for length and complexity.\n  User must agree to the platform's terms of service and privacy policy.\n  User must receive a verification email and follow the steps to verify their account.\n\n174. As a user, I want to create a new social media account using my phone number.\nAcceptance criteria:\n  User must enter a valid phone number.\n  User must verify their phone number via a text message or phone call.\n  User must choose a strong password that meets the platform's criteria for length and complexity.\n  User must agree to the platform's terms of service and privacy policy.\n\n175. As a user, I want to sign up for a social media account using my existing Google or Facebook account.\nAcceptance criteria:\n  User must be able to sign in to their Google or Facebook account.\n  User must grant the platform access to their basic profile information.\n  User must agree to the platform's terms of service and privacy policy.\n\n176. As a user, I want to create a social media account with a unique username.\nAcceptance criteria:\n  User must choose a unique username that is not already taken.\n  Username must meet the platform's criteria for length and characters allowed.\n\n177. As a user, I want to upload a profile picture when creating my social media account.\nAcceptance criteria:\n  User must be able to upload a profile picture in a supported file format.\n  Profile picture must meet the platform's criteria for size and resolution.\n\n178. As a user, I want to provide basic information about myself when creating my social media account.\nAcceptance criteria:\n  User must be able to enter their first and last name, date of birth, and gender.\n  User must have the option to skip this step if they choose not to provide this information.\n\n179. As a user, I want to connect with my friends when creating my social media account.\nAcceptance criteria:\n  User must be able to search for and connect with friends using their email address, phone number, or username.\n  User must have the option to skip this step if they choose not to connect with friends at this time.\n\n180. As a user, I want to choose my language preference when creating my social media account.\nAcceptance criteria:\n  User must be able to choose their preferred language from a list of supported languages.\n  Platform must display all text in the selected language.\n\n181. As a user, I want to choose my privacy settings when creating my social media account.\nAcceptance criteria:\n  User must be able to choose who can see their profile and posts (public, friends only, etc.).\n  User must be able to choose whether to allow search engines to index their profile.\n  User must be able to choose whether to receive email notifications from the platform.\n\n182. As a user, I want to be able to easily delete my social media account if I decide to leave the platform.\nAcceptance criteria:\n  User must be able to find the option to delete their account easily.\n  User must receive confirmation that their account will be permanently deleted.\n  User must have the option to change their mind and reactivate their account within a certain period of time (e.g. 30 days).\n Please provide a use case diagram based on the user stories above.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle SocialMediaAccountSystem {\n    usecase \"Create account\" as UC1\n    usecase \"Create account with email\" as UC2\n    usecase \"Create account with phone number\" as UC3\n    usecase \"Sign up with Google/Facebook\" as UC4\n    usecase \"Create account with unique username\" as UC5\n    usecase \"Upload profile picture\" as UC6\n    usecase \"Provide basic information\" as UC7\n    usecase \"Connect with friends\" as UC8\n    usecase \"Choose language preference\" as UC9\n    usecase \"Choose privacy settings\" as UC10\n    usecase \"Delete account\" as UC11\n}\n\nUC1 ..> UC2 : <<extend>>\nUC1 ..> UC3 : <<extend>>\nUC1 ..> UC4 : <<extend>>\nUC1 ..> UC5 : <<extend>>\n\nUser --> UC1\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\n@enduml"
    },
    {
        "input": "User stories for Personal Finance Management\n183. As a user, I want to be able to track my income and expenses in one place.\nAcceptance criteria:\n  User must be able to add and categorize their income and expenses.\n  User must be able to view a summary of their income and expenses over a selected time period.\n  User must be able to add recurring income and expenses.\n\n184. As a user, I want to be able to set and track financial goals.\nAcceptance criteria:\n  User must be able to set financial goals, such as saving for a vacation or paying off debt.\n  User must be able to track their progress towards their goals.\n  User must be able to receive reminders and alerts about their goals.\n\n185. As a user, I want to be able to view my account balances and transactions from multiple financial institutions in one place.\nAcceptance criteria:\n  User must be able to securely connect their bank accounts and credit cards to the platform.\n  User must be able to view their account balances and transactions in real-time.\n  User must be able to categorize their transactions and view reports.\n\n186. As a user, I want to be able to create and stick to a budget.\nAcceptance criteria:\n  User must be able to create a budget based on their income and expenses.\n  User must be able to track their spending against their budget.\n  User must be able to receive alerts when they are close to exceeding their budget.\n\n187. As a user, I want to be able to manage my bills and subscriptions.\nAcceptance criteria:\n  User must be able to add their bills and subscriptions to the platform.\n  User must be able to receive reminders when bills are due.\n  User must be able to track their spending on subscriptions.\n\n188. As a user, I want to be able to generate reports and visualizations to help me better understand my finances.\nAcceptance criteria:\n  User must be able to generate reports and visualizations that show their spending habits over time.\n  User must be able to compare their spending to others in their demographic or geographic area.\n  User must be able to export data in a standard format for use in other financial tools.\n\n189. As a user, I want to be able to receive personalized financial advice and recommendations.\nAcceptance criteria:\n  User must be able to answer a series of questions to help the platform understand their financial situation.\n  User must be able to receive personalized advice and recommendations based on their answers.\n  User must be able to access a library of educational resources on personal finance.\n\n190. As a user, I want to be able to securely store my sensitive financial information.\nAcceptance criteria:\n  User must be able to securely store their bank account and credit card information.\n  User must be able to set up two-factor authentication for added security.\n  User must be able to control who has access to their financial information.\n\n191. As a user, I want to be able to track my investments and retirement savings.\nAcceptance criteria:\n  User must be able to connect their investment and retirement accounts to the platform.\n  User must be able to view their investment performance and retirement savings progress.\n  User must be able to receive alerts when their investments need attention.\n Please provide a use case diagram based on the user stories above.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle PersonalFinanceManagementSystem {\n    usecase \"Manage financial tracking\" as UC1\n    usecase \"Track income\" as UC1A\n    usecase \"Track expenses\" as UC1B\n    usecase \"Track investments\" as UC1C\n    usecase \"Track retirement savings\" as UC1D\n    \n    usecase \"Manage financial goals\" as UC2\n    usecase \"Set financial goals\" as UC2A\n    usecase \"Track financial goals\" as UC2B\n    \n    usecase \"Manage accounts\" as UC3\n    usecase \"View account balances\" as UC3A\n    usecase \"View account transactions\" as UC3B\n    \n    usecase \"Manage budgeting\" as UC4\n    usecase \"Create budget\" as UC4A\n    usecase \"Track budget\" as UC4B\n\n    usecase \"Manage bills and subscriptions\" as UC5\n    usecase \"Generate financial reports\" as UC6\n    usecase \"Receive personalized advice\" as UC7\n    usecase \"Store financial information\" as UC8\n}\n\nUC1 ..> UC1A : <<extend>>\nUC1 ..> UC1B : <<extend>>\nUC1 ..> UC1C : <<extend>>\nUC1 ..> UC1D : <<extend>>\n\nUC2 ..> UC2A : <<extend>>\nUC2 ..> UC2B : <<extend>>\n\nUC3 ..> UC3A : <<extend>>\nUC3 ..> UC3B : <<extend>>\n\nUC4 ..> UC4A : <<extend>>\nUC4 ..> UC4B : <<extend>>\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\n@enduml"            
    },
    {
        "input": "User stories for Job Recruiting\n192. As a recruiter, I want to be able to post job listings and manage applications from a single platform.\nAcceptance criteria:\n  Recruiters must be able to create and post job listings.\n  Applicants must be able to apply for jobs directly through the platform.\n  Recruiters must be able to manage applications and communicate with applicants through the platform.\n\n193. As a job seeker, I want to be able to search and apply for jobs on a user-friendly platform.\nAcceptance criteria:\n  Job seekers must be able to search for jobs by location, job title, and other relevant criteria.\n  Job seekers must be able to apply for jobs with their resume and cover letter.\n  Job seekers must be able to track their application status.\n\n194. As a recruiter, I want to be able to view resumes and cover letters in a user-friendly format.\nAcceptance criteria:\n  Resumes and cover letters must be displayed in a clear and organized manner.\n  Recruiters must be able to filter and sort applications based on relevant criteria.\n  Recruiters must be able to leave notes and feedback on applications.\n\n195. As a job seeker, I want to be able to receive job recommendations and alerts.\nAcceptance criteria:\n  The platform must be able to recommend jobs based on the job seeker's skills and preferences.\n  Job seekers must be able to receive alerts when new jobs matching their criteria are posted.\n  The platform must be able to provide personalized feedback to help job seekers improve their chances of getting hired.\n\n196. As a recruiter, I want to be able to manage job listings and applications efficiently.\nAcceptance criteria:\n  Recruiters must be able to edit and update job listings as needed.\n  Recruiters must be able to track and manage the progress of applications.\n  Recruiters must be able to collaborate with other team members on job listings and applications.\n\n197. As a job seeker, I want to be able to research companies and read reviews from other employees.\nAcceptance criteria:\n  The platform must have information on companies, such as their history, culture, and employee benefits.\n  Job seekers must be able to read reviews from other employees and get a sense of the company's culture and work environment.\n  Job seekers must be able to ask questions and get answers from current or former employees.\n\n198. As a recruiter, I want to be able to assess candidates' skills and qualifications.\nAcceptance criteria:\n  The platform must have tools for assessing candidates' skills, such as coding challenges or personality tests.\n  Recruiters must be able to view candidates' resumes and cover letters.\n  Recruiters must be able to conduct interviews through the platform.\n\n199. As a job seeker, I want to be able to receive feedback and guidance on my job search.\nAcceptance criteria:\n  The platform must provide personalized feedback on job applications and interviews.\n  Job seekers must be able to access resources and tools to help them improve their job search skills.\n  Job seekers must be able to connect with career coaches or mentors for guidance.\n\n200. As a recruiter, I want to be able to make offers and negotiate with candidates.\nAcceptance criteria:\n  Recruiters must be able to make offers to candidates through the platform.\n  Recruiters must be able to negotiate salary and other terms with candidates.\n  Recruiters must be able to track the progress of offers and acceptances.\n Draw a use case diagram for the above user stories",
        "output": "@startuml\nleft to right direction\n\nactor Recruiter\nactor JobSeeker\n\nrectangle JobRecruitingSystem {\n    usecase \"Post job listings\" as UC1\n    usecase \"Manage applications\" as UC2\n    usecase \"View resumes/cover letters\" as UC3\n    usecase \"Receive job recommendations\" as UC4\n    usecase \"Research companies\" as UC5\n    usecase \"Assess candidates\" as UC6\n    usecase \"Make offers/negotiate\" as UC7\n    usecase \"Manage job listings\" as UC8\n    usecase \"Receive feedback/guidance\" as UC9\n}\n\nRecruiter --> UC1\nRecruiter --> UC2\nRecruiter --> UC3\nRecruiter --> UC4\nRecruiter --> UC6\nRecruiter --> UC7\nRecruiter --> UC8\nJobSeeker --> UC2\nJobSeeker --> UC4\nJobSeeker --> UC5\nJobSeeker --> UC9\n\n@enduml"
    },
    {
        "input": "User stories for News Aggregation\n200. As a user, I want to be able to access news articles from various sources in one place.\nAcceptance criteria:\n  The platform must aggregate news articles from multiple sources.\n  Users must be able to filter news articles by topic or source.\n  The platform must display news articles in a user-friendly format.\n\n201. As a user, I want to be able to read news articles offline.\nAcceptance criteria:\n  Users must be able to save news articles for offline reading.\n  The platform must display saved news articles in a user-friendly format.\n  The platform must synchronize saved news articles across devices.\n\n202. As a user, I want to be able to receive news alerts on my mobile device.\nAcceptance criteria:\n  The platform must send push notifications for breaking news or important events.\n  Users must be able to customize their news alerts based on their interests.\n  The platform must display news alerts in a user-friendly format.\n\n203. As a user, I want to be able to share news articles on social media.\nAcceptance criteria:\n  Users must be able to share news articles on popular social media platforms.\n  The platform must provide options for customizing the sharing message.\n  The platform must track the number of shares for each news article.\n\n204. As a user, I want to be able to save news articles for later reading.\nAcceptance criteria:\n  Users must be able to save news articles to a reading list or favorites.\n  The platform must display saved news articles in a user-friendly format.\n  Users must be able to remove saved news articles from their list.\n\n205. As a user, I want to be able to access news articles in multiple languages.\nAcceptance criteria:\n  The platform must support multiple languages for news articles.\n  Users must be able to filter news articles by language.\n  The platform must display news articles in a user-friendly format for each language.\n\n206. As a user, I want to be able to search for news articles based on keywords or phrases.\nAcceptance criteria:\n  Users must be able to search for news articles using a search bar.\n  The platform must display search results in a user-friendly format.\n  Users must be able to filter search results by date, source, or relevance.\n\n207. As a user, I want to be able to receive personalized news recommendations.\nAcceptance criteria:\n  The platform must use user data to recommend news articles based on interests.\n  Users must be able to provide feedback on recommended news articles.\n  The platform must display recommended news articles in a user-friendly format.\n\n208. As a user, I want to be able to access news articles from different regions.\nAcceptance criteria:\n  The platform must aggregate news articles from different regions.\n  Users must be able to filter news articles by region.\n  The platform must display news articles in a user-friendly format for each region.\n\n209. As a user, I want to be able to access news articles on different devices.\nAcceptance criteria:\n  The platform must be accessible on multiple devices, including desktop and mobile.\n  Users must be able to synchronize their news reading across devices.\n  The platform must display news articles in a user-friendly format for each device.\n Generate a use case diagram for the above user stories",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle NewsAggregationSystem {\n    usecase \"Access news\" as UC1\n    usecase \"Access news in multiple languages\" as UC1A\n    usecase \"Access news from different regions\" as UC1B\n    usecase \"Access news on different devices\" as UC1C\n    \n    usecase \"Manage news articles\" as UC2\n    usecase \"Read news articles offline\" as UC2A\n    usecase \"Save news articles\" as UC2B\n    usecase \"Share news articles\" as UC2C\n    usecase \"Search news articles\" as UC2D\n    \n    usecase \"Receive news alerts\" as UC3\n    usecase \"Receive personalized recommendations\" as UC4\n}\n\nUC1 ..> UC1A : <<extend>>\nUC1 ..> UC1B : <<extend>>\nUC1 ..> UC1C : <<extend>>\n\nUC2 ..> UC2A : <<extend>>\nUC2 ..> UC2B : <<extend>>\nUC2 ..> UC2C : <<extend>>\nUC2 ..> UC2D : <<extend>>\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\n@enduml"          
    },
    {
        "input": "User stories for Online Learning Platform\n210. As a student, I want to be able to access a wide range of courses on various subjects.\nAcceptance criteria:\n  The platform must offer courses on diverse subjects such as programming, business, and art.\n  Students must be able to search for courses by topic, difficulty level, and instructor.\n  The platform must display course information, including syllabus, instructor bio, and reviews.\n\n211. As a student, I want to be able to enroll in courses and track my progress.\nAcceptance criteria:\n  Students must be able to enroll in courses with a single click.\n  The platform must display a progress tracker for each course, including completed lectures and assignments.\n  Students must be able to receive reminders and notifications about upcoming deadlines.\n\n212. As an instructor, I want to be able to create and publish courses on the platform.\nAcceptance criteria:\n  Instructors must be able to create course content, including lectures, quizzes, and assignments.\n  Instructors must be able to set course prerequisites and requirements.\n  Instructors must be able to publish courses for students to enroll in.\n\n213. As a student, I want to be able to access course materials offline.\nAcceptance criteria:\n  Students must be able to download course materials, such as videos and lecture notes, for offline viewing.\n  The platform must synchronize downloaded materials across devices.\n  Students must be able to access downloaded materials without an internet connection.\n\n214. As a student, I want to be able to interact with instructors and other students in the course.\nAcceptance criteria:\n  The platform must provide discussion forums and chat rooms for students to interact with each other.\n  Instructors must be able to answer questions and provide feedback to students.\n  Students must be able to collaborate on group projects and assignments.\n\n215. As a student, I want to be able to receive certificates of completion for courses.\nAcceptance criteria:\n  Students must be able to receive certificates of completion for finishing courses.\n  Certificates must be downloadable and shareable on social media and professional networks.\n  The platform must display certificates in a user-friendly format.\n\n216. As a student, I want to be able to access course recommendations based on my interests and progress.\nAcceptance criteria:\n  The platform must recommend courses based on the student's browsing history and course progress.\n  Students must be able to provide feedback on recommended courses to improve future recommendations.\n  The platform must display recommended courses in a user-friendly format.\n\n217. As a student, I want to be able to access course reviews and ratings from other students.\nAcceptance criteria:\n  The platform must display course reviews and ratings from other students.\n  Students must be able to sort reviews by criteria such as difficulty level, instructor quality, and relevance.\n  Students must be able to leave reviews and ratings for courses they have completed.\n\n218. As a student, I want to be able to access course materials in multiple languages.\nAcceptance criteria:\n  The platform must offer courses in multiple languages.\n  Students must be able to filter courses by language.\n  The platform must display course materials in a user-friendly format for each language.\n\n219. As a student, I want to be able to access course materials on different devices.\nAcceptance criteria:\n  The platform must be accessible on multiple devices, including desktop and mobile.\n  Students must be able to synchronize their course progress across devices.\n  The platform must display course materials in a user-friendly format for each device.\n Generate a use case diagram for the above user stories",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Instructor\n\nrectangle OnlineLearningPlatform {\n    usecase \"Access courses\" as UC1\n    usecase \"Access course materials offline\" as UC1A\n    usecase \"Access course materials on different devices\" as UC1B\n    usecase \"Access course materials in multiple languages\" as UC1C\n    \n    usecase \"Enroll in courses\" as UC2\n    usecase \"Track course progress\" as UC2A\n    usecase \"Receive certificates\" as UC2B\n    usecase \"Access course recommendations\" as UC2C\n    usecase \"Access course reviews/ratings\" as UC2D\n    \n    usecase \"Create/publish courses\" as UC3\n    usecase \"Interact with instructors/students\" as UC4\n}\n\nUC1 ..> UC1A : <<extend>>\nUC1 ..> UC1B : <<extend>>\nUC1 ..> UC1C : <<extend>>\n\nUC2 ..> UC2A : <<extend>>\nUC2 ..> UC2B : <<extend>>\nUC2 ..> UC2C : <<extend>>\nUC2 ..> UC2D : <<extend>>\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC4\nInstructor --> UC3\n\n@enduml"
    },
    {
        "input": "User stories for online Grocery Shopping\n210. As a user, I want to be able to easily browse through different categories of groceries such as fruits, vegetables, dairy products, etc. and add items to my cart.\nAcceptance criteria:\n  The website/app should have clear and organized categories for different types of groceries.\n  Users should be able to easily navigate between different categories and subcategories.\n  Users should be able to add items to their cart with just a few clicks.\n\n211. As a user, I want to be able to search for specific items using keywords, so that I can easily find what I'm looking for.\nAcceptance criteria:\n  The website/app should have a search bar that allows users to enter keywords related to the item they are looking for.\n  The search results should be accurate and relevant to the keywords entered by the user.\n  Users should be able to easily add items to their cart from the search results page.\n\n212. As a user, I want to be able to view detailed information about each item, such as nutritional information, price per unit, etc.\nAcceptance criteria:\n  The website/app should display detailed information about each item, including nutritional information, ingredients, price per unit, etc.\n  The information should be easy to read and understand.\n  Users should be able to access this information with just a few clicks.\n\n213. As a user, I want to be able to view my cart and checkout when I'm ready to purchase my groceries.\nAcceptance criteria:\n  The website/app should display a clear and organized view of the user's cart, including the total price and quantity of each item.\n  Users should be able to easily remove items from their cart or change the quantity of an item.\n  Users should be able to securely checkout when they are ready to purchase their groceries.\n\n214. As a user, I want to be able to select a delivery time that is convenient for me.\nAcceptance criteria:\n  The website/app should display available delivery times and dates based on the user's location.\n  Users should be able to easily select a delivery time that works for them.\n  The delivery time should be confirmed and displayed to the user before they checkout.\n\n215. As a user, I want to be able to save my shopping cart for later.\nAcceptance criteria:\n  The website/app should allow users to save their shopping cart for future use.\n  The saved cart should be accessible from any device or browser that the user is logged in to.\n  Users should be able to easily load a saved cart and make changes to it before checking out.\n\n216. As a user, I want to be able to track my order status and delivery.\nAcceptance criteria:\n  The website/app should provide real-time updates on the status of the user's order, including when it has been picked, packed, and shipped.\n  Users should be able to easily track their order and view the estimated delivery time.\n  The delivery status should be updated in real-time.\n\n217. As a user, I want to be able to easily reorder items that I have previously purchased.\nAcceptance criteria:\n  The website/app should display a list of the user's past orders and the items that were purchased in each order.\n  Users should be able to easily add items from past orders to their cart.\n  The reordering feature should save users time and make it easy to purchase items they frequently buy.\n\n218. As a user, I want to be able to easily cancel or modify my order if necessary.\nAcceptance criteria:\n  The website/app should allow users to cancel or modify their order up until a certain point before delivery.\n  Users should be able to easily make changes to their order, such as adding or removing items or changing the delivery time.\n  The cancellation and modification process should be clear and easy to follow.\n Give me the use case diagram for the above user stories",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle OnlineGroceryShoppingSystem {\n    usecase \"Manage items\" as UC1\n    usecase \"Browse categories\" as UC1A\n    usecase \"Search for items\" as UC1B\n    usecase \"View item details\" as UC1C\n    usecase \"Reorder items\" as UC1D\n    usecase \"View cart and checkout\" as UC2\n    usecase \"Select delivery time\" as UC3\n    usecase \"Save shopping cart\" as UC4\n    usecase \"Track order status\" as UC5\n    usecase \"Cancel/modify order\" as UC6\n}\n\nUC1 ..> UC1A : <<extend>>\nUC1 ..> UC1B : <<extend>>\nUC1 ..> UC1C : <<extend>>\nUC1 ..> UC1D : <<extend>>\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\n@enduml"          
    },
    {
        "input": "User stories for invoice generation for purchase\n219. As a small business owner, I want to generate an invoice for the products I purchased from a supplier, so that I can keep track of my expenses and pay the supplier on time.\nAcceptance criteria:\n  The invoice generation should include the supplier's details, the purchase date, and the product details.\n  The invoice should display the total cost, including any applicable taxes and discounts.\n  The invoice should provide payment instructions and due date.\n  The invoice should be downloadable in PDF format.\n  The invoice should allow me to add notes or comments, if needed.\n\n220. As a freelancer, I want to generate an invoice for the services I provided to a client, so that I can get paid for my work.\nAcceptance criteria:\n  The invoice generation should include the client's details, the service date, and the service details.\n  The invoice should display the hourly rate or project fee, and the total amount due.\n  The invoice should provide payment instructions and due date.\n  The invoice should be customizable with my logo and branding.\n  The invoice should allow me to track payment status and send reminders, if needed.\n\n221. As an online shopper, I want to generate an invoice for the products I purchased from an e-commerce website, so that I can keep track of my orders and return items if necessary.\nAcceptance criteria:\n  The invoice generation should include the website's details, the order date, and the product details.\n  The invoice should display the total cost, including shipping and taxes.\n  The invoice should provide order and tracking information.\n  The invoice should be downloadable in PDF format.\n  The invoice should allow me to request returns or refunds, if needed.\n\n222. As a contractor, I want to generate an invoice for the services I provided to a client, so that I can bill them for my work and get paid for my time.\nAcceptance criteria:\n  The invoice generation should include the client's details, the service date, and the service details.\n  The invoice should display the hourly rate or project fee, and the total amount due.\n  The invoice should provide payment instructions and due date.\n  The invoice should be customizable with my logo and branding.\n  The invoice should allow me to track payment status and send reminders, if needed.\n\n223. As a nonprofit organization, I want to generate an invoice for the donations we received from our supporters, so that we can keep track of our fundraising efforts and issue tax receipts.\nAcceptance criteria:\n  The invoice generation should include the donor's details, the donation date, and the donation details.\n  The invoice should display the donation amount and any applicable taxes or fees.\n  The invoice should provide instructions for tax receipt issuance.\n  The invoice should be downloadable in PDF format.\n  The invoice should allow us to add thank-you messages or updates.\n\n224. As a retailer, I want to generate an invoice for the products I purchased from a supplier, so that I can verify the order and reconcile the payment.\nAcceptance criteria:\n  The invoice generation should include the supplier's details, the purchase date, and the product details.\n  The invoice should display the total cost, including any applicable taxes and discounts.\n  The invoice should provide payment instructions and due date.\n  The invoice should be downloadable in PDF format.\n  The invoice should allow me to reconcile it with the purchase order and payment records.\n\n225. As a service provider, I want to generate an invoice for the monthly subscription fee my client pays, so that I can confirm the payment and keep track of their account status.\nAcceptance criteria:\n  The invoice generation should include the client's details, the subscription period, and the subscription details.\n  The invoice should display the subscription fee and any applicable taxes or fees.\n  The invoice should provide payment instructions and due date.\n  The invoice should be customizable with my logo and branding.\n  The invoice should allow me to track payment status and send reminders, if needed.\n\n226. As a landlord, I want to generate an invoice for the rent payment my tenant makes, so that I can confirm the payment and keep track of their account status.\nAcceptance criteria:\n  The invoice generation should include the tenant's details, the rental period, and the rental details.\n  The invoice should display the rent amount and any applicable fees or charges.\n  The invoice should provide payment instructions and due date.\n  The invoice should be customizable with my logo and branding.\n  The invoice should allow me to track payment status and send reminders, if needed.\n\n227. As a consultant, I want to generate an invoice for the project I completed for a client, so that I can bill them for my services and get paid for my work.\nAcceptance criteria:\n  The invoice generation should include the client's details, the project date, and the project details.\n  The invoice should display the hourly rate or project fee, and the total amount due.\n  The invoice should provide payment instructions and due date.\n  The invoice should be customizable with my logo and branding.\n  The invoice should allow me to track payment status and send reminders, if needed.\n\n228. As a homeowner, I want to generate an invoice for the repair services I received from a contractor, so that I can verify the work and make payment.\nAcceptance criteria:\n  The invoice generation should include the contractor's details, the repair date, and the repair details.\n  The invoice should display the total cost, including any applicable taxes and fees.\n  The invoice should provide payment instructions and due date.\n  The invoice should be downloadable in PDF format.\n  The invoice should allow me to verify the work performed and reconcile the payment with my records. Please provide a use case diagram based on the user stories above.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle InvoiceGenerationSystem {\n    usecase \"Generate invoice\" as UC1\n    usecase \"Generate invoice for products purchased\" as UC1A\n    usecase \"Generate invoice for services provided\" as UC1B\n    usecase \"Generate invoice for donations received\" as UC1C\n    usecase \"Generate invoice for rent payment\" as UC1D\n    usecase \"Generate invoice for repair services\" as UC1E\n    usecase \"Generate invoice for subscription fee\" as UC1F\n}\n\nUC1 ..> UC1A : <<extend>>\nUC1 ..> UC1B : <<extend>>\nUC1 ..> UC1C : <<extend>>\nUC1 ..> UC1D : <<extend>>\nUC1 ..> UC1E : <<extend>>\nUC1 ..> UC1F : <<extend>>\n\nUser --> UC1\n@enduml"
    },
    {
        "input": "User stories for Task management software\n229. As a team lead, I want to be able to create tasks for my team members, so that I can assign responsibilities and keep track of progress.\nAcceptance criteria:\n  The task management software should allow me to create new tasks and assign them to specific team members.\n  The software should allow me to set deadlines and priorities for each task.\n  The software should notify team members when a new task has been assigned to them.\n  The software should allow team members to update the status of their assigned tasks.\n  The software should provide me with an overview of all tasks and their status.\n\n230. As a team member, I want to be able to see all the tasks assigned to me, so that I can prioritize my work and manage my time effectively.\nAcceptance criteria:\n  The task management software should provide me with a dashboard that displays all the tasks assigned to me.\n  The software should allow me to filter tasks by deadline, priority, or status.\n  The software should allow me to update the status of my assigned tasks.\n  The software should notify me when a new task has been assigned to me.\n  The software should allow me to leave comments or notes on tasks for my team lead.\n\n231. As a project manager, I want to be able to track the progress of a project, so that I can ensure that it stays on schedule and within budget.\nAcceptance criteria:\n  The task management software should allow me to create a project and assign tasks to team members.\n  The software should provide me with a Gantt chart or timeline that displays the progress of the project.\n  The software should allow me to set milestones and deadlines for the project.\n  The software should provide me with real-time updates on the status of each task.\n  The software should allow me to generate reports on the progress of the project.\n\n232. As a freelancer, I want to be able to manage my own tasks and deadlines, so that I can stay organized and meet my clients' expectations.\nAcceptance criteria:\n  The task management software should allow me to create and manage my own tasks and deadlines.\n  The software should allow me to set priorities and deadlines for each task.\n  The software should notify me when a deadline is approaching.\n  The software should allow me to track my time spent on each task.\n  The software should provide me with a dashboard that displays my progress and upcoming deadlines.\n\n233. As a team lead, I want to be able to delegate tasks to multiple team members, so that I can distribute the workload evenly and efficiently.\nAcceptance criteria:\n  The task management software should allow me to assign a task to multiple team members.\n  The software should allow me to set different deadlines and priorities for each team member.\n  The software should notify all team members when a new task has been assigned to them.\n  The software should provide a way for team members to communicate with each other about the task.\n  The software should allow me to track the progress of the task for each team member.\n\n234. As a student, I want to be able to organize my school work and assignments, so that I can keep up with my coursework and achieve my academic goals.\nAcceptance criteria:\n  The task management software should allow me to create tasks for each of my assignments and projects.\n  The software should allow me to set deadlines and priorities for each task.\n  The software should notify me when a deadline is approaching.\n  The software should allow me to track my progress and see what tasks I still need to complete.\n  The software should provide me with a way to add notes or comments to each task.\n\n235. As a manager, I want to be able to see the workload and progress of each team member, so that I can identify any bottlenecks or areas for improvement.\nAcceptance criteria:\n  The task management software should provide me with a dashboard that displays the workload and progress of each team member.\n  The software should allow me to filter tasks by team member, deadline, or priority.\n  The software should allow me to see which tasks are overdue or at risk of not being completed on time.\n  The software should allow me to reassign tasks or adjust priorities to balance the workload.\n  The software should allow me to communicate with team members about their tasks or provide feedback.\n\n236. As a contractor, I want to be able to share my progress and status with my clients, so that they can see the value I am delivering and trust that I am meeting their expectations.\nAcceptance criteria:\n  The task management software should allow me to create and share a dashboard that displays the progress and status of each task.\n  The software should allow me to customize the dashboard to show only the relevant information for each client or project.\n  The software should allow me to restrict access to certain tasks or information for each client.\n  The software should allow me to export reports or data to share with clients.\n  The software should provide a way for clients to leave comments or feedback on tasks.\n\n237. As a remote worker, I want to be able to communicate with my team members and stay connected, so that I can collaborate effectively and build relationships.\nAcceptance criteria:\n  The task management software should provide a chat or messaging feature that allows team members to communicate in real-time.\n  The software should allow team members to leave comments or notes on tasks for each other.\n  The software should allow team members to share files or documents related to tasks.\n  The software should allow team members to schedule meetings or video calls within the app.\n  The software should provide a way for team members to give recognition or praise to each other for completing tasks.\n\n238. As a business owner, I want to be able to track the time spent on each task or project, so that I can accurately bill clients and optimize my team's productivity.\nAcceptance criteria:\n  The task management software should allow team members to log the time spent on each task.\n  The software should provide a way for team members to enter the start and end time for each task or use a timer to track time automatically.\n  The software should allow team members to categorize time spent on each task by client, project, or task type.\n  The software should provide a way for me to generate reports on the time spent on each task or project.\n  The software should allow me to integrate with other billing or accounting software to streamline invoicing and payment.\n Generate a use case diagram for the above user stories",
        "output": "@startuml\nleft to right direction\n\nactor TeamLead\nactor TeamMember\nactor ProjectManager\nactor Freelancer\nactor Student\nactor Contractor\nactor RemoteWorker\nactor BusinessOwner\n\nrectangle TaskManagementSoftware {\n\n    usecase \"Create tasks\" as UC1\n    usecase \"Delegate tasks\" as UC2\n    usecase \"View workload\" as UC3\n    usecase \"Track project progress\" as UC4\n    usecase \"Manage personal tasks\" as UC5\n    usecase \"Organize school work\" as UC6\n    usecase \"Share progress with clients\" as UC7\n    usecase \"Collaborate with team\" as UC8\n    usecase \"Track time spent\" as UC9\n\n}\n\nTeamLead --|> TeamMember\n\nTeamMember --> UC1\nTeamMember --> UC2\nTeamLead --> UC3\nTeamMember --> UC8\nProjectManager --> UC4\nProjectManager --> UC3\nFreelancer --> UC5\nStudent --> UC6\nContractor --> UC7\nRemoteWorker --> UC8\nBusinessOwner --> UC9\n@enduml"
    },
    {
        "input": "User stories for Event planning software\n239. As an event planner, I want to be able to create and manage multiple events, so that I can keep track of all my projects in one place.\nAcceptance criteria:\n  The event planning software should allow me to create and store information for multiple events.\n  The software should allow me to customize each event with its own name, date, time, location, and other details.\n  The software should allow me to view all my events in a calendar or list view.\n  The software should allow me to search and filter events by name, date, or status.\n  The software should allow me to add team members or collaborators to each event and assign tasks or responsibilities.\n\n240. As a client, I want to be able to view the progress and status of my event, so that I can stay informed and provide feedback.\nAcceptance criteria:\n  The event planning software should provide a dashboard or portal where clients can log in and view their event details.\n  The software should display the status and progress of each task or milestone related to the event.\n  The software should allow clients to leave comments or feedback on tasks or milestones.\n  The software should allow clients to upload or download files related to the event.\n  The software should allow clients to view the event budget and track expenses.\n\n241. As a vendor, I want to be able to bid on events and communicate with event planners, so that I can increase my business opportunities.\nAcceptance criteria:\n  The event planning software should allow vendors to register and create a profile with their information and services.\n  The software should allow event planners to post events and invite vendors to bid on tasks or services.\n  The software should allow vendors to view event details and requirements and submit a proposal or quote.\n  The software should allow vendors to communicate with event planners through the software's messaging or chat feature.\n  The software should allow event planners to rate and provide feedback on vendors' work.\n\n242. As a venue manager, I want to be able to promote my venue and receive event inquiries through the software, so that I can increase my bookings.\nAcceptance criteria:\n  The event planning software should allow venue managers to create a profile and upload information and photos of their venue.\n  The software should allow event planners to search and filter venues by location, capacity, price, and other criteria.\n  The software should allow event planners to send inquiries or booking requests to venues through the software's messaging or contact form.\n  The software should allow venue managers to track and manage their inquiries and bookings within the software.\n  The software should provide a way for venue managers to accept payments or deposits for bookings.\n\n243. As an event attendee, I want to be able to view event details and purchase tickets through the software, so that I can easily participate in events.\nAcceptance criteria:\n  The event planning software should allow event organizers to create an event page with all the necessary details and ticket options.\n  The software should allow attendees to search and filter events by location, date, category, and other criteria.\n  The software should allow attendees to view event details, such as the schedule, location, speakers, and sponsors.\n  The software should allow attendees to purchase tickets or register for events through the software's payment system.\n  The software should provide attendees with a confirmation and ticket information after completing their purchase.\n\n244. As an event planner, I want to be able to create a budget and track expenses for my event, so that I can stay within my budget and make informed decisions.\nAcceptance criteria:\n  The event planning software should allow me to create a budget for my event, with categories such as venue, catering, decor, entertainment, and other expenses.\n  The software should allow me to add or delete budget items, and update their status as paid or unpaid.\n  The software should allow me to track actual expenses and compare them to the budgeted amounts.\n  The software should provide me with alerts or notifications if I am approaching or exceeding my budget.\n  The software should provide me with a detailed report of my event expenses after the event is completed.\n\n245. As an event planner, I want to be able to manage my event's guest list and send invitations through the software, so that I can easily keep track of attendees.\nAcceptance criteria:\n  The event planning software should allow me to create a guest list for my event, with information such as name, email, and RSVP status.\n  The software should allow me to send invitations or reminders to guests through the software's messaging or email feature.\n  The software should allow guests to RSVP through the software and update their status if necessary.\n  The software should allow me to manage seating arrangements and assign seats or tables to guests.\n  The software should provide me with a report of the guest list and attendance after the event is completed.\n\n246. As a sponsor, I want to be able to view event sponsorship opportunities and purchase sponsorships through the software, so that I can promote my brand and support events.\nAcceptance criteria:\n  The event planning software should allow event organizers to create sponsorship packages with different levels and benefits.\n  The software should allow sponsors to search and filter sponsorship opportunities by event type, location, and other criteria.\n  The software should allow sponsors to purchase sponsorships and make payments through the software's payment system.\n  The software should provide sponsors with a confirmation and receipt after completing their purchase.\n  The software should allow event organizers to track and manage their sponsorships within the software.\n\n247. As an event planner, I want to be able to create a schedule or agenda for my event and share it with attendees and speakers through the software, so that everyone is informed and prepared.\nAcceptance criteria:\n  The event planning software should allow me to create a schedule or agenda for my event, with information such as the time, location, and description of each activity.\n  The software should allow me to assign speakers or presenters to each activity and provide them with the necessary information and materials.\n  The software should allow me to share the schedule or agenda with attendees and speakers through the software's messaging or email feature.\n  The software should allow attendees to view the schedule or agenda and add sessions to their personal calendars.\n  The software should provide me with a report of the event schedule and attendance after the event is completed.\n\n248. As a photographer or videographer, I want to be able to receive event bookings and communicate with event planners through the software, so that I can increase my business opportunities.\nAcceptance criteria:\n  The event planning software should allow photographers and videographers to register and create a profile with their information and services.\n  The software should allow event planners to search and filter photographers and videographers by location, price, and other criteria.\n  The software should allow event planners to send booking requests and communicate with photographers and videographers through the software's messaging or chat feature.\n  The software should allow photographers and videographers to accept bookings and make payments through the software's payment system. Please provide a use case diagram based on the user stories above.",
        "output": "@startuml\nleft to right direction\n\nactor EventPlanner\nactor Client\nactor Vendor\nactor VenueManager\nactor EventAttendee\nactor Sponsor\nactor Photographer\n\nrectangle EventPlanningSoftware {\n    usecase \"Manage events\" as UC1\n    usecase \"View event progress\" as UC2\n    usecase \"Bid on events\" as UC3\n    usecase \"Promote venue\" as UC4\n    usecase \"View event details\" as UC5\n    usecase \"Manage guest list\" as UC7\n    usecase \"View sponsorship opportunities\" as UC8\n    usecase \"Receive event bookings\" as UC10\n    usecase \"Promote venue\" as UC4\n    usecase \"Create event schedule\" as UC9\n    usecase \"Create event budget\" as UC6\n    usecase \"Purchase event tickets\" as UC11\n}\n\nUC1 ..> UC6 : <<extend>> \nUC1 ..> UC9 : <<extend>> \n\nEventPlanner --> UC1\nClient --> UC2\nVendor --> UC3\nVenueManager --> UC4\nEventAttendee --> UC5\nEventAttendee --> UC11\nEventPlanner --> UC7\nSponsor --> UC8\nPhotographer --> UC10\n@enduml"
    },
    {
        "input": "User stories for online trading\n249. As a user, I want to be able to search for stocks by name, ticker symbol, or industry so that I can easily find and purchase stocks that match my interests.\nAcceptance Criteria:\n\tThe search feature is easily accessible from the homepage.\n\tThe search function allows users to search by name, ticker symbol, or industry.\n\tThe search results are relevant and accurate.\n\tThe user is able to view detailed information about each stock in the search results.\n\tThe user is able to add stocks to their watch list or purchase them directly from the search results page.\n250. As a user, I want to be able to see real-time stock prices and updates so that I can make informed investment decisions.\nAcceptance Criteria:\n\tThe stock prices and updates are displayed prominently on the homepage.\n\tThe stock prices and updates are accurate and updated in real-time.\n\tThe user is able to view historical price charts and data for each stock.\n\tThe user is able to set up alerts for price changes and other market events.\n\tThe user is able to customize their dashboard to display the stocks and data that are most relevant to them.\n251. As a user, I want to be able to easily buy and sell stocks online so that I can make trades quickly and efficiently.\nAcceptance Criteria:\n\tThe online trading platform is easy to navigate and use.\n\tThe user is able to view their portfolio and open orders at any time.\n\tThe user is able to place market or limit orders for buying and selling stocks.\n\tThe user is able to view real-time price quotes and data before placing an order.\n\tThe user is able to confirm and execute trades with a single click.\n252. As a user, I want to be able to view and track my investment performance over time so that I can evaluate my strategies and make informed decisions.\nAcceptance Criteria:\n\tThe user is able to view their portfolio performance over different time periods.\n\tThe user is able to view their investment returns and gains/losses.\n\tThe user is able to view detailed information about each individual investment.\n\tThe user is able to export their portfolio data for further analysis.\n\tThe user is able to compare their performance to market benchmarks and other metrics.\n253. As a user, I want to be able to access educational resources and tools so that I can improve my investment knowledge and skills.\nAcceptance Criteria:\n\tThe educational resources and tools are easily accessible from the homepage.\n\tThe resources include articles, videos, and tutorials on a wide range of investment topics.\n\tThe tools include calculators, risk assessments, and other interactive features.\n\tThe resources and tools are regularly updated and relevant to current market conditions.\n\tThe user is able to save and bookmark their favorite resources for future reference.\n254. As a user, I want to be able to set up automatic investments and recurring trades so that I can save time and stay on track with my investment goals.\nAcceptance Criteria:\n\tThe user is able to set up automatic investments on a regular schedule.\n\tThe user is able to select specific stocks or funds for automatic investments.\n\tThe user is able to set up recurring trades for buying or selling stocks.\n\tThe user is able to customize the frequency and amount of automatic investments and recurring trades.\n\tThe user is able to cancel or modify automatic investments and recurring trades at any time.\n255. As a user, I want to be able to view and analyze financial statements and other corporate data for individual companies so that I can make informed investment decisions.\nAcceptance Criteria:\n\tThe financial statements and corporate data are easily accessible from the stock information page.\n\tThe financial statements include balance sheets, income statements, and cash flow statements.\n\tThe corporate data includes key metrics such as revenue, earnings per share, and price-to-earnings ratio.\n\tThe user is able to view historical financial data and compare it to current data.\n\tThe user is able to analyze the financial data and corporate metrics to make informed investment decisions.\n256. As a user, I want to be able to set up alerts for specific stocks or market events so that I can stay informed and take action as needed.\nAcceptance Criteria:\n\tThe user is able to set up alerts for price changes, news events, and other market events.\n\tThe user is able to customize the alerts based on specific criteria, such as price thresholds or percentage changes.\n\tThe alerts are delivered via email or push notification to the user's preferred device.\n\tThe user is able to easily view and manage their alerts from their dashboard.\n\tThe alerts are reliable and delivered in a timely manner.\n257. As a user, I want to be able to access customer support and assistance when needed so that I can resolve any issues or concerns.\nAcceptance Criteria:\n\tThe customer support team is easily accessible via phone, email, or live chat.\n\tThe customer support team is knowledgeable and able to assist with a wide range of issues and concerns.\n\tThe user is able to view a detailed FAQ or help section to answer common questions.\n\tThe user is able to submit a support ticket or request assistance directly from their dashboard.\n\tThe customer support team responds promptly and provides helpful and effective solutions.\n258. As a user, I want to be able to set up a customized investment plan based on my goals and risk tolerance so that I can achieve my desired returns.\nAcceptance Criteria:\n\tThe user is able to access a tool or questionnaire to determine their investment goals and risk tolerance.\n\tThe tool or questionnaire provides personalized recommendations for asset allocation and investment strategies.\n\tThe user is able to customize their investment plan based on their preferences and priorities.\n\tThe user is able to track their progress towards their investment goals and modify their plan as needed.\n\tThe investment plan is designed to maximize returns while minimizing risk and volatility. Please provide a use case diagram based on the user stories above.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle OnlineTradingSystem {\n    usecase \"Search for stocks\" as UC1\n    usecase \"View real-time stock prices\" as UC2\n    usecase \"Buy stocks online\" as UC3\n    usecase \"View investment performance\" as UC4\n    usecase \"Access educational resources\" as UC5\n    usecase \"Set up automatic investments\" as UC6\n    usecase \"View financial statements\" as UC7\n    usecase \"Set up alerts\" as UC8\n    usecase \"Access customer support\" as UC9\n    usecase \"Set up customized investment plan\" as UC10\n    usecase \"Manage stocks\" as UC11\n    usecase \"Sell stocks online\" as UC12\n}\n\nUC11 ..> UC3: <<extend>>\nUC11 ..> UC12: <<extend>>\nUC11 ..> UC1: <<extend>>\nUC11 ..> UC2: <<extend>>\nUser --> UC11\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\n@enduml"          
    },
    {
        "input": "User stories for Education and Learning Management System\n259. As a student, I want to be able to view my grades for each assignment and exam, so that I can monitor my progress throughout the course.\nAcceptance Criteria:\n\tThe system must display the student's grades for each assignment and exam.\n\tThe grades must be presented in a clear and organized manner.\n\tThe system must provide a way for the student to view their grades over time, such as a graph or chart.\n260. As a teacher, I want to be able to upload course materials and resources, so that my students can easily access them.\nAcceptance Criteria:\n\tThe system must allow the teacher to upload course materials in various formats, such as documents, videos, and images.\n\tThe materials must be organized in a logical and intuitive way.\n\tThe system must provide a way for students to search for specific materials.\n261. As a student, I want to be able to participate in online discussions with my classmates and teacher, so that I can ask questions and share my thoughts.\nAcceptance Criteria:\n\tThe system must allow for threaded discussions with the ability to reply to specific comments.\n\tThe discussions must be organized by topic or assignment.\n\tThe system must provide a way for the teacher to moderate and facilitate the discussions.\n262. As an administrator, I want to be able to create and manage user accounts, so that I can control access to the system.\nAcceptance Criteria:\n\tThe system must allow the administrator to create new user accounts and set permissions.\n\tThe administrator must be able to deactivate or delete user accounts as needed.\n\tThe system must provide a way for users to reset their passwords if they forget them.\n263. As a student, I want to be able to take quizzes and exams online, so that I can test my knowledge and receive feedback.\nAcceptance Criteria:\n\tThe system must allow for the creation and delivery of quizzes and exams.\n\tThe quizzes and exams must be automatically graded and provide immediate feedback to the student.\n\tThe system must be able to handle different question types, such as multiple choice, true/false, and short answer.\n264. As a teacher, I want to be able to create and assign homework assignments, so that my students can practice and apply what they have learned.\nAcceptance Criteria:\n\tThe system must allow for the creation and delivery of homework assignments.\n\tThe assignments must be automatically graded and provide immediate feedback to the student.\n\tThe system must provide a way for the teacher to customize the assignment instructions and due dates.\n265. As a student, I want to be able to access course materials and resources on my mobile device, so that I can study on the go.\nAcceptance Criteria:\n\tThe system must be optimized for mobile devices and responsive to different screen sizes.\n\tThe course materials and resources must be accessible on a variety of mobile platforms.\n\tThe system must provide a way for students to save materials and resources for offline use.\n266. As a teacher, I want to be able to create and manage course schedules, so that my students know what to expect.\nAcceptance Criteria:\n\tThe system must allow for the creation and delivery of course schedules.\n\tThe schedule must be presented in a clear and organized manner.\n\tThe system must provide a way for the teacher to update the schedule as needed.\n267. As a student, I want to be able to track my attendance and participation in class, so that I can make sure I am meeting the requirements.\nAcceptance Criteria:\n\tThe system must allow for the tracking of attendance and participation in class.\n\tThe tracking system must be accurate and reliable.\n\tThe system must provide a way for the student to view their attendance and participation record.\n268. As an administrator, I want to be able to generate reports on student performance, so that I can monitor the effectiveness of the system.\nAcceptance Criteria:\n\tThe system must allow for the creation and delivery of reports on student performance.\n\tThe reports must provide an overview of student progress and identify areas for improvement.\n\tThe system must provide a way for the administrator to customize the report parameters, such as date range and student group.\n Give a use case diagram for this.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Teacher\nactor Administrator\n\nrectangle LearningManagementSystem {\n    usecase \"View grades\" as UC1\n    usecase \"Upload course materials\" as UC2\n    usecase \"Participate in online discussions\" as UC3\n    usecase \"Manage user accounts\" as UC4\n    usecase \"Take quizzes and exams online\" as UC5\n    usecase \"Manage homework assignments\" as UC6\n    usecase \"Create homework assignments\" as UC6A\n    usecase \"Assign homework assignments\" as UC6B\n    \n    usecase \"Access course materials\" as UC7\n    usecase \"Manage course schedules\" as UC8\n    usecase \"Track attendance and participation\" as UC9\n    usecase \"Generate reports\" as UC10\n}\n\nUC6 ..> UC6A: <<extend>>\nUC6 ..> UC6B: <<extend>>\nStudent --> UC1\nTeacher --> UC2\nStudent --> UC3\nAdministrator --> UC4\nStudent --> UC5\nTeacher --> UC6\nStudent --> UC7\nTeacher --> UC8\nStudent --> UC9\nAdministrator --> UC10\n@enduml"
    },
    {
        "input": "User stories for health app\n269. As a user, I want to track my daily water intake so that I can ensure I am drinking enough water.\nAcceptance Criteria:\n\tThe app should allow the user to input the amount of water they drink each day.\n\tThe app should display the user's daily water intake in a clear and easy-to-read format.\n\tThe app should provide the user with reminders to drink water throughout the day.\n\tThe user should be able to set a daily water intake goal.\n\tThe app should provide feedback to the user on their progress towards their goal.\n270. As a user, I want to be able to track my meals so that I can monitor my daily calorie intake.\nAcceptance Criteria:\n\tThe app should allow the user to input their meals and snacks for each day.\n\tThe app should display the user's daily calorie intake in a clear and easy-to-read format.\n\tThe user should be able to set a daily calorie intake goal.\n\tThe app should provide feedback to the user on their progress towards their goal.\n\tThe user should be able to view a breakdown of their macronutrient intake (carbohydrates, protein, fat).\n271. As a user, I want to be able to set exercise goals so that I can track my progress.\nAcceptance Criteria:\n\tThe app should allow the user to set exercise goals (e.g. number of steps per day, number of minutes of activity per week).\n\tThe app should track the user's progress towards their goals.\n\tThe app should provide the user with feedback on their progress.\n\tThe app should allow the user to input different types of exercise (e.g. running, cycling, swimming).\n\tThe user should be able to view a history of their exercise activities.\n272. As a user, I want to be able to track my weight so that I can monitor my progress.\nAcceptance Criteria:\n\tThe app should allow the user to input their weight.\n\tThe app should display the user's weight in a clear and easy-to-read format.\n\tThe app should allow the user to set a weight loss or weight gain goal.\n\tThe app should provide the user with feedback on their progress towards their goal.\n\tThe user should be able to view a history of their weight entries.\n273.  As a user, I want to be able to track my blood pressure readings so that I can monitor my health.\nAcceptance Criteria:\n\tThe app should allow the user to input their blood pressure readings.\n\tThe app should display the user's blood pressure readings in a clear and easy-to-read format.\n\tThe app should provide the user with feedback on their blood pressure readings.\n\tThe user should be able to view a history of their blood pressure readings.\n\tThe app should provide the user with information on healthy blood pressure ranges.\n274. As a user, I want to be able to track my menstrual cycle so that I can plan ahead and understand my body better.\nAcceptance Criteria:\n\tThe app should allow the user to input the start and end dates of their menstrual cycle.\n\tThe app should display the user's menstrual cycle in a clear and easy-to-read format.\n\tThe app should provide the user with predictions for their next menstrual cycle.\n\tThe app should allow the user to input symptoms and notes related to their menstrual cycle.\n\tThe app should provide the user with educational information about menstrual health.\n275. As a user, I want to be able to find healthy recipes that fit my dietary needs.\nAcceptance Criteria:\n\tThe app should provide the user with a database of healthy recipes.\n\tThe app should allow the user to filter recipes by dietary needs (e.g. vegetarian, gluten-free, low-carb).\n\tThe app should provide nutritional information for each recipe.\n\tThe user should be able to save recipes to a favorites list.\n\tThe app should allow the user to create a grocery list based on the recipes they have selected.\n276. As a user, I want to be able to connect with friends and family to share our health progress and goals.\nAcceptance Criteria:\n\tThe app should allow the user to connect with friends and family through a social network.\n\tThe app should allow the user to share their progress and goals with their connections.\n\tThe app should allow the user to comment on and like their connections' posts.\n\tThe app should provide the user with privacy settings to control who can see their posts.\n\tThe app should allow the user to join public groups related to health and wellness.\n277. As a user, I want to be able to find nearby gyms and fitness classes.\nAcceptance Criteria:\n\tThe app should provide the user with a map of nearby gyms and fitness studios.\n\tThe app should allow the user to filter by location and type of workout (e.g. yoga, spin, weightlifting).\n\tThe app should display the gym or studio's ratings and reviews.\n\tThe user should be able to save their favorite gyms and studios.\n\tThe app should allow the user to book classes and appointments directly through the app.\n278. As a user, I want to be able to access educational resources on health and wellness.\nAcceptance Criteria:\n\tThe app should provide the user with articles and videos on a variety of health and wellness topics.\n\tThe app should allow the user to filter by topic (e.g. nutrition, mental health, exercise).\n\tThe app should provide the user with information on trusted sources for health information.\n\tThe user should be able to save articles and videos for later viewing.\n\tThe app should allow the user to share articles and videos on social media or with their connections. Give me a use case diagram based on the user stories above\n Create a use case diagra for this.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle HealthApp {\n    usecase \"Track Health Metrics\" as UC1\n    usecase \"Manage Nutrition\" as UC3\n    \n    usecase \"Track weight\" as UC1A\n    usecase \"Track blood pressure\" as UC1B\n    usecase \"Track menstrual cycle\" as UC1C\n\n    usecase \"Set exercise goals\" as UC2\n    usecase \"Find nearby gyms and fitness classes\" as UC4\n\n    usecase \"Find healthy recipes\" as UC3A\n    usecase \"Track water intake\" as UC3B\n    usecase \"Track meals\" as UC3C    \n \n    usecase \"Connect with friends and family\" as UC5\n    usecase \"Access educational resources\" as UC6\n}\n\nUC1 ..> UC1A : <<extend>>\nUC1 ..> UC1B : <<extend>>\nUC1 ..> UC1C : <<extend>>\n\nUC3 ..> UC3A : <<extend>>\nUC3 ..> UC3B : <<extend>>\nUC3 ..> UC3C : <<include>>\n\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\n@enduml"          
    },
    {
        "input": "User stories for Healthcare and wellness app\n279. As a user, I want to be able to track my daily water intake so that I can ensure I am staying hydrated.\nAcceptance Criteria:\n\tThe app should have a water tracker feature accessible from the home screen.\n\tThe user should be able to input the amount of water they drink throughout the day in ounces or milliliters.\n\tThe app should calculate the user's total water intake for the day and display it in a clear and easy-to-understand way.\n\tThe user should be able to set a daily water intake goal and the app should provide reminders if they haven't met their goal.\n\tThe app should allow the user to view their water intake history over time and track their progress.\n\n280. As a user, I want to be able to find healthy recipes that fit my dietary restrictions so that I can maintain a healthy diet.\nAcceptance Criteria:\n\tThe app should have a recipe section accessible from the home screen.\n\tThe user should be able to filter recipes based on their dietary restrictions (e.g. gluten-free, vegan, low-carb).\n\tThe app should provide detailed instructions and nutritional information for each recipe.\n\tThe user should be able to save their favorite recipes to a \"favorites\" section for easy access.\n\tThe app should have a user rating system so that users can rate recipes and share their experiences with others.\n\n281. As a user, I want to be able to book appointments with healthcare providers through the app so that I can easily schedule and manage my healthcare needs.\nAcceptance Criteria:\n\tThe app should have a \"book appointment\" feature accessible from the home screen.\n\tThe user should be able to search for healthcare providers based on their location and specialty.\n\tThe app should display availability for each provider and allow the user to select a time and date for their appointment.\n\tThe user should receive a confirmation of their appointment via email or push notification.\n\tThe app should have a feature for the user to easily cancel or reschedule their appointment if needed.\n\n282. As a user, I want to be able to track my physical activity so that I can monitor my fitness level and progress.\nAcceptance Criteria:\n\tThe app should have a physical activity tracker accessible from the home screen.\n\tThe user should be able to input the type and duration of their physical activity (e.g. running, yoga, weightlifting).\n\tThe app should calculate the user's total activity time and calories burned for the day.\n\tThe user should be able to set a daily activity goal and the app should provide reminders if they haven't met their goal.\n\tThe app should allow the user to view their activity history over time and track their progress.\n\n283. As a user, I want to be able to access reliable healthcare information through the app so that I can make informed decisions about my health.\nAcceptance Criteria:\n\tThe app should have a healthcare information section accessible from the home screen.\n\tThe information should be provided by reputable sources (e.g. medical associations, government organizations).\n\tThe information should be organized into easily navigable categories (e.g. conditions and treatments, medications, healthy living).\n\tThe user should be able to search for specific information using keywords.\n\tThe app should have a feature for the user to submit questions to healthcare professionals for clarification or additional information if needed.\n\n284. As a user, I want to be able to connect with other users who have similar health goals so that I can receive support and motivation.\nAcceptance Criteria:\n\tThe app should have a community section accessible from the home screen.\n\tThe user should be able to create a profile and connect with other users based on shared interests or health goals.\n\tThe app should have a feature for users to post updates and share their progress with the community.\n\tThe user should be able to like and comment on other users' posts.\n\tThe app should have a user rating system so that users can rate the helpfulness and supportiveness of others in the community.\n\n285. As a user, I want to be able to access virtual consultations with healthcare providers through the app so that I can receive medical advice from the comfort of my home.\nAcceptance Criteria:\n\tThe app should have a virtual consultation feature accessible from the home screen.\n\tThe user should be able to search for healthcare providers who offer virtual consultations.\n\tThe app should allow the user to schedule a virtual consultation with the provider of their choice.\n\tThe user should be able to join the virtual consultation through the app's video chat feature.\n\tThe app should allow the user to submit payment for the virtual consultation through the app.\n\n286. As a user, I want to be able to track my mental health so that I can monitor my mood and manage my emotional well-being.\nAcceptance Criteria:\n\tThe app should have a mental health tracker accessible from the home screen.\n\tThe user should be able to log their mood and any symptoms they are experiencing (e.g. anxiety, depression).\n\tThe app should provide resources and coping mechanisms for managing mental health issues.\n\tThe user should be able to set reminders for self-care activities (e.g. meditation, exercise).\n\tThe app should allow the user to view their mental health history over time and track their progress.\n\n287. As a user, I want to be able to access my medical records through the app so that I can easily keep track of my health history.\nAcceptance Criteria:\n\tThe app should have a medical records section accessible from the home screen.\n\tThe user should be able to securely upload and store their medical records in the app.\n\tThe app should allow the user to share their medical records with healthcare providers as needed.\n\tThe user should be able to view a summary of their medical history, including medications and allergies.\n\tThe app should have a feature for the user to add notes and update their medical information as needed.\n\n288. As a user, I want to be able to receive personalized health recommendations based on my unique needs and goals.\nAcceptance Criteria:\n\tThe app should have a personalized health recommendations section accessible from the home screen.\n\tThe user should be able to input their health goals and any health conditions or concerns they have.\n\tThe app should provide personalized recommendations for diet, exercise, and other healthy habits based on the user's input.\n\tThe user should be able to track their progress toward their health goals using the app.\n\tThe app should have a feature for the user to adjust their health goals and update their recommendations as needed.\n Give me a use case diagram based on the above info.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle HealthApp {\n    usecase \"Track Health Metrics\" as UC1\n    usecase \"Manage Nutrition\" as UC3\n    usecase \"Access Health Information\" as UC4\n\n    usecase \"Track daily water intake\" as UC1A\n    usecase \"Track physical activity\" as UC1B\n    usecase \"Track mental health\" as UC1C\n\n    usecase \"Book healthcare appointments\" as UC2A\n    usecase \"Access virtual consultations\" as UC2B\n\n    usecase \"Find healthy recipes\" as UC3A\n    usecase \"Track meals\" as UC3B\n\n    usecase \"Access medical records\" as UC5\n    usecase \"Receive personalized health recommendations\" as UC6\n\n    usecase \"Connect with other users\" as UC7\n}\n\nUC1 ..> UC1B : <<extend>>\nUC1 ..> UC1C : <<extend>>\n\nUC3 ..> UC3A : <<extend>>\nUC3 ..> UC3B : <<extend>>\nUC3 ..> UC1A : <<extend>>\n\n\nUser --> UC1\nUser --> UC2A\nUser --> UC2B\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n@enduml"          
    },
    {
        "input": "User stories for Real estate listings website\n289. As a user, I want to be able to search for properties in a specific location so that I can find homes that fit my needs and preferences.\nAcceptance Criteria:\n\tThe website should have a search bar accessible from the homepage.\n\tThe user should be able to input a specific location or select a location from a drop-down menu.\n\tThe website should display a list of available properties in the selected location.\n\tThe user should be able to filter the search results by price, number of bedrooms/bathrooms, square footage, and other relevant criteria.\n\tThe website should display high-quality photos and detailed descriptions of each property.\n\n290. As a user, I want to be able to save my favorite properties so that I can easily access them later and compare them to other listings.\nAcceptance Criteria:\n\tThe website should allow the user to create an account and sign in.\n\tThe user should be able to save properties to their account by clicking a \"save\" button on each listing.\n\tThe website should display a list of the user's saved properties on their account dashboard.\n\tThe user should be able to compare the details of their saved properties side-by-side.\n\tThe website should send email alerts to the user when new properties that meet their criteria are listed.\n\n291. As a user, I want to be able to contact real estate agents directly through the website so that I can get more information about a property or schedule a viewing.\nAcceptance Criteria:\n\tThe website should display contact information for the listing agent on each property page.\n\tThe user should be able to send a message to the agent directly through the website or via email.\n\tThe website should confirm that the message was sent and display a message history between the user and the agent.\n\tThe user should be able to schedule a viewing of the property directly with the agent through the website.\n\tThe website should provide the user with the option to rate and provide feedback on their experience with the agent.\n\n292. As a user, I want to be able to view properties on a map so that I can easily see their location and proximity to important landmarks.\nAcceptance Criteria:\n\tThe website should have a map view accessible from the homepage.\n\tThe user should be able to search for properties in a specific location and see them displayed on the map.\n\tThe website should provide a zoom function for the map so that the user can see more detail.\n\tThe user should be able to filter the properties displayed on the map by price, number of bedrooms/bathrooms, and other relevant criteria.\n\tThe website should provide a list of the properties displayed on the map, including photos and detailed descriptions.\n\n293. As a user, I want to be able to view properties in a virtual tour so that I can get a better sense of their layout and features before visiting in person.\nAcceptance Criteria:\n\tThe website should have a virtual tour feature accessible from each property page.\n\tThe virtual tour should allow the user to navigate through the property using high-quality photos or videos.\n\tThe virtual tour should display information about each room and feature of the property as the user navigates through it.\n\tThe user should be able to pause or rewind the virtual tour to focus on specific rooms or features.\n\tThe website should provide the option for the user to contact the listing agent or schedule a viewing of the property directly from the virtual tour page.\n\n294. As a user, I want to be able to view historical property data so that I can understand the property's value and potential future trends.\nAcceptance Criteria:\n\tThe website should provide historical sales data for each property, including previous sales prices and dates.\n\tThe website should provide data on the property's market value and appreciation over time.\n\tThe user should be able to view trends in the local real estate market, such as median home prices and inventory levels.\n\tThe website should display data in an easy-to-understand format, such as charts or graphs.\n\tThe user should be able to save historical property data to their account for future reference.\n\n295. As a user, I want to be able to receive alerts when a property that meets my criteria becomes available so that I can stay up-to-date on the market.\nAcceptance Criteria:\n\tThe website should allow the user to create an account and sign in.\n\tThe user should be able to set up alerts for specific criteria, such as location, price range, and number of bedrooms/bathrooms.\n\tThe website should send email alerts to the user when a property that meets their criteria is listed.\n\tThe user should be able to manage their alerts and update their criteria at any time.\n\tThe website should provide the option for the user to receive alerts via SMS or push notification.\n\n296. As a user, I want to be able to view property details and amenities so that I can make an informed decision about whether to schedule a viewing.\nAcceptance Criteria:\n\tThe website should provide detailed information about each property, including the number of bedrooms/bathrooms, square footage, and other relevant details.\n\tThe website should display high-quality photos of the property's interior and exterior.\n\tThe user should be able to view a list of amenities, such as a pool, gym, or parking garage, that are included with the property.\n\tThe website should provide information on the property's location and proximity to important landmarks, such as schools and parks.\n\tThe user should be able to request more information or schedule a viewing of the property directly from the property page.\n\n297. As a user, I want to be able to save search criteria so that I can easily find new listings that meet my preferences.\nAcceptance Criteria:\n\tThe website should allow the user to create an account and sign in.\n\tThe user should be able to save search criteria, such as location, price range, and number of bedrooms/bathrooms.\n\tThe website should display a list of the user's saved search criteria on their account dashboard.\n\tThe user should be able to quickly access their saved search criteria and see new listings that meet their preferences.\n\tThe website should provide the option for the user to receive email or push notification alerts when new listings that meet their criteria are listed.\n\n298. As a user, I want to be able to leave reviews of properties I have viewed so that I can share my experience with other potential buyers.\nAcceptance Criteria:\n\tThe website should allow the user to create an account and sign in.\n\tThe user should be able to leave a review of the property, including a star rating and written feedback.\n\tThe review should be displayed on the property page for other users to see.\n\tThe user should be able to edit or delete their review at any time.\n\tThe website should have a moderation system in place to ensure that reviews are appropriate and do not contain any offensive or misleading content.\n\n299. As a user, I want to be able to compare multiple properties side-by-side so that I can easily compare their features and make an informed decision.\nAcceptance Criteria:\n\tThe website should allow the user to select multiple properties from their search results.\n\tThe selected properties should be displayed in a side-by-side comparison table.\n\tThe comparison table should display key features of each property, such as number of bedrooms/bathrooms, square footage, and price.\n\tThe user should be able to easily switch between properties in the comparison table.\n\tThe website should allow the user to save their comparison table for future reference.\n\n300. As a user, I want to be able to view 3D virtual tours of properties so that I can get a more immersive experience of the property.\nAcceptance Criteria:\n\tThe website should provide 3D virtual tours for each property, created using technology such as Matterport or iGUIDE.\n\tThe virtual tour should provide a realistic, immersive experience of the property's interior and exterior.\n\tThe user should be able to control the virtual tour using their mouse or keyboard.\n\tThe website should display relevant information about the property during the virtual tour, such as the number of bedrooms/bathrooms and square footage.\n\tThe user should be able to schedule a viewing of the property directly from the virtual tour page.\n\n301. As a user, I want to be able to filter search results by specific criteria so that I can quickly find properties that meet my preferences.\nAcceptance Criteria:\n\tThe website should display a search form that allows the user to enter their search criteria, such as location, price range, and number of bedrooms/bathrooms.\n\tThe website should allow the user to apply additional filters to their search, such as property type (e.g. house, condo, apartment) or amenities (e.g. pool, gym, parking garage).\n\tThe website should display search results that match the user's search criteria and filters.\n\tThe user should be able to sort their search results by relevant criteria, such as price or square footage.\n\tThe website should allow the user to save their search criteria and filters for future reference.\n\n302. As a user, I want to be able to view properties on a map so that I can see their location and proximity to other landmarks.\nAcceptance Criteria:\n\tThe website should display a map that shows the location of each property in the search results.\n\tThe user should be able to zoom in and out of the map to view properties at different levels of detail.\n\tThe map should display relevant information about each property, such as the number of bedrooms/bathrooms and price.\n\tThe user should be able to filter their search results on the map based on specific criteria, such as price range or property type.\n\tThe website should allow the user to view more detailed information about a property by clicking on its location marker on the map.\n Create a use case diagram based on the above.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle RealEstateListingsWebsite {\n    usecase \"Search Properties\" as UC1\n    usecase \"Filter search results\" as UC1A\n    usecase \"Save search criteria\" as UC1B\n\n    usecase \"View Properties\" as UC2\n    usecase \"View properties on a map\" as UC2A\n    usecase \"View properties in a 3D virtual tour\" as UC2B\n\n    usecase \"Save favorite properties\" as UC3\n    usecase \"Contact real estate agents\" as UC4\n    usecase \"View historical property data\" as UC5\n    usecase \"View property details and amenities\" as UC6\n    usecase \"Leave property reviews\" as UC7\n    usecase \"Compare properties\" as UC8\n\n    usecase \"Receive property alerts\" as UC9\n}\n\nUC1 ..> UC1A : <<extend>>\nUC1 ..> UC1B : <<extend>>\n\nUC2 ..> UC2A: <<extend>>\nUC2 ..> UC2B: <<extend>>\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\n@enduml"
    },
    {
        "input": "User stories for Masters thesis management system\n351. As a student, I want to be able to submit my thesis proposal to the system so that I can receive feedback and approval from my advisor.\nAcceptance Criteria:\n\tThe system should provide a submission form for students to upload their thesis proposal.\n\tThe student should be able to enter their thesis title, abstract, and research objectives.\n\tThe system should notify the student's advisor of the submission and request feedback within a specified timeframe.\n\tThe advisor should be able to review the proposal, provide comments, and approve or reject the submission.\n\tThe system should send an email notification to the student with the advisor's feedback and decision.\n\n352. As an advisor, I want to be able to review and approve students' thesis proposals so that I can guide their research and ensure academic quality.\nAcceptance Criteria:\n\tThe system should provide an advisor dashboard where the advisor can view pending thesis proposals.\n\tThe advisor should be able to access the student's proposal, read the abstract, and review the research objectives.\n\tThe system should provide a comment feature for the advisor to leave feedback and suggestions for improvement.\n\tThe advisor should be able to approve or reject the proposal and provide a rationale for their decision.\n\tThe system should send an email notification to the student with the advisor's feedback and decision.\n\n353. As a student, I want to be able to submit my thesis draft to the system so that I can receive feedback and make revisions before the final submission.\nAcceptance Criteria:\n\tThe system should provide a submission form for students to upload their thesis draft.\n\tThe student should be able to enter their thesis title, abstract, and research findings.\n\tThe system should notify the student's advisor of the submission and request feedback within a specified timeframe.\n\tThe advisor should be able to review the draft, provide comments, and suggest revisions for improvement.\n\tThe system should send an email notification to the student with the advisor's feedback and suggestions.\n\n354. As an advisor, I want to be able to review and provide feedback on students' thesis drafts so that I can support their research and academic development.\nAcceptance Criteria:\n\tThe system should provide an advisor dashboard where the advisor can view pending thesis drafts.\n\tThe advisor should be able to access the student's draft and read the research findings.\n\tThe system should provide a comment feature for the advisor to leave feedback on the content, structure, and formatting.\n\tThe advisor should be able to suggest revisions and improvements to the draft to enhance its quality.\n\tThe system should send an email notification to the student with the advisor's feedback and suggestions.\n\n355. As a student, I want to be able to submit my final thesis to the system for evaluation and grading so that I can complete my degree requirements.\nAcceptance Criteria:\n\tThe system should provide a submission form for students to upload their final thesis document.\n\tThe student should be able to enter their thesis title, abstract, research methodology, and conclusions.\n\tThe system should notify the student's advisor and committee members of the submission for evaluation.\n\tThe advisor and committee members should be able to review the thesis, provide feedback, and assign a grade based on academic standards.\n\tThe system should send an email notification to the student with the evaluation results and final grade.\n\n356. As an advisor, I want to be able to evaluate and grade students' final theses so that I can assess their research skills and academic achievement.\nAcceptance Criteria:\n\tThe system should provide an advisor dashboard where the advisor can view pending thesis submissions.\n\tThe advisor should be able to access the student's final thesis document and review the research methodology and conclusions.\n\tThe system should provide a grading rubric for evaluating the thesis based on content, originality, organization, and writing quality.\n\tThe advisor should be able to assign a grade and provide detailed feedback on the strengths and weaknesses of the thesis.\n\tThe system should send an email notification to the student with the evaluation results and final grade.\n\n357. As a student, I want to be able to track the progress of my thesis submission and evaluation so that I can stay informed and meet deadlines.\nAcceptance Criteria:\n\tThe system should provide a student dashboard where the student can view the status of their thesis submissions.\n\tThe student should be able to see the dates of submission, advisor feedback, and evaluation results.\n\tThe system should display reminders and notifications for upcoming deadlines and milestones in the thesis process.\n\tThe student should be able to contact their advisor or committee members through the system for questions or updates.\n\tThe system should provide a progress bar or timeline to track the completion of thesis requirements.\n\n358. As an administrator, I want to be able to manage user accounts, access reports, and monitor system performance so that I can ensure the reliability and effectiveness of the thesis management system.\nAcceptance Criteria:\n\tThe system should provide an administrator dashboard where the administrator can view user accounts and reports.\n\tThe administrator should be able to create, edit, and delete user accounts for students, advisors, committee members, and other staff.\n\tThe system should provide usage reports on the number of thesis submissions, evaluations, and grades assigned.\n\tThe administrator should be able to view detailed reports on thesis evaluation results, including trends over time and common areas for improvement.\n\tThe system should display system performance metrics, such as response time, uptime, and error rates.\n\n359. As a student, I want to be able to access resources and guidelines on thesis writing and research methodology so that I can improve my academic writing skills and complete my thesis successfully.\nAcceptance Criteria:\n\tThe system should provide a resources section with articles, videos, and tutorials on thesis writing and research methodology.\n\tThe student should be able to access guides on how to structure a thesis, write a literature review, and present research findings.\n\tThe system should provide examples of successful theses and common mistakes to avoid.\n\tThe student should be able to take quizzes and self-assessments on thesis writing and research methodology.\n\tThe system should provide links to additional resources and tools for improving academic writing skills and research techniques.\n Create a use case diagram for this.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Advisor\nactor Administrator\n\nrectangle MastersThesisManagementSystem {\n    usecase \"Submit Thesis Proposal\" as UC1A\n    usecase \"Submit Thesis Draft\" as UC1B\n    usecase \"Submit Final Thesis\" as UC1C\n    usecase \"Submit Thesis\" as UC1\n\n    usecase \"Track Thesis Submission Progress\" as UC2A\n    usecase \"Track Thesis Evaluation Progress\" as UC2B\n    usecase \"Track Progress\" as UC2\n    \n    usecase \"Review Thesis Proposals\" as UC3A\n    usecase \"Approve Thesis Proposals\" as UC3B\n    usecase \"Manage Thesis Proposals\" as UC3\n    \n    usecase \"Review Thesis Drafts\" as UC4A\n    usecase \"Provide Feedback on Thesis Drafts\" as UC4B\n    usecase \"Manage Thesis Drafts\" as UC4\n    \n    usecase \"Evaluate Final Theses\" as UC5A\n    usecase \"Grade Final Theses\" as UC5B\n    usecase \"Manage Final Theses\" as UC5\n    \n    usecase \"Manage User Accounts\" as UC6A\n    usecase \"Access Reports\" as UC6B\n    usecase \"Manage Accounts and Reports\" as UC6\n    \n    usecase \"Access Thesis Writing Guidelines\" as UC7A\n    usecase \"Access Thesis Writing Resources\" as UC7\n}\n\nUC1 ..> UC1A : <<extend>>\nUC1 ..> UC1B : <<extend>>\nUC1 ..> UC1C : <<extend>>\n\nUC2 ..> UC2A : <<extend>>\nUC2 ..> UC2B : <<extend>>\n\nUC3 ..> UC3A : <<extend>>\nUC3 ..> UC3B : <<extend>>\n\nUC4 ..> UC4A : <<extend>>\nUC4 ..> UC4B : <<extend>>\n\nUC5 ..> UC5A : <<extend>>\nUC5 ..> UC5B : <<extend>>\n\nUC6 ..> UC6A : <<extend>>\nUC6 ..> UC6B : <<extend>>\n\nUC7 ..> UC7A : <<extend>>\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC7\nAdvisor --> UC3\nAdvisor --> UC4\nAdvisor --> UC5\nAdministrator --> UC6\nAdministrator --> UC7\n@enduml"
    },
    {
        "input": "User stories for E-commerce website\n303. As a user, I want to be able to search for products by category so that I can easily find items that I am interested in.\nAcceptance Criteria:\n\tThe website should have a search bar accessible from the homepage.\n\tThe user should be able to browse products by category, such as electronics, clothing, or home goods.\n\tThe website should display a list of products in the selected category.\n\tThe user should be able to filter the search results by price, brand, size, color, and other relevant criteria.\n\tThe website should display high-quality photos and detailed descriptions of each product.\n\n304. As a user, I want to be able to view product details and reviews so that I can make an informed decision about whether to purchase.\nAcceptance Criteria:\n\tThe website should provide detailed information about each product, including price, size, color, and other relevant details.\n\tThe website should display high-quality photos of the product from multiple angles.\n\tThe user should be able to read reviews of the product from other customers.\n\tThe website should display an average star rating for the product based on customer reviews.\n\tThe user should be able to ask questions about the product and receive answers from the seller or other customers.\n\n305. As a user, I want to be able to add products to my shopping cart so that I can easily keep track of items I want to purchase.\nAcceptance Criteria:\n\tThe website should have a shopping cart icon accessible from every page.\n\tThe user should be able to add products to their shopping cart by clicking an \"add to cart\" button on the product page.\n\tThe website should display a summary of the user's shopping cart, including the total number of items and the total cost.\n\tThe user should be able to view and edit the items in their shopping cart before proceeding to checkout.\n\tThe website should save the user's shopping cart items for future visits.\n\n306. As a user, I want to be able to view my order history and track the status of my shipments so that I can stay informed about my purchases.\nAcceptance Criteria:\n\tThe website should provide an account dashboard where the user can view their order history.\n\tThe user should be able to see the status of each order, including whether it has been processed, shipped, or delivered.\n\tThe website should display tracking information for each shipment, including the estimated delivery date.\n\tThe user should be able to contact customer support if they have questions or concerns about their order.\n\tThe website should send email notifications to the user when their order status changes.\n\n307. As a user, I want to be able to save my payment information so that I can quickly and securely make purchases.\nAcceptance Criteria:\n\tThe website should provide a secure payment portal for entering credit card information.\n\tThe user should be able to save their payment information to their account for future purchases.\n\tThe website should display a confirmation message when the user's payment information is saved successfully.\n\tThe user should be able to edit or delete their payment information at any time.\n\tThe website should comply with industry standards for payment security, such as PCI DSS compliance.\n\n308. As a user, I want to be able to receive personalized product recommendations based on my browsing and purchase history so that I can discover new items that I may be interested in.\nAcceptance Criteria:\n\tThe website should provide product recommendations on the homepage and product pages.\n\tThe recommendations should be based on the user's browsing and purchase history.\n\tThe user should be able to view and dismiss product recommendations if they are not interested.\n\tThe website should provide an option for the user to provide feedback on the recommendations.\n\tThe user should be able to opt out of personalized recommendations if they prefer.\n\n309. As a user, I want to be able to view products on sale or with discounts so that I can find deals and save money on my purchases.\nAcceptance Criteria:\n\tThe website should have a section for products on sale or with discounts accessible from the homepage.\n\tThe user should be able to browse products by discount percentage or price range.\n\tThe website should display the original price and discounted price for each product.\n\tThe user should be able to filter the sale products by category, brand, or other relevant criteria.\n\tThe website should provide a countdown timer for limited-time sales or discounts.\n\n310. As a user, I want to be able to contact customer support through the website so that I can get help with my purchases or resolve any issues.\nAcceptance Criteria:\n\tThe website should provide a contact form or live chat feature accessible from every page.\n\tThe user should be able to submit a message to customer support with their questions or concerns.\n\tThe website should display a confirmation message when the user's message is sent successfully.\n\tThe user should receive a response from customer support within a reasonable timeframe.\n\tThe website should provide a phone number or email address for users who prefer to contact customer support by phone or email.\n\n311. As a user, I want to be able to view product availability and delivery options so that I can make an informed decision about my purchase.\nAcceptance Criteria:\n\tThe website should display the availability of each product, including whether it is in stock or on backorder.\n\tThe user should be able to select a delivery option, such as standard shipping, express shipping, or in-store pickup.\n\tThe website should display the estimated delivery date for each delivery option.\n\tThe user should be able to track the status of their shipment once it has been processed.\n\tThe website should provide information on shipping costs and any applicable taxes or fees.\n\n312. As a user, I want to be able to view product ratings and reviews so that I can make an informed decision about my purchase.\nAcceptance Criteria:\n\tThe website should display an average star rating for each product based on customer reviews.\n\tThe user should be able to read written reviews of the product from other customers.\n\tThe website should display the number of reviews and the overall rating for each product.\n\tThe user should be able to filter reviews by star rating or keyword.\n\tThe website should provide an option for the user to leave a review of the product after making a purchase.\n\n313. As a user, I want to be able to view product recommendations based on trending or popular items so that I can discover new products that are currently popular.\nAcceptance Criteria:\n\tThe website should have a section for trending or popular products accessible from the homepage.\n\tThe user should be able to browse products by category or price range.\n\tThe website should display the number of views or purchases for each product to indicate its popularity.\n\tThe user should be able to filter the trending products by category, brand, or other relevant criteria.\n\tThe website should provide an option for the user to provide feedback on the trending products.\n\n314. As a user, I want to be able to view product recommendations based on my wishlist or saved items so that I can discover new products that are similar to ones I am interested in.\nAcceptance Criteria:\n\tThe website should provide product recommendations based on the user's wishlist or saved items.\n\tThe user should be able to view and dismiss product recommendations on the homepage and product pages.\n\tThe recommendations should be based on the user's browsing and purchase history.\n\tThe user should be able to provide feedback on the recommendations and indicate whether they are interested in the products.\n\tThe website should provide an option for the user to opt out of personalized recommendations if they prefer.\n Make a use case diagram for the above user stories.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle ECommerceWebsite {\n    usecase \"Search and View Products\" as UC1\n    usecase \"Add Products to Shopping Cart\" as UC2\n    usecase \"Manage Orders\" as UC3\n    usecase \"Manage Payment Information\" as UC4\n    usecase \"Receive Product Recommendations\" as UC5\n    usecase \"Contact Customer Support\" as UC6\n\n    usecase \"View Product Details\" as UC1A\n    usecase \"View Product Availability\" as UC1B\n    usecase \"View Product Reviews\" as UC1C\n    usecase \"View Products on Sale\" as UC1D\n\n    usecase \"View Order History\" as UC3A\n    usecase \"Track Shipments\" as UC3B\n    \n    usecase \"Recommendations based on Trends\" as UC5A\n    usecase \"Recommendations based on Wishlist\" as UC5B\n}\n\nUC1 ..> UC1A : <<extend>>\nUC1 ..> UC1B : <<extend>>\nUC1 ..> UC1C : <<extend>>\nUC1 ..> UC1D : <<extend>>\n\nUC3 ..> UC3A : <<extend>>\nUC3 ..> UC3B : <<extend>>\n\nUC5 ..> UC5A : <<extend>>\nUC5 ..> UC5B : <<extend>>\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\n@enduml"
    },
    {
        "input": "User stories for Online learning platform\n315. As a user, I want to be able to search for courses by topic or keyword so that I can find courses that match my interests and goals.\nAcceptance Criteria:\n\tThe website should have a search bar accessible from the homepage.\n\tThe user should be able to search for courses by entering a topic or keyword.\n\tThe website should display a list of courses that match the user's search criteria.\n\tThe user should be able to filter the search results by price, duration, level, and other relevant criteria.\n\tThe website should display detailed descriptions and course previews for each course.\n\n316. As a user, I want to be able to enroll in courses and track my progress so that I can learn at my own pace and stay motivated.\nAcceptance Criteria:\n\tThe website should provide a user account dashboard where the user can view their enrolled courses.\n\tThe user should be able to enroll in a course by clicking an \"enroll\" button on the course page.\n\tThe website should display the user's progress in each course, including completed lessons and quizzes.\n\tThe user should be able to mark lessons as complete and track their overall course progress.\n\tThe website should provide reminders and notifications to keep the user engaged and motivated.\n\n317. As a user, I want to be able to access course materials and resources so that I can learn effectively and apply what I have learned.\nAcceptance Criteria:\n\tThe website should provide downloadable course materials, such as lecture slides, readings, and assignments.\n\tThe user should be able to access course resources, such as video lectures, quizzes, and discussion forums.\n\tThe website should provide interactive learning tools, such as virtual labs or simulations.\n\tThe user should be able to download or print course materials for offline use.\n\tThe website should provide links to additional resources and recommended readings for each course.\n\n318. As a user, I want to be able to communicate with instructors and other students so that I can ask questions, share ideas, and collaborate on projects.\nAcceptance Criteria:\n\tThe website should provide a discussion forum or chat feature for each course.\n\tThe user should be able to post questions and comments to the forum and receive responses from instructors and other students.\n\tThe website should display a list of instructors and their contact information for each course.\n\tThe user should be able to send messages to instructors and receive feedback on assignments and projects.\n\tThe website should provide a feature for students to collaborate on group projects and assignments.\n\n319. As a user, I want to be able to receive feedback and grades on my assignments and quizzes so that I can track my learning progress and improve my skills.\nAcceptance Criteria:\n\tThe website should provide a grading rubric for each assignment or quiz that outlines the criteria for evaluation.\n\tThe user should be able to submit assignments and quizzes through the website's learning management system.\n\tThe website should display feedback and grades for each assignment or quiz within a reasonable timeframe.\n\tThe user should be able to view detailed feedback from instructors and suggestions for improvement.\n\tThe website should provide a feature for the user to resubmit assignments or retake quizzes if needed.\n\n320. As a user, I want to be able to access course certificates and badges so that I can showcase my achievements and skills to potential employers.\nAcceptance Criteria:\n\tThe website should provide digital certificates and badges for completing courses and passing assessments.\n\tThe user should be able to download and share their certificates and badges on social media or professional networking sites.\n\tThe website should display a list of the user's earned certificates and badges on their account dashboard.\n\tThe user should be able to view the requirements for earning each certificate or badge.\n\tThe website should provide a verification system for employers to confirm the authenticity of certificates and badges.\n\n321. As a user, I want to be able to access course recommendations and personalized learning paths so that I can discover new topics and skills to learn.\nAcceptance Criteria:\n\tThe website should provide course recommendations on the homepage and user account dashboard.\n\tThe recommendations should be based on the user's browsing and enrollment history.\n\tThe user should be able to view and dismiss course recommendations if they are not interested.\n\tThe website should provide personalized learning paths that outline a sequence of courses to achieve specific learning goals.\n\tThe user should be able to track their progress along their personalized learning path.\n\n322. As a user, I want to be able to access course reviews and ratings so that I can make an informed decision about which courses to enroll in.\nAcceptance Criteria:\n\tThe website should display an average star rating for each course based on user reviews.\n\tThe user should be able to read written reviews of the course from other students.\n\tThe website should display the number of reviews and the overall rating for each course.\n\tThe user should be able to filter reviews by star rating or keyword.\n\tThe website should provide an option for the user to leave a review of the course after completing it.\n\n323. As a user, I want to be able to access course previews and free trials so that I can evaluate the course content and teaching style before enrolling.\nAcceptance Criteria:\n\tThe website should provide a preview or sample of each course, such as a video lecture or lesson summary.\n\tThe user should be able to access a free trial of the course for a limited time or with limited access to course materials.\n\tThe website should display information about the course instructor, including their qualifications and teaching experience.\n\tThe user should be able to view the course syllabus and learning objectives before enrolling.\n\tThe website should provide a feature for the user to request more information about the course or instructor before enrolling.\n Make me a use case diagram based on the user stories above.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle OnlineLearningPlatform {\n    usecase \"Search Courses\" as UC1\n    usecase \"Enroll in Course\" as UC2\n    usecase \"Access Learning Materials\" as UC3\n    usecase \"Collaborate\" as UC4\n    usecase \"Access Course Recommendations\" as UC6\n\n    usecase \"Access Course Reviews and Ratings\" as UC1A\n    usecase \"Access Course Previews and Free Trials\" as UC1B\n\n    usecase \"Track Course Progress\" as UC2A\n    usecase \"Access Course Certificates and Badges\" as UC5A\n    usecase \"Receive Feedback and Grades\" as UC5B\n}\n\nUC1 ..> UC1A : <<extend>>\nUC1 ..> UC1B : <<extend>>\n\nUser --> UC2A\n\nUser --> UC5A\nUser --> UC5B \n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC6\n@enduml"
    },
    {
        "input": "User stories for Hotel booking system\n324. As a user, I want to be able to search for hotels by location and date so that I can find accommodations for my trip.\nAcceptance Criteria:\n\tThe website should have a search bar accessible from the homepage.\n\tThe user should be able to enter a location, check-in date, and check-out date to search for hotels.\n\tThe website should display a list of available hotels in the selected location.\n\tThe user should be able to filter the search results by price, star rating, amenities, and other relevant criteria.\n\tThe website should display high-quality photos and detailed descriptions of each hotel.\n\n325. As a user, I want to be able to view hotel details and room options so that I can make an informed decision about where to stay.\nAcceptance Criteria:\n\tThe website should provide detailed information about each hotel, including room types, amenities, and policies.\n\tThe user should be able to view photos of each room type and common areas of the hotel.\n\tThe website should display the price per night for each room type and any additional fees or taxes.\n\tThe user should be able to read reviews of the hotel from other guests.\n\tThe website should provide information on the hotel's location and proximity to local attractions.\n\n326. As a user, I want to be able to book a hotel room online so that I can secure my accommodations for my trip.\nAcceptance Criteria:\n\tThe website should have a booking form accessible from each hotel page.\n\tThe user should be able to select a room type, check-in date, and check-out date to book a room.\n\tThe website should display the total cost of the booking, including any taxes or fees.\n\tThe user should be able to enter their payment information and confirm the booking.\n\tThe website should send a confirmation email to the user with their booking details.\n\n327. As a user, I want to be able to view my booking history and manage my reservations so that I can keep track of my upcoming trips.\nAcceptance Criteria:\n\tThe website should provide an account dashboard where the user can view their booking history.\n\tThe user should be able to see a list of their past and upcoming reservations.\n\tThe website should display the booking details for each reservation, including check-in and check-out dates, room type, and total cost.\n\tThe user should be able to cancel or modify their reservations within a specified timeframe.\n\tThe website should send email reminders to the user before their check-in date.\n\n328. As a user, I want to be able to contact the hotel directly through the website so that I can ask questions or request special accommodations.\nAcceptance Criteria:\n\tThe website should display contact information for each hotel, including phone number and email address.\n\tThe user should be able to send a message to the hotel directly through the website or via email.\n\tThe website should confirm that the message was sent and display a message history between the user and the hotel.\n\tThe user should be able to request special accommodations, such as a late check-in or room preferences.\n\tThe website should provide the user with the option to rate and provide feedback on their experience with the hotel.\n\n329. As a user, I want to be able to view hotel amenities and policies so that I can choose accommodations that meet my needs and preferences.\nAcceptance Criteria:\n\tThe website should provide a list of amenities offered by each hotel, such as free breakfast, Wi-Fi, or parking.\n\tThe user should be able to view the hotel's policies, such as cancellation fees, pet policies, and check-in/check-out times.\n\tThe website should display information on the hotel's facilities, such as a pool, gym, or restaurant.\n\tThe user should be able to request additional services, such as airport shuttle or room service.\n\tThe website should provide information on the hotel's accessibility features, such as wheelchair ramps or elevators.\n\n330. As a user, I want to be able to view hotel reviews and ratings so that I can make an informed decision about where to stay.\nAcceptance Criteria:\n\tThe website should display an average star rating for each hotel based on guest reviews.\n\tThe user should be able to read written reviews of the hotel from other guests.\n\tThe website should display the number of reviews and the overall rating for each hotel.\n\tThe user should be able to filter reviews by star rating or keyword.\n\tThe website should provide an option for the user to leave a review of the hotel after their stay.\n\n331. As a user, I want to be able to receive alerts when a hotel that meets my criteria becomes available so that I can stay up-to-date on availability and pricing.\nAcceptance Criteria:\n\tThe website should allow the user to create an account and sign in.\n\tThe user should be able to set up alerts for specific criteria, such as location, price range, and amenities.\n\tThe website should send email alerts to the user when a hotel that meets their criteria is available.\n\tThe user should be able to manage their alerts and update their criteria at any time.\n\tThe website should provide the option for the user to receive alerts via SMS or push notification.\n\n332. As a user, I want to be able to view hotel photos and virtual tours so that I can get a better sense of the property before booking.\nAcceptance Criteria:\n\tThe website should display high-quality photos of each hotel, including rooms, common areas, and amenities.\n\tThe user should be able to view a virtual tour of the hotel using technology such as Matterport or iGUIDE.\n\tThe virtual tour should allow the user to navigate through the hotel and view different areas.\n\tThe user should be able to pause or rewind the virtual tour to focus on specific rooms or features.\n\tThe website should provide the option for the user to contact the hotel directly from the virtual tour page.\n\n333. As a user, I want to be able to view hotel location and nearby attractions so that I can choose accommodations that are convenient and close to points of interest.\nAcceptance Criteria:\n\tThe website should display a map that shows the location of each hotel in the search results.\n\tThe user should be able to search for hotels in a specific location and see them displayed on the map.\n\tThe map should provide information on nearby attractions, such as restaurants, shops, and tourist sites.\n\tThe user should be able to filter the hotels displayed on the map by price, star rating, and other relevant criteria.\n\tThe website should provide a list of the hotels displayed on the map, including photos and detailed descriptions.\n Make a use case diagram for it.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle HotelBookingSystem {\n    usecase \"Search Hotels\" as UC1\n    usecase \"View Hotel Information\" as UC2\n    usecase \"Book Hotel Room\" as UC3\n    usecase \"Manage Reservations\" as UC4\n    usecase \"Contact Hotel\" as UC5\n    usecase \"Receive Hotel Alerts\" as UC6\n    usecase \"View Nearby Attractions\" as UC7\n    usecase \"View Virtual Tours\" as UC8\n\n    usecase \"View Room Options\" as UC3A\n    usecase \"View Hotel Policies & Amenities\" as UC2A\n    usecase \"View Hotel Ratings & Reviews\" as UC2B\n    usecase \"View Hotel Photos\" as UC2C\n    usecase \"View Hotel Location\" as UC2D\n}\n\nUC2 ..> UC2A : <<extend>>\nUC2 ..> UC2B : <<extend>>\nUC2 ..> UC2C : <<extend>>\nUC2 ..> UC2D : <<extend>>\nUC3 ..> UC3A : <<extend>>\n\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\n@enduml"
    },
    {
        "input": "User stories for Babysitter hiring app\n334. As a parent, I want to be able to search for babysitters in my area so that I can find a reliable caregiver for my child.\nAcceptance Criteria:\n\tThe app should have a search bar accessible from the homepage.\n\tThe parent should be able to enter their location and search for available babysitters.\n\tThe app should display a list of babysitters in the selected area, including their profiles and availability.\n\tThe parent should be able to filter the search results by price, experience, and other relevant criteria.\n\tThe app should display reviews and ratings for each babysitter from other parents.\n\n335. As a parent, I want to be able to view babysitter profiles and qualifications so that I can make an informed decision about who to hire.\nAcceptance Criteria:\n\tThe app should provide detailed profiles for each babysitter, including their experience, qualifications, and availability.\n\tThe parent should be able to view photos of the babysitter, as well as any certifications or background checks.\n\tThe app should display reviews and ratings for the babysitter from other parents.\n\tThe parent should be able to contact the babysitter directly through the app to ask questions or schedule an interview.\n\tThe app should provide information on the babysitter's hourly rate and any additional fees.\n\n336. As a parent, I want to be able to book a babysitter online so that I can easily schedule care for my child.\nAcceptance Criteria:\n\tThe app should have a booking form accessible from each babysitter's profile.\n\tThe parent should be able to select a date, time, and duration for the babysitting appointment.\n\tThe app should display the total cost of the booking, including any additional fees or taxes.\n\tThe parent should be able to enter their payment information and confirm the booking.\n\tThe app should send a confirmation email to the parent and the babysitter with the booking details.\n\n337. As a parent, I want to be able to view my booking history and manage my appointments so that I can keep track of my child's care schedule.\nAcceptance Criteria:\n\tThe app should provide an account dashboard where the parent can view their booking history.\n\tThe parent should be able to see a list of their past and upcoming babysitting appointments.\n   The app should display the booking details for each appointment, including the babysitter's name, date, time, and total cost.\n\tThe parent should be able to cancel or reschedule appointments within a specified timeframe.\n\tThe app should send reminders to the parent and the babysitter before each appointment.\n\n338. As a parent, I want to be able to contact the babysitter directly through the app so that I can communicate about my child's needs and preferences.\nAcceptance Criteria:\n\tThe app should provide a messaging feature for parents and babysitters to communicate.\n\tThe parent should be able to send messages to the babysitter with instructions, questions, or updates.\n\tThe app should display a message history between the parent and the babysitter for each appointment.\n\tThe parent should be able to request special accommodations or provide information about their child's routine.\n\tThe app should provide the parent with the option to rate and provide feedback on the babysitter after each appointment.\n\n339. As a parent, I want to be able to view babysitter availability and schedule appointments in advance so that I can plan my child's care in advance.\nAcceptance Criteria:\n\tThe app should display each babysitter's availability on their profile, including days and times they are available.\n\tThe parent should be able to schedule appointments with the babysitter in advance based on their availability.\n\tThe app should provide a calendar feature for parents to view their upcoming appointments and availability.\n\tThe parent should be able to request recurring appointments or set up a regular care schedule.\n\tThe app should send reminders to the parent and the babysitter before each appointment.\n\n340. As a parent, I want to be able to view babysitter reviews and ratings so that I can make an informed decision about who to hire.\nAcceptance Criteria:\n\tThe app should display an average star rating for each babysitter based on parent reviews.\n\tThe parent should be able to read written reviews of the babysitter from other parents.\n\tThe app should display the number of reviews and the overall rating for each babysitter.\n\tThe parent should be able to filter reviews by star rating or keyword.\n\tThe app should provide an option for the parent to leave a review of the babysitter after each appointment.\n\n341. As a babysitter, I want to be able to create a profile and list my qualifications and availability so that I can connect with parents looking for childcare.\nAcceptance Criteria:\n\tThe app should provide a registration form for babysitters to create a profile.\n\tThe babysitter should be able to enter their qualifications, experience, and availability.\n\tThe app should allow the babysitter to upload photos, certifications, and background checks to their profile.\n\tThe babysitter should be able to set their hourly rate and any additional fees for their services.\n\tThe app should display the babysitter's profile to parents searching for childcare in the area.\n\n342. As a babysitter, I want to be able to receive booking requests and communicate with parents through the app so that I can easily manage my appointments.\nAcceptance Criteria:\n\tThe app should provide a messaging feature for babysitters and parents to communicate.\n\tThe babysitter should be able to receive booking requests from parents and accept or decline them.\n\tThe app should display a list of upcoming appointments for the babysitter, including the parent's name, date, time, and location.\n\tThe babysitter should be able to send messages to parents with questions, instructions, or updates.\n\tThe app should provide the babysitter with the option to rate and provide feedback on the parent after each appointment.\n\n343. As a babysitter, I want to be able to view my booking history and manage my appointments so that I can keep track of my schedule and earnings.\nAcceptance Criteria:\n\tThe app should provide an account dashboard where the babysitter can view their booking history.\n\tThe babysitter should be able to see a list of their past and upcoming appointments.\n\tThe app should display the booking details for each appointment, including the parent's name, date, time, and total cost.\n\tThe babysitter should be able to cancel or reschedule appointments within a specified timeframe.\n\tThe app should send reminders to the babysitter and the parent before each appointment.\n Give use case diagram.",
        "output": "@startuml\nleft to right direction\n\nactor Parent\nactor Babysitter\n\nrectangle BabysitterHiringApp {\n    usecase \"Search Babysitters\" as UC1\n    usecase \"View Babysitter Profiles\" as UC2\n    usecase \"Book Babysitter\" as UC3\n    usecase \"View Booking History\" as UC4\n    usecase \"Manage Appointments\" as UC5\n    usecase \"Contact Babysitter\" as UC6\n    usecase \"Schedule Appointments\" as UC7\n    usecase \"Receive Booking Requests\" as UC8\n    usecase \"Create Babysitter Profile\" as UC9\n\n    usecase \"View Babysitter Qualifications\" as UC2A\n    usecase \"View Babysitter Availability\" as UC2B\n    usecase \"View Babysitter Reviews\" as UC2C\n    usecase \"View Babysitter Ratings\" as UC2D\n    \n}\n\nUC2 ..> UC2A : <<extend>>\nUC2 ..> UC2B : <<extend>>\nUC2 ..> UC2C : <<extend>>\nUC2 ..> UC2D : <<extend>>\n\nParent --> UC1\nParent --> UC2\nParent --> UC3\nParent --> UC4\nParent --> UC5\nParent --> UC6\nParent --> UC7\n\nBabysitter --> UC8\nBabysitter --> UC9\nBabysitter --> UC4\nBabysitter --> UC5\n@enduml"
    },
    {
        "input": "User stories for Turnitin plagiarism checker\n344. As a student, I want to be able to upload my paper to the plagiarism checker so that I can ensure that my work is original and properly cited.\nAcceptance Criteria:\n\tThe website should have a file upload feature accessible from the homepage.\n\tThe student should be able to upload their paper in a supported file format, such as .docx or .pdf.\n\tThe website should scan the paper for plagiarism and provide a report on the originality of the content.\n\tThe student should be able to view a detailed report that highlights any instances of plagiarism or improper citations.\n\tThe website should provide suggestions for correcting plagiarism and citing sources properly.\n\n345. As an instructor, I want to be able to check my students' papers for plagiarism so that I can ensure academic integrity and provide feedback on their work.\nAcceptance Criteria:\n\tThe website should provide an instructor dashboard where the instructor can view their classes and assignments.\n\tThe instructor should be able to upload a student's paper to the plagiarism checker from the assignment page.\n\tThe website should scan the paper for plagiarism and provide a report on the originality of the content.\n\tThe instructor should be able to view a detailed report that highlights any instances of plagiarism or improper citations.\n\tThe website should provide suggestions for correcting plagiarism and citing sources properly.\n\n346. As an administrator, I want to be able to manage user accounts and access reports on plagiarism detection so that I can monitor usage and compliance with academic policies.\nAcceptance Criteria:\n\tThe website should provide an administrator dashboard where the administrator can view user accounts and reports.\n\tThe administrator should be able to create, edit, and delete user accounts for students, instructors, and other staff.\n\tThe website should provide usage reports on the number of papers scanned, instances of plagiarism detected, and other relevant metrics.\n\tThe administrator should be able to view detailed reports on plagiarism detection, including trends over time and common sources of plagiarism.\n\tThe website should provide a feature for the administrator to set permissions and access levels for different user roles.\n\n347. As a student, I want to be able to view my plagiarism report and make corrections to my paper so that I can improve my writing and avoid academic dishonesty.\nAcceptance Criteria:\n\tThe website should display the plagiarism report for the student's paper, including highlighted instances of plagiarism.\n\tThe student should be able to view suggestions for correcting plagiarism and citing sources properly.\n\tThe website should provide a feature for the student to make corrections to their paper directly within the platform.\n\tThe student should be able to save their changes and download an updated version of their paper.\n\tThe website should provide resources and tutorials on how to avoid plagiarism and cite sources correctly.\n\n348. As an instructor, I want to be able to view my students' plagiarism reports and provide feedback on their work so that I can support their academic development.\nAcceptance Criteria:\n\tThe website should display the plagiarism reports for each student's paper, including highlighted instances of plagiarism.\n\tThe instructor should be able to view suggestions for correcting plagiarism and citing sources properly.\n\tThe website should provide a feature for the instructor to leave comments and feedback on the student's paper.\n\tThe instructor should be able to grade the paper and provide an overall assessment of the originality and quality of the work.\n\tThe website should provide resources and tutorials on how to address plagiarism and promote academic integrity.\n\n349. As an administrator, I want to be able to generate usage reports and monitor system performance so that I can ensure the reliability and effectiveness of the plagiarism checker.\nAcceptance Criteria:\n\tThe website should provide usage reports on the number of papers scanned, instances of plagiarism detected, and other relevant metrics.\n\tThe administrator should be able to filter and export usage data for specific time periods and user roles.\n\tThe website should display system performance metrics, such as response time, uptime, and error rates.\n\tThe administrator should be able to view logs and error reports to troubleshoot issues and optimize system performance.\n\tThe website should provide a feature for the administrator to set up alerts for system maintenance and updates.\n\n350. As a student, I want to be able to access resources and tutorials on academic integrity and citation practices so that I can improve my writing skills and avoid plagiarism.\nAcceptance Criteria:\n\tThe website should provide a resources section with articles, videos, and tutorials on academic integrity and citation practices.\n\tThe student should be able to access guides on how to avoid plagiarism, cite sources properly, and use citation styles such as APA, MLA, and Chicago.\n\tThe website should provide examples of proper citation formats and common mistakes to avoid.\n\tThe student should be able to take quizzes and self-assessments on plagiarism and citation practices.\n\tThe website should provide links to additional resources and tools for improving writing skills and academic research.\n Given the above user stories, give me a use case diagram.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Instructor\nactor Administrator\n\nrectangle TurnitinPlagiarismChecker {\n    usecase \"Upload Paper\" as UC1\n    usecase \"Check Papers for Plagiarism\" as UC2\n    usecase \"Manage User Accounts\" as UC3\n    usecase \"View Plagiarism Report\" as UC4\n    usecase \"Provide Feedback\" as UC5\n    usecase \"Generate Usage Reports\" as UC6\n    usecase \"Access Resources and Tutorials\" as UC7\n    usecase \"Manage Access Reports\" as UC8\n    \n}\n\nStudent --> UC1\nStudent --> UC4\nStudent --> UC7\nInstructor --> UC2\nInstructor --> UC5\nInstructor --> UC7\nAdministrator --> UC3\nAdministrator --> UC8\nAdministrator --> UC6\nAdministrator --> UC7\n@enduml"
    },
    {
        "input": "Given the following user stories, give me a use case diagram. \nUser stories for Online shopping platform\n360. As a customer, I want to be able to browse products by category and search for specific items so that I can find and purchase the items I need.\nAcceptance Criteria:\n\tThe website should have a search bar and category filters accessible from the homepage.\n\tThe customer should be able to enter keywords or browse categories to find products.\n\tThe website should display a list of products with images, descriptions, and prices.\n\tThe customer should be able to filter search results by price, brand, size, color, and other relevant criteria.\n\tThe website should provide recommendations and related products based on the customer's search history.\n\n361. As a customer, I want to be able to view product details, images, and reviews so that I can make an informed decision about my purchase.\nAcceptance Criteria:\n\tThe website should provide detailed information about each product, including specifications, features, and dimensions.\n\tThe customer should be able to view high-quality images of the product from different angles.\n\tThe website should display reviews and ratings from other customers who have purchased the product.\n\tThe customer should be able to read written reviews and see photos of the product in use.\n\tThe website should provide information on availability, shipping options, and return policies.\n\n362. As a customer, I want to be able to add products to my shopping cart, view my cart, and proceed to checkout so that I can complete my purchase.\nAcceptance Criteria:\n\tThe website should have an add to cart button on each product page.\n\tThe customer should be able to add products to their cart and view the total cost of their items.\n\tThe website should display a summary of the customer's cart, including product details, quantities, and prices.\n\tThe customer should be able to update quantities, remove items, and apply promo codes or discounts.\n\tThe website should provide a secure checkout process with options for guest checkout or account creation.\n\n363. As a customer, I want to be able to create an account, save my payment information, and track my order history so that I can easily shop and manage my purchases.\nAcceptance Criteria:\n\tThe website should provide a registration form for customers to create an account.\n\tThe customer should be able to save their shipping address, payment information, and order preferences.\n\tThe website should display an account dashboard where the customer can view their order history, tracking information, and account settings.\n\tThe customer should be able to track the status of their orders, view estimated delivery dates, and contact customer support.\n\tThe website should provide options for the customer to subscribe to newsletters, promotions, and loyalty programs.\n\n364. As a customer, I want to be able to track my order status, receive shipping updates, and contact customer support so that I can stay informed and resolve any issues with my purchase.\nAcceptance Criteria:\n\tThe website should provide an order tracking feature accessible from the customer's account dashboard.\n\tThe customer should be able to enter their order number or email address to track the status of their shipment.\n\tThe website should send email notifications with shipping updates, estimated delivery dates, and tracking numbers.\n\tThe customer should be able to contact customer support through live chat, email, or phone for assistance with their order.\n\tThe website should provide a help center with FAQs, return policies, and contact information for customer service.\n\n365. As a customer, I want to be able to leave product reviews, ratings, and feedback so that I can share my experience with other shoppers and help improve the shopping experience.\nAcceptance Criteria:\n\tThe website should provide a review and rating feature on each product page.\n\tThe customer should be able to leave a star rating and written review of the product.\n\tThe website should display the average star rating and number of reviews for each product.\n\tThe customer should be able to filter reviews by star rating, date, or keyword.\n\tThe website should provide an option for the customer to leave feedback on their overall shopping experience.\n\n366. As a customer, I want to be able to receive personalized recommendations, promotions, and discounts based on my browsing and purchase history so that I can discover new products and save money.\nAcceptance Criteria:\n\tThe website should provide personalized recommendations on the homepage and product pages.\n\tThe customer should see recommended products based on their browsing history, purchase behavior, and preferences.\n\tThe website should send email notifications with promotions, discounts, and new arrivals tailored to the customer's interests.\n\tThe customer should be able to opt in or out of personalized recommendations and marketing communications.\n\tThe website should provide a loyalty program with rewards, points, and exclusive offers for repeat customers.\n\n367. As a customer, I want to be able to access customer support, return or exchange products, and request refunds so that I can resolve any issues with my purchase and receive assistance when needed.\nAcceptance Criteria:\n\tThe website should provide a help center with FAQs, return policies, and contact information for customer support.\n\tThe customer should be able to contact customer support through live chat, email, or phone for assistance with their order.\n\tThe website should display information on return and exchange policies, including timeframes, conditions, and shipping instructions.\n\tThe customer should be able to request a return or exchange through their account dashboard and receive a return label.\n\tThe website should provide a refund process with options for store credit, exchange, or original payment method.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\n\nrectangle OnlineShoppingPlatform {\n    usecase \"Browse and Search Products\" as UC1\n    usecase \"View Product Information\" as UC2\n    usecase \"Add Products to Cart\" as UC3\n    usecase \"Checkout\" as UC3A\n    usecase \"Manage Account\" as UC4\n    usecase \"Track Orders and Access Support\" as UC5\n    usecase \"Leave Reviews and Ratings\" as UC6\n    usecase \"Receive Personalized Recommendations\" as UC7\n    usecase \"Request Refunds and Return Products\" as UC8\n}\n\nUC3 ..> UC3A : <<extend>>\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC3A\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\nCustomer --> UC8\n@enduml"          
    },
    {
        "input": "User stories for Supply chain management\n368. As a manufacturer, I want to be able to track raw materials, inventory levels, and production schedules so that I can optimize production and meet customer demand.\nAcceptance Criteria:\n\tThe system should provide a dashboard for manufacturers to view real-time data on raw material availability, inventory levels, and production status.\n\tThe manufacturer should be able to track the location, quantity, and expiration dates of raw materials in the supply chain.\n\tThe system should display production schedules, work orders, and lead times for each product line.\n\tThe manufacturer should be able to set alerts and notifications for low inventory levels, delays, or quality issues.\n\tThe system should provide analytics and reports on production efficiency, waste reduction, and cost savings.\n\n369. As a distributor, I want to be able to manage orders, shipments, and delivery schedules so that I can fulfill customer orders on time and maintain inventory accuracy.\nAcceptance Criteria:\n\tThe system should provide a dashboard for distributors to view incoming orders, shipment status, and delivery schedules.\n\tThe distributor should be able to process orders, allocate inventory, and generate packing lists for shipments.\n\tThe system should track the location, quantity, and condition of products in transit and at warehouses.\n\tThe distributor should be able to schedule deliveries, assign routes, and provide tracking information to customers.\n\tThe system should provide alerts and notifications for delayed shipments, out-of-stock items, and order changes.\n\n370. As a retailer, I want to be able to manage inventory, sales, and customer orders so that I can optimize stock levels, reduce costs, and improve customer satisfaction.\nAcceptance Criteria:\n\tThe system should provide a dashboard for retailers to view real-time data on inventory levels, sales performance, and customer orders.\n\tThe retailer should be able to track product availability, stock levels, and reorder points for each store location.\n\tThe system should display sales reports, revenue forecasts, and product trends to help with inventory planning.\n\tThe retailer should be able to process customer orders, allocate stock, and provide order status updates.\n\tThe system should provide alerts and notifications for low stock levels, overstocked items, and slow-moving inventory.\n\n371. As a logistics provider, I want to be able to manage transportation, warehousing, and distribution operations so that I can optimize routes, reduce costs, and improve delivery efficiency.\nAcceptance Criteria:\n\tThe system should provide a dashboard for logistics providers to view real-time data on transportation routes, warehouse capacity, and delivery schedules.\n\tThe provider should be able to track the location, status, and condition of shipments in transit and at warehouses.\n\tThe system should display route optimization tools, traffic updates, and weather alerts to help with delivery planning.\n\tThe provider should be able to assign drivers, vehicles, and routes based on delivery priorities and customer requirements.\n\tThe system should provide alerts and notifications for delays, route changes, and delivery exceptions.\n\n372. As a customer, I want to be able to track my orders, receive delivery updates, and contact customer support so that I can stay informed and resolve any issues with my purchase.\nAcceptance Criteria:\n\tThe system should provide an order tracking feature accessible from the customer's account dashboard.\n\tThe customer should be able to enter their order number or email address to track the status of their shipment.\n\tThe system should send email notifications with shipping updates, estimated delivery dates, and tracking numbers.\n\tThe customer should be able to contact customer support through live chat, email, or phone for assistance with their order.\n\tThe system should provide a help center with FAQs, return policies, and contact information for customer service.\n\n373. As a supplier, I want to be able to manage orders, shipments, and inventory levels so that I can fulfill customer orders on time and maintain supply chain efficiency.\nAcceptance Criteria:\n\tThe system should provide a dashboard for suppliers to view incoming orders, shipment status, and inventory levels.\n\tThe supplier should be able to process orders, allocate inventory, and generate packing lists for shipments.\n\tThe system should track the location, quantity, and condition of products in transit and at warehouses.\n\tThe supplier should be able to schedule deliveries, assign carriers, and provide tracking information to customers.\n\tThe system should provide alerts and notifications for delayed shipments, out-of-stock items, and order changes.\n\n374. As a warehouse manager, I want to be able to track inventory, manage storage space, and optimize picking and packing processes so that I can improve warehouse efficiency and reduce costs.\nAcceptance Criteria:\n\tThe system should provide a dashboard for warehouse managers to view real-time data on inventory levels, storage capacity, and order fulfillment rates.\n\tThe manager should be able to track the location, quantity, and condition of products in the warehouse.\n\tThe system should display storage bin locations, picking routes, and packing instructions for each order.\n\tThe manager should be able to assign tasks, monitor productivity, and optimize warehouse layout for efficiency.\n\tThe system should provide alerts and notifications for low stock levels, overstocked items, and order changes.\n Given the following user stories, create a use case diagram for the supply chain management system.",
        "output": "@startuml\nleft to right direction\n\nactor Manufacturer\nactor Distributor\nactor Retailer\nactor LogisticsProvider\nactor Customer\nactor Supplier\nactor WarehouseManager\n\nrectangle SupplyChainManagement {\n    usecase \"Track Raw Materials\" as UC1\n    usecase \"Track Production Schedules\" as UC2\n    usecase \"Manage Orders\" as UC3\n    usecase \"Manage Shipments\" as UC4\n    usecase \"Track Inventory\" as UC5\n    usecase \"Manage Customer Orders\" as UC6\n    usecase \"Manage Transportation\" as UC7\n    usecase \"Manage Distribution\" as UC8\n    usecase \"Receive Delivery Updates\" as UC9\n    usecase \"Contact Customer Support\" as UC10\n    usecase \"Optimize Storage Space\" as UC11\n    usecase \"Manage Storage Space\" as UC12\n    usecase \"Optimize Picking and Packing Processes\" as UC13\n}\n\nManufacturer --> UC1\nManufacturer --> UC2\nDistributor --> UC3\nDistributor --> UC4\nRetailer --> UC6\nRetailer --> UC5\nLogisticsProvider --> UC7\nLogisticsProvider --> UC8\nCustomer --> UC9\nCustomer --> UC10\nSupplier --> UC3\nWarehouseManager --> UC5\nWarehouseManager --> UC11\nWarehouseManager --> UC12\nWarehouseManager --> UC13\n@enduml"
    },
    {
        "input": "User stories for Oladoc doctor management system\n375. As a patient, I want to be able to search for doctors by specialty, location, and availability so that I can find a healthcare provider that meets my needs.\nAcceptance Criteria:\n\tThe website should have a search bar accessible from the homepage.\n\tThe patient should be able to enter a specialty, location, and preferred appointment time to search for doctors.\n\tThe website should display a list of doctors in the selected area, including their profiles and availability.\n\tThe patient should be able to filter search results by doctor rating, experience, and other relevant criteria.\n\tThe website should provide information on each doctor's qualifications, certifications, and areas of expertise.\n\n376. As a patient, I want to be able to view doctor profiles, patient reviews, and appointment availability so that I can make an informed decision about my healthcare provider.\nAcceptance Criteria:\n\tThe website should provide detailed profiles for each doctor, including their education, experience, and specialties.\n\tThe patient should be able to view photos of the doctor, as well as reviews and ratings from other patients.\n\tThe website should display the doctor's availability, appointment hours, and contact information.\n\tThe patient should be able to read written reviews and see ratings for the doctor's bedside manner, wait time, and office environment.\n\tThe website should provide information on the doctor's clinic location, hours of operation, and accepted insurance plans.\n\n377. As a patient, I want to be able to book an appointment online, view my appointment history, and receive reminders so that I can manage my healthcare appointments efficiently.\nAcceptance Criteria:\n\tThe website should have a booking form accessible from each doctor's profile.\n\tThe patient should be able to select an appointment time, enter their symptoms, and confirm the booking.\n\tThe website should display the patient's appointment history, including past and upcoming appointments.\n\tThe patient should receive email or SMS reminders before their appointment with details on time, location, and doctor's name.\n\tThe website should provide a feature for the patient to reschedule or cancel appointments within a specified timeframe.\n\n378. As a patient, I want to be able to view my medical records, test results, and prescriptions online so that I can track my health history and share information with other healthcare providers.\nAcceptance Criteria:\n\tThe website should provide a patient portal where the patient can log in and view their medical records.\n\tThe patient should be able to access test results, lab reports, and imaging studies from past appointments.\n\tThe website should display a list of current medications, dosages, and prescription refills.\n\tThe patient should be able to download or print their medical records for personal use or to share with other doctors.\n\tThe website should provide a secure messaging feature for patients to communicate with their healthcare providers.\n\n379. As a doctor, I want to be able to manage my schedule, view patient appointments, and communicate with patients online so that I can provide quality care and improve patient outcomes.\nAcceptance Criteria:\n\tThe website should provide a doctor dashboard where the doctor can log in and view their schedule.\n\tThe doctor should be able to see a list of upcoming appointments, patient details, and appointment notes.\n\tThe website should display patient medical records, test results, and prescription history for each appointment.\n\tThe doctor should be able to send messages to patients with instructions, follow-up care, or test results.\n\tThe website should provide a feature for the doctor to update patient records, add notes, and order tests or prescriptions.\n\n380. As a clinic administrator, I want to be able to manage doctor profiles, patient appointments, and clinic operations so that I can streamline workflow, improve efficiency, and enhance patient satisfaction.\nAcceptance Criteria:\n\tThe website should provide an administrator dashboard where the clinic administrator can log in and view clinic data.\n\tThe administrator should be able to add, edit, or delete doctor profiles, including contact information, specialties, and availability.\n\tThe website should display a calendar feature for the administrator to view and manage patient appointments.\n\tThe administrator should be able to assign rooms, equipment, and support staff for each appointment.\n\tThe website should provide analytics and reports on clinic performance, patient satisfaction, and appointment scheduling.\n\n381. As a healthcare provider, I want to be able to access patient records, update treatment plans, and communicate with other providers so that I can coordinate care, monitor progress, and ensure continuity of care.\nAcceptance Criteria:\n\tThe website should provide a secure portal for healthcare providers to log in and access patient records.\n\tThe provider should be able to view medical history, test results, and treatment plans for each patient.\n\tThe website should display a list of current medications, allergies, and chronic conditions for each patient.\n\tThe provider should be able to update treatment plans, order tests, and prescribe medications online.\n\tThe website should provide a messaging feature for providers to communicate with other healthcare professionals, share information, and coordinate care.\n I want a use case diagram for this.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor Doctor\nactor Administrator\nactor HealthcareProvider\nactor ClinicAdministrator\n\nrectangle OladocDoctorManagementSystem {\n    usecase \"Search Doctors\" as UC1\n    usecase \"View Doctor Profiles\" as UC2\n    usecase \"Book Appointment\" as UC3\n    usecase \"View Medical Records\" as UC4\n    usecase \"Manage Schedule\" as UC5\n    usecase \"Manage Doctor Profiles\" as UC6\n    usecase \"Update Treatment Plans\" as UC7\n}\n\nPatient --> UC1\nPatient --> UC2\nPatient --> UC3\nPatient --> UC4\n\nDoctor --> UC5\nDoctor --> UC4 \nDoctor --> UC7\n\nAdministrator --> UC6 \nAdministrator --> UC5\n\nClinicAdministrator --> UC6\n\nHealthcareProvider --> UC4\nHealthcareProvider --> UC7\n@enduml"
    },
    {
        "input": "1. As a prospective student, I want to create an account, so that I can start my application process.\nAcceptance Criteria:\n - The system should allow the student to create an account using their email and password.\n - The student should receive a confirmation email after successful registration.\n - The student should be able to log in using their credentials.\n\n2. As a prospective student, I want to fill out my application form online, so that I can apply to the university.\nAcceptance Criteria:\n - The system should provide an application form with sections like personal details, academic background, and program selection.\n - The student should be able to save their progress while completing the form.\n\n3. As a prospective student, I want to upload my academic documents, so that I can complete my application.\nAcceptance Criteria:\n - The system should allow the student to upload multiple document formats (PDF, DOC, JPG, etc.).\n - The system should validate the file size and format before uploading.\n - The student should be able to view and replace uploaded documents.\n\n4. As an admissions officer, I want to review applications, so that I can evaluate prospective students.\nAcceptance Criteria:\n - The system should provide a list of submitted applications for review.\n - The admissions officer should be able to view each applicant's details, documents, and application status.\n - The system should allow the admissions officer to update the status of the application (e.g., pending, accepted, rejected).\n\n5. As a prospective student, I want to track the status of my application, so that I know the progress of my admission.\nAcceptance Criteria:\n - The system should display the current status of the student's application (e.g., in review, accepted, rejected).\n - The system should send notifications via email or SMS when the application status changes.\n\n6. As an administrator, I want to manage program availability, so that I can ensure students apply to the correct programs.\nAcceptance Criteria:\n - The system should allow the administrator to add, edit, or remove academic programs and their details (e.g., name, description, deadlines).\n - The system should reflect updated program information in real-time on the student application form.\n\n7. As an administrator, I want to generate reports on application data, so that I can analyze admission trends.\nAcceptance Criteria:\n - The system should allow the administrator to generate reports based on various criteria (e.g., number of applications, acceptance rate).\n - The reports should be exportable in multiple formats (e.g., CSV, PDF).\n\n8. As a prospective student, I want to pay my application fee online, so that I can complete my application submission.\nAcceptance Criteria:\n - The system should provide secure online payment options (e.g., credit card, PayPal).\n - The student should receive a payment confirmation after successful payment.\n - The system should allow the student to view their payment history.\n I want a use case diagram for this.",
        "output": "@startuml\nleft to right direction\n\nactor ProspectiveStudent\nactor AdmissionsOfficer\nactor Administrator\n\nrectangle UniversityAdmissionsSystem {\n    usecase \"Create Account\" as UC1\n    usecase \"Fill Application Form\" as UC2\n    usecase \"Upload Academic Documents\" as UC3\n    usecase \"Review Applications\" as UC4\n    usecase \"Track Application Status\" as UC5\n    usecase \"Manage Program Availability\" as UC6\n    usecase \"Generate Reports\" as UC7\n    usecase \"Pay Application Fee\" as UC8\n}\n\nProspectiveStudent --> UC1\nProspectiveStudent --> UC2\nProspectiveStudent --> UC3\nProspectiveStudent --> UC5\nProspectiveStudent --> UC8\n\nAdmissionsOfficer --> UC4\n\nAdministrator --> UC6\nAdministrator --> UC7\n\n@enduml"
    },
    {
        "input": "1. As a pet owner, I want to create a profile for my pet, so that I can manage their health records.\nAcceptance Criteria:\n - The app should allow the owner to create a pet profile with information like name, breed, age, and photo.\n - The owner should be able to edit or delete the pet profile as needed.\n\n2. As a pet owner, I want to set reminders for vet appointments, so that I don’t miss any important check-ups.\nAcceptance Criteria:\n - The app should allow the owner to create and schedule reminders for upcoming vet appointments.\n - The app should send notifications on the scheduled date and time.\n\n3. As a pet owner, I want to track my pet’s vaccination history, so that I can ensure they are up to date on shots.\nAcceptance Criteria:\n - The app should provide a section to log vaccination dates and types of vaccines.\n - The app should display upcoming vaccines based on standard pet care schedules.\n\n4. As a pet owner, I want to find nearby pet-friendly parks and clinics, so that I can take my pet for outings or medical care.\nAcceptance Criteria:\n - The app should allow the owner to search for nearby parks and clinics based on location.\n - The app should display reviews, ratings, and directions to each location.\n\n5. As a pet owner, I want to track my pet’s daily activities (e.g., walks, meals), so that I can maintain a healthy routine.\nAcceptance Criteria:\n - The app should allow the owner to log daily activities such as walk duration, meal times, and types of food.\n - The app should display a history of the pet’s activities for review.\n\n6. As a pet owner, I want to find pet grooming services, so that I can keep my pet well-groomed.\nAcceptance Criteria:\n - The app should allow the owner to search for grooming services based on location.\n - The app should display service details, prices, and contact information.\n\n7. As a pet owner, I want to be able to connect with other pet owners, so that I can share experiences and advice.\nAcceptance Criteria:\n - The app should provide a social feature where pet owners can connect, message, and share photos or stories.\n - The app should allow the owner to join or create groups based on pet breeds, interests, or location.\n\n8. As a pet owner, I want to receive health tips and advice based on my pet’s breed, so that I can provide the best care.\nAcceptance Criteria:\n - The app should provide customized health tips and advice based on the pet's breed and age.\n - The app should allow the owner to browse articles or watch videos related to pet care.\n\n9. As a pet owner, I want to track my pet’s weight, so that I can monitor their health over time.\nAcceptance Criteria:\n - The app should allow the owner to log and track their pet’s weight at different intervals.\n - The app should display weight trends in a graph or chart for easy monitoring.\n\n10. As a pet owner, I want to find emergency vet services, so that I can quickly access help in case of an emergency.\nAcceptance Criteria:\n - The app should allow the owner to search for 24/7 vet services nearby.\n - The app should display contact information and directions for each emergency service.\n I want a use case diagram for the above user stories.",
        "output": "@startuml\nleft to right direction\n\nactor PetOwner\n\nrectangle PetCareApp {\n    usecase \"Create Pet Profile\" as UC1\n    usecase \"Set Vet Appointment Reminders\" as UC2\n    usecase \"Track Vaccination History\" as UC3\n    usecase \"Find Nearby Parks and Clinics\" as UC4\n    usecase \"Track Daily Activities\" as UC5\n    usecase \"Find Pet Grooming Services\" as UC6\n    usecase \"Connect with Other Pet Owners\" as UC7\n    usecase \"Receive Health Tips\" as UC8\n    usecase \"Track Pet's Weight\" as UC9\n    usecase \"Find Emergency Vet Services\" as UC10\n}\n\nPetOwner --> UC1\nPetOwner --> UC2\nPetOwner --> UC3\nPetOwner --> UC4\nPetOwner --> UC5\nPetOwner --> UC6\nPetOwner --> UC7\nPetOwner --> UC8\nPetOwner --> UC9\nPetOwner --> UC10\n@enduml"
    },
    {
        "input": "1. As a pet seeker, I want to search for pets by breed, age, and location, so that I can find a pet that matches my preferences.\nAcceptance Criteria:\n - The app should allow the user to filter search results by breed, age, size, and location.\n - The app should display a list of available pets with profiles that include pictures, descriptions, and availability.\n\n2. As a pet owner, I want to list my pet for adoption or sale, so that I can find a new home for my pet.\nAcceptance Criteria:\n - The app should allow the owner to create a pet listing with details like breed, age, health status, and price (if selling).\n - The owner should be able to upload photos of the pet and provide a description.\n - The app should display the listing to potential adopters or buyers in relevant searches.\n\n3. As a pet seeker, I want to be able to save pets I’m interested in, so that I can come back to view them later.\nAcceptance Criteria:\n - The app should provide a “Save” or “Favorite” button on each pet profile.\n - The user should be able to view their list of saved pets in a dedicated section of the app.\n\n4. As a pet owner, I want to manage my listings, so that I can update, delete, or mark them as sold or adopted.\nAcceptance Criteria:\n - The app should allow the owner to view their active listings.\n - The owner should be able to edit the pet’s information, update the status, or remove the listing.\n\n5. As a pet seeker, I want to contact the pet owner, so that I can ask questions and arrange a meeting or purchase.\nAcceptance Criteria:\n - The app should provide a secure messaging feature to allow the pet seeker and owner to communicate.\n - The user should receive notifications when they receive a new message.\n\n6. As a pet seeker, I want to be able to filter for pets available for adoption or sale, so that I can quickly find what I am looking for.\nAcceptance Criteria:\n - The app should allow the user to filter pets by whether they are for adoption or sale.\n - The filtered list should display only relevant pets based on the selected option.\n\n7. As a pet owner, I want to specify the adoption or sale fee, so that potential adopters or buyers can see the cost upfront.\nAcceptance Criteria:\n - The app should provide an option for the owner to set an adoption fee or sale price when creating a listing.\n - The fee or price should be clearly displayed on the pet profile.\n\n8. As a pet seeker, I want to read reviews about the pet owners, so that I can trust who I’m dealing with.\nAcceptance Criteria:\n - The app should allow users to leave reviews and ratings for pet owners after a transaction or adoption is completed.\n - The reviews should be visible on the pet owner's profile for others to see.\n\n9. As a pet owner, I want to verify the identity of potential adopters or buyers, so that I can ensure my pet goes to a responsible home.\nAcceptance Criteria:\n - The app should allow the pet owner to request identity verification (e.g., ID upload) from potential adopters or buyers.\n - The app should provide a feature for the owner to approve or decline requests based on the verification.\n\n10. As a pet seeker, I want to receive notifications when new pets matching my criteria are listed, so that I can stay updated.\nAcceptance Criteria:\n - The app should allow the user to set up alerts based on breed, age, or location preferences.\n - The app should send push notifications or emails when new pets matching the criteria are available.\n\n11. As a pet owner, I want to track the number of views or inquiries on my pet listing, so that I know how much interest there is.\nAcceptance Criteria:\n - The app should display statistics for each listing, such as the number of views and messages received.\n - The owner should be able to access these stats from their dashboard.\n\n12. As a pet trader, I want to manage payments through the app, so that I can securely sell pets and handle transactions.\nAcceptance Criteria:\n - The app should provide integrated payment options (e.g., credit card, PayPal) for handling pet sale transactions.\n - The app should ensure secure payment processing and display payment status to both parties.\n\n13. As a pet seeker, I want to read details about each pet’s health and vaccination history, so that I can make an informed decision.\nAcceptance Criteria:\n - The app should provide a section on each pet’s profile to include health and vaccination records.\n - The owner should be able to upload or provide details about the pet’s health status.\n\n14. As a pet owner, I want to schedule meetings with potential adopters or buyers through the app, so that I can manage viewing appointments.\nAcceptance Criteria:\n - The app should provide a calendar or appointment scheduling feature for pet owners and seekers to arrange meetings.\n - The app should send reminders about upcoming appointments to both parties. Design a use case diagram for this app.",
        "output": "@startuml\nleft to right direction\n\nactor PetSeeker\nactor PetOwner\nactor PetTrader\n\nrectangle PetAdoptionApp {\n    usecase \"Search Pets\" as UC1\n    usecase \"List Pet for Adoption or Sale\" as UC2\n    usecase \"Save Favorite Pets\" as UC3\n    usecase \"Manage Listings\" as UC4\n    usecase \"Contact Pet Owner\" as UC5\n    usecase \"Filter Pets\" as UC6\n    usecase \"Specify Adoption or Sale Fee\" as UC7\n    usecase \"Read Reviews\" as UC8\n    usecase \"Verify Identity\" as UC9\n    usecase \"Receive Notifications\" as UC10\n    usecase \"Track Listing Stats\" as UC11\n    usecase \"Manage Payments\" as UC12\n    usecase \"View Health Records\" as UC13\n    usecase \"Schedule Meetings\" as UC14\n}\n\nPetSeeker --> UC1\nPetSeeker --> UC3\nPetSeeker --> UC5\nPetSeeker --> UC6\nPetSeeker --> UC7\nPetSeeker --> UC8\nPetSeeker --> UC9\nPetSeeker --> UC10\nPetSeeker --> UC13\n\nPetOwner --> UC2\nPetOwner --> UC4\nPetOwner --> UC5\nPetOwner --> UC7\nPetOwner --> UC8\nPetOwner --> UC9\nPetOwner --> UC11\nPetOwner --> UC13\nPetOwner --> UC14\n\nPetTrader --> UC12\n\n@enduml"
    },
    {
        "input": "1. As a student, I want to create a study schedule, so that I can plan my study sessions and manage my time effectively.\nAcceptance Criteria:\n - The app should allow the student to input their class schedule, assignment due dates, and exam dates.\n - The student should be able to set reminders and notifications for upcoming study sessions.\n\n2. As a student, I want to track my study progress, so that I can monitor my performance and stay on track with my goals.\nAcceptance Criteria:\n - The app should provide a section to log study hours, completed assignments, and grades.\n - The student should be able to view their progress in a visual format (e.g., charts, graphs).\n\n3. As a student, I want to set goals for each study session, so that I can focus on specific tasks and topics.\nAcceptance Criteria:\n - The app should allow the student to create study goals with details like subject, topic, and duration.\n - The student should be able to mark goals as completed and track their achievements.\n\n4. As a student, I want to access study resources and materials, so that I can review course content and prepare for exams.\nAcceptance Criteria:\n - The app should provide a library of study resources, including notes, textbooks, videos, and practice quizzes.\n - The student should be able to search for specific topics or subjects and save resources for later use.\n\n5. As a student, I want to collaborate with classmates on group projects, so that we can work together and share ideas.\nAcceptance Criteria:\n - The app should provide a feature for students to create or join study groups based on courses or subjects.\n - The student should be able to share files, messages, and collaborate on assignments with group members.\n\n6. As a student, I want to receive study tips and advice, so that I can improve my study habits and performance.\nAcceptance Criteria:\n - The app should provide a section with study tips, productivity techniques, and time management strategies.\n - The student should be able to browse articles, watch videos, or listen to podcasts on study-related topics.\n\n7. As a student, I want to track my study expenses, so that I can manage my budget and spending on study materials.\nAcceptance Criteria:\n - The app should allow the student to log expenses for textbooks, supplies, software, and other study-related items.\n - The student should be able to categorize expenses, set budgets, and view spending trends.\n\n8. As a student, I want to receive notifications for assignment deadlines and exam dates, so that I can stay organized and avoid missing important tasks.\nAcceptance Criteria:\n - The app should send reminders and notifications for upcoming assignment due dates, exam schedules, and study sessions.\n - The student should be able to customize notification settings and frequency.\n\n9. As a student, I want to track my study habits and productivity, so that I can identify areas for improvement and make adjustments.\nAcceptance Criteria:\n - The app should provide a feature to log study hours, breaks, distractions, and focus levels.\n - The student should be able to view analytics and reports on study habits, productivity trends, and performance metrics.\n\n10. As a student, I want to set up study challenges and rewards, so that I can stay motivated and engaged in my learning.\nAcceptance Criteria:\n - The app should allow the student to create study challenges with goals, milestones, and rewards.\n - The student should be able to track progress, earn points, and unlock achievements for completing challenges.\n Design a use case diagram for the above user stories.",
        "output": "@startuml\nleft to right direction\n\nactor Student\n\nrectangle StudyPlannerApp {\n    usecase \"Create Study Schedule\" as UC1\n    usecase \"Track Study Progress\" as UC2\n    usecase \"Set Study Goals\" as UC3\n    usecase \"Access Study Resources\" as UC4\n    usecase \"Collaborate with Classmates\" as UC5\n    usecase \"Receive Study Tips\" as UC6\n    usecase \"Track Study Expenses\" as UC7\n    usecase \"Receive Notifications\" as UC8\n    usecase \"Track Study Habits\" as UC9\n    usecase \"Set Study Challenges\" as UC10\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\nStudent --> UC6\nStudent --> UC7\nStudent --> UC8\nStudent --> UC9\nStudent --> UC10\n@enduml"
    },
    {
        "input": "1. As a fitness enthusiast, I want to create a workout plan, so that I can achieve my fitness goals and track my progress.\nAcceptance Criteria:\n - The app should allow the user to input their fitness goals, workout preferences, and available equipment.\n - The user should be able to create a customized workout plan with exercises, sets, reps, and rest intervals.\n\n2. As a fitness enthusiast, I want to track my workout sessions, so that I can monitor my performance and improve over time.\nAcceptance Criteria:\n - The app should provide a section to log workout details like exercises, weights, reps, and duration.\n - The user should be able to view workout history, progress charts, and performance metrics.\n\n3. As a fitness enthusiast, I want to set reminders for workout sessions, so that I can stay consistent and motivated.\nAcceptance Criteria:\n - The app should allow the user to schedule reminders for upcoming workout sessions based on their plan.\n - The user should receive notifications and alerts before each workout session.\n\n4. As a fitness enthusiast, I want to access workout routines and exercise guides, so that I can try new workouts and target different muscle groups.\nAcceptance Criteria:\n - The app should provide a library of workout routines, exercise guides, and video tutorials.\n - The user should be able to search for specific exercises, muscle groups, or fitness goals.\n\n5. As a fitness enthusiast, I want to track my nutrition and calorie intake, so that I can maintain a balanced diet and support my fitness goals.\nAcceptance Criteria:\n - The app should allow the user to log meals, snacks, and water intake throughout the day.\n - The user should be able to view nutritional information, calorie counts, and macronutrient breakdown.\n\n6. As a fitness enthusiast, I want to connect with other users, so that I can share workout tips, progress updates, and motivation.\nAcceptance Criteria:\n - The app should provide a social feature where users can follow, message, and share content with each other.\n - The user should be able to join or create fitness challenges, groups, or events.\n\n7. As a fitness enthusiast, I want to receive fitness tips and advice, so that I can improve my training techniques and reach my fitness goals.\nAcceptance Criteria:\n - The app should provide a section with fitness tips, workout plans, and nutrition advice from experts.\n - The user should be able to browse articles, watch videos, or listen to podcasts on fitness-related topics.\n\n8. As a fitness enthusiast, I want to track my body measurements and progress photos, so that I can see physical changes over time.\nAcceptance Criteria:\n - The app should allow the user to log body measurements (e.g., weight, body fat percentage, waist size) and take progress photos.\n - The user should be able to view progress photos side by side and track changes in body composition.\n\n9. As a fitness enthusiast, I want to set fitness challenges and goals, so that I can push myself and stay motivated in my fitness journey.\nAcceptance Criteria:\n - The app should allow the user to create fitness challenges with goals, milestones, and rewards.\n - The user should be able to track progress, earn points, and unlock achievements for completing challenges.\n\n10. As a fitness enthusiast, I want to find workout buddies or trainers, so that I can get support, guidance, and accountability in my fitness routine.\nAcceptance Criteria:\n - The app should provide a feature to connect with personal trainers, workout buddies, or fitness coaches.\n - The user should be able to search for trainers based on specialty, location, or availability. Design a use case diagram for the above user stories.",
        "output": "@startuml\nleft to right direction\n\nactor FitnessEnthusiast\n\nrectangle FitnessApp {\n    usecase \"Create Workout Plan\" as UC1\n    usecase \"Track Workout Sessions\" as UC2\n    usecase \"Set Workout Reminders\" as UC3\n    usecase \"Access Workout Routines\" as UC4\n    usecase \"Track Nutrition\" as UC5\n    usecase \"Connect with Users\" as UC6\n    usecase \"Receive Fitness Tips\" as UC7\n    usecase \"Track Body Measurements\" as UC8\n    usecase \"Set Fitness Challenges\" as UC9\n    usecase \"Find Workout Buddies\" as UC10\n}\n\nFitnessEnthusiast --> UC1\nFitnessEnthusiast --> UC2\nFitnessEnthusiast --> UC3\nFitnessEnthusiast --> UC4\nFitnessEnthusiast --> UC5\nFitnessEnthusiast --> UC6\nFitnessEnthusiast --> UC7\nFitnessEnthusiast --> UC8\nFitnessEnthusiast --> UC9\nFitnessEnthusiast --> UC10\n@enduml"
    },
    {
        "input": "1. As a traveler, I want to search for flights, hotels, and rental cars, so that I can plan my trip and make reservations.\nAcceptance Criteria:\n - The app should allow the user to search for flights by destination, dates, and preferences (e.g., direct flights, layovers).\n - The user should be able to compare prices, airlines, and departure times for different flight options.\n - The app should provide filters for hotel searches based on location, price range, amenities, and guest ratings.\n - The user should be able to view hotel details, room options, photos, and reviews before booking.\n - The app should allow the user to search for rental cars by location, dates, and vehicle type.\n - The user should be able to compare rental car prices, companies, and vehicle models.\n\n2. As a traveler, I want to book accommodations and transportation, so that I can secure my travel arrangements.\nAcceptance Criteria:\n - The app should provide a booking feature for flights, hotels, and rental cars with secure payment options.\n - The user should receive a confirmation email with booking details and reservation numbers.\n - The app should allow the user to view and manage their travel itinerary with flight, hotel, and car rental information.\n\n3. As a traveler, I want to receive travel alerts and notifications, so that I can stay informed about flight delays, gate changes, and other updates.\nAcceptance Criteria:\n - The app should send notifications for flight status updates, gate changes, boarding times, and baggage claim information.\n - The user should receive alerts for hotel check-in times, room availability, and booking confirmations.\n - The app should provide notifications for rental car pick-up locations, return instructions, and vehicle details.\n\n4. As a traveler, I want to access travel guides and recommendations, so that I can explore new destinations and plan activities.\nAcceptance Criteria:\n - The app should provide destination guides, local attractions, restaurants, and activities for popular travel destinations.\n - The user should be able to browse travel tips, reviews, and recommendations from other travelers.\n\n5. As a traveler, I want to track my travel expenses, so that I can manage my budget and spending during the trip.\nAcceptance Criteria:\n - The app should allow the user to log expenses for flights, accommodations, transportation, meals, and activities.\n - The user should be able to categorize expenses, set budgets, and view spending trends.\n\n6. As a traveler, I want to share my travel experiences and photos, so that I can document my trip and inspire others.\nAcceptance Criteria:\n - The app should provide a social feature where users can post photos, stories, and travel updates.\n - The user should be able to create travel journals, share itineraries, and connect with other travelers.\n\n7. As a traveler, I want to receive weather updates and travel advisories, so that I can prepare for changing conditions and stay safe.\nAcceptance Criteria:\n - The app should provide real-time weather forecasts, temperature alerts, and climate information for travel destinations.\n - The user should receive travel advisories, safety tips, and emergency contact information for each location.\n\n8. As a traveler, I want to find local services and amenities, so that I can locate restaurants, pharmacies, banks, and other essential facilities.\nAcceptance Criteria:\n - The app should provide a directory of local services, including restaurants, cafes, supermarkets, hospitals, and transportation options.\n - The user should be able to search for specific services, view locations on a map, and get directions.\n\n9. As a traveler, I want to access language translation and currency conversion tools, so that I can communicate and make transactions in foreign countries.\nAcceptance Criteria:\n - The app should provide language translation features for common phrases, greetings, and directions in multiple languages.\n - The user should be able to convert currency rates, calculate exchange rates, and view currency exchange trends. Design a use case diagram for the above user stories.",
        "output": "@startuml\nleft to right direction\n\nactor Traveler\n\nrectangle TravelApp {\n    usecase \"Search Flights\" as UC1\n    usecase \"Search Hotels\" as UC2\n    usecase \"Search Rental Cars\" as UC3\n    usecase \"Book Accommodations\" as UC4\n    usecase \"Receive Travel Alerts\" as UC5\n    usecase \"Access Travel Guides\" as UC6\n    usecase \"Track Travel Expenses\" as UC7\n    usecase \"Share Travel Experiences\" as UC8\n    usecase \"Receive Weather Updates\" as UC9\n    usecase \"Find Local Services\" as UC10\n    usecase \"Access Language Tools\" as UC11\n}\n\nTraveler --> UC1\nTraveler --> UC2\nTraveler --> UC3\nTraveler --> UC4\nTraveler --> UC5\nTraveler --> UC6\nTraveler --> UC7\nTraveler --> UC8\nTraveler --> UC9\nTraveler --> UC10\nTraveler --> UC11\n@enduml"
    },
    {
        "input": "1. As a foodie, I want to search for restaurants, cafes, and food trucks, so that I can discover new dining options and cuisines.\nAcceptance Criteria:\n - The app should allow the user to search for restaurants by location, cuisine type, price range, and ratings.\n - The user should be able to view restaurant details, menus, photos, and reviews before making a reservation.\n - The app should provide filters for cafe searches based on coffee type, ambiance, Wi-Fi availability, and opening hours.\n - The user should be able to explore food truck locations, menus, specialties, and customer ratings.\n\n2. As a foodie, I want to make restaurant reservations, so that I can secure a table and plan my dining experience.\nAcceptance Criteria:\n - The app should provide a reservation feature for restaurants, cafes, and food trucks with available time slots.\n - The user should receive a confirmation email with reservation details and booking instructions.\n - The app should allow the user to view and manage their dining reservations with reminders and notifications.\n\n3. As a foodie, I want to receive dining recommendations and reviews, so that I can explore popular eateries and dishes.\nAcceptance Criteria:\n - The app should provide dining recommendations, trending restaurants, and must-try dishes based on user preferences.\n - The user should be able to read reviews, ratings, and recommendations from other foodies and critics.\n\n4. As a foodie, I want to access food guides and culinary events, so that I can discover food festivals, cooking classes, and tasting tours.\nAcceptance Criteria:\n - The app should provide food guides, culinary events, and foodie experiences for different cities and regions.\n - The user should be able to browse food festivals, cooking workshops, and tasting events with dates, locations, and ticket information.\n\n5. As a foodie, I want to track my dining expenses, so that I can manage my budget and spending on food and dining experiences.\nAcceptance Criteria:\n - The app should allow the user to log expenses for dining out, food delivery, groceries, and cooking supplies.\n - The user should be able to categorize expenses, set budgets, and view spending trends.\n\n6. As a foodie, I want to share my dining experiences and food photos, so that I can document my culinary adventures and inspire others.\nAcceptance Criteria:\n - The app should provide a social feature where users can post food photos, restaurant reviews, and dining recommendations.\n - The user should be able to create food journals, share recipes, and connect with other foodies.\n\n7. As a foodie, I want to receive food alerts and promotions, so that I can stay updated on new menu items, discounts, and special offers.\nAcceptance Criteria:\n - The app should send notifications for new menu items, limited-time promotions, happy hour deals, and restaurant discounts.\n - The user should receive alerts for food delivery services, meal kits, and culinary events in their area.\n\n8. As a foodie, I want to find cooking classes and workshops, so that I can learn new recipes, techniques, and culinary skills.\nAcceptance Criteria:\n - The app should provide a directory of cooking classes, workshops, and culinary schools with course details and schedules.\n - The user should be able to search for classes based on cuisine type, skill level, and location. Please provide a use case diagram based on the given user stories.",
        "output": "@startuml\nleft to right direction\n\nactor Foodie\n\nrectangle FoodieApp {\n    usecase \"Search Restaurants\" as UC1\n    usecase \"Make Reservations\" as UC2\n    usecase \"Receive Recommendations\" as UC3\n    usecase \"Access Food Guides\" as UC4\n    usecase \"Track Dining Expenses\" as UC5\n    usecase \"Share Dining Experiences\" as UC6\n    usecase \"Receive Food Alerts\" as UC7\n    usecase \"Find Cooking Classes\" as UC8\n}\n\nFoodie --> UC1\nFoodie --> UC2\nFoodie --> UC3\nFoodie --> UC4\nFoodie --> UC5\nFoodie --> UC6\nFoodie --> UC7\nFoodie --> UC8\n@enduml"
    },
    {
        "input": "1. As a music lover, I want to search for artists, albums, and songs, so that I can discover new music and listen to my favorite tracks.\nAcceptance Criteria:\n - The app should allow the user to search for artists, albums, and songs by name, genre, release date, and popularity.\n - The user should be able to view artist profiles, discographies, album covers, and song previews.\n - The app should provide filters for music searches based on mood, tempo, language, and recommendations.\n\n2. As a music lover, I want to create playlists and mixtapes, so that I can organize my music collection and curate personalized listening experiences.\nAcceptance Criteria:\n - The app should allow the user to create playlists with custom titles, cover art, and track listings.\n - The user should be able to add, remove, and rearrange songs in playlists and mixtapes.\n - The app should provide recommendations for songs, artists, and genres to add to playlists.\n\n3. As a music lover, I want to listen to music offline, so that I can enjoy my favorite tracks without an internet connection.\nAcceptance Criteria:\n - The app should provide an offline mode feature that allows the user to download songs, albums, and playlists for offline listening.\n - The user should be able to access downloaded music without an internet connection or data usage.\n\n4. As a music lover, I want to receive music recommendations and personalized playlists, so that I can discover new artists and genres.\nAcceptance Criteria:\n - The app should provide music recommendations, personalized playlists, and curated mixes based on user listening habits.\n - The user should be able to explore new releases, trending tracks, and recommended artists.\n\n5. As a music lover, I want to track my listening history and music preferences, so that I can review my favorite tracks and genres.\nAcceptance Criteria:\n - The app should provide a listening history feature that displays recently played songs, albums, and artists.\n - The user should be able to view music preferences, top tracks, and genres based on listening habits.\n\n6. As a music lover, I want to share music with friends and followers, so that I can recommend songs, playlists, and artists.\nAcceptance Criteria:\n - The app should provide a social feature where users can share music, playlists, and artist profiles with friends and followers.\n - The user should be able to create collaborative playlists, share music links, and send recommendations to others.\n\n7. As a music lover, I want to attend live concerts and music events, so that I can experience live performances and support my favorite artists.\nAcceptance Criteria:\n - The app should provide event listings, concert schedules, and ticket information for live music events.\n - The user should be able to search for concerts by artist, venue, date, and location.\n\n8. As a music lover, I want to access music news and artist updates, so that I can stay informed about new releases, tours, and industry updates.\nAcceptance Criteria:\n - The app should provide music news, artist updates, and industry insights on new releases, tours, and music trends.\n - The user should be able to read articles, watch videos, and listen to podcasts on music-related topics. Give me a use case diagram based on the given user stories.",
        "output": "@startuml\nleft to right direction\n\nactor MusicLover\n\nrectangle MusicApp {\n    usecase \"Search Artists\" as UC1\n    usecase \"Create Playlists\" as UC2\n    usecase \"Listen Offline\" as UC3\n    usecase \"Receive Recommendations\" as UC4\n    usecase \"Track Listening History\" as UC5\n    usecase \"Share Music\" as UC6\n    usecase \"Attend Live Concerts\" as UC7\n    usecase \"Access Music News\" as UC8\n}\n\nMusicLover --> UC1\nMusicLover --> UC2\nMusicLover --> UC3\nMusicLover --> UC4\nMusicLover --> UC5\nMusicLover --> UC6\nMusicLover --> UC7\nMusicLover --> UC8\n@enduml"
    },
    {
        "input": "1. As a movie buff, I want to search for movies, actors, and genres, so that I can discover new films and explore different cinematic styles.\nAcceptance Criteria:\n - The app should allow the user to search for movies, actors, and genres by title, director, release year, and ratings.\n - The user should be able to view movie details, trailers, cast members, and reviews before watching.\n - The app should provide filters for movie searches based on language, genre, length, and recommendations.\n\n2. As a movie buff, I want to create watchlists and movie collections, so that I can organize my film library and plan my viewing schedule.\nAcceptance Criteria:\n - The app should allow the user to create watchlists with custom titles, cover art, and movie listings.\n - The user should be able to add, remove, and categorize movies in watchlists and collections.\n - The app should provide recommendations for movies, genres, and actors to add to watchlists.\n\n3. As a movie buff, I want to watch movies offline, so that I can enjoy my favorite films without an internet connection.\nAcceptance Criteria:\n - The app should provide an offline viewing feature that allows the user to download movies and TV shows for offline watching.\n - The user should be able to access downloaded content without an internet connection or data usage.\n\n4. As a movie buff, I want to receive movie recommendations and personalized watchlists, so that I can discover new directors and cinematic works.\nAcceptance Criteria:\n - The app should provide movie recommendations, personalized watchlists, and curated collections based on user viewing habits.\n - The user should be able to explore new releases, trending movies, and recommended directors.\n\n5. As a movie buff, I want to track my viewing history and movie preferences, so that I can review my favorite films and genres.\nAcceptance Criteria:\n - The app should provide a viewing history feature that displays recently watched movies, TV shows, and genres.\n - The user should be able to view movie preferences, top picks, and genres based on viewing habits.\n\n6. As a movie buff, I want to share movie reviews and recommendations, so that I can discuss cinematic works, actors, and genres with friends and followers.\nAcceptance Criteria:\n - The app should provide a social feature where users can share movie reviews, ratings, and watchlists with friends and followers.\n - The user should be able to create movie lists, share movie links, and send recommendations to others.\n\n7. As a movie buff, I want to attend film festivals and movie screenings, so that I can meet directors, attend Q&A sessions, and explore new releases.\nAcceptance Criteria:\n - The app should provide event listings, film festival schedules, and ticket information for movie screenings and director meetups.\n - The user should be able to search for film festivals by location, date, genre, and featured directors.\n\n8. As a movie buff, I want to access movie news and director updates, so that I can stay informed about new releases, film festivals, and industry updates.\nAcceptance Criteria:\n - The app should provide movie news, director updates, and industry insights on new releases, film festivals, and cinematic trends.\n - The user should be able to read articles, watch director interviews, and listen to podcasts on movie-related topics. Draw a use case diagram based on the given user stories.",
        "output": "@startuml\nleft to right direction\n\nactor MovieBuff\n\nrectangle MovieApp {\n    usecase \"Search Movies\" as UC1\n    usecase \"Create Watchlists\" as UC2\n    usecase \"Watch Offline\" as UC3\n    usecase \"Receive Recommendations\" as UC4\n    usecase \"Track Viewing History\" as UC5\n    usecase \"Share Reviews\" as UC6\n    usecase \"Attend Film Festivals\" as UC7\n    usecase \"Access Movie News\" as UC8\n}\n\nMovieBuff --> UC1\nMovieBuff --> UC2\nMovieBuff --> UC3\nMovieBuff --> UC4\nMovieBuff --> UC5\nMovieBuff --> UC6\nMovieBuff --> UC7\nMovieBuff --> UC8\n@enduml"
    },
    {
        "input": "1. As a bookworm, I want to search for books, authors, and genres, so that I can discover new reads and explore different literary styles.\nAcceptance Criteria:\n - The app should allow the user to search for books, authors, and genres by title, author name, release year, and ratings.\n - The user should be able to view book details, summaries, cover art, and reviews before reading.\n - The app should provide filters for book searches based on language, genre, length, and recommendations.\n\n2. As a bookworm, I want to create reading lists and book collections, so that I can organize my library and plan my reading schedule.\nAcceptance Criteria:\n - The app should allow the user to create reading lists with custom titles, cover art, and book listings.\n - The user should be able to add, remove, and categorize books in reading lists and collections.\n - The app should provide recommendations for books, genres, and authors to add to reading lists.\n\n3. As a bookworm, I want to read books offline, so that I can enjoy my favorite reads without an internet connection.\nAcceptance Criteria:\n - The app should provide an offline reading feature that allows the user to download books and articles for offline reading.\n - The user should be able to access downloaded content without an internet connection or data usage.\n\n4. As a bookworm, I want to receive book recommendations and personalized reading lists, so that I can discover new authors and literary works.\nAcceptance Criteria:\n - The app should provide book recommendations, personalized reading lists, and curated collections based on user reading habits.\n - The user should be able to explore new releases, trending books, and recommended authors.\n\n5. As a bookworm, I want to track my reading history and book preferences, so that I can review my favorite reads and genres.\nAcceptance Criteria:\n - The app should provide a reading history feature that displays recently read books, articles, and genres.\n - The user should be able to view book preferences, top picks, and genres based on reading habits.\n\n6. As a bookworm, I want to share book reviews and recommendations, so that I can discuss literary works, authors, and genres with friends and followers.\nAcceptance Criteria:\n - The app should provide a social feature where users can share book reviews, ratings, and reading lists with friends and followers.\n - The user should be able to create book lists, share book links, and send recommendations to others.\n\n7. As a bookworm, I want to attend book fairs and literary events, so that I can meet authors, attend book signings, and explore new releases.\nAcceptance Criteria:\n - The app should provide event listings, book fair schedules, and ticket information for literary events and author meetups.\n - The user should be able to search for book fairs by location, date, genre, and featured authors.\n\n8. As a bookworm, I want to access book news and author updates, so that I can stay informed about new releases, book signings, and industry updates.\nAcceptance Criteria:\n - The app should provide book news, author updates, and industry insights on new releases, book signings, and literary trends.\n - The user should be able to read articles, watch author interviews, and listen to podcasts on book-related topics. Draw a use case diagram based on the given user stories.",
        "output": "@startuml\nleft to right direction\n\nactor Bookworm\n\nrectangle BookApp {\n    usecase \"Search Books\" as UC1\n    usecase \"Create Reading Lists\" as UC2\n    usecase \"Read Offline\" as UC3\n    usecase \"Receive Recommendations\" as UC4\n    usecase \"Track Reading History\" as UC5\n    usecase \"Share Reviews\" as UC6\n    usecase \"Attend Book Fairs\" as UC7\n    usecase \"Access Book News\" as UC8\n}\n\nBookworm --> UC1\nBookworm --> UC2\nBookworm --> UC3\nBookworm --> UC4\nBookworm --> UC5\nBookworm --> UC6\nBookworm --> UC7\nBookworm --> UC8\n@enduml"
    },
    {
        "input": "1. As a deaf user, I want to use my device’s camera to sign words, so that the app can convert them into text.\nAcceptance Criteria:\n - The app should use the device's camera to recognize sign language gestures in real time.\n - The app should accurately convert the recognized signs into text.\n - The app should allow users to adjust the camera angle for better recognition.\n\n2. As a user, I want to type text into the app, so that it can be converted into sign language using an animated avatar.\nAcceptance Criteria:\n - The app should have a text input field where users can type their messages.\n - The app should display an avatar that performs the corresponding sign language gestures for the typed text.\n - The conversion should happen in real time with smooth avatar animations.\n\n3. As a user, I want to be able to switch between different sign languages (e.g., ASL, BSL), so that I can use the app according to my preferred sign language.\nAcceptance Criteria:\n - The app should offer a selection of sign languages such as ASL, BSL, or others.\n - The user should be able to select their preferred sign language from a settings menu.\n - The avatar or text recognition should change according to the selected sign language.\n\n4. As a deaf user, I want to save my signed messages as text, so that I can refer to them later.\nAcceptance Criteria:\n - The app should provide an option to save the converted text from the sign language.\n - The saved text should be stored in a history section within the app for future reference.\n\n5. As a user, I want to adjust the speed of the avatar's signing, so that I can follow the gestures at my own pace.\nAcceptance Criteria:\n - The app should provide a slider or option to adjust the speed of the avatar's sign language gestures.\n - The speed setting should be applied in real time and affect the avatar's signing animation accordingly.\n\n6. As a user, I want to upload a video of someone signing, so that the app can convert it into text for me.\nAcceptance Criteria:\n - The app should allow users to upload videos containing sign language gestures.\n - The app should analyze the video and convert the recognized signs into text.\n - The converted text should be displayed on the app with an option to save or share.\n\n7. As a user, I want to be able to share my signed messages and their text conversion with others, so that I can communicate effectively.\nAcceptance Criteria:\n - The app should provide sharing options for both the signed video and its text translation.\n - The user should be able to share the messages via social media, messaging apps, or email.\n\n8. As a user, I want the app to display suggestions or corrections if the sign language input is unclear, so that I can improve the accuracy of the conversion.\nAcceptance Criteria:\n - The app should notify users when a sign language gesture is not recognized clearly.\n - The app should suggest similar signs or prompt the user to retry signing the word.\n\n9. As a deaf user, I want to be able to use voice-to-sign conversion, so that I can see spoken words translated into sign language in real time.\nAcceptance Criteria:\n - The app should provide a voice input option that converts spoken words into sign language gestures by the avatar.\n - The avatar should display the corresponding sign language gestures in real time as the speech is recognized.\n\n10. As a user, I want to receive feedback on my signing accuracy, so that I can improve my sign language skills.\nAcceptance Criteria:\n - The app should analyze the user’s signing accuracy based on predefined sign language rules.\n - The app should provide real-time feedback or a summary of errors and suggestions for improvement.\n\n11. As a parent of a deaf child, I want to use the app to learn sign language through text input and avatar demonstrations, so that I can communicate better with my child.\nAcceptance Criteria:\n - The app should have a learning mode where users can input text and see the avatar perform the corresponding signs.\n - The app should provide visual aids and tutorials for learning new signs or phrases.\n\n12. As a user, I want to access a dictionary of common signs, so that I can quickly learn their meanings and how to perform them.\nAcceptance Criteria:\n - The app should include a built-in sign language dictionary with videos or avatar demonstrations of each sign.\n - The user should be able to search for signs by word or phrase and see an avatar demonstrate the sign.\n\n13. As a developer, I want the app to be accessible for users with different abilities, so that everyone can use the app comfortably.\nAcceptance Criteria:\n - The app should follow accessibility guidelines (e.g., large fonts, color contrast) for users with visual or physical disabilities.\n - The app should provide voice-over support and easy-to-navigate interfaces.\n\n14. As a user, I want to be able to use the app offline, so that I can convert sign language to text or text to sign without an internet connection.\nAcceptance Criteria:\n - The app should allow users to perform basic sign-to-text and text-to-sign conversions without internet access.\n - The offline mode should still provide accurate conversions and avatar animations for sign language gestures. Give me a use case diagram for this app.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle SignLanguageApp {\n    usecase \"Use Camera for Sign Recognition\" as UC1\n    usecase \"Type Text for Sign Conversion\" as UC2\n    usecase \"Switch Sign Languages\" as UC3\n    usecase \"Save Signed Messages\" as UC4\n    usecase \"Adjust Avatar Speed\" as UC5\n    usecase \"Upload Sign Language Video\" as UC6\n    usecase \"Share Signed Messages\" as UC7\n    usecase \"Display Suggestions for Unclear Signs\" as UC8\n    usecase \"Voice-to-Sign Conversion\" as UC9\n    usecase \"Receive Signing Feedback\" as UC10\n    usecase \"Learn Sign Language\" as UC11\n    usecase \"Access Sign Language Dictionary\" as UC12\n    usecase \"Manage Signed Messages\" as UC13\n    usecase \"Use App Offline\" as UC14\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUC13 ..> UC4: <<extend>>\nUser --> UC5\nUser --> UC6\nUC13 ..> UC7: <<extend>>\nUC10 ..> UC8: <<extend>>\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUC11 ..> UC12: <<extend>>\nUser --> UC13\nUser --> UC14\n@enduml"
    },
    {
        "input": "1. As a One Stop Admin, I want to have centralized dashboard for all my tasks so that I can oversee all degree issuance activities and timely complete my responsibilities.\n2. As a One Stop Admin, I want to generate tokens for each student request and complaint, so that each query is uniquely identified and efficiently managed.\n3. As a One Stop Admin, I want to manage all pending, processed, and new degree and transcript requests, so that I can ensure timely responses and prioritize tasks.\n4. As a One Stop Admin, I want to manage student complaints, so that I can respond and resolve them in a timely manner for students.\n5. As a One Stop Admin, I want to generate and issue digital degrees to students, so that graduates receive their degrees promptly and statuses are updated.\n6. As a One Stop Admin, I want access to all student academic records, so that I can generate degrees and transcripts with correct credentials.\n7. As a One Stop Admin, I want to generate and issue student transcripts, so that graduates receive comprehensive academic records.\n8. As a One Stop Admin, I want to inform students of objections from FYP or Finance Department, so that they can address issues preventing degree issuance.\n9. As a One Stop Admin, I want to verify student information and eligibility for degree issuance, so that degrees are issued accurately to eligible students.\n10. As a One Stop Admin, I want to process requests in batches, so that I can efficiently manage peak times such as the end of an academic term.\n11. As a One Stop Admin, I want to generate reports and analytics, so that I can identify patterns, monitor system efficiency, and recognize areas for improvement.\n12. As a Student, I want to submit my degree issuance form, so that I can formally request the issuance of my degree from the university.\n13. As a Student, I want to file a complaint for errors in my documents, so that I can ensure the accuracy of my academic records.\n14. As a Student, I want to track the activity of my degree issuance request, so that I can stay informed about its progress.\n15. As a Student, I want to receive a notification when my degree is ready for collection or delivery, so that I can obtain it for further academic or professional purposes.\n16. As a member of the FYP Department, I want to notify students about the status of their degree issuance requests, so that they can be informed about the progress.\n17. As a member of the FYP Department, I want to provide a decision on degree issuance requests, so that the requests can be processed accordingly.\n18. As a member of the FYP Department, I want to track the time taken to process degree issuance requests, so that we can monitor and improve our efficiency.\n19. As a member of the FYP Department, I want to review all details provided by students in their degree issuance requests, so that I can make informed decisions.\n20. As a member of the FYP Department, I want to collaborate with the Finance Department regarding financial aspects of degree issuance, so that I can ensure all financial requirements are met.\n21. As a Finance Accountant, I want to access notifications for student degree issuance requests, so that I can verify their credentials and respond accordingly.\n22. As a Finance Accountant, I want to search for a student’s financial records by roll number, so that I can look up outstanding dues.\n23. As a Finance Accountant, I want to check if a student has submitted the degree issuance fee, so that I can ensure eligibility for degree collection.\n24. As a Finance Accountant, I want to add comments regarding a student’s eligibility for degree collection, so that the student is informed about clearance issues.\n25. As a Finance Accountant, I want to update the student’s status to eligible after dues are cleared, so that degrees are issued without delay.\n26. As a Campus Director, I want to view all requests generated throughout the day, so that I can monitor the internal operations of the One Stop system.\n27. As a Campus Director, I want to view all requests made directly to me, so that I can respond quickly and pass orders accordingly.\n28. As a Campus Director, I want to view the Time Taken to Respond (TTR) metrics for each request, so that I can identify system weaknesses and ensure prompt query handling.\n29. As a Campus Director, I want to get notified for the initiation of request processing by the One Stop Admin, so that I can stay informed about the progress.\n30. As a Campus Director, I want to review fee clearance requests sent to students, so that I can ensure timely updates and smooth financial processing.\n Design a use case diagram for the above user stories.",
        "output": "@startuml left to right direction actor OneStopAdmin actor Student actor FYPDepartment actor FinanceAccountant actor CampusDirector rectangle DegreeIssuanceSystem { usecase \"Access Centralized Dashboard\" as UC1 usecase \"Generate Tokens\" as UC2 usecase \"Manage Requests\" as UC3 usecase \"Manage Complaints\" as UC4 usecase \"Issue Digital Degrees\" as UC5 usecase \"Access Academic Records\" as UC6 usecase \"Issue Transcripts\" as UC7 usecase \"Inform Students of Objections\" as UC8 usecase \"Verify Student Information\" as UC9 usecase \"Process Requests in Batches\" as UC3A usecase \"Generate Reports\" as UC11 usecase \"Submit Degree Issuance Form\" as UC12 usecase \"File Complaint\" as UC13 usecase \"Track Request Activity\" as UC14 usecase \"Receive Notification\" as UC15 usecase \"Notify Students\" as UC16 usecase \"Provide Decision\" as UC17 usecase \"Track Processing Time\" as UC18 usecase \"Review Student Details\" as UC19 usecase \"Collaborate with Finance\" as UC20 usecase \"Search Financial Records\" as UC22 usecase \"Check Degree Issuance Fee\" as UC23 usecase \"Add Comments\" as UC24 usecase \"Update Student Status\" as UC25 usecase \"View Daily Requests\" as UC26 usecase \"View Direct Requests\" as UC27 usecase \"View TTR Metrics\" as UC28 usecase \"Review Fee Clearance\" as UC30 } OneStopAdmin --> UC1 OneStopAdmin --> UC2 OneStopAdmin --> UC3 OneStopAdmin --> UC4 OneStopAdmin --> UC5 OneStopAdmin --> UC6 OneStopAdmin --> UC7 OneStopAdmin --> UC8 OneStopAdmin --> UC9 UC3 ..> UC3A: <<extend>> OneStopAdmin --> UC11 Student --> UC12 Student --> UC13 Student --> UC14 Student --> UC15 FYPDepartment --> UC16 FYPDepartment --> UC17 FYPDepartment --> UC18 FYPDepartment --> UC19 FYPDepartment --> UC20 FinanceAccountant --> UC15 FinanceAccountant --> UC22 FinanceAccountant --> UC23 FinanceAccountant --> UC24 FinanceAccountant --> UC25 CampusDirector --> UC26 CampusDirector --> UC27 CampusDirector --> UC28 CampusDirector --> UC15 CampusDirector --> UC30 @enduml"
    },
    {
        "input": "1. As a user, I want to search for products by category, brand, and price range, so that I can find the items I need.\nAcceptance Criteria:\n - The app should allow users to search for products by category, brand, and price range.\n - The user should be able to filter search results based on product features, ratings, and availability.\n\n2. As a user, I want to view product details, images, descriptions, and reviews, so that I can make informed purchase decisions.\nAcceptance Criteria:\n - The app should display detailed product information, including images, descriptions, specifications, and customer reviews.\n - The user should be able to zoom in on product images, read reviews, and compare similar products.\n\n3. As a user, I want to add products to my shopping cart, so that I can save items for later purchase.\nAcceptance Criteria:\n - The app should allow users to add products to their shopping cart with quantity selection.\n - The user should be able to view and edit the items in their shopping cart before checkout.\n\n4. As a user, I want to create a user account, so that I can save my personal information, payment details, and order history.\nAcceptance Criteria:\n - The app should provide a user registration feature with fields for personal information, email, password, and payment details.\n - The user should be able to log in, update their profile, and view their order history.\n\n5. As a user, I want to receive order confirmation emails, shipping updates, and delivery notifications, so that I can track my purchases.\nAcceptance Criteria:\n - The app should send order confirmation emails with details of the purchase, payment, and shipping address.\n - The user should receive shipping updates, tracking numbers, and delivery notifications for their orders.\n\n6. As a user, I want to track my order status, so that I can monitor the progress of my purchases and estimated delivery dates.\nAcceptance Criteria:\n - The app should provide an order tracking feature where users can check the status of their orders.\n - The user should be able to view order details, shipping updates, and estimated delivery dates.\n\n7. As a user, I want to leave product reviews and ratings, so that I can share my feedback with other shoppers and help them make informed decisions.\nAcceptance Criteria:\n - The app should allow users to leave reviews and ratings for products they have purchased.\n - The user should be able to rate products, write detailed reviews, and upload photos of their purchases.\n\n8. As a user, I want to receive personalized product recommendations, discounts, and promotions, so that I can discover new items and save money.\nAcceptance Criteria:\n - The app should provide personalized product recommendations based on user browsing history, purchase behavior, and preferences.\n - The user should receive discounts, promotions, and exclusive offers tailored to their interests and shopping habits.\n\n9. As a user, I want to contact customer support, so that I can get assistance with product inquiries, order issues, and returns.\nAcceptance Criteria:\n - The app should provide customer support contact options such as live chat, email, phone, or help center.\n - The user should be able to reach out to customer support for product inquiries, order tracking, and return requests.\n\n10. As a user, I want to view my purchase history, so that I can track my spending, review past orders, and reorder items.\nAcceptance Criteria:\n - The app should display a purchase history section where users can view past orders, order details, and order statuses.\n - The user should be able to reorder items, track spending, and review previous purchases.\n\n11. As a user, I want to share product links and recommendations with friends and family, so that I can suggest items and gift ideas.\nAcceptance Criteria:\n - The app should provide sharing options for product links, reviews, and recommendations on social media, messaging apps, or email.\n - The user should be able to share products, wishlists, and gift ideas with friends and family.\n\n12. As a user, I want to save products to my wishlist, so that I can keep track of items I want to purchase in the future.\nAcceptance Criteria:\n - The app should allow users to save products to a wishlist for future reference and easy access.\n - The user should be able to create multiple wishlists, add or remove items, and share wishlists with others.\n\n13. As a user, I want to receive notifications for price drops, restocks, and new arrivals, so that I can stay updated on product availability and sales.\nAcceptance Criteria:\n - The app should send notifications for price drops, restocks, and new arrivals for products saved in the user's wishlist.\n - The user should receive alerts for limited-time sales, promotions, and exclusive offers on wishlist items.\n\n14. As a user, I want to participate in loyalty programs and earn rewards for purchases, so that I can save money and receive exclusive benefits.\nAcceptance Criteria:\n - The app should offer a loyalty program where users can earn points, discounts, and rewards for purchases.\n - The user should be able to redeem points, access exclusive benefits, and participate in special promotions.\n\n15. As a user, I want to customize my shopping preferences, so that I can receive personalized recommendations and offers.\nAcceptance Criteria:\n - The app should allow users to customize their shopping preferences, such as favorite categories, brands, and price ranges.\n - The user should be able to update their preferences, receive tailored recommendations, and adjust notification settings.\n\n16. As a user, I want to access a secure payment gateway, so that I can make purchases with confidence and protect my financial information.\nAcceptance Criteria:\n - The app should provide a secure payment gateway for online transactions with encryption and fraud protection.\n - The user should be able to choose from multiple payment options, save payment methods, and securely complete purchases.\n\n17. As a user, I want to view product availability and delivery options, so that I can choose the most convenient shipping method.\nAcceptance Criteria:\n - The app should display product availability, delivery estimates, and shipping options for each item.\n - The user should be able to select delivery preferences, track shipments, and receive notifications for order updates.\n\n18. As a user, I want to access a user-friendly interface and seamless navigation, so that I can easily browse products, place orders, and manage my account.\nAcceptance Criteria:\n - The app should have a user-friendly interface with intuitive navigation, clear categories, and easy access to features.\n - The user should be able to browse products, search for items, place orders, and manage their account settings without difficulty.\n\n19. As a user, I want to view size guides, product measurements, and fit recommendations, so that I can choose the right size and style for clothing and footwear.\nAcceptance Criteria:\n - The app should provide size guides, product measurements, and fit recommendations for clothing, footwear, and accessories.\n - The user should be able to view size charts, fit tips, and customer reviews to make informed decisions about sizing and styling.\n\n20. As a user, I want to access a seamless checkout process with order summary, payment options, and shipping details, so that I can complete purchases quickly and securely.\nAcceptance Criteria:\n - The app should provide a seamless checkout process with an order summary, payment options, and shipping details on a single page.\n - The user should be able to review their order, select payment methods, enter shipping details, and complete purchases with ease.\n\n21. As a user, I want to receive order confirmation emails, invoices, and receipts, so that I can keep track of my purchases and payments.\nAcceptance Criteria:\n - The app should send order confirmation emails with order details, payment summaries, and shipping information.\n - The user should receive invoices, receipts, and order confirmations for their purchases via email or app notifications.\n\n22. As a user, I want to provide feedback on product quality, customer service, and overall shopping experience, so that I can help the company improve and assist other shoppers.\nAcceptance Criteria:\n - The app should allow users to provide feedback on product quality, customer service, and shopping experience through ratings, reviews, and surveys.\n - The user should be able to share feedback, suggestions, and complaints to help the company improve its products and services.\n\n23. As a user, I want to access a help center, FAQs, and customer support options, so that I can get assistance with common issues and inquiries.\nAcceptance Criteria:\n - The app should provide a help center with FAQs, tutorials, and customer support contact options.\n - The user should be able to access self-help resources, contact customer support, and find answers to common questions.\n\n24. As a user, I want to view order history, track shipments, and manage returns, so that I can stay informed about my purchases and resolve any issues.\nAcceptance Criteria:\n - The app should display order history, shipment tracking, and return options for users to manage their purchases.\n - The user should be able to view past orders, track shipments, initiate returns, and contact customer support for assistance.\n\n25. As a user, I want to access a dark mode feature, so that I can reduce eye strain and improve readability during nighttime browsing.\nAcceptance Criteria:\n - The app should provide a dark mode feature that changes the color scheme to dark backgrounds and light text.\n - The user should be able to enable or disable dark mode in the app settings for improved readability and reduced eye strain.\n\n26. As a user, I want to receive notifications for flash sales, limited-time offers, and exclusive deals, so that I can take advantage of discounts and promotions.\nAcceptance Criteria:\n - The app should send notifications for flash sales, limited-time offers, and exclusive deals on products of interest.\n - The user should receive alerts for time-sensitive promotions, discounts, and special offers to maximize savings.\n\n27. As a user, I want to access a barcode scanner feature, so that I can scan product barcodes for quick access to product details and pricing.\nAcceptance Criteria:\n - The app should provide a barcode scanner feature that uses the device's camera to scan product barcodes.\n - The user should be able to scan barcodes to view product details, pricing, availability, and customer reviews.\n\n28. As a user, I want to view product recommendations based on my browsing history and preferences, so that I can discover new items and trends.\nAcceptance Criteria:\n - The app should provide personalized product recommendations based on user browsing history, search queries, and preferences.\n - The user should see recommended products, similar items, and trending categories to explore new items and styles.\n\n29. As a user, I want to access a voice search feature, so that I can search for products using voice commands and hands-free navigation.\nAcceptance Criteria:\n - The app should provide a voice search feature that allows users to search for products using voice commands.\n - The user should be able to use voice search for product queries, category searches, and navigation within the app.\n\n30. As a user, I want to access a live chat support option, so that I can get real-time assistance with product inquiries, order tracking, and technical issues.\nAcceptance Criteria:\n - The app should provide a live chat support option for users to connect with customer support agents in real time.\n - The user should be able to chat with support representatives, ask questions, and get immediate assistance with product or order-related issues.\n\n Give me a use case diagram for this e-commerce app.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle ECommerceApp {\n    usecase \"Search Products\" as UC1\n    usecase \"View Product Details\" as UC2\n    usecase \"Add to Shopping Cart\" as UC3\n    usecase \"Create User Account\" as UC4\n    usecase \"Receive Order Notifications\" as UC5\n    usecase \"Track Order Status\" as UC6\n    usecase \"Leave Reviews\" as UC7\n    usecase \"Receive Recommendations\" as UC8\n    usecase \"Contact Customer Support\" as UC9\n    usecase \"View Purchase History\" as UC10\n    usecase \"Share Product Links\" as UC11\n    usecase \"Save to Wishlist\" as UC12\n    usecase \"Receive Notifications\" as UC13\n    usecase \"Participate in Loyalty Programs\" as UC14\n    usecase \"Customize Shopping Preferences\" as UC15\n    usecase \"Access Secure Payment Gateway\" as UC16\n    usecase \"View Product Availability\" as UC17\n    usecase \"User-Friendly Interface\" as UC18\n    usecase \"View Size Guides\" as UC19\n    usecase \"Checkout\" as UC20\n    usecase \"Receive Order Confirmations\" as UC21\n    usecase \"Provide Feedback\" as UC22\n    usecase \"Access Help Center\" as UC23\n    usecase \"View Order History\" as UC24\n    usecase \"Access Dark Mode\" as UC25\n    usecase \"Receive Flash Sale Notifications\" as UC26\n    usecase \"Access Barcode Scanner\" as UC27\n    usecase \"View Product Recommendations\" as UC28\n    usecase \"Access Voice Search\" as UC29\n    usecase \"Access Live Chat Support\" as UC30\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\nUser --> UC10\nUser --> UC11\nUser --> UC12\nUser --> UC13\nUser --> UC14\nUser --> UC15\nUser --> UC16\nUser --> UC17\nUser --> UC18\nUser --> UC19\nUser --> UC20\nUser --> UC21\n User --> UC22\nUser --> UC23\nUser --> UC24\nUser --> UC25\nUser --> UC26\nUser --> UC27\nUser --> UC28\nUser --> UC29\nUser --> UC30\n@enduml"
    },
    {
        "input": "Design a use case diagram for the following user stories for Webmed Healthcare System:\n\n1. As a patient or caregiver, I want to register on the platform, so that I can access healthcare services.\n2. As a user, I want to log in securely, so that I can access the system's features.\n3. As a user, I want to explore different healthcare facilities and services, so that I can choose the appropriate service for my needs.\n4. As a user, I want access to a finance module focused on purchasing insurance, so that I can ensure financial coverage for healthcare.\n5. As a user, I want to access comprehensive information about diseases and symptoms under a Health A-Z feature, so that I can stay informed about health conditions.\n6. As a user, I want access to resources like a symptom checker, health calculator, and a function to find doctors by location, so that I can manage my healthcare needs effectively.\n7. As a user, I want access to an online medicine delivery option under the drugs and supplements section, so that I can conveniently get medications.\n8. As a user, I want to make payments through a module for reimbursing providers, so that I can pay for healthcare services.\n9. As a user, I want to provide feedback, so that the platform can improve the quality of services.\n10. As a user, I want a logout feature, so that I can securely exit the platform.\n11. As a user, I want access to a bulletin with news, health awareness, and information on experts and counseling programs, so that I can stay updated.\n12. As a user, I want access to health insurance guides and ambulance services under the resources section, so that I can better manage my healthcare emergencies and insurance needs.",
        "output": "@startuml\nleft to right direction\n\nactor ServiceProvider\nactor User\n\nrectangle WebMedSystem {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Use Facilities\" as UC3\n    usecase \"Access Finance\" as UC4\n    usecase \"Access Health A-Z\" as UC5\n    usecase \"Use Resources\" as UC6\n    usecase \"Do Payment\" as UC7\n    usecase \"Give Feedback\" as UC8\n    usecase \"Logout\" as UC9\n    usecase \"Access News And Experts\" as UC10\n    usecase \"Get Drugs And Supplements\" as UC11\n}\n\nServiceProvider --> UC6\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC9\nUser --> UC7\nUser --> UC6\nUser --> UC10\nUser --> UC11\nUser --> UC5\nUser --> UC4\n\nUC7 ..> UC8 : <<extend>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for the following user stories of the Online Examination System:\n\n1. As a student, I want to register and create an account, so that I can take exams online.\n2. As a teacher, I want to create exams and set questions, so that I can assess my students' knowledge.\n3. As a student, I want to take exams online, so that I can complete my assessments from anywhere.\n4. As a student, I want the system to generate results for the exams I take, so that I can see my performance.\n5. As a teacher, I want the system to provide exam analysis, including performance review and insights, so that I can evaluate student performance and improve the assessment process.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Teacher\n\nrectangle OnlineExaminationSystem {\n    usecase \"Register\" as UC1\n    usecase \"Create Exam\" as UC2\n    usecase \"Take Exam\" as UC3\n    usecase \"Generate Result\" as UC4\n    usecase \"Analyze Exam\" as UC5\n}\n\nStudent --> UC1\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\n\nTeacher --> UC2\n\nUC3 ..> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for the following user stories of the Online Voting System:\n\n1. As a citizen, I want to register as a voter, so that I can participate in online elections.\n2. As a candidate, I want to register for elections, so that I can run for office and receive votes.\n3. As a registered voter, I want to cast my vote online, so that I can contribute to the election process from anywhere.\n4. As a citizen, I want the system to generate election results based on the votes cast, so that I can see the outcome of the elections.\n5. As an election administrator, I want the system to provide analysis of the votes, including voter turnout and demographics, so that I can assess the election process and voter participation.",
        "output": "@startuml\nleft to right direction\n\nactor Citizen\nactor Candidate\n\nrectangle OnlineVotingSystem {\n    usecase \"Register as Voter\" as UC1\n    usecase \"Register as Candidate\" as UC2\n    usecase \"Cast Vote\" as UC3\n    usecase \"Generate Result\" as UC4\n    usecase \"Analyze Votes\" as UC5\n}\n\nCitizen --> UC1\nCitizen --> UC3\nCitizen --> UC4\nCitizen --> UC5\n\nCandidate --> UC2\n\nUC3 ..> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for the following User stories of the E-Ticketing System for Buses:\n\n1. As a customer, I want to register and create an account, so that I can book bus tickets online.\n2. As a customer, I want to make bus reservations and purchase tickets, so that I can secure my travel plans.\n3. As a customer, I want to cancel my reservations, so that I can adjust my travel plans when needed.\n4. As a customer, I want to pay for tickets online securely through bank transactions, so that I can finalize my booking.\n5. As a customer, I want to check the status of my reservations and buses, so that I stay informed about my travel.\n6. As a customer, I want to edit my profile and manage my account, so that I can keep my information up to date.\n7. As an admin, I want to manage user accounts, including deleting accounts, so that I can maintain the platform efficiently.\n8. As a manager, I want to update and manage routes, bus schedules, vehicle records, and payment information, so that I can ensure smooth operations.\n9. As a manager, I want the system to generate reports related to bus reservations, payments, and cancellations, so that I can analyze the system's performance.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Manager\n\nrectangle BusE-TicketingSystem {\n    usecase \"Registration\" as UC1\n    usecase \"Make Reservation\" as UC2\n    usecase \"Cancellation\" as UC3\n    usecase \"Do Payment\" as UC4\n    usecase \"Check Status\" as UC5\n    usecase \"Edit Profile\" as UC6\n    usecase \"Delete Account\" as UC7\n    usecase \"Manage Transactions\" as UC8\n    usecase \"Update Routes\" as UC9\n    usecase \"Update Bus Schedules\" as UC10\n    usecase \"Update Vehicle Records\" as UC11\n    usecase \"Update User Credentials\" as UC12\n    usecase \"Manage Account\" as UC13\n    usecase \"Generate Reports\" as UC14\n}\n\nCustomer --> UC1\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC13\nCustomer --> UC2\n\nManager --> UC8\nManager --> UC9\nManager --> UC10\nManager --> UC11\nManager --> UC14\n\nactor Admin <<secondary>>\n\nAdmin --> UC10\nAdmin --> UC12\nAdmin --> UC7\n\nUC4 ..> UC3 : <<extend>>\nUC13 ..> UC7 : <<extend>>\nUC13 ..> UC6 : <<extend>>\n@enduml"
    },
    {
        "input": "Design a use case diagram for the following User stories of the Weather Monitoring System:\n\n1. As a user, I want to check the current weather status, so that I can stay informed about temperature, humidity, rainfall, pressure, and dew point.\n2. As a user, I want to receive live updates of weather data, so that I can view real-time weather information.\n3. As a user, I want to receive alerts with tips and warnings, so that I can stay safe during certain weather conditions.\n4. As a user, I want to view weather data in graphical form, so that I can easily analyze temperature variations.\n5. As a user, I want the system to predict the weather for the next few days, so that I can plan accordingly based on current and past data.\n6. As a user, I want to see a weekly analysis of the weather, so that I can understand trends like average, highest, and lowest temperatures.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle WeatherMonitoringSystem {\n    usecase \"Check Weather Status\" as UC1\n    usecase \"Live Update\" as UC2\n    usecase \"Get Alerts\" as UC3\n    usecase \"Generate Graphical Representation\" as UC4\n    usecase \"Predict Future Weather\" as UC5\n    usecase \"Weekly Analysis\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\n\nUC1 ..> UC2 : <<extend>>\nUC4 ..> UC5 : <<extend>>\n@enduml"
    },
    {
        "input": "Provide a use case diagram for the following User Stories of the Online Shopping System:\n\n1. As a user, I want to register and create an account, so that I can access the shopping platform.\n2. As a user, I want to view the product catalog, so that I can browse available products for purchase.\n3. As a user, I want to add products to my shopping cart, so that I can purchase them later.\n4. As a user, I want to make payments for my purchases, so that I can complete my transactions securely.\n5. As a user, I want to view my order history, so that I can keep track of my past orders.\n6. As a user, I want to contact customer support, so that I can ask queries or report issues regarding my purchases.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle OnlineShoppingSystem {\n    usecase \"Register\" as UC1\n    usecase \"View Products\" as UC2\n    usecase \"Add To Cart\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"View Order History\" as UC5\n    usecase \"Contact Support\" as UC6\n    usecase \"Provide Support\" as UC7\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n\nSupport --> UC7\nUC6 ..> UC7 : <<include>>\n@enduml"
    },
    {
        "input": "Provide a use case diagram for the following user stories of the Library Management System:\n\n1. As a user, I want to register and create an account, so that I can access the library system.\n2. As a user, I want to view the catalog of available books, so that I can browse and choose books to borrow.\n3. As a user, I want to borrow books from the library, so that I can read them.\n4. As a user, I want to return borrowed books, so that I can complete my borrowing process.\n5. As a user, I want to renew borrowed books, so that I can extend the borrowing period.\n6. As a librarian, I want to calculate late fees, so that I can charge users for overdue books.",
        "output": "@startuml\nleft to right direction\n\nactor Librarian\nactor User\n\nrectangle LibraryManagementSystem {\n    usecase \"Register\" as UC1\n    usecase \"View Books\" as UC2\n    usecase \"Borrow Book\" as UC3\n    usecase \"Return Book\" as UC4\n    usecase \"Renew Book\" as UC5\n    usecase \"Calculate Late Fee\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\n\nLibrarian -right-> UC6\n\nUC5 ..> UC6 : <<include>>\n@enduml"
    },
    {
        "input": "Provide a use case diagram for the following user stories of the e-Province system:\n\n1. As a citizen, I want to register for an account, so that I can access government services.\n2. As a citizen, I want to log in using my unique application number and approved status, so that I can use the system securely.\n3. As a citizen, I want to apply for government certificates like birth/death certificates, income, and caste certificates, so that I can receive official documents.\n4. As an admin, I want to issue certificates to citizens, so that they can receive their required documents.\n5. As a citizen, I want to manage my user profile and update my personal information, so that my records are up to date.\n6. As an admin, I want to view user profiles, so that I can review their details and manage their accounts.\n7. As an admin, I want to deactivate user accounts, so that I can manage user access to the system.",
        "output": "@startuml\nleft to right direction\n\nactor Citizen\nactor Admin\n\nrectangle E-Province {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Apply for Certificate\" as UC3\n    usecase \"Issue Certificate\" as UC4\n    usecase \"Manage User Profile\" as UC5\n    usecase \"View User Profile\" as UC6\n    usecase \"Deactivate User\" as UC7\n}\n\nCitizen --> UC1\nCitizen --> UC2\nCitizen --> UC3\nCitizen --> UC5\n\nAdmin --> UC4\nAdmin --> UC6\nAdmin --> UC5\n\nUC5 ..> UC7 : <<extend>>\n@enduml"
    },
    {
        "input": "Provide use case diagram based on the following user stories for the DigiDocLocker system:\n\n1. As a citizen, I want to register and log in to the platform, so that I can access my digital documents.\n2. As a citizen, I want to upload documents in various file formats, so that I can store my important documents securely.\n3. As a citizen, I want to view my complete user profile based on the information stored in the database, so that I can verify my details.\n4. As a citizen, I want to request documents from the respective issuers, so that I can obtain official certificates and documents digitally.\n5. As an issuer, I want the system to display the number of documents I have issued and the associated citizen details, so that I can track the documents I have provided.\n6. As a requester, I want to request documents from users and view the number of documents requested, so that I can retrieve the required documents efficiently.",
        "output": "@startuml\nleft to right direction\n\nactor Citizen\nactor \"Requester (Eg: UPSC)\" as Requester\nactor \"Issuer (Eg: Income Tax Department)\" as Issuer\n\nrectangle DigiDocLocker {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Request Document\" as UC3\n    usecase \"Upload Document\" as UC4\n    usecase \"View Profile\" as UC5\n    usecase \"Issue Document\" as UC6\n}\n\nCitizen --> UC1\nCitizen --> UC2\nCitizen --> UC4\nCitizen --> UC5\n\nRequester --> UC3\nRequester --> UC2\nIssuer --> UC2\nIssuer --> UC6\n@enduml"
    },
    {
        "input": "Provide use case diagram based on the following user stories for the E-Retail system:\n\n1. As a seller or customer, I want to register and log in to the platform, so that I can participate in buying and selling products.\n2. As a seller, I want to list my products for sale, so that I can make them available to customers.\n3. As a customer, I want to view all available products, so that I can choose which product to buy.\n4. As a customer, I want to buy products and make payments, so that I can complete my purchase securely.\n5. As a customer, I want to rate the products I have purchased, so that I can provide feedback for other buyers.\n6. As a customer, I want to report sellers for any violations or issues with the product or delivery, so that the system can take appropriate action.\n7. As a customer, I want to view the contact information and rating of the seller before purchasing a product, so that I can make an informed decision.",
        "output": "@startuml\nleft to right direction\n\nactor Seller\nactor Customer\n\nrectangle E-Retail {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"List Products\" as UC3\n    usecase \"View Products\" as UC4\n    usecase \"Buy Products\" as UC5\n    usecase \"Rate Product\" as UC6\n    usecase \"Report Seller\" as UC7\n    usecase \"View Seller Information\" as UC8\n    usecase \"Make Payment\" as UC9\n}\n\nSeller --> UC1\nSeller --> UC2\nSeller --> UC3\nSeller --> UC4\n\nCustomer --> UC2\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\nCustomer --> UC8\n\nUC5 ..> UC6 : <<extend>>\nUC5 ..> UC9 : <<include>>\n@enduml"
    },
    {
        "input": "Provide use case diagram based on the following user stories for the Online Flight Booking System:\n\n1. As a user, I want to register and log in to the platform, so that I can access the flight booking features.\n2. As a user, I want to select a flight, so that I can book tickets for my trip.\n3. As a user, I want to select seats for the flight, so that I can choose where I will sit during the flight.\n4. As a user, I want to make payments through a secure gateway, so that I can complete the purchase securely.\n5. As a user, I want to receive confirmation of my ticket after the payment is made, so that I know my booking is successful.\n6. As a user, I want to cancel my ticket if necessary, so that I can get a refund or modify my booking.\n7. As a user, I want to contact customer support, so that I can resolve any issues or ask questions about my booking.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor \"Customer Support\" as Support\n\nrectangle OnlineFlightBookingSystem {\n    usecase \"Register\" as UC1\n    usecase \"Select Flight\" as UC2\n    usecase \"Select Seats\" as UC3\n    usecase \"Make Payment\" as UC4\n    usecase \"Confirm Ticket\" as UC5\n    usecase \"Cancel Ticket\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\nCustomer --> UC7\n\nSupport --> UC8\nUC7 ..> UC8 : <<include>>\n\nUC5 ..> UC6 : <<extend>>\n@enduml"
    },
    {
        "input": "Provide use case diagram based on the following user stories for the Online Event Management System:\n\n1. As a user, I want to register and log in to the platform, so that I can access the event management features.\n2. As a user, I want to create events and manage event details, so that I can organize my event effectively.\n3. As a user, I want to promote my events, so that I can attract attendees.\n4. As a user, I want to book tickets for events, so that I can attend the events of my choice.\n5. As a user, I want to make payments securely for event tickets, so that I can complete my ticket purchase safely.\n6. As a user, I want to track the status of events and my ticket bookings, so that I stay informed about my events.\n7. As a user, I want to contact customer support, so that I can resolve any issues or ask questions about events or bookings.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor \"Customer Support\" as Support\n\nrectangle OnlineEventManagementSystem {\n    usecase \"Register\" as UC1\n    usecase \"Create Event\" as UC2\n    usecase \"Promote Event\" as UC3\n    usecase \"Book Ticket\" as UC4\n    usecase \"Make Payment\" as UC5\n    usecase \"Track Event\" as UC6\n    usecase \"Contact Support\" as UC7\n    usecase \"Provide Support\" as UC8\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nSupport --> UC8\nUC7 ..> UC8 : <<include>>\n\nUC4 ..> UC5 : <<include>>\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the Law Enforcement System:\n\n1. As a lawyer, I want to register and log in to the platform, so that I can access the law enforcement system.\n2. As a lawyer, I want to view case details and logs, so that I can stay updated on my cases.\n3. As a lawyer, I want to add and update case details, so that I can manage my case information.\n4. As a lawyer, I want the system to support both criminal and civil case categories, so that I can manage different types of cases.\n5. As a lawyer, I want to file cases online, so that I can submit case documents efficiently.\n6. As a lawyer, I want to download model forms for cases, so that I can prepare documents as per legal standards.\n7. As a lawyer, I want quick references for common legal cases, so that I can find relevant information easily.\n8. As a lawyer, I want access to e-books and other legal resources, so that I can refer to legal materials as needed.\n9. As a lawyer, I want to view blogs, news updates, and submit feedback, so that I stay informed and contribute to the community.",
        "output": "@startuml\nleft to right direction\n\nactor Lawyer\nactor Admin\n\nrectangle LawEnforcementSystem {\n    usecase \"Register\" as UC1\n    usecase \"View Case details and logs\" as UC2\n    usecase \"Add case\" as UC3\n    usecase \"Update details\" as UC4\n    usecase \"Criminal\" as UC5\n    usecase \"Civil\" as UC6\n    usecase \"Filing online\" as UC7\n    usecase \"Download Model Forms\" as UC8\n    usecase \"Display Links\" as UC9\n    usecase \"Display Forms\" as UC10\n    usecase \"Quick references\" as UC11\n    usecase \"Books\" as UC12\n    usecase \"Add feedback\" as UC13\n    usecase \"View Blogs and news updates\" as UC14\n    usecase \"Download\" as UC15\n    usecase \"Upload Documents\" as UC16\n    usecase \"Update Logs\" as UC17\n    usecase \"Update Calendar\" as UC18\n    usecase \"Set reminders\" as UC19\n}\n\nLawyer --> UC1\nLawyer --> UC2\nLawyer --> UC3\nLawyer --> UC7\nLawyer --> UC8\nLawyer --> UC13\nLawyer --> UC14\n\nUC3 ..> UC4 : <<include>>\nUC4 ..> UC5 : <<extend>>\nUC4 ..> UC6 : <<extend>>\nUC7 ..> UC9 : <<extend>>\nUC8 ..> UC10 : <<include>>\nUC8 ..> UC11 : <<extend>>\nUC11 ..> UC12 : <<extend>>\n\nAdmin --> UC16\nAdmin --> UC17\nAdmin --> UC18\nAdmin --> UC19\n\nUC16 ..> UC15 : <<extend>>\nUC19 ..> UC18 : <<include>>\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the 'My Helper' application:\n\n1. As a user, I want to send an SMS to perform remote operations on my phone, so that I can control my phone when it is not with me.\n2. As a user, I want to track the location of my phone via an SMS, so that I can find my phone if it is lost.\n3. As a user, I want to lock my phone remotely via an SMS, so that I can secure my phone if it gets lost.\n4. As a user, I want to change the sound profile (silent to normal) of my phone via an SMS, so that I can hear my phone if I need to locate it.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle MyHelper {\n    usecase \"Send SMS\" as UC1\n    usecase \"Track Phone\" as UC2\n    usecase \"Lock Phone\" as UC3\n    usecase \"Change Sound Profile\" as UC4\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\n\nUC1 ..> UC4 : <<extend>>\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the COVID-19 Management System:\n\n1. As a healthcare organization, I want to track COVID-19 patients, so that I can monitor their status and provide necessary care.\n2. As a healthcare organization, I want to treat COVID-19 patients via virtual care, so that I can continue treatment while minimizing contact.\n3. As a government, I want to monitor the spread of the virus, so that I can assess its impact and make informed decisions.\n4. As a healthcare organization or government, I want to assess the risk profiles of patients, so that I can determine the best course of action.\n5. As the government, I want to raise awareness about COVID-19 among the public, so that I can reduce the spread of the virus.\n6. As a patient, I want to connect with virtual care services, so that I can receive medical consultation remotely.\n7. As a patient, I want to buy medicines online, so that I can receive treatment without having to go to a pharmacy.",
        "output": "@startuml\nleft to right direction\n\nactor Healthcare_Organization\nactor Government\nactor Patient\n\nrectangle COVID-19ManagementSystem {\n    usecase \"Track COVID-19 Patients\" as UC1\n    usecase \"Treat COVID-19 Patients\" as UC2\n    usecase \"Monitor Virus Spread\" as UC3\n    usecase \"Assess Patient Risk\" as UC4\n    usecase \"Provide Awareness\" as UC5\n    usecase \"Connect with Virtual Care\" as UC6\n    usecase \"Buy Medicines\" as UC7\n}\n\nHealthcare_Organization --> UC1\nHealthcare_Organization --> UC2\nHealthcare_Organization --> UC4\nHealthcare_Organization --> UC6\n\nGovernment --> UC3\nGovernment --> UC4\nGovernment --> UC5\n\nPatient --> UC1\nPatient --> UC7\nPatient --> UC6\n\nUC4 ..> UC6 : <<extend>>\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the 'Car Care' application:\n\n1. As a car owner, I want to register and log in to the system, so that I can manage my car's service needs.\n2. As a car owner, I want to enter car information into the system, so that I can keep track of my car's service history.\n3. As a service center, I want to enter the estimated expiry dates of car parts, so that I can monitor when parts need replacing.\n4. As a car owner or service center, I want to be notified about the expiry dates of car parts, so that I can take timely action.\n5. As a car owner, I want to accept service requests and select parts for servicing, so that I can address the required maintenance.\n6. As a service center, I want to pick up the car, examine it, prepare a list of damaged parts, and perform the selected services, so that I can complete the requested work.\n7. As a service center, I want to update car information after servicing, so that I can keep accurate records of the services performed.\n8. As a car owner, I want to make online payments for the service, so that I can conveniently pay for the work completed.",
        "output": "@startuml\nleft to right direction\n\nactor Car_Owner\nactor Service_Centre\n\nrectangle CarCare {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Enter Car Information\" as UC3\n    usecase \"Enter Expiry Dates\" as UC4\n    usecase \"Notify Expiry\" as UC5\n    usecase \"Accept Service Request\" as UC6\n    usecase \"Pick Up Car\" as UC7\n    usecase \"Examine Car\" as UC8\n    usecase \"Prepare List\" as UC9\n    usecase \"Select Damaged Parts\" as UC10\n    usecase \"Service Parts\" as UC11\n    usecase \"Update Information\" as UC12\n    usecase \"Make Payment\" as UC13\n}\n\nCar_Owner --> UC1\nCar_Owner --> UC2\nCar_Owner --> UC3\nCar_Owner --> UC5\nCar_Owner --> UC6\nCar_Owner --> UC10\nCar_Owner --> UC13\n\nService_Centre --> UC2\nService_Centre --> UC4\nService_Centre --> UC7\nService_Centre --> UC8\nService_Centre --> UC9\nService_Centre --> UC11\nService_Centre --> UC12\n\nUC6 ..> UC7 : <<extend>>\nUC9 ..> UC10 : <<include>>\nUC11 ..> UC12 : <<extend>>\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the 'Smart Home' system:\n\n1. As a user, I want to register and log in to the system, so that I can control my smart home devices.\n2. As a user, I want to view and manage the status of my smart home devices, so that I can monitor and control them remotely.\n3. As a user, I want to set schedules for my smart home devices, so that they can operate automatically at specific times.\n4. As a user, I want to receive notifications about the status of my smart home devices, so that I can stay informed about their operation.\n5. As a user, I want to customize settings for my smart home devices, so that I can tailor their operation to my preferences.\n6. As a user, I want to connect my smart home devices to voice assistants like Alexa or Google Assistant, so that I can control them using voice commands.",
        "output": "@startuml\nleft to right direction\n\nactor User\n\nrectangle SmartHomeSystem {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"View Devices\" as UC3\n    usecase \"Manage Devices\" as UC4\n    usecase \"Set Schedules\" as UC5\n    usecase \"Receive Notifications\" as UC6\n    usecase \"Customize Settings\" as UC7\n    usecase \"Connect to Voice Assistants\" as UC8\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\n\nUC4 ..> UC5 : <<extend>>\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the 'E-Ration Shop' system:\n\n1. As a ration cardholder, I want to register, log in, and order grocery items online, so that I can conveniently get my groceries.\n2. As a ration cardholder, I want to view shop details, stock availability, and shop advertisements, so that I can decide where to order from.\n3. As a ration cardholder, I want to receive notifications about stock availability, so that I stay informed and can order on time.\n4. As a ration cardholder, I want to have my groceries delivered to me, so that I can receive them without visiting the store.\n5. As a ration cardholder, I want to submit grievances through a complaint forum, so that I can raise issues with the shop's service.\n6. As a retailer, I want to manage stock, advertise my shop, and deliver products, so that I can run my shop efficiently.\n7. As a user, I want to make payments via PayTM, COD, and other payment gateways, so that I can choose a payment method convenient for me.\n8. As an admin, I want to manage users, monitor system usage, approve retailer applications, generate reports, and manage content, so that I can ensure smooth operations of the system.\n9. As a user, I want to authenticate using Aadhaar and OTP verification, so that I can securely access my account.",
        "output": "@startuml\nleft to right direction\n\nactor \"Ration_Cardholder (Customer)\" as Ration_Cardholder\nactor \"Retailer (Shopkeeper)\" as Retailer\nactor Admin\nactor Moderator\n\nrectangle E-RationShop {\n    usecase \"Register\" as UC1\n    usecase \"Login\" as UC2\n    usecase \"Order Grocery Items\" as UC3\n    usecase \"View Shop Details\" as UC4\n    usecase \"View Stock\" as UC5\n    usecase \"Manage Stock\" as UC6\n    usecase \"Advertise Shop\" as UC7\n    usecase \"Notify Stock Availability\" as UC8\n    usecase \"Deliver Products\" as UC9\n    usecase \"Complaint Forum\" as UC10\n    usecase \"Make Payment\" as UC11\n    usecase \"Manage Users\" as UC12\n    usecase \"Monitor System Usage\" as UC13\n    usecase \"Approve Retailer Applications\" as UC14\n    usecase \"Generate Reports\" as UC15\n    usecase \"Manage Content\" as UC16\n    usecase \"Review Complaints\" as UC17\n    usecase \"Authentication with Aadhaar and OTP\" as UC18\n}\n\nRation_Cardholder --> UC1\nRation_Cardholder --> UC2\nRation_Cardholder --> UC3\nRation_Cardholder --> UC4\nRation_Cardholder --> UC5\nRation_Cardholder --> UC10\nRation_Cardholder --> UC11\n\nRetailer --> UC4\nRetailer --> UC6\nRetailer --> UC7\nRetailer --> UC9\n\nAdmin --> UC12\nAdmin --> UC13\nAdmin --> UC14\nAdmin --> UC15\nAdmin --> UC18\n\nModerator --> UC16\nModerator --> UC17\n\nUC3 ..> UC9 : <<extend>>\nUC5 ..> UC8 : <<extend>>\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the 'Textile Management System':\n\n1. As a customer, I want to register and sample available products, so that I can explore the product range.\n2. As a customer or manufacturer, I want to check stock availability, so that I can know what materials or products are in stock.\n3. As a manufacturer, I want to purchase and process raw materials, so that I can produce garments.\n4. As a manufacturer, I want to produce garments, so that I can manufacture finished products for sale.\n5. As a manufacturer, I want to check, clear, and ship finished garments, so that I can ensure the quality and deliver products to customers.\n6. As a system user, I want the system to generate bills for customers and reports for manufacturers, so that I can track financial transactions and production data.\n7. As a customer, I want to order garments, so that I can purchase products directly from the system.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Manufacturer\n\nrectangle TextileManagementSystem {\n    usecase \"Register\" as UC1\n    usecase \"Sample Products\" as UC2\n    usecase \"Check Stock\" as UC3\n    usecase \"Purchase Raw Materials\" as UC4\n    usecase \"Process Raw Materials\" as UC5\n    usecase \"Produce Garments\" as UC6\n    usecase \"Check Products\" as UC7\n    usecase \"Clearance of Products\" as UC8\n    usecase \"Ship Products\" as UC9\n    usecase \"Generate Bill\" as UC10\n    usecase \"Generate Reports\" as UC11\n    usecase \"Order Garments\" as UC12\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC12\n\nManufacturer --> UC3\nManufacturer --> UC4\nManufacturer --> UC5\nManufacturer --> UC6\nManufacturer --> UC7\nManufacturer --> UC8\nManufacturer --> UC9\nManufacturer --> UC10\nManufacturer --> UC11\n\nUC7 ..> UC8 : <<extend>>\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the 'Inventory Management System':\n\n1. As a store manager, I want to view current inventory levels, reorder products, and manage suppliers, so that I can keep track of stock and ensure availability of products.\n2. As a system user, I want the system to track deliveries and update inventory levels accordingly, so that I have accurate stock information.\n3. As a store manager, I want the system to generate reports on product usage and reorder history, so that I can make informed decisions about stock management.",
        "output": "@startuml\nleft to right direction\n\nactor StoreManager\nactor Supplier\n\nrectangle InventoryManagementSystem {\n    usecase \"View Inventory\" as UC1\n    usecase \"Reorder Product\" as UC2\n    usecase \"Manage Suppliers\" as UC3\n    usecase \"Track Deliveries\" as UC4\n    usecase \"Generate Reports\" as UC5\n}\n\nStoreManager --> UC1\nStoreManager --> UC2\nStoreManager --> UC3\nStoreManager --> UC5\n\nSupplier --> UC4\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the 'Gym Management System':\n\n1. As a user, I want to register as a member, book sessions, and track my fitness progress, so that I can manage my gym activities efficiently.\n2. As a trainer, I want to create workout plans, manage my schedule, and monitor client progress, so that I can offer personalized fitness guidance to my clients.\n3. As a system user, I want the system to handle membership payments through an integrated payment gateway, so that I can pay for my membership securely and easily.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Trainer\n\nrectangle GymManagementSystem {\n    usecase \"Register\" as UC1\n    usecase \"Book Session\" as UC2\n    usecase \"Track Progress\" as UC3\n    usecase \"Create Workout Plan\" as UC4\n    usecase \"Manage Schedule\" as UC5\n    usecase \"Track Client Progress\" as UC6\n    usecase \"Make Payment\" as UC7\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC7\n\nTrainer --> UC4\nTrainer --> UC5\nTrainer --> UC6\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the 'Warehouse Management System':\n\n1. As a system user, I want to track stock levels in real-time, manage shipments, and deliveries, so that I can keep inventory updated and manage warehouse operations efficiently.\n2. As a warehouse manager, I want to manage the entire stock lifecycle, generate reports, and manage employee schedules, so that I can maintain an organized and effective warehouse.\n3. As a warehouse manager, I want the system to include inventory optimization features that adjust stock levels based on real-time demand, so that I can reduce excess stock and minimize shortages.",
        "output": "@startuml\nleft to right direction\n\nactor WarehouseManager\nactor Employee\n\nrectangle WarehouseManagementSystem {\n    usecase \"Track Stock\" as UC1\n    usecase \"Manage Shipments\" as UC2\n    usecase \"Manage Deliveries\" as UC3\n    usecase \"Manage Stock\" as UC4\n    usecase \"Generate Reports\" as UC5\n    usecase \"Manage Employee Schedule\" as UC6\n    usecase \"Optimize Inventory\" as UC7\n}\n\nWarehouseManager --> UC1\nWarehouseManager --> UC4\nWarehouseManager --> UC5\nWarehouseManager --> UC6\nWarehouseManager --> UC7\n\nEmployee --> UC2\nEmployee --> UC3\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the 'Car Rental System':\n\n1. As a customer, I want to search for available cars, so that I can find a car to rent.\n2. As a customer, I want to select the desired car for rental, so that I can choose a car that fits my needs.\n3. As a customer, I want to make a reservation for the selected car, so that I can ensure the car is available for me.\n4. As a customer, I want to view my booking history, so that I can track my previous rentals.\n5. As a customer, I want to cancel my bookings if needed, so that I can make adjustments to my rental plans.\n6. As a car rental agency, I want to manage my fleet of cars, so that I can keep track of the cars available for rent.\n7. As a car rental agency, I want to track bookings made by customers, so that I can manage reservations effectively.\n8. As a car rental agency, I want to generate reports on rental activity, so that I can analyze business performance.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor CarRentalAgency\n\nrectangle CarRentalSystem {\n    usecase \"Search Cars\" as UC1\n    usecase \"Select Car\" as UC2\n    usecase \"Make Reservation\" as UC3\n    usecase \"View Booking History\" as UC4\n    usecase \"Cancel Booking\" as UC5\n    usecase \"Manage Fleet\" as UC6\n    usecase \"Track Bookings\" as UC7\n    usecase \"Generate Reports\" as UC8\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\n\nCarRentalAgency --> UC6\nCarRentalAgency --> UC7\nCarRentalAgency --> UC8\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the 'Final Year Project (FYP) Management System':\n\n1. As a student, I want to submit my project proposal for approval, so that I can start working on my FYP.\n2. As a student, I want to upload progress reports at various stages of the project, so that I can demonstrate my progress.\n3. As a student, I want to track the evaluation status of my project, so that I know how my project is being assessed.\n4. As a supervisor, I want to review student submissions and provide detailed feedback, so that I can guide students in improving their projects.\n5. As a supervisor, I want to set project deadlines, so that students stay on track with their work.\n6. As a supervisor, I want to monitor the progress of each student, so that I can ensure they are on track.\n7. As a panel member, I want to evaluate projects during key milestones and offer scores, so that I can assess student performance.\n8. As the FYP committee, I want to assign panel members to projects, so that each project gets a fair evaluation.\n9. As the FYP committee, I want to approve or reject proposals, so that only valid and academically sound projects proceed.\n10. As the FYP committee, I want to ensure the overall quality of the submitted projects, so that they meet academic standards.\n11. As a student, supervisor, or panel member, I want the system to facilitate communication between all stakeholders, so that collaboration is enhanced.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Supervisor\nactor Panel_Member\nactor FYP_Committee\n\nrectangle FYPManagementSystem {\n    usecase \"Submit Proposal\" as UC1\n    usecase \"Upload Progress Report\" as UC2\n    usecase \"Track Evaluation Status\" as UC3\n    usecase \"Review Submissions\" as UC4\n    usecase \"Provide Feedback\" as UC5\n    usecase \"Set Project Deadlines\" as UC6\n    usecase \"Monitor Progress\" as UC7\n    usecase \"Evaluate Projects\" as UC8\n    usecase \"Assign Panel Members\" as UC9\n    usecase \"Approve Proposals\" as UC10\n    usecase \"Ensure Academic Standards\" as UC11\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\n\nSupervisor --> UC4\nSupervisor --> UC5\nSupervisor --> UC6\nSupervisor --> UC7\n\nPanel_Member --> UC4\nPanel_Member --> UC8\n\nFYP_Committee --> UC9\nFYP_Committee --> UC10\nFYP_Committee --> UC11\n\nUC4 ..> UC5 : <<extend>>\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the 'Online Auction System':\n\n1. As a user, I want to register and create an account, so that I can participate in bidding.\n2. As a user, I want to browse and search for items available for auction, so that I can find items I'm interested in.\n3. As a user, I want to place bids on items, so that I can participate in auctions.\n4. As a user, I want to be notified of the status of my bids and the auction results, so that I stay updated on my auction activities.\n5. As a seller, I want to list items for auction and set starting prices, so that I can sell my items to the highest bidder.\n6. As a seller, I want to monitor the progress of my auctions and view bids, so that I can track interest in my items.\n7. As a seller, I want to close auctions and finalize transactions with winning bidders, so that I can complete the sale process.\n8. As a user, I want to use a secure payment gateway, so that I can pay for items I won in a safe and secure manner.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Seller\n\nrectangle OnlineAuctionSystem {\n    usecase \"Register\" as UC1\n    usecase \"Create Account\" as UC2\n    usecase \"Browse Items\" as UC3\n    usecase \"Place Bid\" as UC4\n    usecase \"Notify Status\" as UC5\n    usecase \"List Items\" as UC6\n    usecase \"Monitor Auctions\" as UC7\n    usecase \"Close Auction\" as UC8\n    usecase \"Finalize Transaction\" as UC9\n    usecase \"Make Payment\" as UC10\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC10\n\nSeller --> UC6\nSeller --> UC7\nSeller --> UC8\nSeller --> UC9\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the 'Volunteer Management System':\n\n1. As a volunteer, I want to sign up for events, so that I can participate and contribute my time.\n2. As a volunteer, I want to view the tasks assigned to me, so that I can understand what I need to do.\n3. As a volunteer, I want to track my participation hours, so that I can monitor my contributions.\n4. As a volunteer, I want to update my availability, so that I can inform coordinators when I am free to help.\n5. As a coordinator, I want to assign tasks to volunteers, so that I can manage event activities efficiently.\n6. As a coordinator, I want to track the participation of volunteers, so that I can monitor their involvement.\n7. As an event manager, I want to schedule events in advance, so that I can plan and organize the logistics.\n8. As an event manager, I want to approve volunteer rosters, so that I ensure we have enough people for each event.\n9. As an event manager, I want to monitor the success and effectiveness of events, so that I can measure the outcomes.\n10. As an event manager, I want to generate reports on participation and event success, so that I can evaluate the results and improve future events.",
        "output": "@startuml\nleft to right direction\n\nactor Volunteer\nactor Coordinator\nactor Event_Manager\n\nrectangle VolunteerManagementSystem {\n    usecase \"Sign Up for Event\" as UC1\n    usecase \"View Assigned Tasks\" as UC2\n    usecase \"Track Participation Hours\" as UC3\n    usecase \"Update Availability\" as UC4\n    usecase \"Assign Tasks\" as UC5\n    usecase \"Track Volunteer Participation\" as UC6\n    usecase \"Schedule Events\" as UC7\n    usecase \"Approve Volunteer Rosters\" as UC8\n    usecase \"Monitor Event Success\" as UC9\n    usecase \"Generate Reports\" as UC10\n}\n\nVolunteer --> UC1\nVolunteer --> UC2\nVolunteer --> UC3\nVolunteer --> UC4\n\nCoordinator --> UC5\nCoordinator --> UC6\n\nEvent_Manager --> UC7\nEvent_Manager --> UC8\nEvent_Manager --> UC9\nEvent_Manager --> UC10\n\nUC6 ..> UC10 : <<include>>\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the 'Hiring System at TechHire Solutions':\n\n1. As a candidate, I want to submit my application, including resumes and cover letters, so that I can apply for jobs.\n2. As a recruiter, I want the system to scan resumes for relevant skills, experience, and qualifications, so that I can evaluate candidates effectively.\n3. As a recruiter, I want the system to automatically shortlist candidates based on the scan results, so that I can save time and focus on the most qualified applicants.\n4. As a recruiter, I want to schedule interviews for shortlisted candidates, so that I can move forward with the hiring process.\n5. As an interviewer, I want to provide feedback and ratings after each interview round, so that recruiters can make informed decisions.\n6. As a recruiter, I want to select the most qualified candidates based on interview feedback, so that I can hire the best talent.\n7. As a recruiter, I want the system to generate offer letters for selected candidates, so that I can formalize the job offer.\n8. As a recruiter, I want to track the overall hiring status across all stages of the recruitment cycle, so that I can monitor progress and ensure timely hiring.",
        "output": "@startuml\nleft to right direction\n\nactor Candidate\nactor Recruiter\nactor Interviewer\n\nrectangle HiringSystemTechHireSolutions {\n    usecase \"Submit Application\" as UC1\n    usecase \"Scan Resume\" as UC2\n    usecase \"Shortlist Candidates\" as UC3\n    usecase \"Schedule Interviews\" as UC4\n    usecase \"Provide Interview Feedback\" as UC5\n    usecase \"Select Candidates\" as UC6\n    usecase \"Generate Offer Letter\" as UC7\n    usecase \"Track Hiring Status\" as UC8\n}\n\nCandidate --> UC1\n\nRecruiter --> UC2\nRecruiter --> UC3\nRecruiter --> UC4\nRecruiter --> UC6\nRecruiter --> UC7\nRecruiter --> UC8\n\nInterviewer --> UC5\n@enduml"
    },
    {
        "input": "Give me a use case diagram based on the following user stories for the 'GitHub Universe 2023 Management System':\n\n1. As a participant, I want to register for the event, so that I can attend GitHub Universe 2023.\n2. As a participant, I want to sign up for keynotes and workshops, so that I can attend the sessions I'm interested in.\n3. As an organizer, I want the system to manage sponsor onboarding and interactions, so that I can ensure smooth sponsor participation.\n4. As an organizer, I want the system to track sponsor branding during the event, so that I can measure sponsor visibility.\n5. As an organizer, I want to manage the overall event schedule, so that sessions, keynotes, and workshops run on time.\n6. As an organizer, I want to send real-time updates to all users, so that participants and sponsors can stay informed.\n7. As a participant, I want to submit feedback on the sessions I attend, so that I can share my thoughts on the event quality.\n8. As a speaker, I want to schedule and present technical talks, so that I can share my expertise at the event.\n9. As an organizer, I want the system to generate reports based on user feedback and event metrics, so that I can assess the event's success.\n10. As an organizer, I want to monitor event attendance, so that I can track participation levels.\n11. As a sponsor, I want to submit sponsorship proposals, so that I can participate as a sponsor for the event.\n12. As a sponsor, I want to review my sponsorship benefits, so that I can understand what I receive for sponsoring the event.",
        "output": "@startuml\nleft to right direction\n\nactor Participant\nactor Sponsor\nactor Organizer\nactor Speaker\n\nrectangle GitHubUniverseManagementSystem {\n    usecase \"Register for Event\" as UC1\n    usecase \"Sign Up for Sessions\" as UC2\n    usecase \"Manage Sponsor Onboarding\" as UC3\n    usecase \"Track Sponsor Branding\" as UC4\n    usecase \"Manage Event Schedule\" as UC5\n    usecase \"Send Real-Time Updates\" as UC6\n    usecase \"Submit Session Feedback\" as UC7\n    usecase \"Give Tech-Talks\" as UC8\n    usecase \"Generate Reports\" as UC9\n    usecase \"Monitor Attendance\" as UC10\n    usecase \"Submit Sponsorship Proposal\" as UC11\n    usecase \"Review Sponsorship Benefits\" as UC12\n}\n\nParticipant --> UC1\nParticipant --> UC2\nParticipant --> UC7\n\nSponsor --> UC11\nSponsor --> UC4\n\nOrganizer --> UC5\nOrganizer --> UC6\nOrganizer --> UC9\nOrganizer --> UC10\nOrganizer --> UC3\nOrganizer --> UC4\n\nSpeaker --> UC8\n@enduml"
    },
    {
        "input": "Give me a use case diagram based on the following user stories for the 'University Course Registration System':\n\n1. As a student, I want to search for available courses, so that I can choose the classes I want to take.\n2. As a student, I want to add courses to my course list, so that I can build my semester schedule.\n3. As a student, I want to register for the upcoming semester, so that I can enroll in my chosen courses.\n4. As a student, I want to drop courses if needed, so that I can adjust my schedule if necessary.\n5. As a student, I want to view my academic history, so that I can track my performance and course completion.\n6. As a professor, I want to view the list of enrolled students, so that I know who is attending my class.\n7. As a professor, I want to assign grades to students, so that I can evaluate their academic performance.\n8. As a professor, I want to provide feedback on assignments, so that I can help students improve their work.",
        "output": "@startuml\nleft to right direction\n\nactor Student\nactor Professor\n\nrectangle CourseRegistrationSystem {\n    usecase \"Search Courses\" as UC1\n    usecase \"Add Course\" as UC2\n    usecase \"Register for Semester\" as UC3\n    usecase \"Drop Course\" as UC4\n    usecase \"View Academic History\" as UC5\n    usecase \"View Enrolled Students\" as UC6\n    usecase \"Assign Grades\" as UC7\n    usecase \"Provide Feedback\" as UC8\n}\n\nStudent --> UC1\nStudent --> UC2\nStudent --> UC3\nStudent --> UC4\nStudent --> UC5\n\nProfessor --> UC6\nProfessor --> UC7\nProfessor --> UC8\n@enduml"
    },
    {
        "input": "Create a use case diagram based on the following user stories for the 'Social Networking Platform (like Facebook)':\n\n1. As a user, I want to create a personalized profile, so that I can build my online presence.\n2. As a user, I want to send and accept friend requests, so that I can build my network of connections.\n3. As a user, I want to share posts including text, photos, and videos, so that I can express myself and share life moments.\n4. As a user, I want to engage with posts through likes, comments, and reactions, so that I can interact with the content shared by others.\n5. As a user, I want to send private messages and share media, so that I can communicate privately with my friends.\n6. As a user, I want to receive real-time notifications, so that I can stay updated about interactions and new connections.\n7. As a business user, I want to create and manage business pages, so that I can promote my brand or services.\n8. As a business user, I want to manage targeted advertisements, so that I can reach the right audience effectively.\n9. As a moderator, I want to monitor content, so that I can ensure it complies with community guidelines.\n10. As an admin, I want to manage platform-wide activities and enforce guidelines, so that the platform maintains a safe and respectful environment.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Moderator\nactor Admin\n\nrectangle FacebookSystem {\n    usecase \"Create Profile\" as UC1\n    usecase \"Manage Friends\" as UC2\n    usecase \"Share Life Moments\" as UC3\n    usecase \"Post Content\" as UC4\n    usecase \"Engage with Posts\" as UC5\n    usecase \"Send Private Messages\" as UC6\n    usecase \"Receive Notifications\" as UC7\n    usecase \"Create Business Page\" as UC8\n    usecase \"Manage Advertisements\" as UC9\n    usecase \"Monitor and Moderate Content\" as UC10\n    usecase \"Enforce Community Guidelines\" as UC11\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nUser --> UC8\nUser --> UC9\n\nModerator --> UC10\n\nAdmin --> UC11\n@enduml"
    },
    {
        "input": "Create a use case diagram based on the following user stories for the 'Blood Donation App':\n\n1. As a donor, I want to register as a blood donor, so that I can donate blood to those in need.\n2. As a recipient, I want to find donors based on blood type and location, so that I can get blood for my treatment.\n3. As a recipient, I want to post blood requests in urgent situations, so that I can quickly find a donor.\n4. As a donor, I want to receive notifications about blood requests, so that I can respond when my blood type is needed.\n5. As a recipient, I want to locate nearby hospitals, so that I can go to the nearest facility in case of an emergency.\n6. As a blood bank, I want to organize blood donation drives, so that I can gather blood donations efficiently.\n7. As a blood bank, I want to track blood availability, so that I can manage the stock and meet demand effectively.\n8. As a donor, I want to donate blood, so that I can contribute to saving lives.",
        "output": "@startuml\nleft to right direction\n\nactor Donor\nactor Recipient\nactor BloodBank\n\nrectangle BloodDonationApp {\n    usecase \"Register as Donor\" as UC1\n    usecase \"Find Blood Donor\" as UC2\n    usecase \"Post Blood Request\" as UC3\n    usecase \"Receive Notifications\" as UC4\n    usecase \"Locate Nearby Hospitals\" as UC5\n    usecase \"Organize Blood Donation Drives\" as UC6\n    usecase \"Track Blood Availability\" as UC7\n    usecase \"Donate Blood\" as UC8\n}\n\nDonor --> UC1\nDonor --> UC8\nDonor --> UC4\nRecipient --> UC2\nRecipient --> UC3\nRecipient --> UC5\nRecipient --> UC4\nBloodBank --> UC6\nBloodBank --> UC7\n@enduml"
    },
    {
        "input": "Create a use case diagram based on the following user stories for the 'Ride-Sharing Platform (like Uber)':\n\n1. As a passenger, I want to request a ride to my specific destination, so that I can be picked up by a driver.\n2. As a passenger, I want to track the location of my ride in real-time, so that I know when my driver is arriving.\n3. As a passenger, I want to pay for the service through the platform, so that the payment process is convenient.\n4. As a passenger, I want to rate my driver after the ride, so that I can provide feedback on my experience.\n5. As a driver, I want to accept ride requests, so that I can earn by providing transportation services.\n6. As a driver, I want to navigate to the passenger's location and destination, so that I can reach them efficiently.\n7. As a driver, I want to provide safe and efficient rides to passengers, so that they have a positive experience.\n8. As a customer support agent, I want to assist users in resolving issues, so that passengers and drivers receive help when needed.",
        "output": "@startuml\nleft to right direction\n\nactor Passenger\nactor Driver\nactor CustomerSupport\n\nrectangle RideSharingPlatform {\n    usecase \"Request Ride\" as UC1\n    usecase \"Track Location\" as UC2\n    usecase \"Pay for Service\" as UC3\n    usecase \"Rate Driver\" as UC4\n    usecase \"Accept Ride Request\" as UC5\n    usecase \"Navigate to Location\" as UC6\n    usecase \"Provide Ride\" as UC7\n    usecase \"Resolve Issues\" as UC8\n    usecase \"Provide Assistance\" as UC9\n}\n\nPassenger --> UC1\nPassenger --> UC2\nPassenger --> UC3\nPassenger --> UC4\n\nDriver --> UC5\nDriver --> UC6\nDriver --> UC7\n\nCustomerSupport --> UC8\nCustomerSupport --> UC9\n@enduml"
    },
    {
        "input": "Create a use case diagram based on the following user stories for the 'Al-Balagh Islamic Book Store':\n\n1. As a customer, I want to browse and search for Islamic books, so that I can find books on topics of interest.\n2. As a customer, I want to view book details, including descriptions, prices, and availability, so that I can make informed purchase decisions.\n3. As a customer, I want to add books to my cart and proceed to checkout, so that I can purchase the books I want.\n4. As a customer, I want to create an account and log in, so that I can track my orders and manage my profile.\n5. As a customer, I want to receive order confirmation and shipping updates, so that I can stay informed about my purchases.\n6. As a store manager, I want to manage product listings, including adding, updating, and removing books, so that the store catalog is up-to-date.\n7. As a store manager, I want to process orders, including tracking payments, updating order status, and managing shipping, so that customers receive their purchases on time.\n8. As a store manager, I want to generate reports on sales, inventory, and customer data, so that I can analyze store performance and make informed decisions.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor StoreManager\n\nrectangle AlBalaghIslamicBookStore {\n    usecase \"Browse Books\" as UC1\n    usecase \"View Book Details\" as UC2\n    usecase \"Add to Cart\" as UC3\n    usecase \"Proceed to Checkout\" as UC4\n    usecase \"Create Account\" as UC5\n    usecase \"Receive Order Updates\" as UC6\n    usecase \"Manage Product Listings\" as UC7\n    usecase \"Process Orders\" as UC8\n    usecase \"Generate Reports\" as UC9\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n\nStoreManager --> UC7\nStoreManager --> UC8\nStoreManager --> UC9\n@enduml"
    },
    {
        "input":"Create a use case diagram based on the following user stories for the Islamic Trends Shop. \n\n1. As a customer, I want to browse and search for abayas, so that I can find the perfect one for me. \n2. As a customer, I want to view abaya details, including descriptions, prices, and availability, so that I can make an informed purchase decision. \n3. As a customer I want to purchase halal makeup on rent, so that I can look beautiful without compromising my beliefs. \n4. As a customer, I want to buy Islamic gifts, so that I can give meaningful presents to my loved ones. \n5. As a customer, I want to shop for Hajj and Umrah products, so that I can prepare for my pilgrimage. \n6. As a customer, I want to buy scarfs, so that I can wear them as a modest and stylish accessory.",
        "output":"@startuml\nleft to right direction\n\nactor Customer\n\nrectangle IslamicTrendsShop {\n    usecase \"Browse Abayas\" as UC1\n    usecase \"View Abaya Details\" as UC2\n    usecase \"Purchase Halal Makeup\" as UC3\n    usecase \"Buy Islamic Gifts\" as UC4\n    usecase \"Shop for Hajj and Umrah Products\" as UC5\n    usecase \"Buy Scarfs\" as UC6\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\nCustomer --> UC4\nCustomer --> UC5\nCustomer --> UC6\n@enduml"
    },
    {
        "input": "Create a use case diagram based on the following user stories for the 'Food Delivery Platform (like DoorDash)':\n\n1. As a customer, I want to browse restaurant menus, so that I can choose food items to order.\n2. As a customer, I want to place orders for delivery or pickup, so that I can get food delivered to my location or collect it myself.\n3. As a customer, I want to track the status of my delivery, so that I know when to expect my food.\n4. As a restaurant, I want to receive customer orders, so that I can prepare food for delivery or pickup.\n5. As a restaurant, I want to prepare food after receiving orders, so that customers can enjoy fresh meals.\n6. As a restaurant, I want to notify customers when their orders are ready for pickup or delivery, so that they can come collect it or expect delivery.\n7. As a delivery driver, I want to accept delivery requests, so that I can earn money by delivering food to customers.\n8. As a delivery driver, I want to pick up orders from restaurants, so that I can deliver them to customers.\n9. As a delivery driver, I want to deliver orders to customers, so that they receive their food promptly.\n10. As a customer support agent, I want to assist users in resolving issues, so that customers and restaurants get the help they need.\n11. As a customer support agent, I want to provide assistance to users, so that any problems are handled quickly and efficiently.",
        "output": "@startuml\nleft to right direction\n\nactor Customer\nactor Restaurant\nactor Driver\nactor CustomerSupport\n\nrectangle FoodDeliveryPlatform {\n    usecase \"Browse Menus\" as UC1\n    usecase \"Place Order\" as UC2\n    usecase \"Track Delivery\" as UC3\n    usecase \"Receive Orders\" as UC4\n    usecase \"Prepare Food\" as UC5\n    usecase \"Notify Order Ready\" as UC6\n    usecase \"Accept Delivery Request\" as UC7\n    usecase \"Pick Up Order\" as UC8\n    usecase \"Deliver Order\" as UC9\n    usecase \"Resolve Issues\" as UC10\n    usecase \"Provide Assistance\" as UC11\n}\n\nCustomer --> UC1\nCustomer --> UC2\nCustomer --> UC3\n\nRestaurant --> UC4\nRestaurant --> UC5\nRestaurant --> UC6\n\nDriver --> UC7\nDriver --> UC8\nDriver --> UC9\n\nCustomerSupport --> UC10\nCustomerSupport --> UC11\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the 'Job Finder App (SheWorks)':\n\n1. As a job seeker, I want to create a profile, so that employers can view my qualifications.\n2. As a job seeker, I want to upload my resume, so that employers can see my experience and skills.\n3. As a job seeker, I want to search for jobs that match my preferences (e.g., flexible hours, remote work), so that I can find suitable job opportunities.\n4. As a job seeker, I want to apply for jobs through the platform, so that I can submit my applications easily.\n5. As a job seeker, I want to receive notifications of job updates, interview calls, and feedback, so that I stay informed of any changes or opportunities.\n6. As a job seeker, I want to schedule interviews with employers, so that I can manage my time and attend interviews.\n7. As a job seeker, I want to attend career development workshops, so that I can improve my skills and grow professionally.\n8. As a job seeker, I want to participate in networking events, so that I can build connections and advance my career.\n9. As an employer, I want to shortlist candidates based on their profiles and resumes, so that I can find the right talent for my company.\n10. As an employer, I want to post job vacancies, so that I can hire candidates for open positions.\n11. As a mentor, I want to offer mentorship to job seekers, so that I can help guide and support them in their careers.\n12. As a job seeker, I want to receive job recommendations based on my profile and resume, so that I can discover job opportunities that fit my background.",
        "output": "@startuml\nleft to right direction\n\nactor Job_Seeker\nactor Employer\nactor Mentor\n\nrectangle SheWorksApp {\n    usecase \"Create Profile\" as UC1\n    usecase \"Upload Resume\" as UC2\n    usecase \"Search for Jobs\" as UC3\n    usecase \"Apply for Job\" as UC4\n    usecase \"Receive Notifications\" as UC5\n    usecase \"Schedule Interview\" as UC6\n    usecase \"Attend Workshops\" as UC7\n    usecase \"Participate in Networking Events\" as UC8\n    usecase \"Shortlist Candidates\" as UC9\n    usecase \"Post Job Vacancies\" as UC10\n    usecase \"Offer Mentorship\" as UC11\n    usecase \"Receive Job Recommendations\" as UC12\n}\n\nJob_Seeker --> UC1\nJob_Seeker --> UC2\nJob_Seeker --> UC3\nJob_Seeker --> UC4\nJob_Seeker --> UC6\nJob_Seeker --> UC5\nJob_Seeker --> UC7\nJob_Seeker --> UC8\nJob_Seeker --> UC12\n\nEmployer --> UC9\nEmployer --> UC10\n\nMentor --> UC11\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the 'Hackathon Management Web App':\n\n1. As a participant, I want to register for the hackathon event, so that I can take part in the competition.\n2. As a participant, I want to form teams for the event, so that I can collaborate with others.\n3. As a participant, I want to submit my project, so that my work can be evaluated.\n4. As a participant, I want to chat with my team members, so that we can communicate efficiently.\n5. As a participant, I want to receive notifications about event updates and important announcements, so that I can stay informed.\n6. As a participant, I want to view the event schedule, so that I know when activities are taking place.\n7. As a mentor, I want to provide guidance to teams through the platform, so that I can assist participants during the event.\n8. As a mentor, I want to review team project progress, so that I can offer feedback and support.\n9. As a judge, I want to evaluate projects, so that I can assess the quality of the submissions.\n10. As a judge, I want to score the submissions, so that the best teams can be selected.\n11. As an organizer, I want to manage the judging rounds, so that the evaluation process runs smoothly.\n12. As a sponsor, I want to submit sponsorship materials, so that my brand is promoted during the event.\n13. As a sponsor, I want to track the visibility of my sponsorship, so that I can assess the impact of my investment.\n14. As an organizer, I want to coordinate event announcements, so that participants and sponsors are well-informed throughout the event.",
        "output": "@startuml\nleft to right direction\n\nactor Participant\nactor Organizer\nactor Mentor\nactor Judge\nactor Sponsor\n\nrectangle HackathonManagementSystem {\n    usecase \"Register for Event\" as UC1\n    usecase \"Form Team\" as UC2\n    usecase \"Submit Project\" as UC3\n    usecase \"Chat with Team\" as UC4\n    usecase \"Receive Notifications\" as UC5\n    usecase \"View Event Schedule\" as UC6\n    usecase \"Provide Mentorship\" as UC7\n    usecase \"Review Project Progress\" as UC8\n    usecase \"Evaluate Projects\" as UC9\n    usecase \"Score Submissions\" as UC10\n    usecase \"Manage Judging Rounds\" as UC11\n    usecase \"Submit Sponsorship Materials\" as UC12\n    usecase \"Track Sponsorship Visibility\" as UC13\n    usecase \"Coordinate Announcements\" as UC14\n}\n\nParticipant --> UC1\nParticipant --> UC2\nParticipant --> UC3\nParticipant --> UC4\nParticipant --> UC5\nParticipant --> UC6\n\nOrganizer --> UC6\nOrganizer --> UC14\nOrganizer --> UC11\nOrganizer --> UC8\n\nMentor --> UC7\nMentor --> UC8\n\nJudge --> UC9\nJudge --> UC10\n\nSponsor --> UC12\nSponsor --> UC13\n@enduml"
    },
    {
        "input": "Provide a use case diagram based on the following user stories for the 'Seminar Management System':\n\n1. As an audience member, I want to register for the seminar, so that I can attend the event.\n2. As an audience member, I want to book seats for sessions, so that I can reserve my spot.\n3. As an audience member, I want to receive notifications about session schedules and updates, so that I stay informed.\n4. As an audience member, I want to view the seminar session schedule, so that I can plan which sessions to attend.\n5. As an audience member, I want to submit feedback, so that I can evaluate the quality of sessions.\n6. As an organizer, I want to manage auditorium allocation for sessions, so that I can ensure optimal space usage.\n7. As an organizer, I want to manage speaker session content, so that the sessions are well-prepared.\n8. As an organizer, I want to invite guest speakers to the seminar, so that I can enhance the quality of the event.\n9. As an organizer, I want to track audience attendance, so that I can monitor participation.\n10. As an organizer, I want to coordinate event timings and session schedules, so that the seminar runs smoothly.\n11. As a sponsor, I want to promote my brand through the platform, so that I gain exposure during the event.\n12. As a guest speaker, I want to manage my seminar session content, so that I can ensure my presentation is well-organized.",
        "output": "@startuml\nleft to right direction\n\nactor Audience\nactor Organizer\nactor Guest_Speaker\nactor Sponsor\n\nrectangle SeminarManagementSystem {\n    usecase \"Register for Seminar\" as UC1\n    usecase \"Book Seat\" as UC2\n    usecase \"Receive Notifications\" as UC3\n    usecase \"View Session Schedule\" as UC4\n    usecase \"Submit Feedback\" as UC5\n    usecase \"Manage Auditorium Allocation\" as UC6\n    usecase \"Manage Speaker Sessions\" as UC7\n    usecase \"Invite Guest Speakers\" as UC8\n    usecase \"Track Attendance\" as UC9\n    usecase \"Coordinate Event Timings\" as UC10\n    usecase \"Promote Sponsor Branding\" as UC11\n    usecase \"Manage Seminar Session Content\" as UC12\n}\n\nAudience --> UC1\nAudience --> UC2\nAudience --> UC3\nAudience --> UC4\nAudience --> UC5\n\nOrganizer --> UC6\nOrganizer --> UC7\nOrganizer --> UC8\nOrganizer --> UC9\nOrganizer --> UC10\n\nGuest_Speaker --> UC7\nGuest_Speaker --> UC12\n\nSponsor --> UC11\n@enduml"
    },
    {
        "input": "Design me a use case diagram based on the following user stories for a Project Management System:\n1. As a project manager, I want to create project plans, so that I can define the scope and objectives of the project.\n2. As a project manager, I want to assign tasks to team members, so that I can distribute the workload efficiently.\n3. As a project manager, I want to track project progress, so that I can ensure the project is on schedule.\n4. As a team member, I want to view my assigned tasks, so that I know my responsibilities in the project.\n5. As a team member, I want to update the status of my tasks, so that the project manager knows my progress.\n6. As a team member, I want to communicate with my team, so that we can collaborate and resolve issues.\n7. As a project manager, I want to generate project reports, so that I can keep stakeholders informed.\n8. As a project manager, I want to monitor project timelines, so that I can identify any delays.\n9. As a project manager, I want to identify potential risks, so that I can mitigate them before they impact the project.\n10. As a stakeholder, I want to access project information, so that I am aware of the project's status.\n11. As a stakeholder, I want to review progress reports, so that I can track the project's achievements.\n12. As a stakeholder, I want to provide feedback on project deliverables, so that my input is considered during the project's development.",
        "output": "@startuml\nleft to right direction\n\nactor ProjectManager\nactor TeamMember\nactor Stakeholder\n\n rectangle ProjectManagementSystem {\n    usecase \"Create Project Plan\" as UC1\n    usecase \"Assign Tasks\" as UC2\n    usecase \"Track Progress\" as UC3\n    usecase \"View Assigned Tasks\" as UC4\n    usecase \"Update Task Status\" as UC5\n    usecase \"Communicate with Team\" as UC6\n    usecase \"Generate Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Risks\" as UC9\n    usecase \"Access Project Information\" as UC10\n    usecase \"Review Progress Reports\" as UC11\n    usecase \"Provide Feedback\" as UC12\n}\n\nProjectManager --> UC1\nProjectManager --> UC2\nProjectManager --> UC3\nProjectManager --> UC7\nProjectManager --> UC8\nProjectManager --> UC9\n\nTeamMember --> UC4\nTeamMember --> UC5\nTeamMember --> UC6\n\nStakeholder --> UC10\nStakeholder --> UC11\nStakeholder --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram based on the following user stories for a Customer Relationship Management (CRM) System:\n1. As a sales team member, I want to track customer leads, so that I can follow up on potential clients.\n2. As a sales team member, I want to manage customer accounts, so that I can keep customer information up to date.\n3. As a sales team member, I want to analyze sales data, so that I can understand our performance and trends.\n4. As a marketing team member, I want to create targeted campaigns, so that I can effectively reach our customer base.\n5. As a marketing team member, I want to track customer engagement, so that I can measure the effectiveness of campaigns.\n6. As a marketing team member, I want to generate reports on campaign performance, so that I can refine our marketing strategies.\n7. As a customer support team member, I want to log customer inquiries, so that I can keep track of customer issues.\n8. As a customer support team member, I want to resolve customer issues, so that I can ensure customer satisfaction.\n9. As a customer support team member, I want to provide feedback on customer satisfaction, so that I can help improve customer relationships.",
        "output": "@startuml\nleft to right direction\n\nactor SalesTeam\nactor MarketingTeam\nactor CustomerSupport\n\nrectangle CRMSystem {\n    usecase \"Track Leads\" as UC1\n    usecase \"Manage Customer Accounts\" as UC2\n    usecase \"Analyze Sales Data\" as UC3\n    usecase \"Create Campaigns\" as UC4\n    usecase \"Track Customer Engagement\" as UC5\n    usecase \"Generate Reports\" as UC6\n    usecase \"Log Customer Inquiries\" as UC7\n    usecase \"Resolve Issues\" as UC8\n    usecase \"Provide Feedback\" as UC9\n}\n\nSalesTeam --> UC1\nSalesTeam --> UC2\nSalesTeam --> UC3\n\nMarketingTeam --> UC4\nMarketingTeam --> UC5\nMarketingTeam --> UC6\n\nCustomerSupport --> UC7\nCustomerSupport --> UC8\nCustomerSupport --> UC9\n@enduml"
    },
    {
        "input": "Design me a use case diagram based on the following user stories for a Content Management System (CMS):\n1. As a user, I want to create digital content, so that I can publish new material on the platform.\n2. As a user, I want to edit existing content, so that I can update or correct information.\n3. As a user, I want to collaborate with other users on content creation, so that we can work together on projects.\n4. As a user, I want to upload media files (e.g., images, videos), so that I can enhance my content with multimedia.\n5. As a user, I want to organize content into categories, so that it is easy to navigate and find.\n6. As a user, I want to schedule content publication, so that it goes live at a specific time.\n7. As an administrator, I want to approve content before publication, so that only appropriate material is published.\n8. As a user, I want version control for my content, so that I can track changes and revert to previous versions.\n9. As an administrator, I want to analyze content performance, so that I can understand user engagement.\n10. As an administrator, I want to manage user permissions, so that I can control access to various features.\n11. As an administrator, I want to monitor content performance, so that I can measure its impact.\n12. As an administrator, I want to ensure the security of the platform, so that the system is protected from unauthorized access.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Administrator\n\nrectangle ContentManagementSystem {\n    usecase \"Create Content\" as UC1\n    usecase \"Edit Content\" as UC2\n    usecase \"Collaborate on Content\" as UC3\n    usecase \"Upload Media Files\" as UC4\n    usecase \"Organize Content\" as UC5\n    usecase \"Schedule Publication\" as UC6\n    usecase \"Approve Content\" as UC7\n    usecase \"Version Control\" as UC8\n    usecase \"Analyze Content\" as UC9\n    usecase \"Manage Permissions\" as UC10\n    usecase \"Monitor Performance\" as UC11\n    usecase \"Ensure Security\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC8\n\nAdministrator --> UC7\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram based on the following user stories for a Learning Management System (LMS):\n1. As an instructor, I want to create courses, so that I can offer learning content to students.\n2. As an instructor, I want to upload learning materials, so that students can access the resources they need for the course.\n3. As an instructor, I want to assess student performance, so that I can evaluate their understanding of the course material.\n4. As a student, I want to enroll in courses, so that I can participate in classes.\n5. As a student, I want to access course content, so that I can study the material.\n6. As a student, I want to submit assignments, so that I can complete course requirements.\n7. As a student, I want to take quizzes, so that I can test my knowledge of the material.\n8. As a student, I want to participate in discussions, so that I can engage with my classmates and learn more.\n9. As an instructor, I want to grade assignments, so that I can give students feedback on their work.\n10. As an administrator, I want to manage user accounts, so that I can ensure that the system operates efficiently.\n11. As an administrator, I want to monitor course enrollment, so that I can track the popularity of courses.\n12. As an administrator, I want to generate reports on student progress, so that I can analyze learning outcomes.",
        "output": "@startuml\nleft to right direction\n\nactor Instructor\nactor Student\nactor Administrator\n\nrectangle LearningManagementSystem {\n    usecase \"Create Courses\" as UC1\n    usecase \"Upload Learning Materials\" as UC2\n    usecase \"Assess Student Performance\" as UC3\n    usecase \"Enroll in Courses\" as UC4\n    usecase \"Access Course Content\" as UC5\n    usecase \"Submit Assignments\" as UC6\n    usecase \"Take Quizzes\" as UC7\n    usecase \"Participate in Discussions\" as UC8\n    usecase \"Grade Assignments\" as UC9\n    usecase \"Manage User Accounts\" as UC10\n    usecase \"Monitor Course Enrollment\" as UC11\n    usecase \"Generate Reports\" as UC12\n}\n\nInstructor --> UC1\nInstructor --> UC2\nInstructor --> UC3\nInstructor --> UC9\n\nStudent --> UC4\nStudent --> UC5\nStudent --> UC6\nStudent --> UC7\nStudent --> UC8\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram based on the following user stories for a Bug Tracking System:\n1. As a developer, I want to log software bugs, so that they can be documented for future resolution.\n2. As a developer, I want to assign bugs to team members, so that the appropriate person can fix them.\n3. As a developer, I want to track the status of bug fixes, so that I can monitor the progress of their resolution.\n4. As a developer, I want to update the status of bugs, so that the team knows which bugs are fixed.\n5. As a developer, I want to prioritize bugs based on severity, so that critical bugs are addressed first.\n6. As a developer, I want to communicate with my team, so that we can collaborate on bug resolution.\n7. As a developer, I want to generate bug reports, so that I can track bug statistics over time.\n8. As a project manager, I want to monitor bug resolution timelines, so that I can ensure deadlines are met.\n9. As a project manager, I want to identify recurring bugs in the software, so that I can address root causes.\n10. As a project manager, I want to oversee the bug resolution process, so that I can ensure progress is being made.\n11. As a project manager, I want to allocate resources for fixing bugs, so that we can resolve them efficiently.\n12. As a project manager, I want to ensure that software quality standards are met, so that we deliver reliable software.",
        "output": "@startuml\nleft to right direction\n\nactor Developer\nactor ProjectManager\n\nrectangle BugTrackingSystem {\n    usecase \"Log Bugs\" as UC1\n    usecase \"Assign Bugs\" as UC2\n    usecase \"Track Bug Fixes\" as UC3\n    usecase \"Update Bug Status\" as UC4\n    usecase \"Prioritize Bugs\" as UC5\n    usecase \"Communicate with Team\" as UC6\n    usecase \"Generate Bug Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Recurring Bugs\" as UC9\n    usecase \"Oversee Bug Resolution\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Software Quality\" as UC12\n}\n\nDeveloper --> UC1\nDeveloper --> UC2\nDeveloper --> UC3\nDeveloper --> UC4\nDeveloper --> UC5\nDeveloper --> UC6\nDeveloper --> UC7\n\nProjectManager --> UC8\nProjectManager --> UC9\nProjectManager --> UC10\nProjectManager --> UC11\nProjectManager --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram based on the following user stories for a Customer Support System:\n1. As a customer support agent, I want to log customer inquiries, so that they are documented for resolution.\n2. As a customer support agent, I want to assign tickets to other support agents, so that customer issues can be handled by the appropriate team members.\n3. As a customer support agent, I want to track ticket resolutions, so that I can monitor progress on customer issues.\n4. As a customer support agent, I want to update the status of tickets, so that the system reflects the current state of each inquiry.\n5. As a customer support agent, I want to prioritize tickets based on urgency, so that critical issues are resolved first.\n6. As a customer support agent, I want to communicate with customers about issue resolutions, so that they are kept informed throughout the process.\n7. As a customer support agent, I want to generate support reports, so that I can track the types and number of inquiries and resolutions.\n8. As a manager, I want to monitor ticket resolution timelines, so that I can ensure issues are being resolved in a timely manner.\n9. As a manager, I want to identify recurring customer issues, so that we can address root causes and improve service.\n10. As a manager, I want to oversee the progress of ticket resolutions, so that I can ensure that agents are making progress.\n11. As a manager, I want to allocate resources for resolving customer issues, so that I can ensure appropriate staffing.\n12. As a manager, I want to ensure customer satisfaction standards are met, so that our support team delivers excellent service.",
        "output": "@startuml\nleft to right direction\n\nactor CustomerSupportAgent\nactor Manager\n\nrectangle CustomerSupportSystem {\n    usecase \"Log Customer Inquiries\" as UC1\n    usecase \"Assign Tickets\" as UC2\n    usecase \"Track Ticket Resolutions\" as UC3\n    usecase \"Update Ticket Status\" as UC4\n    usecase \"Prioritize Tickets\" as UC5\n    usecase \"Communicate with Customers\" as UC6\n    usecase \"Generate Support Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Recurring Issues\" as UC9\n    usecase \"Oversee Ticket Resolution\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Customer Satisfaction\" as UC12\n}\n\nCustomerSupportAgent --> UC1\nCustomerSupportAgent --> UC2\nCustomerSupportAgent --> UC3\nCustomerSupportAgent --> UC4\nCustomerSupportAgent --> UC5\nCustomerSupportAgent --> UC6\nCustomerSupportAgent --> UC7\n\nManager --> UC8\nManager --> UC9\nManager --> UC10\nManager --> UC11\nManager --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram based on the following user stories for a Help Desk System:\n1. As a user, I want to log help desk tickets, so that my technical issues are documented and addressed.\n2. As a support agent, I want to assign tickets to agents, so that each issue is assigned to the appropriate personnel.\n3. As a user and support agent, I want to track ticket resolutions, so that I can monitor the progress of resolving issues.\n4. As a support agent, I want to update ticket statuses, so that the system reflects the current state of each issue.\n5. As a support agent, I want to prioritize tickets based on urgency, so that critical issues are resolved first.\n6. As a support agent, I want to communicate with users regarding issue resolutions, so that users are kept informed.\n7. As a support agent, I want to generate help desk reports, so that I can track ticket statistics.\n8. As a manager, I want to monitor ticket resolution timelines, so that I can ensure issues are resolved on time.\n9. As a manager, I want to identify recurring technical issues, so that I can address common problems more effectively.\n10. As a manager, I want to oversee the progress of ticket resolutions, so that I can ensure support agents are making progress.\n11. As a manager, I want to allocate resources for resolving tickets, so that I can ensure that appropriate personnel are assigned.\n12. As a manager, I want to ensure that service level agreements (SLAs) are met, so that our team delivers the expected level of service.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor SupportAgent\nactor Manager\n\nrectangle HelpDeskSystem {\n    usecase \"Log Help Desk Tickets\" as UC1\n    usecase \"Assign Tickets\" as UC2\n    usecase \"Track Ticket Resolutions\" as UC3\n    usecase \"Update Ticket Status\" as UC4\n    usecase \"Prioritize Tickets\" as UC5\n    usecase \"Communicate with Users\" as UC6\n    usecase \"Generate Help Desk Reports\" as UC7\n    usecase \"Monitor Timelines\" as UC8\n    usecase \"Identify Recurring Issues\" as UC9\n    usecase \"Oversee Ticket Resolution\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Service Level Agreements\" as UC12\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\n\nSupportAgent --> UC3\nSupportAgent --> UC4\nSupportAgent --> UC5\nSupportAgent --> UC6\nSupportAgent --> UC7\n\nManager --> UC8\nManager --> UC9\nManager --> UC10\nManager --> UC11\nManager --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram based on the following user stories for a Library Management System:\n1. As a librarian, I want to catalog books, so that I can manage the collection of books in the library.\n2. As a librarian, I want to manage patron accounts, so that I can keep track of library members and their borrowing activities.\n3. As a librarian, I want to track book loans, so that I can monitor which books are borrowed and by whom.\n4. As a patron, I want to search for books in the library catalog, so that I can find the books I want to borrow.\n5. As a patron, I want to check out books from the library, so that I can borrow books for a certain period.\n6. As a patron, I want to renew book loans, so that I can extend the borrowing period for books I have checked out.\n7. As a librarian, I want to generate library reports, so that I can track book circulation and other statistics.\n8. As a librarian, I want to monitor book circulation, so that I can understand how frequently books are being borrowed.\n9. As a librarian, I want to identify overdue books, so that I can remind patrons to return them.\n10. As an administrator, I want to oversee library operations, so that I can ensure the library is running smoothly.\n11. As an administrator, I want to allocate resources for the library, so that the library has the necessary materials and staff.\n12. As an administrator, I want to enforce library policies, so that patrons and staff follow the rules and guidelines.",
        "output": "@startuml\nleft to right direction\n\nactor Librarian\nactor Patron\nactor Administrator\n\nrectangle LibraryManagementSystem {\n    usecase \"Catalog Books\" as UC1\n    usecase \"Manage Patron Accounts\" as UC2\n    usecase \"Track Book Loans\" as UC3\n    usecase \"Search for Books\" as UC4\n    usecase \"Check Out Books\" as UC5\n    usecase \"Renew Book Loans\" as UC6\n    usecase \"Generate Library Reports\" as UC7\n    usecase \"Monitor Book Circulation\" as UC8\n    usecase \"Identify Overdue Books\" as UC9\n    usecase \"Oversee Library Operations\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Enforce Library Policies\" as UC12\n}\n\nLibrarian --> UC1\nLibrarian --> UC2\nLibrarian --> UC3\nLibrarian --> UC7\nLibrarian --> UC8\nLibrarian --> UC9\n\nPatron --> UC4\nPatron --> UC5\nPatron --> UC6\n\nAdministrator --> UC10\nAdministrator --> UC11\nAdministrator --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram based on the following user stories for a Hotel Management System:\n1. As hotel staff, I want to create guest reservations, so that I can manage guest bookings efficiently.\n2. As hotel staff, I want to assign rooms to guests, so that I can ensure every guest has a designated room.\n3. As hotel staff, I want to track guest check-ins and check-outs, so that I can manage the guest stay process smoothly.\n4. As a guest, I want to book rooms, so that I can reserve accommodation at the hotel.\n5. As a guest, I want to request hotel services, so that I can enjoy services during my stay.\n6. As a guest, I want to provide feedback on my stay, so that I can share my experience with the hotel.\n7. As hotel staff, I want to generate hotel reports, so that I can track hotel operations and performance.\n8. As hotel staff, I want to monitor room availability, so that I can manage the availability of rooms for guests.\n9. As hotel staff, I want to identify guest preferences, so that I can offer personalized services to guests.\n10. As a manager, I want to oversee hotel operations, so that I can ensure smooth running of the hotel.\n11. As a manager, I want to allocate resources effectively, so that I can ensure the hotel is well-staffed and well-stocked.\n12. As a manager, I want to ensure guest satisfaction, so that I can provide excellent customer service to all guests.",
        "output": "@startuml\nleft to right direction\n\nactor HotelStaff\nactor Guest\nactor Manager\n\nrectangle HotelManagementSystem {\n    usecase \"Create Guest Reservations\" as UC1\n    usecase \"Assign Rooms\" as UC2\n    usecase \"Track Check-Ins and Check-Outs\" as UC3\n    usecase \"Book Rooms\" as UC4\n    usecase \"Request Services\" as UC5\n    usecase \"Provide Feedback\" as UC6\n    usecase \"Generate Hotel Reports\" as UC7\n    usecase \"Monitor Room Availability\" as UC8\n    usecase \"Identify Guest Preferences\" as UC9\n    usecase \"Oversee Hotel Operations\" as UC10\n    usecase \"Allocate Resources\" as UC11\n    usecase \"Ensure Guest Satisfaction\" as UC12\n}\n\nHotelStaff --> UC1\nHotelStaff --> UC2\nHotelStaff --> UC3\nHotelStaff --> UC7\nHotelStaff --> UC8\nHotelStaff --> UC9\n\nGuest --> UC4\nGuest --> UC5\nGuest --> UC6\n\nManager --> UC10\nManager --> UC11\nManager --> UC12\n@enduml"
    },
    {
        "input": "Design me a use case diagram based on the following user stories for a National Health ID System:\n1. As a patient, I want to create a unique Health ID, so that I can access my health records digitally.\n2. As a health data consent manager, I want to seek a patient’s consent for sharing health data, so that patient data is securely shared with authorized parties.\n3. As a patient, I want the system to maintain my health records digitally, so that I can access my medical history easily.\n4. As a health authority, I want to use health records for patient diagnosis, so that I can provide accurate treatments.\n5. As a health authority, I want to record medications and vaccinations for newborns and patients, so that I can ensure accurate medical records.",
        "output": "@startuml\nleft to right direction\n\nactor Patient\nactor HealthAuthority\nactor HealthDataConsentManager\n\nrectangle NationalHealthIDSystem {\n    usecase \"Create Health ID\" as UC1\n    usecase \"Seek Patient's Consent\" as UC2\n    usecase \"Maintain Health Records\" as UC3\n    usecase \"Use for Patient Diagnosis\" as UC4\n    usecase \"Record Medications\" as UC5\n}\n\nPatient --> UC1\nPatient --> UC3\n\nHealthDataConsentManager --> UC2\nHealthAuthority --> UC5\nHealthAuthority --> UC4\n@enduml"
    },
    {
        "input": "Design me a use case diagram based on the following user stories for a Device Donation System:\n1. As a donor, I want to enter the details of the device I am willing to donate, so that the system can process my donation.\n2. As a donor, I want to enter my address details, so that the pickup team can collect the device.\n3. As a donor, I want to be notified to wait for approval of the device, so that I can be informed of the next steps.\n4. As an admin, I want to verify the details of the donated device, so that I can ensure the device is in good condition.\n5. As an admin, I want to assign a pickup executive to collect the device, so that the donation can proceed smoothly.\n6. As a volunteer, I want to join the team to help with device pickups, so that I can assist in the donation process.",
        "output": "@startuml\nleft to right direction\n\nactor Donor\nactor Admin\nactor Volunteer\n\nrectangle DeviceDonationSystem {\n    usecase \"Enter Device Details\" as UC1\n    usecase \"Enter Address Details\" as UC2\n    usecase \"Wait for Approval\" as UC3\n    usecase \"Verify Device Details\" as UC4\n    usecase \"Assign Pickup Executive\" as UC5\n    usecase \"Join a Team\" as UC6\n}\n\nDonor --> UC1\nDonor --> UC2\nDonor --> UC3\n\nAdmin --> UC4\nAdmin --> UC5\n\nVolunteer --> UC6\n@enduml"
    },
    {
        "input": "Design me a use case diagram based on the following user stories for a MentorMe Android App:\n1. As a mentor, I want to create a profile, so that mentees can find and connect with me.\n2. As a mentee, I want to search for mentors based on expertise, so that I can find the right mentor.\n3. As a mentor, I want to receive mentorship requests, so that I can accept or decline them.\n4. As a mentor, I want to schedule mentorship sessions, so that I can plan my availability.\n5. As a mentee, I want to book mentorship sessions, so that I can learn from my mentor.\n6. As a mentor, I want to provide feedback to mentees, so that they can improve their skills.\n7. As a mentee, I want to rate and review mentors, so that other mentees can benefit from their experiences.\n8. As an admin, I want to manage user profiles, so that the platform operates smoothly.",
        "output": "@startuml\nleft to right direction\n\nactor Mentor\nactor Mentee\nactor Admin\n\nrectangle MentorMeAndroidApp {\n    usecase \"Create Profile\" as UC1\n    usecase \"Search for Mentors\" as UC2\n    usecase \"Receive Mentorship Requests\" as UC3\n    usecase \"Schedule Mentorship Sessions\" as UC4\n    usecase \"Book Mentorship Sessions\" as UC5\n    usecase \"Provide Feedback\" as UC6\n    usecase \"Rate and Review Mentors\" as UC7\n    usecase \"Manage User Profiles\" as UC8\n}\n\nMentor --> UC1\nMentee --> UC2\nMentor --> UC3\nMentor --> UC4\nMentee --> UC5\nMentor --> UC6\nMentee --> UC7\nAdmin --> UC8\n@enduml"
    },
    {
        "input": "Design me a use case diagram based on the following user stories for a Task Management System:\n1. As a user, I want to create tasks, so that I can organize my work.\n2. As a user, I want to assign tasks to team members, so that we can collaborate on projects.\n3. As a user, I want to set deadlines for tasks, so that I can prioritize my work.\n4. As a user, I want to track task progress, so that I can monitor project status.\n5. As a user, I want to receive notifications for task updates, so that I can stay informed.\n6. As a user, I want to categorize tasks into different projects, so that I can manage multiple projects efficiently.\n7. As a user, I want to mark tasks as completed, so that I can track my accomplishments.\n8. As an admin, I want to manage user permissions, so that I can control access to features and data.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Admin\n\nrectangle TaskManagementSystem {\n    usecase \"Create Tasks\" as UC1\n    usecase \"Assign Tasks\" as UC2\n    usecase \"Set Deadlines\" as UC3\n    usecase \"Track Progress\" as UC4\n    usecase \"Receive Notifications\" as UC5\n    usecase \"Categorize Tasks\" as UC6\n    usecase \"Mark Tasks as Completed\" as UC7\n    usecase \"Manage User Permissions\" as UC8\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nUser --> UC5\nUser --> UC6\nUser --> UC7\nAdmin --> UC8\n@enduml"
    },
    {
        "input":"Give me a use case diagram for Github Copilot - AI powered code completion tool. User Stories: \n\n1. As a developer, I want to use Copilot to generate code snippets, so that I can speed up my coding process.\n2. As a developer, I want to provide feedback on Copilot suggestions, so that the tool can improve over time.\n3. As a developer, I want to customize Copilot settings, so that I can tailor the tool to my coding preferences.\n4. As a developer, I want to explore Copilot's capabilities, so that I can discover new coding techniques.\n5. As a developer, I want to integrate Copilot with my IDE, so that I can seamlessly use the tool in my workflow.",
        "output":"@startuml\nleft to right direction\n\nactor Developer\n\nrectangle GithubCopilot {\n    usecase \"Generate Code Snippets\" as UC1\n    usecase \"Provide Feedback\" as UC2\n    usecase \"Customize Settings\" as UC3\n    usecase \"Explore Capabilities\" as UC4\n    usecase \"Integrate with IDE\" as UC5\n}\n\nDeveloper --> UC1\nDeveloper --> UC2\nDeveloper --> UC3\nDeveloper --> UC4\nDeveloper --> UC5\n@enduml"
    },
    {
        "input":"Design a use case diagram for a 'Smart Home Automation System' based on the following user stories:\n\n1. As a homeowner, I want to control lighting in my home, so that I can adjust brightness and ambiance.\n2. As a homeowner, I want to set temperature settings for heating and cooling, so that I can maintain a comfortable environment.\n3. As a homeowner, I want to schedule appliance usage, so that I can save energy and reduce costs.\n4. As a homeowner, I want to monitor security cameras and alarms, so that I can ensure the safety of my home.\n5. As a homeowner, I want to receive notifications for unusual activities, so that I can respond to potential threats.\n6. As a homeowner, I want to integrate voice commands for controlling devices, so that I can operate the system hands-free.\n7. As a homeowner, I want to track energy consumption, so that I can optimize usage and reduce waste.\n8. As a homeowner, I want to automate routines for daily tasks, so that I can streamline household management.",
        "output":"@startuml\nleft to right direction\n\nactor Homeowner\n\nrectangle SmartHomeAutomationSystem {\n    usecase \"Control Lighting\" as UC1\n    usecase \"Set Temperature Settings\" as UC2\n    usecase \"Schedule Appliance Usage\" as UC3\n    usecase \"Monitor Security\" as UC4\n    usecase \"Receive Notifications\" as UC5\n    usecase \"Integrate Voice Commands\" as UC6\n    usecase \"Track Energy Consumption\" as UC7\n    usecase \"Automate Routines\" as UC8\n}\n\nHomeowner --> UC1\nHomeowner --> UC2\nHomeowner --> UC3\nHomeowner --> UC4\nHomeowner --> UC5\nHomeowner --> UC6\nHomeowner --> UC7\nHomeowner --> UC8\n@enduml"
    },
    {
        "input":"Design a use case diagram for a 'Smart Parking System' based on the following user stories:\n\n1. As a driver, I want to find available parking spaces, so that I can park my vehicle.\n2. As a driver, I want to reserve parking spots in advance, so that I can secure a space.\n3. As a driver, I want to receive notifications for parking availability, so that I can plan my parking.\n4. As a parking attendant, I want to monitor parking occupancy, so that I can manage traffic flow.\n5. As a parking attendant, I want to track parking payments, so that I can ensure compliance with parking fees.\n6. As a parking manager, I want to analyze parking data, so that I can optimize parking operations.\n7. As a parking manager, I want to generate parking reports, so that I can track performance and revenue.",
        "output":"@startuml\nleft to right direction\n\nactor Driver\nactor ParkingAttendant\nactor ParkingManager\n\nrectangle SmartParkingSystem {\n    usecase \"Find Parking Spaces\" as UC1\n    usecase \"Reserve Parking Spots\" as UC2\n    usecase \"Receive Notifications\" as UC3\n    usecase \"Monitor Parking Occupancy\" as UC4\n    usecase \"Track Parking Payments\" as UC5\n    usecase \"Analyze Parking Data\" as UC6\n    usecase \"Generate Parking Reports\" as UC7\n}\n\nDriver --> UC1\nDriver --> UC2\nDriver --> UC3\nParkingAttendant --> UC4\nParkingAttendant --> UC5\nParkingManager --> UC6\nParkingManager --> UC7\n@enduml"
    },
    {
        "input":"Design a use case diagram for a 'Smart Health Monitoring System' based on the following user stories:\n\n1. As a patient, I want to track my health vitals, so that I can monitor my well-being.\n2. As a patient, I want to set health goals, so that I can improve my fitness and health.\n3. As a patient, I want to receive alerts for abnormal health readings, so that I can seek medical attention.\n4. As a healthcare provider, I want to access patient health data, so that I can provide personalized care.\n5. As a healthcare provider, I want to analyze patient health trends, so that I can identify health risks and patterns.\n6. As a healthcare provider, I want to generate health reports, so that I can track patient progress and outcomes.",
        "output":"@startuml\nleft to right direction\n\nactor Patient\nactor HealthcareProvider\n\nrectangle SmartHealthMonitoringSystem {\n    usecase \"Track Health Vitals\" as UC1\n    usecase \"Set Health Goals\" as UC2\n    usecase \"Receive Alerts\" as UC3\n    usecase \"Access Patient Data\" as UC4\n    usecase \"Analyze Health Trends\" as UC5\n    usecase \"Generate Health Reports\" as UC6\n}\n\nPatient --> UC1\nPatient --> UC2\nPatient --> UC3\nHealthcareProvider --> UC4\nHealthcareProvider --> UC5\nHealthcareProvider --> UC6\n@enduml"
    },
    {
        "input":"Design a use case diagram for a 'Garbage Management System' based on the following user stories:\n\n1. As a resident, I want to dispose of garbage, so that I can maintain cleanliness in my area.\n2. As a resident, I want to segregate waste into recyclable and non-recyclable categories, so that I can promote recycling.\n3. As a garbage collector, I want to collect garbage from designated areas, so that I can keep the environment clean.\n4. As a garbage collector, I want to dispose of waste in appropriate facilities, so that I can ensure proper waste management.\n5. As a waste management supervisor, I want to track garbage collection routes, so that I can optimize collection efficiency.\n6. As a waste management supervisor, I want to generate waste management reports, so that I can monitor waste disposal activities.",
        "output":"@startuml\nleft to right direction\n\nactor Resident\nactor GarbageCollector\nactor WasteManagementSupervisor\n\nrectangle GarbageManagementSystem {\n    usecase \"Dispose of Garbage\" as UC1\n    usecase \"Segregate Waste\" as UC2\n    usecase \"Collect Garbage\" as UC3\n    usecase \"Dispose of Waste\" as UC4\n    usecase \"Track Collection Routes\" as UC5\n    usecase \"Generate Reports\" as UC6\n}\n\nResident --> UC1\nResident --> UC2\nGarbageCollector --> UC3\nGarbageCollector --> UC4\nWasteManagementSupervisor --> UC5\nWasteManagementSupervisor --> UC6\n@enduml"
    },
    {
        "input":"Design a use case diagram for a 'Smart Classroom System' based on the following user stories:\n\n1. As a teacher, I want to share educational materials with students, so that they can access learning resources.\n2. As a teacher, I want to conduct online quizzes and tests, so that I can assess student understanding.\n3. As a student, I want to participate in virtual classroom discussions, so that I can engage with the class.\n4. As a student, I want to submit assignments online, so that I can complete course requirements.\n5. As an administrator, I want to manage user accounts, so that I can ensure smooth operation of the system.\n6. As an administrator, I want to monitor classroom activities, so that I can track student progress and participation.",
        "output":"@startuml\nleft to right direction\n\nactor Teacher\nactor Student\nactor Administrator\n\nrectangle SmartClassroomSystem {\n    usecase \"Share Educational Materials\" as UC1\n    usecase \"Conduct Quizzes and Tests\" as UC2\n    usecase \"Participate in Discussions\" as UC3\n    usecase \"Submit Assignments\" as UC4\n    usecase \"Manage User Accounts\" as UC5\n    usecase \"Monitor Classroom Activities\" as UC6\n}\n\nTeacher --> UC1\nTeacher --> UC2\nStudent --> UC3\nStudent --> UC4\nAdministrator --> UC5\nAdministrator --> UC6\n@enduml"
    },
    {
        "input":"Design a use case diagram for a 'Sprint Planner System' based on the following user stories:\n\n1. As a project manager, I want to create sprints, so that I can plan project timelines.\n2. As a project manager, I want to assign tasks to team members, so that I can distribute work efficiently.\n3. As a team member, I want to view assigned tasks, so that I can track my responsibilities.\n4. As a team member, I want to update task status, so that I can communicate progress.\n5. As a team member, I want to collaborate with team members, so that we can work together on tasks.\n6. As a project manager, I want to monitor sprint progress, so that I can ensure project milestones are met.",
        "output":"@startuml\nleft to right direction\n\nactor ProjectManager\nactor TeamMember\n\nrectangle SprintPlannerSystem {\n    usecase \"Create Sprints\" as UC1\n    usecase \"Assign Tasks\" as UC2\n    usecase \"View Assigned Tasks\" as UC3\n    usecase \"Update Task Status\" as UC4\n    usecase \"Collaborate with Team\" as UC5\n    usecase \"Monitor Sprint Progress\" as UC6\n}\n\nProjectManager --> UC1\nProjectManager --> UC2\nTeamMember --> UC3\nTeamMember --> UC4\nTeamMember --> UC5\nProjectManager --> UC6\n@enduml"
    },
    {
        "input":"Design a use case diagram for a 'School Transport Management System' based on the following user stories:\n\n1. As a parent, I want to track the school bus location, so that I can ensure my child's safety.\n2. As a parent, I want to receive notifications for bus arrival and departure, so that I can plan my child's schedule.\n3. As a driver, I want to view the bus route, so that I can navigate the route efficiently.\n4. As a driver, I want to mark student attendance, so that I can ensure all students are accounted for.\n5. As a school administrator, I want to manage bus schedules, so that I can optimize transport operations.\n6. As a school administrator, I want to generate transport reports, so that I can track bus performance and efficiency.",
        "output":"@startuml\nleft to right direction\n\nactor Parent\nactor Driver\nactor SchoolAdministrator\n\nrectangle SchoolTransportManagementSystem {\n    usecase \"Track Bus Location\" as UC1\n    usecase \"Receive Notifications\" as UC2\n    usecase \"View Bus Route\" as UC3\n    usecase \"Mark Student Attendance\" as UC4\n    usecase \"Manage Bus Schedules\" as UC5\n    usecase \"Generate Transport Reports\" as UC6\n}\n\nParent --> UC1\nParent --> UC2\nDriver --> UC3\nDriver --> UC4\nSchoolAdministrator --> UC5\nSchoolAdministrator --> UC6\n@enduml"
    },
    {
        "input":"Design a use case diagram for a 'Portfolio Website' based on the following user stories:\n\n1. As a visitor, I want to view the portfolio projects, so that I can see the work of the creator.\n2. As a visitor, I want to read the creator's bio, so that I can learn more about their background.\n3. As a visitor, I want to contact the creator, so that I can inquire about their services.\n4. As a creator, I want to update the portfolio projects, so that I can showcase my latest work.\n5. As a creator, I want to edit my bio, so that I can keep it up to date.\n6. As a creator, I want to receive messages from visitors, so that I can respond to inquiries.",
        "output":"@startuml\nleft to right direction\n\nactor Visitor\nactor Creator\n\nrectangle PortfolioWebsite {\n    usecase \"View Portfolio Projects\" as UC1\n    usecase \"Read Creator's Bio\" as UC2\n    usecase \"Contact Creator\" as UC3\n    usecase \"Update Portfolio Projects\" as UC4\n    usecase \"Edit Bio\" as UC5\n    usecase \"Receive Messages\" as UC6\n}\n\nVisitor --> UC1\nVisitor --> UC2\nVisitor --> UC3\nCreator --> UC4\nCreator --> UC5\nCreator --> UC6\n@enduml"
    },
    {
        "input":"Design a use case diagram for a 'Feedback Management System' based on the following user stories:\n\n1. As a customer, I want to submit feedback, so that I can share my experience with the company.\n2. As a customer service agent, I want to view customer feedback, so that I can address customer concerns.\n3. As a customer service agent, I want to categorize feedback into positive and negative, so that I can prioritize responses.\n4. As a customer service manager, I want to analyze feedback trends, so that I can identify areas for improvement.\n5. As a customer service manager, I want to generate feedback reports, so that I can track customer satisfaction levels.",
        "output":"@startuml\nleft to right direction\n\nactor Customer\nactor CustomerServiceAgent\nactor CustomerServiceManager\n\nrectangle FeedbackManagementSystem {\n    usecase \"Submit Feedback\" as UC1\n    usecase \"View Customer Feedback\" as UC2\n    usecase \"Categorize Feedback\" as UC3\n    usecase \"Analyze Feedback Trends\" as UC4\n    usecase \"Generate Feedback Reports\" as UC5\n}\n\nCustomer --> UC1\nCustomerServiceAgent --> UC2\nCustomerServiceAgent --> UC3\nCustomerServiceManager --> UC4\nCustomerServiceManager --> UC5\n@enduml"
    },
    {
        "input":"Design a use case diagram for a 'Bayanaat Streaming App' based on the following user stories:\n\n1. As a user, I want to browse and search for bayanaat, so that I can find content of interest.\n2. As a user, I want to play bayanaat videos, so that I can listen to the content.\n3. As a user, I want to create playlists of bayanaat, so that I can organize my favorite content.\n4. As a user, I want to like and share bayanaat, so that I can engage with the community.\n5. As an admin, I want to upload and manage bayanaat, so that I can provide new content to users.\n6. As an admin, I want to track user engagement with bayanaat, so that I can analyze content performance.",
        "output":"@startuml\nleft to right direction\n\nactor User\nactor Admin\n\nrectangle BayanaatStreamingApp {\n    usecase \"Search Bayanaat\" as UC1\n    usecase \"Play Bayanaat Videos\" as UC2\n    usecase \"Create Playlists\" as UC3\n    usecase \"Like and Share Bayanaat\" as UC4\n    usecase \"Manage Bayanaat\" as UC5\n    usecase \"Track User Engagement\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nAdmin --> UC5\nAdmin --> UC6\n@enduml"
    },
    {
        "input":"Design a use case diagram for a 'Recipe Sharing App' based on the following user stories:\n\n1. As a user, I want to browse and search for recipes, so that I can find new dishes to try.\n2. As a user, I want to view recipe details, so that I can see ingredients and instructions.\n3. As a user, I want to save recipes to my favorites, so that I can access them later.\n4. As a user, I want to rate and review recipes, so that I can share my feedback.\n5. As a recipe creator, I want to upload and share recipes, so that I can showcase my creations.\n6. As a recipe creator, I want to track recipe views and likes, so that I can see the popularity of my recipes.",
        "output":"@startuml\nleft to right direction\n\nactor User\nactor RecipeCreator\n\nrectangle RecipeSharingApp {\n    usecase \"Browse Recipes\" as UC1\n    usecase \"View Recipe Details\" as UC2\n    usecase \"Save to Favorites\" as UC3\n    usecase \"Give Recipe Feedback\" as UC4\n    usecase \"Manage Recipes\" as UC5\n    usecase \"Track Recipe Views and Likes\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nRecipeCreator --> UC5\nRecipeCreator --> UC6\n@enduml"
    },
    {
        "input":"Design a use case diagram for a 'Virtual Try-On Closet' based on the following user stories:\n\n1. As a user, I want to browse and select clothing items, so that I can try them on virtually.\n2. As a user, I want to view myself wearing the selected items, so that I can see how they look.\n3. As a user, I want to save outfit combinations, so that I can plan my wardrobe.\n4. As a user, I want to share virtual try-on images, so that I can get feedback from friends.\n5. As a retailer, I want to upload and manage clothing items, so that users can try them on virtually.\n6. As a retailer, I want to track user engagement with the virtual try-on feature, so that I can analyze its effectiveness.",
        "output":"@startuml\nleft to right direction\n\nactor User\nactor Retailer\n\nrectangle VirtualTryOnCloset {\n    usecase \"Browse Clothing\" as UC1\n    usecase \"View Virtual Try-On\" as UC2\n    usecase \"Save Outfit Combinations\" as UC3\n    usecase \"Share Virtual Try-On Images\" as UC4\n    usecase \"Manage Clothing Items\" as UC5\n    usecase \"Track User Engagement\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\nRetailer --> UC5\nRetailer --> UC6\n@enduml"
    },
    {
        "input": "Design me a use case diagram for this system. As a student, faculty, or contributor, I want to manage articles by writing, editing, and publishing them, so I can contribute to the college magazine. As a user, I want to rate published articles, so I can provide feedback on the content I read. As a user, I want to comment on published articles, so I can share my thoughts and opinions with others. As a user, I want to organize articles into appropriate categories, so I can easily navigate and find content based on topics of interest. As a guest, I want to read, rate, and comment on articles, so I can engage with the magazine's content without being a registered user. As a guest, I want to contribute content for the magazine if interested, so I can participate in the magazine without being a full member. As a moderator, I want to review articles before they are published, so I can ensure content quality and appropriateness.",
        "output": "@startuml\nleft to right direction\n\nactor User\nactor Guest\nactor Moderator\n\nUser <|-- Student\nUser <|-- Faculty\nUser <|-- Contributor\n\nrectangle Online_College_Magazine_System {\n    usecase \"Manage Articles\" as UC1\n    usecase \"Rate Articles\" as UC2\n    usecase \"Comment on Articles\" as UC3\n    usecase \"Organize Articles\" as UC4\n    usecase \"Generate Content\" as UC5\n    usecase \"Review Articles\" as UC6\n}\n\nUser --> UC1\nUser --> UC2\nUser --> UC3\nUser --> UC4\n\nGuest --> UC2\nGuest --> UC3\nGuest --> UC5\n\nModerator --> UC6\n@enduml"
    }     
]

